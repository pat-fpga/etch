
Etch_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001074c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000880  00802000  0001074c  000107e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000972  00802880  00802880  00011060  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000110bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e30  00000000  00000000  00011100  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002e6c5  00000000  00000000  00011f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007dde  00000000  00000000  000405f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001d4c0  00000000  00000000  000483d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004404  00000000  00000000  00065894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00040c58  00000000  00000000  00069c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002b3aa  00000000  00000000  000aa8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002fd8  00000000  00000000  000d5ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007cf7  00000000  00000000  000d8c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c2       	rjmp	.+1422   	; 0x590 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c2       	rjmp	.+1484   	; 0x5d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c2       	rjmp	.+1480   	; 0x5d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c2       	rjmp	.+1476   	; 0x5d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c2       	rjmp	.+1472   	; 0x5d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c2       	rjmp	.+1468   	; 0x5d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c2       	rjmp	.+1464   	; 0x5d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c2       	rjmp	.+1460   	; 0x5d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c2       	rjmp	.+1456   	; 0x5d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c2       	rjmp	.+1452   	; 0x5d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 41 4f 	jmp	0x9e82	; 0x9e82 <__vector_10>
      2c:	0c 94 5e 4f 	jmp	0x9ebc	; 0x9ebc <__vector_11>
      30:	d0 c2       	rjmp	.+1440   	; 0x5d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c2       	rjmp	.+1436   	; 0x5d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 05 76 	jmp	0xec0a	; 0xec0a <__vector_14>
      3c:	0c 94 32 76 	jmp	0xec64	; 0xec64 <__vector_15>
      40:	0c 94 5f 76 	jmp	0xecbe	; 0xecbe <__vector_16>
      44:	0c 94 8c 76 	jmp	0xed18	; 0xed18 <__vector_17>
      48:	0c 94 b9 76 	jmp	0xed72	; 0xed72 <__vector_18>
      4c:	0c 94 e6 76 	jmp	0xedcc	; 0xedcc <__vector_19>
      50:	0c 94 13 77 	jmp	0xee26	; 0xee26 <__vector_20>
      54:	0c 94 40 77 	jmp	0xee80	; 0xee80 <__vector_21>
      58:	0c 94 6d 77 	jmp	0xeeda	; 0xeeda <__vector_22>
      5c:	0c 94 9a 77 	jmp	0xef34	; 0xef34 <__vector_23>
      60:	b8 c2       	rjmp	.+1392   	; 0x5d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c2       	rjmp	.+1388   	; 0x5d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c2       	rjmp	.+1384   	; 0x5d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c2       	rjmp	.+1380   	; 0x5d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c2       	rjmp	.+1376   	; 0x5d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c2       	rjmp	.+1372   	; 0x5d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c2       	rjmp	.+1368   	; 0x5d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c2       	rjmp	.+1364   	; 0x5d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c2       	rjmp	.+1360   	; 0x5d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c2       	rjmp	.+1356   	; 0x5d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 b7 5a 	jmp	0xb56e	; 0xb56e <__vector_34>
      8c:	a2 c2       	rjmp	.+1348   	; 0x5d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a0 c2       	rjmp	.+1344   	; 0x5d2 <__bad_interrupt>
      92:	00 00       	nop
      94:	9e c2       	rjmp	.+1340   	; 0x5d2 <__bad_interrupt>
      96:	00 00       	nop
      98:	9c c2       	rjmp	.+1336   	; 0x5d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9a c2       	rjmp	.+1332   	; 0x5d2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	98 c2       	rjmp	.+1328   	; 0x5d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	96 c2       	rjmp	.+1324   	; 0x5d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	94 c2       	rjmp	.+1320   	; 0x5d2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	92 c2       	rjmp	.+1316   	; 0x5d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	90 c2       	rjmp	.+1312   	; 0x5d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8e c2       	rjmp	.+1308   	; 0x5d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8c c2       	rjmp	.+1304   	; 0x5d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 d5 78 	jmp	0xf1aa	; 0xf1aa <__vector_47>
      c0:	0c 94 02 79 	jmp	0xf204	; 0xf204 <__vector_48>
      c4:	0c 94 2f 79 	jmp	0xf25e	; 0xf25e <__vector_49>
      c8:	0c 94 5c 79 	jmp	0xf2b8	; 0xf2b8 <__vector_50>
      cc:	0c 94 89 79 	jmp	0xf312	; 0xf312 <__vector_51>
      d0:	0c 94 b6 79 	jmp	0xf36c	; 0xf36c <__vector_52>
      d4:	7e c2       	rjmp	.+1276   	; 0x5d2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	7c c2       	rjmp	.+1272   	; 0x5d2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	7a c2       	rjmp	.+1268   	; 0x5d2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	78 c2       	rjmp	.+1264   	; 0x5d2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	76 c2       	rjmp	.+1260   	; 0x5d2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	74 c2       	rjmp	.+1256   	; 0x5d2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	72 c2       	rjmp	.+1252   	; 0x5d2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	70 c2       	rjmp	.+1248   	; 0x5d2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	6e c2       	rjmp	.+1244   	; 0x5d2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	6c c2       	rjmp	.+1240   	; 0x5d2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	6a c2       	rjmp	.+1236   	; 0x5d2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	68 c2       	rjmp	.+1232   	; 0x5d2 <__bad_interrupt>
     102:	00 00       	nop
     104:	66 c2       	rjmp	.+1228   	; 0x5d2 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 0a 5a 	jmp	0xb414	; 0xb414 <__vector_66>
     10c:	62 c2       	rjmp	.+1220   	; 0x5d2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	0c 94 5c 75 	jmp	0xeab8	; 0xeab8 <__vector_68>
     114:	0c 94 97 75 	jmp	0xeb2e	; 0xeb2e <__vector_69>
     118:	0c 94 d2 75 	jmp	0xeba4	; 0xeba4 <__vector_70>
     11c:	5a c2       	rjmp	.+1204   	; 0x5d2 <__bad_interrupt>
     11e:	00 00       	nop
     120:	58 c2       	rjmp	.+1200   	; 0x5d2 <__bad_interrupt>
     122:	00 00       	nop
     124:	56 c2       	rjmp	.+1196   	; 0x5d2 <__bad_interrupt>
     126:	00 00       	nop
     128:	54 c2       	rjmp	.+1192   	; 0x5d2 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	52 c2       	rjmp	.+1188   	; 0x5d2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	50 c2       	rjmp	.+1184   	; 0x5d2 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 c7 77 	jmp	0xef8e	; 0xef8e <__vector_77>
     138:	0c 94 f4 77 	jmp	0xefe8	; 0xefe8 <__vector_78>
     13c:	0c 94 21 78 	jmp	0xf042	; 0xf042 <__vector_79>
     140:	0c 94 4e 78 	jmp	0xf09c	; 0xf09c <__vector_80>
     144:	0c 94 7b 78 	jmp	0xf0f6	; 0xf0f6 <__vector_81>
     148:	0c 94 a8 78 	jmp	0xf150	; 0xf150 <__vector_82>
     14c:	42 c2       	rjmp	.+1156   	; 0x5d2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	40 c2       	rjmp	.+1152   	; 0x5d2 <__bad_interrupt>
     152:	00 00       	nop
     154:	3e c2       	rjmp	.+1148   	; 0x5d2 <__bad_interrupt>
     156:	00 00       	nop
     158:	3c c2       	rjmp	.+1144   	; 0x5d2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	3a c2       	rjmp	.+1140   	; 0x5d2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	38 c2       	rjmp	.+1136   	; 0x5d2 <__bad_interrupt>
     162:	00 00       	nop
     164:	36 c2       	rjmp	.+1132   	; 0x5d2 <__bad_interrupt>
     166:	00 00       	nop
     168:	34 c2       	rjmp	.+1128   	; 0x5d2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	32 c2       	rjmp	.+1124   	; 0x5d2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	30 c2       	rjmp	.+1120   	; 0x5d2 <__bad_interrupt>
     172:	00 00       	nop
     174:	2e c2       	rjmp	.+1116   	; 0x5d2 <__bad_interrupt>
     176:	00 00       	nop
     178:	2c c2       	rjmp	.+1112   	; 0x5d2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	2a c2       	rjmp	.+1108   	; 0x5d2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	28 c2       	rjmp	.+1104   	; 0x5d2 <__bad_interrupt>
     182:	00 00       	nop
     184:	26 c2       	rjmp	.+1100   	; 0x5d2 <__bad_interrupt>
     186:	00 00       	nop
     188:	24 c2       	rjmp	.+1096   	; 0x5d2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	22 c2       	rjmp	.+1092   	; 0x5d2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	20 c2       	rjmp	.+1088   	; 0x5d2 <__bad_interrupt>
     192:	00 00       	nop
     194:	1e c2       	rjmp	.+1084   	; 0x5d2 <__bad_interrupt>
     196:	00 00       	nop
     198:	1c c2       	rjmp	.+1080   	; 0x5d2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	1a c2       	rjmp	.+1076   	; 0x5d2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	18 c2       	rjmp	.+1072   	; 0x5d2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	16 c2       	rjmp	.+1068   	; 0x5d2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	14 c2       	rjmp	.+1064   	; 0x5d2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	12 c2       	rjmp	.+1060   	; 0x5d2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 e3 79 	jmp	0xf3c6	; 0xf3c6 <__vector_108>
     1b4:	0c 94 10 7a 	jmp	0xf420	; 0xf420 <__vector_109>
     1b8:	0c 94 3d 7a 	jmp	0xf47a	; 0xf47a <__vector_110>
     1bc:	0c 94 6a 7a 	jmp	0xf4d4	; 0xf4d4 <__vector_111>
     1c0:	0c 94 97 7a 	jmp	0xf52e	; 0xf52e <__vector_112>
     1c4:	0c 94 c4 7a 	jmp	0xf588	; 0xf588 <__vector_113>
     1c8:	04 c2       	rjmp	.+1032   	; 0x5d2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	02 c2       	rjmp	.+1028   	; 0x5d2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	00 c2       	rjmp	.+1024   	; 0x5d2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	fe c1       	rjmp	.+1020   	; 0x5d2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	fc c1       	rjmp	.+1016   	; 0x5d2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	fa c1       	rjmp	.+1012   	; 0x5d2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	f8 c1       	rjmp	.+1008   	; 0x5d2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	f6 c1       	rjmp	.+1004   	; 0x5d2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	f4 c1       	rjmp	.+1000   	; 0x5d2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	f2 c1       	rjmp	.+996    	; 0x5d2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	f0 c1       	rjmp	.+992    	; 0x5d2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 0f 56 	jmp	0xac1e	; 0xac1e <__vector_125>
     1f8:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__vector_126>

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <sysfont_glyphs>:
     2fe:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     30e:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     31e:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     32e:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     33e:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     34e:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     35e:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     36e:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     37e:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     38e:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     39e:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3ae:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3be:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     3ce:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     3de:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     3ee:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     3fe:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     40e:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     41e:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     42e:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     43e:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     44e:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     45e:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     46e:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     47e:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     48e:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     49e:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4ae:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4be:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     4ce:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     4de:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     4ee:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     4fe:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     50e:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     51e:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     52e:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     53e:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     54e:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     55e:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     56e:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     57e:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     58e:	20 40                                                @

00000590 <__ctors_end>:
     590:	11 24       	eor	r1, r1
     592:	1f be       	out	0x3f, r1	; 63
     594:	cf ef       	ldi	r28, 0xFF	; 255
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df e9       	ldi	r29, 0x9F	; 159
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	0c bf       	out	0x3c, r16	; 60

000005a0 <__do_copy_data>:
     5a0:	18 e2       	ldi	r17, 0x28	; 40
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b0 e2       	ldi	r27, 0x20	; 32
     5a6:	ec e4       	ldi	r30, 0x4C	; 76
     5a8:	f7 e0       	ldi	r31, 0x07	; 7
     5aa:	01 e0       	ldi	r16, 0x01	; 1
     5ac:	0b bf       	out	0x3b, r16	; 59
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__do_copy_data+0x14>
     5b0:	07 90       	elpm	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	a0 38       	cpi	r26, 0x80	; 128
     5b6:	b1 07       	cpc	r27, r17
     5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__do_copy_data+0x10>

000005ba <__do_clear_bss>:
     5ba:	21 e3       	ldi	r18, 0x31	; 49
     5bc:	a0 e8       	ldi	r26, 0x80	; 128
     5be:	b8 e2       	ldi	r27, 0x28	; 40
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <.do_clear_bss_start>

000005c2 <.do_clear_bss_loop>:
     5c2:	1d 92       	st	X+, r1

000005c4 <.do_clear_bss_start>:
     5c4:	a2 3f       	cpi	r26, 0xF2	; 242
     5c6:	b2 07       	cpc	r27, r18
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <.do_clear_bss_loop>
     5ca:	0e 94 88 7b 	call	0xf710	; 0xf710 <main>
     5ce:	0c 94 a4 83 	jmp	0x10748	; 0x10748 <_exit>

000005d2 <__bad_interrupt>:
     5d2:	16 cd       	rjmp	.-1492   	; 0x0 <__vectors>

000005d4 <sd_mmc_init>:
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <sd_mmc_slot_sel>
     5e0:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <sd_mmc_spi_init>

000005e4 <sd_mmc_check>:
     5e4:	2f 92       	push	r2
     5e6:	3f 92       	push	r3
     5e8:	4f 92       	push	r4
     5ea:	5f 92       	push	r5
     5ec:	6f 92       	push	r6
     5ee:	7f 92       	push	r7
     5f0:	8f 92       	push	r8
     5f2:	9f 92       	push	r9
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	60 97       	sbiw	r28, 0x10	; 16
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	de bf       	out	0x3e, r29	; 62
     612:	88 23       	and	r24, r24
     614:	e9 f0       	breq	.+58     	; 0x650 <sd_mmc_check+0x6c>
     616:	14 e0       	ldi	r17, 0x04	; 4
     618:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <sd_mmc_check+0x3e>
     620:	41 c0       	rjmp	.+130    	; 0x6a4 <sd_mmc_check+0xc0>
     622:	81 2f       	mov	r24, r17
     624:	60 96       	adiw	r28, 0x10	; 16
     626:	cd bf       	out	0x3d, r28	; 61
     628:	de bf       	out	0x3e, r29	; 62
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	5f 90       	pop	r5
     648:	4f 90       	pop	r4
     64a:	3f 90       	pop	r3
     64c:	2f 90       	pop	r2
     64e:	08 95       	ret
     650:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
     654:	83 50       	subi	r24, 0x03	; 3
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	08 f4       	brcc	.+2      	; 0x65c <sd_mmc_check+0x78>
     65a:	4c c0       	rjmp	.+152    	; 0x6f4 <sd_mmc_check+0x110>
     65c:	01 e0       	ldi	r16, 0x01	; 1
     65e:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <sd_mmc_cards+0x1e>
     662:	88 23       	and	r24, r24
     664:	09 f4       	brne	.+2      	; 0x668 <sd_mmc_check+0x84>
     666:	44 c0       	rjmp	.+136    	; 0x6f0 <sd_mmc_check+0x10c>
     668:	20 91 94 28 	lds	r18, 0x2894	; 0x802894 <sd_mmc_cards+0xd>
     66c:	40 91 87 28 	lds	r20, 0x2887	; 0x802887 <sd_mmc_cards>
     670:	50 91 88 28 	lds	r21, 0x2888	; 0x802888 <sd_mmc_cards+0x1>
     674:	60 91 89 28 	lds	r22, 0x2889	; 0x802889 <sd_mmc_cards+0x2>
     678:	70 91 8a 28 	lds	r23, 0x288A	; 0x80288a <sd_mmc_cards+0x3>
     67c:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <sd_mmc_slot_sel>
     680:	87 e8       	ldi	r24, 0x87	; 135
     682:	98 e2       	ldi	r25, 0x28	; 40
     684:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <sd_mmc_card>
     688:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <sd_mmc_card+0x1>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 44 0c 	call	0x1888	; 0x1888 <sd_mmc_spi_select_device>
     692:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	41 f0       	breq	.+16     	; 0x6aa <sd_mmc_check+0xc6>
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
     6a0:	81 11       	cpse	r24, r1
     6a2:	bf cf       	rjmp	.-130    	; 0x622 <sd_mmc_check+0x3e>
     6a4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <sd_mmc_spi_deselect_device>
     6a8:	bc cf       	rjmp	.-136    	; 0x622 <sd_mmc_check+0x3e>
     6aa:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     6ae:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	83 87       	std	Z+11, r24	; 0x0b
     6b6:	14 86       	std	Z+12, r1	; 0x0c
     6b8:	10 86       	std	Z+8, r1	; 0x08
     6ba:	11 86       	std	Z+9, r1	; 0x09
     6bc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <sd_mmc_spi_send_clock>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	71 e1       	ldi	r23, 0x11	; 17
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     6d2:	81 11       	cpse	r24, r1
     6d4:	2a c0       	rjmp	.+84     	; 0x72a <sd_mmc_check+0x146>
     6d6:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     6da:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	82 87       	std	Z+10, r24	; 0x0a
     6e2:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
     6e6:	88 23       	and	r24, r24
     6e8:	09 f4       	brne	.+2      	; 0x6ec <sd_mmc_check+0x108>
     6ea:	82 c0       	rjmp	.+260    	; 0x7f0 <sd_mmc_check+0x20c>
     6ec:	13 e0       	ldi	r17, 0x03	; 3
     6ee:	99 cf       	rjmp	.-206    	; 0x622 <sd_mmc_check+0x3e>
     6f0:	00 e0       	ldi	r16, 0x00	; 0
     6f2:	ba cf       	rjmp	.-140    	; 0x668 <sd_mmc_check+0x84>
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	9a e1       	ldi	r25, 0x1A	; 26
     6fe:	a6 e0       	ldi	r26, 0x06	; 6
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <sd_mmc_cards>
     706:	90 93 88 28 	sts	0x2888, r25	; 0x802888 <sd_mmc_cards+0x1>
     70a:	a0 93 89 28 	sts	0x2889, r26	; 0x802889 <sd_mmc_cards+0x2>
     70e:	b0 93 8a 28 	sts	0x288A, r27	; 0x80288a <sd_mmc_cards+0x3>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sd_mmc_cards+0xd>
     718:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <sd_mmc_cards+0x1e>
     71c:	40 e8       	ldi	r20, 0x80	; 128
     71e:	5a e1       	ldi	r21, 0x1A	; 26
     720:	66 e0       	ldi	r22, 0x06	; 6
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	a9 cf       	rjmp	.-174    	; 0x67c <sd_mmc_check+0x98>
     72a:	2a ea       	ldi	r18, 0xAA	; 170
     72c:	31 e0       	ldi	r19, 0x01	; 1
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	68 e0       	ldi	r22, 0x08	; 8
     734:	75 e5       	ldi	r23, 0x55	; 85
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     73e:	81 11       	cpse	r24, r1
     740:	5c c0       	rjmp	.+184    	; 0x7fa <sd_mmc_check+0x216>
     742:	f1 2c       	mov	r15, r1
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	a9 01       	movw	r20, r18
     74a:	65 e0       	ldi	r22, 0x05	; 5
     74c:	75 e4       	ldi	r23, 0x45	; 69
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     756:	81 11       	cpse	r24, r1
     758:	6c c0       	rjmp	.+216    	; 0x832 <sd_mmc_check+0x24e>
     75a:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     75e:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     762:	83 85       	ldd	r24, Z+11	; 0x0b
     764:	80 fd       	sbrc	r24, 0
     766:	8a c1       	rjmp	.+788    	; 0xa7c <sd_mmc_check+0x498>
     768:	98 2f       	mov	r25, r24
     76a:	94 70       	andi	r25, 0x04	; 4
     76c:	91 11       	cpse	r25, r1
     76e:	93 c0       	rjmp	.+294    	; 0x896 <sd_mmc_check+0x2b2>
     770:	80 ff       	sbrs	r24, 0
     772:	25 c0       	rjmp	.+74     	; 0x7be <sd_mmc_check+0x1da>
     774:	83 ff       	sbrs	r24, 3
     776:	ea c4       	rjmp	.+2516   	; 0x114c <sd_mmc_check+0xb68>
     778:	81 e4       	ldi	r24, 0x41	; 65
     77a:	c8 2e       	mov	r12, r24
     77c:	8d e0       	ldi	r24, 0x0D	; 13
     77e:	d8 2e       	mov	r13, r24
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	e8 2e       	mov	r14, r24
     784:	f1 2c       	mov	r15, r1
     786:	07 c0       	rjmp	.+14     	; 0x796 <sd_mmc_check+0x1b2>
     788:	b1 e0       	ldi	r27, 0x01	; 1
     78a:	cb 1a       	sub	r12, r27
     78c:	d1 08       	sbc	r13, r1
     78e:	e1 08       	sbc	r14, r1
     790:	f1 08       	sbc	r15, r1
     792:	09 f4       	brne	.+2      	; 0x796 <sd_mmc_check+0x1b2>
     794:	a0 cf       	rjmp	.-192    	; 0x6d6 <sd_mmc_check+0xf2>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	6d e0       	ldi	r22, 0x0D	; 13
     79e:	7b e1       	ldi	r23, 0x1B	; 27
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     7a8:	88 23       	and	r24, r24
     7aa:	09 f4       	brne	.+2      	; 0x7ae <sd_mmc_check+0x1ca>
     7ac:	94 cf       	rjmp	.-216    	; 0x6d6 <sd_mmc_check+0xf2>
     7ae:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     7b2:	61 11       	cpse	r22, r1
     7b4:	e9 cf       	rjmp	.-46     	; 0x788 <sd_mmc_check+0x1a4>
     7b6:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     7ba:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     7be:	01 e0       	ldi	r16, 0x01	; 1
     7c0:	86 8d       	ldd	r24, Z+30	; 0x1e
     7c2:	81 11       	cpse	r24, r1
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <sd_mmc_check+0x1e4>
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	40 81       	ld	r20, Z
     7ca:	51 81       	ldd	r21, Z+1	; 0x01
     7cc:	62 81       	ldd	r22, Z+2	; 0x02
     7ce:	73 81       	ldd	r23, Z+3	; 0x03
     7d0:	25 85       	ldd	r18, Z+13	; 0x0d
     7d2:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
     7d6:	0e 94 44 0c 	call	0x1888	; 0x1888 <sd_mmc_spi_select_device>
     7da:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     7de:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     7e2:	12 86       	std	Z+10, r1	; 0x0a
     7e4:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
     7e8:	88 23       	and	r24, r24
     7ea:	f1 f0       	breq	.+60     	; 0x828 <sd_mmc_check+0x244>
     7ec:	11 e0       	ldi	r17, 0x01	; 1
     7ee:	19 cf       	rjmp	.-462    	; 0x622 <sd_mmc_check+0x3e>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <sd_mmc_spi_deselect_device>
     7f6:	13 e0       	ldi	r17, 0x03	; 3
     7f8:	14 cf       	rjmp	.-472    	; 0x622 <sd_mmc_check+0x3e>
     7fa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     7fe:	6f 3f       	cpi	r22, 0xFF	; 255
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	72 07       	cpc	r23, r18
     804:	82 07       	cpc	r24, r18
     806:	92 07       	cpc	r25, r18
     808:	09 f4       	brne	.+2      	; 0x80c <sd_mmc_check+0x228>
     80a:	9b cf       	rjmp	.-202    	; 0x742 <sd_mmc_check+0x15e>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	9f 70       	andi	r25, 0x0F	; 15
     812:	aa 27       	eor	r26, r26
     814:	bb 27       	eor	r27, r27
     816:	8a 3a       	cpi	r24, 0xAA	; 170
     818:	91 40       	sbci	r25, 0x01	; 1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	09 f0       	breq	.+2      	; 0x822 <sd_mmc_check+0x23e>
     820:	5a cf       	rjmp	.-332    	; 0x6d6 <sd_mmc_check+0xf2>
     822:	ff 24       	eor	r15, r15
     824:	f3 94       	inc	r15
     826:	8e cf       	rjmp	.-228    	; 0x744 <sd_mmc_check+0x160>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <sd_mmc_spi_deselect_device>
     82e:	11 e0       	ldi	r17, 0x01	; 1
     830:	f8 ce       	rjmp	.-528    	; 0x622 <sd_mmc_check+0x3e>
     832:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     836:	8b 01       	movw	r16, r22
     838:	9c 01       	movw	r18, r24
     83a:	00 27       	eor	r16, r16
     83c:	11 27       	eor	r17, r17
     83e:	22 27       	eor	r18, r18
     840:	30 77       	andi	r19, 0x70	; 112
     842:	01 2b       	or	r16, r17
     844:	02 2b       	or	r16, r18
     846:	03 2b       	or	r16, r19
     848:	09 f4       	brne	.+2      	; 0x84c <sd_mmc_check+0x268>
     84a:	87 cf       	rjmp	.-242    	; 0x75a <sd_mmc_check+0x176>
     84c:	00 e0       	ldi	r16, 0x00	; 0
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	07 c0       	rjmp	.+14     	; 0x860 <sd_mmc_check+0x27c>
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	09 38       	cpi	r16, 0x89	; 137
     858:	f3 e1       	ldi	r31, 0x13	; 19
     85a:	1f 07       	cpc	r17, r31
     85c:	09 f4       	brne	.+2      	; 0x860 <sd_mmc_check+0x27c>
     85e:	3b cf       	rjmp	.-394    	; 0x6d6 <sd_mmc_check+0xf2>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	22 27       	eor	r18, r18
     866:	30 78       	andi	r19, 0x80	; 128
     868:	4f 71       	andi	r20, 0x1F	; 31
     86a:	55 27       	eor	r21, r21
     86c:	65 e0       	ldi	r22, 0x05	; 5
     86e:	75 e4       	ldi	r23, 0x45	; 69
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     878:	88 23       	and	r24, r24
     87a:	09 f4       	brne	.+2      	; 0x87e <sd_mmc_check+0x29a>
     87c:	2c cf       	rjmp	.-424    	; 0x6d6 <sd_mmc_check+0xf2>
     87e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     882:	97 ff       	sbrs	r25, 7
     884:	e6 cf       	rjmp	.-52     	; 0x852 <sd_mmc_check+0x26e>
     886:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     88a:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     88e:	93 fd       	sbrc	r25, 3
     890:	f3 c0       	rjmp	.+486    	; 0xa78 <sd_mmc_check+0x494>
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	83 87       	std	Z+11, r24	; 0x0b
     896:	8e 01       	movw	r16, r28
     898:	07 5f       	subi	r16, 0xF7	; 247
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	f9 e0       	ldi	r31, 0x09	; 9
     89e:	cf 2e       	mov	r12, r31
     8a0:	d1 2c       	mov	r13, r1
     8a2:	e1 2c       	mov	r14, r1
     8a4:	f1 2c       	mov	r15, r1
     8a6:	d8 01       	movw	r26, r16
     8a8:	8c 91       	ld	r24, X
     8aa:	b7 01       	movw	r22, r14
     8ac:	a6 01       	movw	r20, r12
     8ae:	e9 e0       	ldi	r30, 0x09	; 9
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	66 1f       	adc	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	ea 95       	dec	r30
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <sd_mmc_check+0x2cc>
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	64 e3       	ldi	r22, 0x34	; 52
     8c4:	73 e1       	ldi	r23, 0x13	; 19
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     8ce:	88 23       	and	r24, r24
     8d0:	21 f0       	breq	.+8      	; 0x8da <sd_mmc_check+0x2f6>
     8d2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     8d6:	f8 01       	movw	r30, r16
     8d8:	60 83       	st	Z, r22
     8da:	ff ef       	ldi	r31, 0xFF	; 255
     8dc:	cf 1a       	sub	r12, r31
     8de:	df 0a       	sbc	r13, r31
     8e0:	ef 0a       	sbc	r14, r31
     8e2:	ff 0a       	sbc	r15, r31
     8e4:	0f 5f       	subi	r16, 0xFF	; 255
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	2d e0       	ldi	r18, 0x0D	; 13
     8ea:	c2 16       	cp	r12, r18
     8ec:	d1 04       	cpc	r13, r1
     8ee:	e1 04       	cpc	r14, r1
     8f0:	f1 04       	cpc	r15, r1
     8f2:	c9 f6       	brne	.-78     	; 0x8a6 <sd_mmc_check+0x2c2>
     8f4:	4a 84       	ldd	r4, Y+10	; 0x0a
     8f6:	51 2c       	mov	r5, r1
     8f8:	54 2c       	mov	r5, r4
     8fa:	44 24       	eor	r4, r4
     8fc:	89 85       	ldd	r24, Y+9	; 0x09
     8fe:	48 0e       	add	r4, r24
     900:	51 1c       	adc	r5, r1
     902:	05 2c       	mov	r0, r5
     904:	00 0c       	add	r0, r0
     906:	66 08       	sbc	r6, r6
     908:	77 08       	sbc	r7, r7
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	4c 01       	movw	r8, r24
     910:	de 01       	movw	r26, r28
     912:	14 96       	adiw	r26, 0x04	; 4
     914:	5d 01       	movw	r10, r26
     916:	d3 01       	movw	r26, r6
     918:	c2 01       	movw	r24, r4
     91a:	9f 5f       	subi	r25, 0xFF	; 255
     91c:	af 4f       	sbci	r26, 0xFF	; 255
     91e:	bf 4f       	sbci	r27, 0xFF	; 255
     920:	8d 87       	std	Y+13, r24	; 0x0d
     922:	9e 87       	std	Y+14, r25	; 0x0e
     924:	af 87       	std	Y+15, r26	; 0x0f
     926:	b8 8b       	std	Y+16, r27	; 0x10
     928:	14 01       	movw	r2, r8
     92a:	84 01       	movw	r16, r8
     92c:	73 01       	movw	r14, r6
     92e:	62 01       	movw	r12, r4
     930:	d8 01       	movw	r26, r16
     932:	8c 91       	ld	r24, X
     934:	b7 01       	movw	r22, r14
     936:	a6 01       	movw	r20, r12
     938:	29 e0       	ldi	r18, 0x09	; 9
     93a:	44 0f       	add	r20, r20
     93c:	55 1f       	adc	r21, r21
     93e:	66 1f       	adc	r22, r22
     940:	77 1f       	adc	r23, r23
     942:	2a 95       	dec	r18
     944:	d1 f7       	brne	.-12     	; 0x93a <sd_mmc_check+0x356>
     946:	9a 01       	movw	r18, r20
     948:	ab 01       	movw	r20, r22
     94a:	28 2b       	or	r18, r24
     94c:	64 e3       	ldi	r22, 0x34	; 52
     94e:	73 e1       	ldi	r23, 0x13	; 19
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     958:	88 23       	and	r24, r24
     95a:	21 f0       	breq	.+8      	; 0x964 <sd_mmc_check+0x380>
     95c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     960:	f8 01       	movw	r30, r16
     962:	60 83       	st	Z, r22
     964:	ff ef       	ldi	r31, 0xFF	; 255
     966:	cf 1a       	sub	r12, r31
     968:	df 0a       	sbc	r13, r31
     96a:	ef 0a       	sbc	r14, r31
     96c:	ff 0a       	sbc	r15, r31
     96e:	0f 5f       	subi	r16, 0xFF	; 255
     970:	1f 4f       	sbci	r17, 0xFF	; 255
     972:	a0 16       	cp	r10, r16
     974:	b1 06       	cpc	r11, r17
     976:	e1 f6       	brne	.-72     	; 0x930 <sd_mmc_check+0x34c>
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	8f 3f       	cpi	r24, 0xFF	; 255
     97c:	09 f4       	brne	.+2      	; 0x980 <sd_mmc_check+0x39c>
     97e:	ab ce       	rjmp	.-682    	; 0x6d6 <sd_mmc_check+0xf2>
     980:	82 32       	cpi	r24, 0x22	; 34
     982:	e1 f0       	breq	.+56     	; 0x9bc <sd_mmc_check+0x3d8>
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	88 23       	and	r24, r24
     988:	09 f4       	brne	.+2      	; 0x98c <sd_mmc_check+0x3a8>
     98a:	a5 ce       	rjmp	.-694    	; 0x6d6 <sd_mmc_check+0xf2>
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	09 2e       	mov	r0, r25
     992:	00 0c       	add	r0, r0
     994:	aa 0b       	sbc	r26, r26
     996:	bb 0b       	sbc	r27, r27
     998:	03 96       	adiw	r24, 0x03	; 3
     99a:	a1 1d       	adc	r26, r1
     99c:	b1 1d       	adc	r27, r1
     99e:	48 0e       	add	r4, r24
     9a0:	59 1e       	adc	r5, r25
     9a2:	6a 1e       	adc	r6, r26
     9a4:	7b 1e       	adc	r7, r27
     9a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     9a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     9aa:	af 85       	ldd	r26, Y+15	; 0x0f
     9ac:	b8 89       	ldd	r27, Y+16	; 0x10
     9ae:	84 15       	cp	r24, r4
     9b0:	95 05       	cpc	r25, r5
     9b2:	a6 05       	cpc	r26, r6
     9b4:	b7 05       	cpc	r27, r7
     9b6:	08 f0       	brcs	.+2      	; 0x9ba <sd_mmc_check+0x3d6>
     9b8:	b7 cf       	rjmp	.-146    	; 0x928 <sd_mmc_check+0x344>
     9ba:	8d ce       	rjmp	.-742    	; 0x6d6 <sd_mmc_check+0xf2>
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	81 11       	cpse	r24, r1
     9c0:	e1 cf       	rjmp	.-62     	; 0x984 <sd_mmc_check+0x3a0>
     9c2:	8e 01       	movw	r16, r28
     9c4:	09 5f       	subi	r16, 0xF9	; 249
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	d1 01       	movw	r26, r2
     9ca:	8c 91       	ld	r24, X
     9cc:	b3 01       	movw	r22, r6
     9ce:	a2 01       	movw	r20, r4
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	44 0f       	add	r20, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	66 1f       	adc	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	9a 95       	dec	r25
     9dc:	d1 f7       	brne	.-12     	; 0x9d2 <sd_mmc_check+0x3ee>
     9de:	9a 01       	movw	r18, r20
     9e0:	ab 01       	movw	r20, r22
     9e2:	28 2b       	or	r18, r24
     9e4:	64 e3       	ldi	r22, 0x34	; 52
     9e6:	73 e1       	ldi	r23, 0x13	; 19
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     9f0:	88 23       	and	r24, r24
     9f2:	21 f0       	breq	.+8      	; 0x9fc <sd_mmc_check+0x418>
     9f4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     9f8:	f1 01       	movw	r30, r2
     9fa:	60 83       	st	Z, r22
     9fc:	ff ef       	ldi	r31, 0xFF	; 255
     9fe:	4f 1a       	sub	r4, r31
     a00:	5f 0a       	sbc	r5, r31
     a02:	6f 0a       	sbc	r6, r31
     a04:	7f 0a       	sbc	r7, r31
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	22 1a       	sub	r2, r18
     a0a:	32 0a       	sbc	r3, r18
     a0c:	02 15       	cp	r16, r2
     a0e:	13 05       	cpc	r17, r3
     a10:	d9 f6       	brne	.-74     	; 0x9c8 <sd_mmc_check+0x3e4>
     a12:	8e 81       	ldd	r24, Y+6	; 0x06
     a14:	83 33       	cpi	r24, 0x33	; 51
     a16:	08 f0       	brcs	.+2      	; 0xa1a <sd_mmc_check+0x436>
     a18:	82 e3       	ldi	r24, 0x32	; 50
     a1a:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     a1e:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     a22:	28 2f       	mov	r18, r24
     a24:	27 70       	andi	r18, 0x07	; 7
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	29 9f       	mul	r18, r25
     a2a:	90 01       	movw	r18, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	2d 5b       	subi	r18, 0xBD	; 189
     a30:	3e 4d       	sbci	r19, 0xDE	; 222
     a32:	a8 2f       	mov	r26, r24
     a34:	a6 95       	lsr	r26
     a36:	a6 95       	lsr	r26
     a38:	a6 95       	lsr	r26
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	a8 9f       	mul	r26, r24
     a3e:	d0 01       	movw	r26, r0
     a40:	11 24       	eor	r1, r1
     a42:	cd 01       	movw	r24, r26
     a44:	8d 5f       	subi	r24, 0xFD	; 253
     a46:	9e 4d       	sbci	r25, 0xDE	; 222
     a48:	d9 01       	movw	r26, r18
     a4a:	2d 91       	ld	r18, X+
     a4c:	3d 91       	ld	r19, X+
     a4e:	4d 91       	ld	r20, X+
     a50:	5c 91       	ld	r21, X
     a52:	dc 01       	movw	r26, r24
     a54:	6d 91       	ld	r22, X+
     a56:	7d 91       	ld	r23, X+
     a58:	8d 91       	ld	r24, X+
     a5a:	9c 91       	ld	r25, X
     a5c:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <__mulsi3>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	a8 ee       	ldi	r26, 0xE8	; 232
     a66:	b3 e0       	ldi	r27, 0x03	; 3
     a68:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
     a6c:	60 83       	st	Z, r22
     a6e:	71 83       	std	Z+1, r23	; 0x01
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	93 83       	std	Z+3, r25	; 0x03
     a74:	83 85       	ldd	r24, Z+11	; 0x0b
     a76:	7c ce       	rjmp	.-776    	; 0x770 <sd_mmc_check+0x18c>
     a78:	85 e0       	ldi	r24, 0x05	; 5
     a7a:	83 87       	std	Z+11, r24	; 0x0b
     a7c:	ff 20       	and	r15, r15
     a7e:	09 f4       	brne	.+2      	; 0xa82 <sd_mmc_check+0x49e>
     a80:	08 c2       	rjmp	.+1040   	; 0xe92 <sd_mmc_check+0x8ae>
     a82:	c1 2c       	mov	r12, r1
     a84:	d1 2c       	mov	r13, r1
     a86:	e1 2c       	mov	r14, r1
     a88:	70 e4       	ldi	r23, 0x40	; 64
     a8a:	f7 2e       	mov	r15, r23
     a8c:	00 e0       	ldi	r16, 0x00	; 0
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	14 c0       	rjmp	.+40     	; 0xaba <sd_mmc_check+0x4d6>
     a92:	a7 01       	movw	r20, r14
     a94:	96 01       	movw	r18, r12
     a96:	69 e2       	ldi	r22, 0x29	; 41
     a98:	71 e1       	ldi	r23, 0x11	; 17
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     aa2:	88 23       	and	r24, r24
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <sd_mmc_check+0x4ec>
     aa6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     aaa:	60 ff       	sbrs	r22, 0
     aac:	f6 c1       	rjmp	.+1004   	; 0xe9a <sd_mmc_check+0x8b6>
     aae:	0f 5f       	subi	r16, 0xFF	; 255
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
     ab2:	0f 3e       	cpi	r16, 0xEF	; 239
     ab4:	2b e1       	ldi	r18, 0x1B	; 27
     ab6:	12 07       	cpc	r17, r18
     ab8:	59 f0       	breq	.+22     	; 0xad0 <sd_mmc_check+0x4ec>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	a9 01       	movw	r20, r18
     ac0:	67 e3       	ldi	r22, 0x37	; 55
     ac2:	71 e1       	ldi	r23, 0x11	; 17
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     acc:	81 11       	cpse	r24, r1
     ace:	e1 cf       	rjmp	.-62     	; 0xa92 <sd_mmc_check+0x4ae>
     ad0:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     ad4:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	83 87       	std	Z+11, r24	; 0x0b
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	a9 01       	movw	r20, r18
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	71 e1       	ldi	r23, 0x11	; 17
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     aee:	88 23       	and	r24, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <sd_mmc_check+0x510>
     af2:	f1 cd       	rjmp	.-1054   	; 0x6d6 <sd_mmc_check+0xf2>
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <sd_mmc_check+0x524>
     afa:	0f 5f       	subi	r16, 0xFF	; 255
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	0f 3e       	cpi	r16, 0xEF	; 239
     b00:	8b e1       	ldi	r24, 0x1B	; 27
     b02:	18 07       	cpc	r17, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <sd_mmc_check+0x524>
     b06:	e7 cd       	rjmp	.-1074   	; 0x6d6 <sd_mmc_check+0xf2>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	a9 01       	movw	r20, r18
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	71 e1       	ldi	r23, 0x11	; 17
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <sd_mmc_check+0x53c>
     b1e:	db cd       	rjmp	.-1098   	; 0x6d6 <sd_mmc_check+0xf2>
     b20:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     b24:	60 fd       	sbrc	r22, 0
     b26:	e9 cf       	rjmp	.-46     	; 0xafa <sd_mmc_check+0x516>
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	a9 01       	movw	r20, r18
     b2e:	6a e3       	ldi	r22, 0x3A	; 58
     b30:	75 e0       	ldi	r23, 0x05	; 5
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     b3a:	88 23       	and	r24, r24
     b3c:	09 f4       	brne	.+2      	; 0xb40 <sd_mmc_check+0x55c>
     b3e:	cb cd       	rjmp	.-1130   	; 0x6d6 <sd_mmc_check+0xf2>
     b40:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <sd_mmc_spi_get_response>
     b44:	dc 01       	movw	r26, r24
     b46:	cb 01       	movw	r24, r22
     b48:	88 27       	eor	r24, r24
     b4a:	99 27       	eor	r25, r25
     b4c:	aa 27       	eor	r26, r26
     b4e:	b0 76       	andi	r27, 0x60	; 96
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	a1 05       	cpc	r26, r1
     b54:	b0 44       	sbci	r27, 0x40	; 64
     b56:	09 f4       	brne	.+2      	; 0xb5a <sd_mmc_check+0x576>
     b58:	45 c3       	rjmp	.+1674   	; 0x11e4 <sd_mmc_check+0xc00>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	a9 01       	movw	r20, r18
     b60:	6b e3       	ldi	r22, 0x3B	; 59
     b62:	71 e1       	ldi	r23, 0x11	; 17
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <sd_mmc_spi_send_cmd>
     b6c:	88 23       	and	r24, r24
     b6e:	09 f4       	brne	.+2      	; 0xb72 <sd_mmc_check+0x58e>
     b70:	b2 cd       	rjmp	.-1180   	; 0x6d6 <sd_mmc_check+0xf2>
     b72:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     b76:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     b7a:	20 85       	ldd	r18, Z+8	; 0x08
     b7c:	31 85       	ldd	r19, Z+9	; 0x09
     b7e:	c9 01       	movw	r24, r18
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	ac 01       	movw	r20, r24
     b86:	33 27       	eor	r19, r19
     b88:	22 27       	eor	r18, r18
     b8a:	cc 24       	eor	r12, r12
     b8c:	c3 94       	inc	r12
     b8e:	ee 24       	eor	r14, r14
     b90:	e3 94       	inc	r14
     b92:	f1 2c       	mov	r15, r1
     b94:	00 e1       	ldi	r16, 0x10	; 16
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	69 e0       	ldi	r22, 0x09	; 9
     b9a:	71 e1       	ldi	r23, 0x11	; 17
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	be d6       	rcall	.+3452   	; 0x191e <sd_mmc_spi_adtc_start>
     ba2:	88 23       	and	r24, r24
     ba4:	09 f4       	brne	.+2      	; 0xba8 <sd_mmc_check+0x5c4>
     ba6:	97 cd       	rjmp	.-1234   	; 0x6d6 <sd_mmc_check+0xf2>
     ba8:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <sd_mmc_card>
     bac:	90 91 85 28 	lds	r25, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 96       	adiw	r24, 0x0e	; 14
     bb6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <sd_mmc_spi_start_read_blocks>
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <sd_mmc_check+0x5dc>
     bbe:	8b cd       	rjmp	.-1258   	; 0x6d6 <sd_mmc_check+0xf2>
     bc0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <sd_mmc_spi_wait_end_of_read_blocks>
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <sd_mmc_check+0x5e6>
     bc8:	86 cd       	rjmp	.-1268   	; 0x6d6 <sd_mmc_check+0xf2>
     bca:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     bce:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     bd2:	86 85       	ldd	r24, Z+14	; 0x0e
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	95 95       	asr	r25
     bd8:	87 95       	ror	r24
     bda:	95 95       	asr	r25
     bdc:	87 95       	ror	r24
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	99 27       	eor	r25, r25
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <sd_mmc_check+0x606>
     be8:	fa c2       	rjmp	.+1524   	; 0x11de <sd_mmc_check+0xbfa>
     bea:	0c f4       	brge	.+2      	; 0xbee <sd_mmc_check+0x60a>
     bec:	f3 c2       	rjmp	.+1510   	; 0x11d4 <sd_mmc_check+0xbf0>
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <sd_mmc_check+0x612>
     bf4:	ec c2       	rjmp	.+1496   	; 0x11ce <sd_mmc_check+0xbea>
     bf6:	04 97       	sbiw	r24, 0x04	; 4
     bf8:	09 f0       	breq	.+2      	; 0xbfc <sd_mmc_check+0x618>
     bfa:	fc c2       	rjmp	.+1528   	; 0x11f4 <sd_mmc_check+0xc10>
     bfc:	80 e4       	ldi	r24, 0x40	; 64
     bfe:	84 87       	std	Z+12, r24	; 0x0c
     c00:	81 89       	ldd	r24, Z+17	; 0x11
     c02:	48 2f       	mov	r20, r24
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	9a 95       	dec	r25
     c16:	d1 f7       	brne	.-12     	; 0xc0c <sd_mmc_check+0x628>
     c18:	4f 70       	andi	r20, 0x0F	; 15
     c1a:	55 27       	eor	r21, r21
     c1c:	66 27       	eor	r22, r22
     c1e:	77 27       	eor	r23, r23
     c20:	44 0f       	add	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	44 0f       	add	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	8a 01       	movw	r16, r20
     c2a:	0d 53       	subi	r16, 0x3D	; 61
     c2c:	1f 4d       	sbci	r17, 0xDF	; 223
     c2e:	a8 2f       	mov	r26, r24
     c30:	a7 70       	andi	r26, 0x07	; 7
     c32:	24 e0       	ldi	r18, 0x04	; 4
     c34:	a2 9f       	mul	r26, r18
     c36:	d0 01       	movw	r26, r0
     c38:	11 24       	eor	r1, r1
     c3a:	ad 5b       	subi	r26, 0xBD	; 189
     c3c:	be 4d       	sbci	r27, 0xDE	; 222
     c3e:	2d 91       	ld	r18, X+
     c40:	3d 91       	ld	r19, X+
     c42:	4d 91       	ld	r20, X+
     c44:	5c 91       	ld	r21, X
     c46:	a8 ee       	ldi	r26, 0xE8	; 232
     c48:	b3 e0       	ldi	r27, 0x03	; 3
     c4a:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
     c4e:	d8 01       	movw	r26, r16
     c50:	2d 91       	ld	r18, X+
     c52:	3d 91       	ld	r19, X+
     c54:	4d 91       	ld	r20, X+
     c56:	5c 91       	ld	r21, X
     c58:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <__mulsi3>
     c5c:	60 83       	st	Z, r22
     c5e:	71 83       	std	Z+1, r23	; 0x01
     c60:	82 83       	std	Z+2, r24	; 0x02
     c62:	93 83       	std	Z+3, r25	; 0x03
     c64:	06 89       	ldd	r16, Z+22	; 0x16
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	00 2e       	mov	r0, r16
     c6a:	01 2f       	mov	r16, r17
     c6c:	00 0c       	add	r0, r0
     c6e:	00 1f       	adc	r16, r16
     c70:	11 0b       	sbc	r17, r17
     c72:	00 0c       	add	r0, r0
     c74:	00 1f       	adc	r16, r16
     c76:	11 1f       	adc	r17, r17
     c78:	01 2e       	mov	r0, r17
     c7a:	00 0c       	add	r0, r0
     c7c:	22 0b       	sbc	r18, r18
     c7e:	33 0b       	sbc	r19, r19
     c80:	85 89       	ldd	r24, Z+21	; 0x15
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	aa 1f       	adc	r26, r26
     c96:	bb 1f       	adc	r27, r27
     c98:	44 89       	ldd	r20, Z+20	; 0x14
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	03 2e       	mov	r0, r19
     ca2:	3a e0       	ldi	r19, 0x0A	; 10
     ca4:	44 0f       	add	r20, r20
     ca6:	55 1f       	adc	r21, r21
     ca8:	66 1f       	adc	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	3a 95       	dec	r19
     cae:	d1 f7       	brne	.-12     	; 0xca4 <sd_mmc_check+0x6c0>
     cb0:	30 2d       	mov	r19, r0
     cb2:	84 2b       	or	r24, r20
     cb4:	95 2b       	or	r25, r21
     cb6:	a6 2b       	or	r26, r22
     cb8:	b7 2b       	or	r27, r23
     cba:	80 2b       	or	r24, r16
     cbc:	91 2b       	or	r25, r17
     cbe:	a2 2b       	or	r26, r18
     cc0:	b3 2b       	or	r27, r19
     cc2:	ac 01       	movw	r20, r24
     cc4:	bd 01       	movw	r22, r26
     cc6:	5f 70       	andi	r21, 0x0F	; 15
     cc8:	66 27       	eor	r22, r22
     cca:	77 27       	eor	r23, r23
     ccc:	4f 3f       	cpi	r20, 0xFF	; 255
     cce:	bf e0       	ldi	r27, 0x0F	; 15
     cd0:	5b 07       	cpc	r21, r27
     cd2:	61 05       	cpc	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <sd_mmc_check+0x6f6>
     cd8:	48 c0       	rjmp	.+144    	; 0xd6a <sd_mmc_check+0x786>
     cda:	80 8d       	ldd	r24, Z+24	; 0x18
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	6c 01       	movw	r12, r24
     ce0:	cc 0c       	add	r12, r12
     ce2:	cd 2c       	mov	r12, r13
     ce4:	cc 1c       	adc	r12, r12
     ce6:	dd 08       	sbc	r13, r13
     ce8:	c6 01       	movw	r24, r12
     cea:	dd 0c       	add	r13, r13
     cec:	aa 0b       	sbc	r26, r26
     cee:	bb 0b       	sbc	r27, r27
     cf0:	c7 88       	ldd	r12, Z+23	; 0x17
     cf2:	d1 2c       	mov	r13, r1
     cf4:	e1 2c       	mov	r14, r1
     cf6:	f1 2c       	mov	r15, r1
     cf8:	cc 0c       	add	r12, r12
     cfa:	dd 1c       	adc	r13, r13
     cfc:	ee 1c       	adc	r14, r14
     cfe:	ff 1c       	adc	r15, r15
     d00:	c8 2a       	or	r12, r24
     d02:	d9 2a       	or	r13, r25
     d04:	ea 2a       	or	r14, r26
     d06:	fb 2a       	or	r15, r27
     d08:	83 89       	ldd	r24, Z+19	; 0x13
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	01 e0       	ldi	r16, 0x01	; 1
     d0e:	10 e0       	ldi	r17, 0x00	; 0
     d10:	d8 01       	movw	r26, r16
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <sd_mmc_check+0x734>
     d14:	aa 0f       	add	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	8a 95       	dec	r24
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <sd_mmc_check+0x730>
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	2f 5f       	subi	r18, 0xFF	; 255
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	4f 4f       	sbci	r20, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	0e 94 aa 7f 	call	0xff54	; 0xff54 <__mulshisi3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	87 e0       	ldi	r24, 0x07	; 7
     d32:	c8 22       	and	r12, r24
     d34:	dd 24       	eor	r13, r13
     d36:	ee 24       	eor	r14, r14
     d38:	ff 24       	eor	r15, r15
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	c9 0e       	add	r12, r25
     d3e:	d1 1c       	adc	r13, r1
     d40:	d8 01       	movw	r26, r16
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <sd_mmc_check+0x764>
     d44:	aa 0f       	add	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	ca 94       	dec	r12
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <sd_mmc_check+0x760>
     d4c:	0e 94 aa 7f 	call	0xff54	; 0xff54 <__mulshisi3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	0a e0       	ldi	r16, 0x0A	; 10
     d56:	b6 95       	lsr	r27
     d58:	a7 95       	ror	r26
     d5a:	97 95       	ror	r25
     d5c:	87 95       	ror	r24
     d5e:	0a 95       	dec	r16
     d60:	d1 f7       	brne	.-12     	; 0xd56 <sd_mmc_check+0x772>
     d62:	84 83       	std	Z+4, r24	; 0x04
     d64:	95 83       	std	Z+5, r25	; 0x05
     d66:	a6 83       	std	Z+6, r26	; 0x06
     d68:	b7 83       	std	Z+7, r27	; 0x07
     d6a:	84 85       	ldd	r24, Z+12	; 0x0c
     d6c:	80 34       	cpi	r24, 0x40	; 64
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <sd_mmc_check+0x78e>
     d70:	67 c0       	rjmp	.+206    	; 0xe40 <sd_mmc_check+0x85c>
     d72:	c1 2c       	mov	r12, r1
     d74:	ee 24       	eor	r14, r14
     d76:	e3 94       	inc	r14
     d78:	f1 2c       	mov	r15, r1
     d7a:	00 e0       	ldi	r16, 0x00	; 0
     d7c:	12 e0       	ldi	r17, 0x02	; 2
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	68 e0       	ldi	r22, 0x08	; 8
     d86:	71 e1       	ldi	r23, 0x11	; 17
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	c8 d5       	rcall	.+2960   	; 0x191e <sd_mmc_spi_adtc_start>
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <sd_mmc_check+0x7b0>
     d92:	a1 cc       	rjmp	.-1726   	; 0x6d6 <sd_mmc_check+0xf2>
     d94:	02 e3       	ldi	r16, 0x32	; 50
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	09 96       	adiw	r24, 0x09	; 9
     d9c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sd_mmc_spi_read_word>
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <sd_mmc_check+0x7c2>
     da4:	98 cc       	rjmp	.-1744   	; 0x6d6 <sd_mmc_check+0xf2>
     da6:	01 50       	subi	r16, 0x01	; 1
     da8:	11 09       	sbc	r17, r1
     daa:	b1 f7       	brne	.-20     	; 0xd98 <sd_mmc_check+0x7b4>
     dac:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     db0:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     db4:	86 89       	ldd	r24, Z+22	; 0x16
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	08 2e       	mov	r0, r24
     dba:	89 2f       	mov	r24, r25
     dbc:	00 0c       	add	r0, r0
     dbe:	88 1f       	adc	r24, r24
     dc0:	99 0b       	sbc	r25, r25
     dc2:	00 0c       	add	r0, r0
     dc4:	88 1f       	adc	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	8c 01       	movw	r16, r24
     dca:	99 0f       	add	r25, r25
     dcc:	22 0b       	sbc	r18, r18
     dce:	33 0b       	sbc	r19, r19
     dd0:	85 89       	ldd	r24, Z+21	; 0x15
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	aa 1f       	adc	r26, r26
     dde:	bb 1f       	adc	r27, r27
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	aa 1f       	adc	r26, r26
     de6:	bb 1f       	adc	r27, r27
     de8:	44 89       	ldd	r20, Z+20	; 0x14
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	ea e0       	ldi	r30, 0x0A	; 10
     df2:	44 0f       	add	r20, r20
     df4:	55 1f       	adc	r21, r21
     df6:	66 1f       	adc	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	ea 95       	dec	r30
     dfc:	d1 f7       	brne	.-12     	; 0xdf2 <sd_mmc_check+0x80e>
     dfe:	84 2b       	or	r24, r20
     e00:	95 2b       	or	r25, r21
     e02:	a6 2b       	or	r26, r22
     e04:	b7 2b       	or	r27, r23
     e06:	80 2b       	or	r24, r16
     e08:	91 2b       	or	r25, r17
     e0a:	a2 2b       	or	r26, r18
     e0c:	b3 2b       	or	r27, r19
     e0e:	9f 70       	andi	r25, 0x0F	; 15
     e10:	aa 27       	eor	r26, r26
     e12:	bb 27       	eor	r27, r27
     e14:	8f 3f       	cpi	r24, 0xFF	; 255
     e16:	9f 40       	sbci	r25, 0x0F	; 15
     e18:	a1 05       	cpc	r26, r1
     e1a:	b1 05       	cpc	r27, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <sd_mmc_check+0x83c>
     e1e:	f0 c1       	rjmp	.+992    	; 0x1200 <sd_mmc_check+0xc1c>
     e20:	02 e3       	ldi	r16, 0x32	; 50
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	de 01       	movw	r26, r28
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	4d 01       	movw	r8, r26
     e2a:	c4 01       	movw	r24, r8
     e2c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sd_mmc_spi_read_word>
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <sd_mmc_check+0x852>
     e34:	50 cc       	rjmp	.-1888   	; 0x6d6 <sd_mmc_check+0xf2>
     e36:	0f 5f       	subi	r16, 0xFF	; 255
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	00 38       	cpi	r16, 0x80	; 128
     e3c:	11 05       	cpc	r17, r1
     e3e:	a9 f7       	brne	.-22     	; 0xe2a <sd_mmc_check+0x846>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	32 e0       	ldi	r19, 0x02	; 2
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	60 e1       	ldi	r22, 0x10	; 16
     e4a:	71 e1       	ldi	r23, 0x11	; 17
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	f7 d7       	rcall	.+4078   	; 0x1e40 <sd_mmc_spi_send_cmd>
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <sd_mmc_check+0x874>
     e56:	3f cc       	rjmp	.-1922   	; 0x6d6 <sd_mmc_check+0xf2>
     e58:	91 e4       	ldi	r25, 0x41	; 65
     e5a:	c9 2e       	mov	r12, r25
     e5c:	9d e0       	ldi	r25, 0x0D	; 13
     e5e:	d9 2e       	mov	r13, r25
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	e9 2e       	mov	r14, r25
     e64:	f1 2c       	mov	r15, r1
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	6d e0       	ldi	r22, 0x0D	; 13
     e6e:	7b e1       	ldi	r23, 0x1B	; 27
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	e5 d7       	rcall	.+4042   	; 0x1e40 <sd_mmc_spi_send_cmd>
     e76:	88 23       	and	r24, r24
     e78:	09 f4       	brne	.+2      	; 0xe7c <sd_mmc_check+0x898>
     e7a:	2d cc       	rjmp	.-1958   	; 0x6d6 <sd_mmc_check+0xf2>
     e7c:	f2 d7       	rcall	.+4068   	; 0x1e62 <sd_mmc_spi_get_response>
     e7e:	66 23       	and	r22, r22
     e80:	09 f4       	brne	.+2      	; 0xe84 <sd_mmc_check+0x8a0>
     e82:	99 cc       	rjmp	.-1742   	; 0x7b6 <sd_mmc_check+0x1d2>
     e84:	b1 e0       	ldi	r27, 0x01	; 1
     e86:	cb 1a       	sub	r12, r27
     e88:	d1 08       	sbc	r13, r1
     e8a:	e1 08       	sbc	r14, r1
     e8c:	f1 08       	sbc	r15, r1
     e8e:	59 f7       	brne	.-42     	; 0xe66 <sd_mmc_check+0x882>
     e90:	22 cc       	rjmp	.-1980   	; 0x6d6 <sd_mmc_check+0xf2>
     e92:	c1 2c       	mov	r12, r1
     e94:	d1 2c       	mov	r13, r1
     e96:	76 01       	movw	r14, r12
     e98:	f9 cd       	rjmp	.-1038   	; 0xa8c <sd_mmc_check+0x4a8>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	6a e3       	ldi	r22, 0x3A	; 58
     ea2:	75 e0       	ldi	r23, 0x05	; 5
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	cb d7       	rcall	.+3990   	; 0x1e40 <sd_mmc_spi_send_cmd>
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <sd_mmc_check+0x8cc>
     eae:	10 ce       	rjmp	.-992    	; 0xad0 <sd_mmc_check+0x4ec>
     eb0:	d8 d7       	rcall	.+4016   	; 0x1e62 <sd_mmc_spi_get_response>
     eb2:	96 ff       	sbrs	r25, 6
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <sd_mmc_check+0x8e0>
     eb6:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     eba:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     ebe:	83 85       	ldd	r24, Z+11	; 0x0b
     ec0:	88 60       	ori	r24, 0x08	; 8
     ec2:	83 87       	std	Z+11, r24	; 0x0b
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	6b e3       	ldi	r22, 0x3B	; 59
     ecc:	71 e1       	ldi	r23, 0x11	; 17
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	b6 d7       	rcall	.+3948   	; 0x1e40 <sd_mmc_spi_send_cmd>
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <sd_mmc_check+0x8f6>
     ed8:	fe cb       	rjmp	.-2052   	; 0x6d6 <sd_mmc_check+0xf2>
     eda:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     ede:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     ee2:	83 85       	ldd	r24, Z+11	; 0x0b
     ee4:	80 ff       	sbrs	r24, 0
     ee6:	62 c1       	rjmp	.+708    	; 0x11ac <sd_mmc_check+0xbc8>
     ee8:	20 85       	ldd	r18, Z+8	; 0x08
     eea:	31 85       	ldd	r19, Z+9	; 0x09
     eec:	c9 01       	movw	r24, r18
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ac 01       	movw	r20, r24
     ef4:	33 27       	eor	r19, r19
     ef6:	22 27       	eor	r18, r18
     ef8:	cc 24       	eor	r12, r12
     efa:	c3 94       	inc	r12
     efc:	ee 24       	eor	r14, r14
     efe:	e3 94       	inc	r14
     f00:	f1 2c       	mov	r15, r1
     f02:	00 e1       	ldi	r16, 0x10	; 16
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	69 e0       	ldi	r22, 0x09	; 9
     f08:	71 e1       	ldi	r23, 0x11	; 17
     f0a:	88 e0       	ldi	r24, 0x08	; 8
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	07 d5       	rcall	.+2574   	; 0x191e <sd_mmc_spi_adtc_start>
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <sd_mmc_check+0x932>
     f14:	e0 cb       	rjmp	.-2112   	; 0x6d6 <sd_mmc_check+0xf2>
     f16:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <sd_mmc_card>
     f1a:	90 91 85 28 	lds	r25, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	0e 96       	adiw	r24, 0x0e	; 14
     f24:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <sd_mmc_spi_start_read_blocks>
     f28:	88 23       	and	r24, r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <sd_mmc_check+0x94a>
     f2c:	d4 cb       	rjmp	.-2136   	; 0x6d6 <sd_mmc_check+0xf2>
     f2e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <sd_mmc_spi_wait_end_of_read_blocks>
     f32:	88 23       	and	r24, r24
     f34:	09 f4       	brne	.+2      	; 0xf38 <sd_mmc_check+0x954>
     f36:	cf cb       	rjmp	.-2146   	; 0x6d6 <sd_mmc_check+0xf2>
     f38:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
     f3c:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
     f40:	81 89       	ldd	r24, Z+17	; 0x11
     f42:	48 2f       	mov	r20, r24
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	a3 e0       	ldi	r26, 0x03	; 3
     f4c:	76 95       	lsr	r23
     f4e:	67 95       	ror	r22
     f50:	57 95       	ror	r21
     f52:	47 95       	ror	r20
     f54:	aa 95       	dec	r26
     f56:	d1 f7       	brne	.-12     	; 0xf4c <sd_mmc_check+0x968>
     f58:	4f 70       	andi	r20, 0x0F	; 15
     f5a:	55 27       	eor	r21, r21
     f5c:	66 27       	eor	r22, r22
     f5e:	77 27       	eor	r23, r23
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	8a 01       	movw	r16, r20
     f6a:	0d 5f       	subi	r16, 0xFD	; 253
     f6c:	1e 4d       	sbci	r17, 0xDE	; 222
     f6e:	a8 2f       	mov	r26, r24
     f70:	a7 70       	andi	r26, 0x07	; 7
     f72:	24 e0       	ldi	r18, 0x04	; 4
     f74:	a2 9f       	mul	r26, r18
     f76:	d0 01       	movw	r26, r0
     f78:	11 24       	eor	r1, r1
     f7a:	ad 5b       	subi	r26, 0xBD	; 189
     f7c:	be 4d       	sbci	r27, 0xDE	; 222
     f7e:	2d 91       	ld	r18, X+
     f80:	3d 91       	ld	r19, X+
     f82:	4d 91       	ld	r20, X+
     f84:	5c 91       	ld	r21, X
     f86:	a8 ee       	ldi	r26, 0xE8	; 232
     f88:	b3 e0       	ldi	r27, 0x03	; 3
     f8a:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
     f8e:	d8 01       	movw	r26, r16
     f90:	2d 91       	ld	r18, X+
     f92:	3d 91       	ld	r19, X+
     f94:	4d 91       	ld	r20, X+
     f96:	5c 91       	ld	r21, X
     f98:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <__mulsi3>
     f9c:	60 83       	st	Z, r22
     f9e:	71 83       	std	Z+1, r23	; 0x01
     fa0:	82 83       	std	Z+2, r24	; 0x02
     fa2:	93 83       	std	Z+3, r25	; 0x03
     fa4:	86 85       	ldd	r24, Z+14	; 0x0e
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	08 2e       	mov	r0, r24
     faa:	89 2f       	mov	r24, r25
     fac:	00 0c       	add	r0, r0
     fae:	88 1f       	adc	r24, r24
     fb0:	99 0b       	sbc	r25, r25
     fb2:	00 0c       	add	r0, r0
     fb4:	88 1f       	adc	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	89 2b       	or	r24, r25
     fba:	09 f0       	breq	.+2      	; 0xfbe <sd_mmc_check+0x9da>
     fbc:	db c0       	rjmp	.+438    	; 0x1174 <sd_mmc_check+0xb90>
     fbe:	06 89       	ldd	r16, Z+22	; 0x16
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	00 2e       	mov	r0, r16
     fc4:	01 2f       	mov	r16, r17
     fc6:	00 0c       	add	r0, r0
     fc8:	00 1f       	adc	r16, r16
     fca:	11 0b       	sbc	r17, r17
     fcc:	00 0c       	add	r0, r0
     fce:	00 1f       	adc	r16, r16
     fd0:	11 1f       	adc	r17, r17
     fd2:	01 2e       	mov	r0, r17
     fd4:	00 0c       	add	r0, r0
     fd6:	22 0b       	sbc	r18, r18
     fd8:	33 0b       	sbc	r19, r19
     fda:	85 89       	ldd	r24, Z+21	; 0x15
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	aa 1f       	adc	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	44 89       	ldd	r20, Z+20	; 0x14
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	03 2e       	mov	r0, r19
     ffc:	3a e0       	ldi	r19, 0x0A	; 10
     ffe:	44 0f       	add	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	66 1f       	adc	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	3a 95       	dec	r19
    1008:	d1 f7       	brne	.-12     	; 0xffe <sd_mmc_check+0xa1a>
    100a:	30 2d       	mov	r19, r0
    100c:	84 2b       	or	r24, r20
    100e:	95 2b       	or	r25, r21
    1010:	a6 2b       	or	r26, r22
    1012:	b7 2b       	or	r27, r23
    1014:	ac 01       	movw	r20, r24
    1016:	bd 01       	movw	r22, r26
    1018:	40 2b       	or	r20, r16
    101a:	51 2b       	or	r21, r17
    101c:	62 2b       	or	r22, r18
    101e:	73 2b       	or	r23, r19
    1020:	80 8d       	ldd	r24, Z+24	; 0x18
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	6c 01       	movw	r12, r24
    1026:	cc 0c       	add	r12, r12
    1028:	cd 2c       	mov	r12, r13
    102a:	cc 1c       	adc	r12, r12
    102c:	dd 08       	sbc	r13, r13
    102e:	c6 01       	movw	r24, r12
    1030:	dd 0c       	add	r13, r13
    1032:	aa 0b       	sbc	r26, r26
    1034:	bb 0b       	sbc	r27, r27
    1036:	c7 88       	ldd	r12, Z+23	; 0x17
    1038:	d1 2c       	mov	r13, r1
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	cc 0c       	add	r12, r12
    1040:	dd 1c       	adc	r13, r13
    1042:	ee 1c       	adc	r14, r14
    1044:	ff 1c       	adc	r15, r15
    1046:	c8 2a       	or	r12, r24
    1048:	d9 2a       	or	r13, r25
    104a:	ea 2a       	or	r14, r26
    104c:	fb 2a       	or	r15, r27
    104e:	83 89       	ldd	r24, Z+19	; 0x13
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	01 e0       	ldi	r16, 0x01	; 1
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	d8 01       	movw	r26, r16
    1058:	02 c0       	rjmp	.+4      	; 0x105e <sd_mmc_check+0xa7a>
    105a:	aa 0f       	add	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	8a 95       	dec	r24
    1060:	e2 f7       	brpl	.-8      	; 0x105a <sd_mmc_check+0xa76>
    1062:	5f 70       	andi	r21, 0x0F	; 15
    1064:	66 27       	eor	r22, r22
    1066:	77 27       	eor	r23, r23
    1068:	9a 01       	movw	r18, r20
    106a:	ab 01       	movw	r20, r22
    106c:	2f 5f       	subi	r18, 0xFF	; 255
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	4f 4f       	sbci	r20, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	0e 94 aa 7f 	call	0xff54	; 0xff54 <__mulshisi3>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	b7 e0       	ldi	r27, 0x07	; 7
    107e:	cb 22       	and	r12, r27
    1080:	dd 24       	eor	r13, r13
    1082:	ee 24       	eor	r14, r14
    1084:	ff 24       	eor	r15, r15
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	c8 0e       	add	r12, r24
    108a:	d1 1c       	adc	r13, r1
    108c:	d8 01       	movw	r26, r16
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <sd_mmc_check+0xab0>
    1090:	aa 0f       	add	r26, r26
    1092:	bb 1f       	adc	r27, r27
    1094:	ca 94       	dec	r12
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <sd_mmc_check+0xaac>
    1098:	0e 94 aa 7f 	call	0xff54	; 0xff54 <__mulshisi3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	3a e0       	ldi	r19, 0x0A	; 10
    10a2:	b6 95       	lsr	r27
    10a4:	a7 95       	ror	r26
    10a6:	97 95       	ror	r25
    10a8:	87 95       	ror	r24
    10aa:	3a 95       	dec	r19
    10ac:	d1 f7       	brne	.-12     	; 0x10a2 <sd_mmc_check+0xabe>
    10ae:	84 83       	std	Z+4, r24	; 0x04
    10b0:	95 83       	std	Z+5, r25	; 0x05
    10b2:	a6 83       	std	Z+6, r26	; 0x06
    10b4:	b7 83       	std	Z+7, r27	; 0x07
    10b6:	20 85       	ldd	r18, Z+8	; 0x08
    10b8:	31 85       	ldd	r19, Z+9	; 0x09
    10ba:	c9 01       	movw	r24, r18
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ac 01       	movw	r20, r24
    10c2:	33 27       	eor	r19, r19
    10c4:	22 27       	eor	r18, r18
    10c6:	67 e3       	ldi	r22, 0x37	; 55
    10c8:	71 e1       	ldi	r23, 0x11	; 17
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	b8 d6       	rcall	.+3440   	; 0x1e40 <sd_mmc_spi_send_cmd>
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <sd_mmc_check+0xaf2>
    10d4:	00 cb       	rjmp	.-2560   	; 0x6d6 <sd_mmc_check+0xf2>
    10d6:	cc 24       	eor	r12, r12
    10d8:	c3 94       	inc	r12
    10da:	ee 24       	eor	r14, r14
    10dc:	e3 94       	inc	r14
    10de:	f1 2c       	mov	r15, r1
    10e0:	08 e0       	ldi	r16, 0x08	; 8
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	63 e3       	ldi	r22, 0x33	; 51
    10ec:	71 e1       	ldi	r23, 0x11	; 17
    10ee:	88 e0       	ldi	r24, 0x08	; 8
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	15 d4       	rcall	.+2090   	; 0x191e <sd_mmc_spi_adtc_start>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <sd_mmc_check+0xb16>
    10f8:	ee ca       	rjmp	.-2596   	; 0x6d6 <sd_mmc_check+0xf2>
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	4c d7       	rcall	.+3736   	; 0x1f9c <sd_mmc_spi_start_read_blocks>
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <sd_mmc_check+0xb26>
    1108:	e6 ca       	rjmp	.-2612   	; 0x6d6 <sd_mmc_check+0xf2>
    110a:	dc d7       	rcall	.+4024   	; 0x20c4 <sd_mmc_spi_wait_end_of_read_blocks>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <sd_mmc_check+0xb2e>
    1110:	e2 ca       	rjmp	.-2620   	; 0x6d6 <sd_mmc_check+0xf2>
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	8f 70       	andi	r24, 0x0F	; 15
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	09 f4       	brne	.+2      	; 0x111c <sd_mmc_check+0xb38>
    111a:	52 c0       	rjmp	.+164    	; 0x11c0 <sd_mmc_check+0xbdc>
    111c:	08 f4       	brcc	.+2      	; 0x1120 <sd_mmc_check+0xb3c>
    111e:	49 c0       	rjmp	.+146    	; 0x11b2 <sd_mmc_check+0xbce>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	09 f0       	breq	.+2      	; 0x1126 <sd_mmc_check+0xb42>
    1124:	46 c0       	rjmp	.+140    	; 0x11b2 <sd_mmc_check+0xbce>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	88 0f       	add	r24, r24
    112c:	89 2f       	mov	r24, r25
    112e:	88 1f       	adc	r24, r24
    1130:	99 0b       	sbc	r25, r25
    1132:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    1136:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	09 f4       	brne	.+2      	; 0x1140 <sd_mmc_check+0xb5c>
    113e:	5d c0       	rjmp	.+186    	; 0x11fa <sd_mmc_check+0xc16>
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	84 87       	std	Z+12, r24	; 0x0c
    1144:	83 85       	ldd	r24, Z+11	; 0x0b
    1146:	98 2f       	mov	r25, r24
    1148:	94 70       	andi	r25, 0x04	; 4
    114a:	10 cb       	rjmp	.-2528   	; 0x76c <sd_mmc_check+0x188>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	32 e0       	ldi	r19, 0x02	; 2
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	60 e1       	ldi	r22, 0x10	; 16
    1156:	71 e1       	ldi	r23, 0x11	; 17
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	71 d6       	rcall	.+3298   	; 0x1e40 <sd_mmc_spi_send_cmd>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <sd_mmc_check+0xb80>
    1162:	b9 ca       	rjmp	.-2702   	; 0x6d6 <sd_mmc_check+0xf2>
    1164:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    1168:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    116c:	83 85       	ldd	r24, Z+11	; 0x0b
    116e:	80 fd       	sbrc	r24, 0
    1170:	03 cb       	rjmp	.-2554   	; 0x778 <sd_mmc_check+0x194>
    1172:	25 cb       	rjmp	.-2486   	; 0x7be <sd_mmc_check+0x1da>
    1174:	27 89       	ldd	r18, Z+23	; 0x17
    1176:	36 89       	ldd	r19, Z+22	; 0x16
    1178:	85 89       	ldd	r24, Z+21	; 0x15
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	dc 01       	movw	r26, r24
    1182:	99 27       	eor	r25, r25
    1184:	88 27       	eor	r24, r24
    1186:	93 2b       	or	r25, r19
    1188:	82 2b       	or	r24, r18
    118a:	af 73       	andi	r26, 0x3F	; 63
    118c:	bb 27       	eor	r27, r27
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	a1 1d       	adc	r26, r1
    1192:	b1 1d       	adc	r27, r1
    1194:	59 e0       	ldi	r21, 0x09	; 9
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	aa 1f       	adc	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	5a 95       	dec	r21
    11a0:	d1 f7       	brne	.-12     	; 0x1196 <sd_mmc_check+0xbb2>
    11a2:	84 83       	std	Z+4, r24	; 0x04
    11a4:	95 83       	std	Z+5, r25	; 0x05
    11a6:	a6 83       	std	Z+6, r26	; 0x06
    11a8:	b7 83       	std	Z+7, r27	; 0x07
    11aa:	85 cf       	rjmp	.-246    	; 0x10b6 <sd_mmc_check+0xad2>
    11ac:	82 ff       	sbrs	r24, 2
    11ae:	07 cb       	rjmp	.-2546   	; 0x7be <sd_mmc_check+0x1da>
    11b0:	72 cb       	rjmp	.-2332   	; 0x896 <sd_mmc_check+0x2b2>
    11b2:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    11b6:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    11ba:	80 e1       	ldi	r24, 0x10	; 16
    11bc:	84 87       	std	Z+12, r24	; 0x0c
    11be:	c2 cf       	rjmp	.-124    	; 0x1144 <sd_mmc_check+0xb60>
    11c0:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    11c4:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    11c8:	8a e1       	ldi	r24, 0x1A	; 26
    11ca:	84 87       	std	Z+12, r24	; 0x0c
    11cc:	bb cf       	rjmp	.-138    	; 0x1144 <sd_mmc_check+0xb60>
    11ce:	80 e3       	ldi	r24, 0x30	; 48
    11d0:	84 87       	std	Z+12, r24	; 0x0c
    11d2:	16 cd       	rjmp	.-1492   	; 0xc00 <sd_mmc_check+0x61c>
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	71 f4       	brne	.+28     	; 0x11f4 <sd_mmc_check+0xc10>
    11d8:	84 e1       	ldi	r24, 0x14	; 20
    11da:	84 87       	std	Z+12, r24	; 0x0c
    11dc:	11 cd       	rjmp	.-1502   	; 0xc00 <sd_mmc_check+0x61c>
    11de:	82 e2       	ldi	r24, 0x22	; 34
    11e0:	84 87       	std	Z+12, r24	; 0x0c
    11e2:	0e cd       	rjmp	.-1508   	; 0xc00 <sd_mmc_check+0x61c>
    11e4:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    11e8:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    11ec:	83 85       	ldd	r24, Z+11	; 0x0b
    11ee:	88 60       	ori	r24, 0x08	; 8
    11f0:	83 87       	std	Z+11, r24	; 0x0b
    11f2:	b3 cc       	rjmp	.-1690   	; 0xb5a <sd_mmc_check+0x576>
    11f4:	82 e1       	ldi	r24, 0x12	; 18
    11f6:	84 87       	std	Z+12, r24	; 0x0c
    11f8:	03 cd       	rjmp	.-1530   	; 0xc00 <sd_mmc_check+0x61c>
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	84 87       	std	Z+12, r24	; 0x0c
    11fe:	a2 cf       	rjmp	.-188    	; 0x1144 <sd_mmc_check+0xb60>
    1200:	04 e0       	ldi	r16, 0x04	; 4
    1202:	10 e0       	ldi	r17, 0x00	; 0
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	4c 01       	movw	r8, r24
    120a:	c4 01       	movw	r24, r8
    120c:	33 d6       	rcall	.+3174   	; 0x1e74 <sd_mmc_spi_read_word>
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <sd_mmc_check+0xc30>
    1212:	61 ca       	rjmp	.-2878   	; 0x6d6 <sd_mmc_check+0xf2>
    1214:	01 50       	subi	r16, 0x01	; 1
    1216:	11 09       	sbc	r17, r1
    1218:	c1 f7       	brne	.-16     	; 0x120a <sd_mmc_check+0xc26>
    121a:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    121e:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	ab 81       	ldd	r26, Y+3	; 0x03
    1228:	bc 81       	ldd	r27, Y+4	; 0x04
    122a:	b6 95       	lsr	r27
    122c:	a7 95       	ror	r26
    122e:	97 95       	ror	r25
    1230:	87 95       	ror	r24
    1232:	84 83       	std	Z+4, r24	; 0x04
    1234:	95 83       	std	Z+5, r25	; 0x05
    1236:	a6 83       	std	Z+6, r26	; 0x06
    1238:	b7 83       	std	Z+7, r27	; 0x07
    123a:	06 e3       	ldi	r16, 0x36	; 54
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	f5 cd       	rjmp	.-1046   	; 0xe2a <sd_mmc_check+0x846>

00001240 <sd_mmc_get_type>:
    1240:	0f 93       	push	r16
    1242:	88 23       	and	r24, r24
    1244:	19 f0       	breq	.+6      	; 0x124c <sd_mmc_get_type+0xc>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret
    124c:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    1250:	83 50       	subi	r24, 0x03	; 3
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	60 f1       	brcs	.+88     	; 0x12ae <sd_mmc_get_type+0x6e>
    1256:	01 e0       	ldi	r16, 0x01	; 1
    1258:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <sd_mmc_cards+0x1e>
    125c:	88 23       	and	r24, r24
    125e:	19 f1       	breq	.+70     	; 0x12a6 <sd_mmc_get_type+0x66>
    1260:	20 91 94 28 	lds	r18, 0x2894	; 0x802894 <sd_mmc_cards+0xd>
    1264:	40 91 87 28 	lds	r20, 0x2887	; 0x802887 <sd_mmc_cards>
    1268:	50 91 88 28 	lds	r21, 0x2888	; 0x802888 <sd_mmc_cards+0x1>
    126c:	60 91 89 28 	lds	r22, 0x2889	; 0x802889 <sd_mmc_cards+0x2>
    1270:	70 91 8a 28 	lds	r23, 0x288A	; 0x80288a <sd_mmc_cards+0x3>
    1274:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <sd_mmc_slot_sel>
    1278:	87 e8       	ldi	r24, 0x87	; 135
    127a:	98 e2       	ldi	r25, 0x28	; 40
    127c:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <sd_mmc_card>
    1280:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <sd_mmc_card+0x1>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	00 d3       	rcall	.+1536   	; 0x1888 <sd_mmc_spi_select_device>
    1288:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	d9 f2       	breq	.-74     	; 0x1246 <sd_mmc_get_type+0x6>
    1290:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    1294:	88 23       	and	r24, r24
    1296:	49 f0       	breq	.+18     	; 0x12aa <sd_mmc_get_type+0x6a>
    1298:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    129c:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    12a0:	83 85       	ldd	r24, Z+11	; 0x0b
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	db cf       	rjmp	.-74     	; 0x1260 <sd_mmc_get_type+0x20>
    12aa:	14 d3       	rcall	.+1576   	; 0x18d4 <sd_mmc_spi_deselect_device>
    12ac:	f5 cf       	rjmp	.-22     	; 0x1298 <sd_mmc_get_type+0x58>
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	9a e1       	ldi	r25, 0x1A	; 26
    12b8:	a6 e0       	ldi	r26, 0x06	; 6
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <sd_mmc_cards>
    12c0:	90 93 88 28 	sts	0x2888, r25	; 0x802888 <sd_mmc_cards+0x1>
    12c4:	a0 93 89 28 	sts	0x2889, r26	; 0x802889 <sd_mmc_cards+0x2>
    12c8:	b0 93 8a 28 	sts	0x288A, r27	; 0x80288a <sd_mmc_cards+0x3>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sd_mmc_cards+0xd>
    12d2:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <sd_mmc_cards+0x1e>
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5a e1       	ldi	r21, 0x1A	; 26
    12da:	66 e0       	ldi	r22, 0x06	; 6
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	c8 cf       	rjmp	.-112    	; 0x1274 <sd_mmc_get_type+0x34>

000012e4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    12e4:	0f 93       	push	r16
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
    12e6:	88 23       	and	r24, r24
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <sd_mmc_get_capacity+0x10>
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	cb 01       	movw	r24, r22
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    12f4:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    12f8:	83 50       	subi	r24, 0x03	; 3
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	78 f1       	brcs	.+94     	; 0x135c <sd_mmc_get_capacity+0x78>
    12fe:	01 e0       	ldi	r16, 0x01	; 1
    1300:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <sd_mmc_cards+0x1e>
    1304:	88 23       	and	r24, r24
    1306:	31 f1       	breq	.+76     	; 0x1354 <sd_mmc_get_capacity+0x70>
    1308:	20 91 94 28 	lds	r18, 0x2894	; 0x802894 <sd_mmc_cards+0xd>
    130c:	40 91 87 28 	lds	r20, 0x2887	; 0x802887 <sd_mmc_cards>
    1310:	50 91 88 28 	lds	r21, 0x2888	; 0x802888 <sd_mmc_cards+0x1>
    1314:	60 91 89 28 	lds	r22, 0x2889	; 0x802889 <sd_mmc_cards+0x2>
    1318:	70 91 8a 28 	lds	r23, 0x288A	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    131c:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <sd_mmc_slot_sel>
	sd_mmc_card = &sd_mmc_cards[slot];
    1320:	87 e8       	ldi	r24, 0x87	; 135
    1322:	98 e2       	ldi	r25, 0x28	; 40
    1324:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <sd_mmc_card>
    1328:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <sd_mmc_card+0x1>
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	ac d2       	rcall	.+1368   	; 0x1888 <sd_mmc_spi_select_device>
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1330:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	c9 f2       	breq	.-78     	; 0x12ea <sd_mmc_get_capacity+0x6>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1338:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    133c:	88 23       	and	r24, r24
    133e:	61 f0       	breq	.+24     	; 0x1358 <sd_mmc_get_capacity+0x74>
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
    1340:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    1344:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    1348:	64 81       	ldd	r22, Z+4	; 0x04
    134a:	75 81       	ldd	r23, Z+5	; 0x05
    134c:	86 81       	ldd	r24, Z+6	; 0x06
    134e:	97 81       	ldd	r25, Z+7	; 0x07
}
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret
    1354:	00 e0       	ldi	r16, 0x00	; 0
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
    1356:	d8 cf       	rjmp	.-80     	; 0x1308 <sd_mmc_get_capacity+0x24>
    1358:	bd d2       	rcall	.+1402   	; 0x18d4 <sd_mmc_spi_deselect_device>
    135a:	f2 cf       	rjmp	.-28     	; 0x1340 <sd_mmc_get_capacity+0x5c>
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	9a e1       	ldi	r25, 0x1A	; 26
    1366:	a6 e0       	ldi	r26, 0x06	; 6
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <sd_mmc_cards>
    136e:	90 93 88 28 	sts	0x2888, r25	; 0x802888 <sd_mmc_cards+0x1>
    1372:	a0 93 89 28 	sts	0x2889, r26	; 0x802889 <sd_mmc_cards+0x2>
    1376:	b0 93 8a 28 	sts	0x288A, r27	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].bus_width = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sd_mmc_cards+0xd>
		sd_mmc_cards[slot].high_speed = 0;
    1380:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <sd_mmc_cards+0x1e>
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5a e1       	ldi	r21, 0x1A	; 26
    1388:	66 e0       	ldi	r22, 0x06	; 6
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	00 e0       	ldi	r16, 0x00	; 0
    1390:	c5 cf       	rjmp	.-118    	; 0x131c <sd_mmc_get_capacity+0x38>

00001392 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	08 95       	ret

00001396 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	4a 01       	movw	r8, r20
    13b0:	5b 01       	movw	r10, r22
    13b2:	e9 01       	movw	r28, r18
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
    13b4:	88 23       	and	r24, r24
    13b6:	71 f0       	breq	.+28     	; 0x13d4 <sd_mmc_init_read_blocks+0x3e>
		return SD_MMC_ERR_SLOT;
    13b8:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	08 95       	ret
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    13d4:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    13d8:	83 50       	subi	r24, 0x03	; 3
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <sd_mmc_init_read_blocks+0x4a>
    13de:	70 c0       	rjmp	.+224    	; 0x14c0 <sd_mmc_init_read_blocks+0x12a>
    13e0:	01 e0       	ldi	r16, 0x01	; 1
    13e2:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <sd_mmc_cards+0x1e>
    13e6:	88 23       	and	r24, r24
    13e8:	09 f4       	brne	.+2      	; 0x13ec <sd_mmc_init_read_blocks+0x56>
    13ea:	3a c0       	rjmp	.+116    	; 0x1460 <sd_mmc_init_read_blocks+0xca>
    13ec:	20 91 94 28 	lds	r18, 0x2894	; 0x802894 <sd_mmc_cards+0xd>
    13f0:	40 91 87 28 	lds	r20, 0x2887	; 0x802887 <sd_mmc_cards>
    13f4:	50 91 88 28 	lds	r21, 0x2888	; 0x802888 <sd_mmc_cards+0x1>
    13f8:	60 91 89 28 	lds	r22, 0x2889	; 0x802889 <sd_mmc_cards+0x2>
    13fc:	70 91 8a 28 	lds	r23, 0x288A	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1400:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <sd_mmc_slot_sel>
	sd_mmc_card = &sd_mmc_cards[slot];
    1404:	87 e8       	ldi	r24, 0x87	; 135
    1406:	98 e2       	ldi	r25, 0x28	; 40
    1408:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <sd_mmc_card>
    140c:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <sd_mmc_card+0x1>
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	3a d2       	rcall	.+1140   	; 0x1888 <sd_mmc_spi_select_device>
{
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
	if (sd_mmc_err != SD_MMC_OK) {
    1414:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	09 f4       	brne	.+2      	; 0x141e <sd_mmc_init_read_blocks+0x88>
    141c:	71 c0       	rjmp	.+226    	; 0x1500 <sd_mmc_init_read_blocks+0x16a>
    141e:	31 e4       	ldi	r19, 0x41	; 65
    1420:	c3 2e       	mov	r12, r19
    1422:	3d e0       	ldi	r19, 0x0D	; 13
    1424:	d3 2e       	mov	r13, r19
    1426:	33 e0       	ldi	r19, 0x03	; 3
    1428:	e3 2e       	mov	r14, r19
    142a:	f1 2c       	mov	r15, r1
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
				return false;
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <sd_mmc_init_read_blocks+0xaa>
    142e:	19 d5       	rcall	.+2610   	; 0x1e62 <sd_mmc_spi_get_response>
    1430:	66 23       	and	r22, r22
    1432:	c1 f0       	breq	.+48     	; 0x1464 <sd_mmc_init_read_blocks+0xce>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	c8 1a       	sub	r12, r24
    1438:	d1 08       	sbc	r13, r1
    143a:	e1 08       	sbc	r14, r1
    143c:	f1 08       	sbc	r15, r1
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    143e:	51 f0       	breq	.+20     	; 0x1454 <sd_mmc_init_read_blocks+0xbe>
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	6d e0       	ldi	r22, 0x0D	; 13
    1448:	7b e1       	ldi	r23, 0x1B	; 27
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	f8 d4       	rcall	.+2544   	; 0x1e40 <sd_mmc_spi_send_cmd>
    1450:	81 11       	cpse	r24, r1
    1452:	ed cf       	rjmp	.-38     	; 0x142e <sd_mmc_init_read_blocks+0x98>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1454:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    1458:	88 23       	and	r24, r24
    145a:	71 f1       	breq	.+92     	; 0x14b8 <sd_mmc_init_read_blocks+0x122>
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
    145c:	85 e0       	ldi	r24, 0x05	; 5
    145e:	ad cf       	rjmp	.-166    	; 0x13ba <sd_mmc_init_read_blocks+0x24>
    1460:	00 e0       	ldi	r16, 0x00	; 0
    1462:	c4 cf       	rjmp	.-120    	; 0x13ec <sd_mmc_init_read_blocks+0x56>
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
	}

	if (nb_block > 1) {
    1464:	c2 30       	cpi	r28, 0x02	; 2
    1466:	d1 05       	cpc	r29, r1
    1468:	08 f4       	brcc	.+2      	; 0x146c <sd_mmc_init_read_blocks+0xd6>
    146a:	45 c0       	rjmp	.+138    	; 0x14f6 <sd_mmc_init_read_blocks+0x160>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    146c:	62 e1       	ldi	r22, 0x12	; 18
    146e:	71 e1       	ldi	r23, 0x11	; 17
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	90 e0       	ldi	r25, 0x00	; 0
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1474:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    1478:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    147c:	23 85       	ldd	r18, Z+11	; 0x0b
    147e:	23 fd       	sbrc	r18, 3
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <sd_mmc_init_read_blocks+0xfa>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1482:	29 e0       	ldi	r18, 0x09	; 9
    1484:	88 0c       	add	r8, r8
    1486:	99 1c       	adc	r9, r9
    1488:	aa 1c       	adc	r10, r10
    148a:	bb 1c       	adc	r11, r11
    148c:	2a 95       	dec	r18
    148e:	d1 f7       	brne	.-12     	; 0x1484 <sd_mmc_init_read_blocks+0xee>
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1490:	cc 24       	eor	r12, r12
    1492:	c3 94       	inc	r12
    1494:	7e 01       	movw	r14, r28
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	12 e0       	ldi	r17, 0x02	; 2
    149a:	a5 01       	movw	r20, r10
    149c:	94 01       	movw	r18, r8
    149e:	3f d2       	rcall	.+1150   	; 0x191e <sd_mmc_spi_adtc_start>
    14a0:	88 23       	and	r24, r24
    14a2:	c1 f2       	breq	.-80     	; 0x1454 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    14a4:	c0 93 80 28 	sts	0x2880, r28	; 0x802880 <__data_end>
    14a8:	d0 93 81 28 	sts	0x2881, r29	; 0x802881 <__data_end+0x1>
	sd_mmc_nb_block_to_tranfer = nb_block;
    14ac:	c0 93 82 28 	sts	0x2882, r28	; 0x802882 <sd_mmc_nb_block_to_tranfer>
    14b0:	d0 93 83 28 	sts	0x2883, r29	; 0x802883 <sd_mmc_nb_block_to_tranfer+0x1>
	return SD_MMC_OK;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
    14b6:	81 cf       	rjmp	.-254    	; 0x13ba <sd_mmc_init_read_blocks+0x24>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	0c d2       	rcall	.+1048   	; 0x18d4 <sd_mmc_spi_deselect_device>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	7d cf       	rjmp	.-262    	; 0x13ba <sd_mmc_init_read_blocks+0x24>
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    14c6:	80 e8       	ldi	r24, 0x80	; 128
    14c8:	9a e1       	ldi	r25, 0x1A	; 26
    14ca:	a6 e0       	ldi	r26, 0x06	; 6
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <sd_mmc_cards>
    14d2:	90 93 88 28 	sts	0x2888, r25	; 0x802888 <sd_mmc_cards+0x1>
    14d6:	a0 93 89 28 	sts	0x2889, r26	; 0x802889 <sd_mmc_cards+0x2>
    14da:	b0 93 8a 28 	sts	0x288A, r27	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].bus_width = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sd_mmc_cards+0xd>
		sd_mmc_cards[slot].high_speed = 0;
    14e4:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <sd_mmc_cards+0x1e>
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5a e1       	ldi	r21, 0x1A	; 26
    14ec:	66 e0       	ldi	r22, 0x06	; 6
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	00 e0       	ldi	r16, 0x00	; 0
    14f4:	85 cf       	rjmp	.-246    	; 0x1400 <sd_mmc_init_read_blocks+0x6a>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    14f6:	61 e1       	ldi	r22, 0x11	; 17
    14f8:	71 e1       	ldi	r23, 0x11	; 17
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	ba cf       	rjmp	.-140    	; 0x1474 <sd_mmc_init_read_blocks+0xde>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	5b cf       	rjmp	.-330    	; 0x13ba <sd_mmc_init_read_blocks+0x24>

00001504 <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	eb 01       	movw	r28, r22
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    150a:	48 d5       	rcall	.+2704   	; 0x1f9c <sd_mmc_spi_start_read_blocks>
    150c:	81 11       	cpse	r24, r1
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <sd_mmc_start_read_blocks+0x1c>
		sd_mmc_nb_block_remaining = 0;
    1510:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <__data_end>
    1514:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <__data_end+0x1>
		return SD_MMC_ERR_COMM;
    1518:	85 e0       	ldi	r24, 0x05	; 5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

	if (!driver_start_read_blocks(dest, nb_block)) {
		sd_mmc_nb_block_remaining = 0;
		return SD_MMC_ERR_COMM;
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1520:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <__data_end>
    1524:	90 91 81 28 	lds	r25, 0x2881	; 0x802881 <__data_end+0x1>
    1528:	8c 1b       	sub	r24, r28
    152a:	9d 0b       	sbc	r25, r29
    152c:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <__data_end>
    1530:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <__data_end+0x1>
	return SD_MMC_OK;
    1534:	80 e0       	ldi	r24, 0x00	; 0
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    153c:	cf 93       	push	r28
    153e:	c8 2f       	mov	r28, r24
	if (!driver_wait_end_of_read_blocks()) {
    1540:	c1 d5       	rcall	.+2946   	; 0x20c4 <sd_mmc_spi_wait_end_of_read_blocks>
    1542:	81 11       	cpse	r24, r1
    1544:	03 c0       	rjmp	.+6      	; 0x154c <sd_mmc_wait_end_of_read_blocks+0x10>
		return SD_MMC_ERR_COMM;
    1546:	85 e0       	ldi	r24, 0x05	; 5
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret
sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
    154c:	c1 11       	cpse	r28, r1
    154e:	1d c0       	rjmp	.+58     	; 0x158a <sd_mmc_wait_end_of_read_blocks+0x4e>
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
    1550:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <__data_end>
    1554:	90 91 81 28 	lds	r25, 0x2881	; 0x802881 <__data_end+0x1>
    1558:	89 2b       	or	r24, r25
    155a:	a1 f4       	brne	.+40     	; 0x1584 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    155c:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <sd_mmc_nb_block_to_tranfer>
    1560:	90 91 83 28 	lds	r25, 0x2883	; 0x802883 <sd_mmc_nb_block_to_tranfer+0x1>
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	51 f0       	breq	.+20     	; 0x157c <sd_mmc_wait_end_of_read_blocks+0x40>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	6c e0       	ldi	r22, 0x0C	; 12
    1570:	71 e3       	ldi	r23, 0x31	; 49
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	64 d4       	rcall	.+2248   	; 0x1e40 <sd_mmc_spi_send_cmd>
    1578:	88 23       	and	r24, r24
    157a:	81 f0       	breq	.+32     	; 0x159c <sd_mmc_wait_end_of_read_blocks+0x60>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    157c:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    1580:	88 23       	and	r24, r24
    1582:	41 f0       	breq	.+16     	; 0x1594 <sd_mmc_wait_end_of_read_blocks+0x58>

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
		return SD_MMC_OK;
    1584:	80 e0       	ldi	r24, 0x00	; 0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
    158a:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <__data_end>
    158e:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <__data_end+0x1>
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
    1592:	e4 cf       	rjmp	.-56     	; 0x155c <sd_mmc_wait_end_of_read_blocks+0x20>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	9e d1       	rcall	.+828    	; 0x18d4 <sd_mmc_spi_deselect_device>

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
		return SD_MMC_OK;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	f5 cf       	rjmp	.-22     	; 0x1586 <sd_mmc_wait_end_of_read_blocks+0x4a>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	6c e0       	ldi	r22, 0x0C	; 12
    15a4:	71 e3       	ldi	r23, 0x31	; 49
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	4a d4       	rcall	.+2196   	; 0x1e40 <sd_mmc_spi_send_cmd>
    15ac:	e7 cf       	rjmp	.-50     	; 0x157c <sd_mmc_wait_end_of_read_blocks+0x40>

000015ae <sd_mmc_init_write_blocks>:
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	4a 01       	movw	r8, r20
    15c6:	5b 01       	movw	r10, r22
    15c8:	e9 01       	movw	r28, r18
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
    15ca:	88 23       	and	r24, r24
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <sd_mmc_init_write_blocks+0x3a>
		return SD_MMC_ERR_SLOT;
    15ce:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	08 95       	ret
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    15e8:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    15ec:	83 50       	subi	r24, 0x03	; 3
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <sd_mmc_init_write_blocks+0x46>
    15f2:	58 c0       	rjmp	.+176    	; 0x16a4 <sd_mmc_init_write_blocks+0xf6>
    15f4:	01 e0       	ldi	r16, 0x01	; 1
    15f6:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <sd_mmc_cards+0x1e>
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <sd_mmc_init_write_blocks+0x52>
    15fe:	48 c0       	rjmp	.+144    	; 0x1690 <sd_mmc_init_write_blocks+0xe2>
    1600:	20 91 94 28 	lds	r18, 0x2894	; 0x802894 <sd_mmc_cards+0xd>
    1604:	40 91 87 28 	lds	r20, 0x2887	; 0x802887 <sd_mmc_cards>
    1608:	50 91 88 28 	lds	r21, 0x2888	; 0x802888 <sd_mmc_cards+0x1>
    160c:	60 91 89 28 	lds	r22, 0x2889	; 0x802889 <sd_mmc_cards+0x2>
    1610:	70 91 8a 28 	lds	r23, 0x288A	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1614:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <sd_mmc_slot_sel>
	sd_mmc_card = &sd_mmc_cards[slot];
    1618:	87 e8       	ldi	r24, 0x87	; 135
    161a:	98 e2       	ldi	r25, 0x28	; 40
    161c:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <sd_mmc_card>
    1620:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <sd_mmc_card+0x1>
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	30 d1       	rcall	.+608    	; 0x1888 <sd_mmc_spi_select_device>
{
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
	if (sd_mmc_err != SD_MMC_OK) {
    1628:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <sd_mmc_cards+0xa>
    162c:	82 30       	cpi	r24, 0x02	; 2
    162e:	09 f4       	brne	.+2      	; 0x1632 <sd_mmc_init_write_blocks+0x84>
    1630:	54 c0       	rjmp	.+168    	; 0x16da <sd_mmc_init_write_blocks+0x12c>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1632:	c2 30       	cpi	r28, 0x02	; 2
    1634:	d1 05       	cpc	r29, r1
    1636:	70 f1       	brcs	.+92     	; 0x1694 <sd_mmc_init_write_blocks+0xe6>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1638:	69 e1       	ldi	r22, 0x19	; 25
    163a:	71 e9       	ldi	r23, 0x91	; 145
    163c:	80 e1       	ldi	r24, 0x10	; 16
    163e:	90 e0       	ldi	r25, 0x00	; 0
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1640:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <sd_mmc_card>
    1644:	f0 91 85 28 	lds	r31, 0x2885	; 0x802885 <sd_mmc_card+0x1>
    1648:	23 85       	ldd	r18, Z+11	; 0x0b
    164a:	23 fd       	sbrc	r18, 3
    164c:	07 c0       	rjmp	.+14     	; 0x165c <sd_mmc_init_write_blocks+0xae>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    164e:	29 e0       	ldi	r18, 0x09	; 9
    1650:	88 0c       	add	r8, r8
    1652:	99 1c       	adc	r9, r9
    1654:	aa 1c       	adc	r10, r10
    1656:	bb 1c       	adc	r11, r11
    1658:	2a 95       	dec	r18
    165a:	d1 f7       	brne	.-12     	; 0x1650 <sd_mmc_init_write_blocks+0xa2>
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    165c:	cc 24       	eor	r12, r12
    165e:	c3 94       	inc	r12
    1660:	7e 01       	movw	r14, r28
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	12 e0       	ldi	r17, 0x02	; 2
    1666:	a5 01       	movw	r20, r10
    1668:	94 01       	movw	r18, r8
    166a:	59 d1       	rcall	.+690    	; 0x191e <sd_mmc_spi_adtc_start>
    166c:	81 11       	cpse	r24, r1
    166e:	06 c0       	rjmp	.+12     	; 0x167c <sd_mmc_init_write_blocks+0xce>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1670:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    1674:	88 23       	and	r24, r24
    1676:	99 f0       	breq	.+38     	; 0x169e <sd_mmc_init_write_blocks+0xf0>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
    1678:	85 e0       	ldi	r24, 0x05	; 5
    167a:	aa cf       	rjmp	.-172    	; 0x15d0 <sd_mmc_init_write_blocks+0x22>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    167c:	c0 93 80 28 	sts	0x2880, r28	; 0x802880 <__data_end>
    1680:	d0 93 81 28 	sts	0x2881, r29	; 0x802881 <__data_end+0x1>
	sd_mmc_nb_block_to_tranfer = nb_block;
    1684:	c0 93 82 28 	sts	0x2882, r28	; 0x802882 <sd_mmc_nb_block_to_tranfer>
    1688:	d0 93 83 28 	sts	0x2883, r29	; 0x802883 <sd_mmc_nb_block_to_tranfer+0x1>
	return SD_MMC_OK;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	a0 cf       	rjmp	.-192    	; 0x15d0 <sd_mmc_init_write_blocks+0x22>
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	b6 cf       	rjmp	.-148    	; 0x1600 <sd_mmc_init_write_blocks+0x52>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1694:	68 e1       	ldi	r22, 0x18	; 24
    1696:	71 e9       	ldi	r23, 0x91	; 145
    1698:	88 e0       	ldi	r24, 0x08	; 8
    169a:	90 e0       	ldi	r25, 0x00	; 0
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
    169c:	d1 cf       	rjmp	.-94     	; 0x1640 <sd_mmc_init_write_blocks+0x92>
    169e:	1a d1       	rcall	.+564    	; 0x18d4 <sd_mmc_spi_deselect_device>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
    16a0:	85 e0       	ldi	r24, 0x05	; 5
    16a2:	96 cf       	rjmp	.-212    	; 0x15d0 <sd_mmc_init_write_blocks+0x22>
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <sd_mmc_cards+0xa>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	9a e1       	ldi	r25, 0x1A	; 26
    16ae:	a6 e0       	ldi	r26, 0x06	; 6
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <sd_mmc_cards>
    16b6:	90 93 88 28 	sts	0x2888, r25	; 0x802888 <sd_mmc_cards+0x1>
    16ba:	a0 93 89 28 	sts	0x2889, r26	; 0x802889 <sd_mmc_cards+0x2>
    16be:	b0 93 8a 28 	sts	0x288A, r27	; 0x80288a <sd_mmc_cards+0x3>
		sd_mmc_cards[slot].bus_width = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sd_mmc_cards+0xd>
		sd_mmc_cards[slot].high_speed = 0;
    16c8:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <sd_mmc_cards+0x1e>
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5a e1       	ldi	r21, 0x1A	; 26
    16d0:	66 e0       	ldi	r22, 0x06	; 6
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	21 e0       	ldi	r18, 0x01	; 1
    16d6:	00 e0       	ldi	r16, 0x00	; 0
    16d8:	9d cf       	rjmp	.-198    	; 0x1614 <sd_mmc_init_write_blocks+0x66>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	79 cf       	rjmp	.-270    	; 0x15d0 <sd_mmc_init_write_blocks+0x22>

000016de <sd_mmc_start_write_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	eb 01       	movw	r28, r22
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    16e4:	f1 d4       	rcall	.+2530   	; 0x20c8 <sd_mmc_spi_start_write_blocks>
    16e6:	81 11       	cpse	r24, r1
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <sd_mmc_start_write_blocks+0x1c>
		sd_mmc_nb_block_remaining = 0;
    16ea:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <__data_end>
    16ee:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <__data_end+0x1>
		return SD_MMC_ERR_COMM;
    16f2:	85 e0       	ldi	r24, 0x05	; 5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
		sd_mmc_nb_block_remaining = 0;
		return SD_MMC_ERR_COMM;
	}
	sd_mmc_nb_block_remaining -= nb_block;
    16fa:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <__data_end>
    16fe:	90 91 81 28 	lds	r25, 0x2881	; 0x802881 <__data_end+0x1>
    1702:	8c 1b       	sub	r24, r28
    1704:	9d 0b       	sbc	r25, r29
    1706:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <__data_end>
    170a:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <__data_end+0x1>
	return SD_MMC_OK;
    170e:	80 e0       	ldi	r24, 0x00	; 0
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1716:	cf 93       	push	r28
    1718:	c8 2f       	mov	r28, r24
	if (!driver_wait_end_of_write_blocks()) {
    171a:	cd d5       	rcall	.+2970   	; 0x22b6 <sd_mmc_spi_wait_end_of_write_blocks>
    171c:	81 11       	cpse	r24, r1
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    1720:	c5 e0       	ldi	r28, 0x05	; 5
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1722:	8c 2f       	mov	r24, r28
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret
sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
    1728:	c1 11       	cpse	r28, r1
    172a:	0e c0       	rjmp	.+28     	; 0x1748 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
    172c:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <__data_end>
    1730:	90 91 81 28 	lds	r25, 0x2881	; 0x802881 <__data_end+0x1>
    1734:	89 2b       	or	r24, r25
    1736:	21 f4       	brne	.+8      	; 0x1740 <sd_mmc_wait_end_of_write_blocks+0x2a>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1738:	c0 91 86 28 	lds	r28, 0x2886	; 0x802886 <sd_mmc_slot_sel>
    173c:	cc 23       	and	r28, r28
    173e:	49 f0       	breq	.+18     	; 0x1752 <sd_mmc_wait_end_of_write_blocks+0x3c>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
    1740:	c0 e0       	ldi	r28, 0x00	; 0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1742:	8c 2f       	mov	r24, r28
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
    1748:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <__data_end>
    174c:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <__data_end+0x1>
    1750:	f3 cf       	rjmp	.-26     	; 0x1738 <sd_mmc_wait_end_of_write_blocks+0x22>
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	bf d0       	rcall	.+382    	; 0x18d4 <sd_mmc_spi_deselect_device>
    1756:	e5 cf       	rjmp	.-54     	; 0x1722 <sd_mmc_wait_end_of_write_blocks+0xc>

00001758 <sd_mmc_test_unit_ready_0>:
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sd_mmc_check>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 f0       	breq	.+36     	; 0x1786 <sd_mmc_test_unit_ready_0+0x2e>
    1762:	40 f0       	brcs	.+16     	; 0x1774 <sd_mmc_test_unit_ready_0+0x1c>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	21 f4       	brne	.+8      	; 0x1770 <sd_mmc_test_unit_ready_0+0x18>
    1768:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <sd_mmc_ejected>
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	08 95       	ret
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	08 95       	ret
    1774:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <sd_mmc_ejected>
    1778:	81 11       	cpse	r24, r1
    177a:	f8 cf       	rjmp	.-16     	; 0x176c <sd_mmc_test_unit_ready_0+0x14>
    177c:	61 dd       	rcall	.-1342   	; 0x1240 <sd_mmc_get_type>
    177e:	83 70       	andi	r24, 0x03	; 3
    1780:	a9 f3       	breq	.-22     	; 0x176c <sd_mmc_test_unit_ready_0+0x14>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	08 95       	ret

0000178a <sd_mmc_read_capacity_0>:
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	a8 dd       	rcall	.-1200   	; 0x12e4 <sd_mmc_get_capacity>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	a1 09       	sbc	r26, r1
    17a4:	b1 09       	sbc	r27, r1
    17a6:	88 83       	st	Y, r24
    17a8:	99 83       	std	Y+1, r25	; 0x01
    17aa:	aa 83       	std	Y+2, r26	; 0x02
    17ac:	bb 83       	std	Y+3, r27	; 0x03
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sd_mmc_check>
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	b1 f0       	breq	.+44     	; 0x17e4 <sd_mmc_read_capacity_0+0x5a>
    17b8:	60 f0       	brcs	.+24     	; 0x17d2 <sd_mmc_read_capacity_0+0x48>
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <sd_mmc_read_capacity_0+0x3c>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret
    17c6:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <sd_mmc_ejected>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret
    17d2:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <sd_mmc_ejected>
    17d6:	81 11       	cpse	r24, r1
    17d8:	f8 cf       	rjmp	.-16     	; 0x17ca <sd_mmc_read_capacity_0+0x40>
    17da:	32 dd       	rcall	.-1436   	; 0x1240 <sd_mmc_get_type>
    17dc:	83 70       	andi	r24, 0x03	; 3
    17de:	a9 f3       	breq	.-22     	; 0x17ca <sd_mmc_read_capacity_0+0x40>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	ee cf       	rjmp	.-36     	; 0x17c0 <sd_mmc_read_capacity_0+0x36>
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <sd_mmc_wr_protect_0>:
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	d1 cd       	rjmp	.-1118   	; 0x1392 <sd_mmc_is_write_protected>

000017f0 <sd_mmc_mem_2_ram_0>:
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ea 01       	movw	r28, r20
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ab 01       	movw	r20, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	ca dd       	rcall	.-1132   	; 0x1396 <sd_mmc_init_read_blocks>
    1802:	88 23       	and	r24, r24
    1804:	61 f0       	breq	.+24     	; 0x181e <sd_mmc_mem_2_ram_0+0x2e>
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	29 f0       	breq	.+10     	; 0x1814 <sd_mmc_mem_2_ram_0+0x24>
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	89 2f       	mov	r24, r25
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	89 2f       	mov	r24, r25
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	ce 01       	movw	r24, r28
    1824:	6f de       	rcall	.-802    	; 0x1504 <sd_mmc_start_read_blocks>
    1826:	81 11       	cpse	r24, r1
    1828:	f0 cf       	rjmp	.-32     	; 0x180a <sd_mmc_mem_2_ram_0+0x1a>
    182a:	88 de       	rcall	.-752    	; 0x153c <sd_mmc_wait_end_of_read_blocks>
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	81 11       	cpse	r24, r1
    1830:	ed cf       	rjmp	.-38     	; 0x180c <sd_mmc_mem_2_ram_0+0x1c>
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	eb cf       	rjmp	.-42     	; 0x180c <sd_mmc_mem_2_ram_0+0x1c>

00001836 <sd_mmc_ram_2_mem_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ea 01       	movw	r28, r20
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	ab 01       	movw	r20, r22
    1842:	bc 01       	movw	r22, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	b3 de       	rcall	.-666    	; 0x15ae <sd_mmc_init_write_blocks>
    1848:	88 23       	and	r24, r24
    184a:	61 f0       	breq	.+24     	; 0x1864 <sd_mmc_ram_2_mem_0+0x2e>
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	29 f0       	breq	.+10     	; 0x185a <sd_mmc_ram_2_mem_0+0x24>
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
    1850:	91 e0       	ldi	r25, 0x01	; 1
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
	return sd_mmc_ram_2_mem(0, addr, ram);
}
    1852:	89 2f       	mov	r24, r25
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    185a:	92 e0       	ldi	r25, 0x02	; 2
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
	return sd_mmc_ram_2_mem(0, addr, ram);
}
    185c:	89 2f       	mov	r24, r25
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	ce 01       	movw	r24, r28
    186a:	39 df       	rcall	.-398    	; 0x16de <sd_mmc_start_write_blocks>
    186c:	81 11       	cpse	r24, r1
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    186e:	f0 cf       	rjmp	.-32     	; 0x1850 <sd_mmc_ram_2_mem_0+0x1a>
    1870:	52 df       	rcall	.-348    	; 0x1716 <sd_mmc_wait_end_of_write_blocks>
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	81 11       	cpse	r24, r1
    1876:	ed cf       	rjmp	.-38     	; 0x1852 <sd_mmc_ram_2_mem_0+0x1c>
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	eb cf       	rjmp	.-42     	; 0x1852 <sd_mmc_ram_2_mem_0+0x1c>

0000187c <sd_mmc_spi_init>:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
		token = SPI_TOKEN_SINGLE_WRITE;
    187c:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    1880:	80 ea       	ldi	r24, 0xA0	; 160
    1882:	98 e0       	ldi	r25, 0x08	; 8
    1884:	0c 94 6a 72 	jmp	0xe4d4	; 0xe4d4 <usart_spi_init>

00001888 <sd_mmc_spi_select_device>:
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    189c:	c8 2f       	mov	r28, r24
    189e:	d0 e0       	ldi	r29, 0x00	; 0
    18a0:	ca 5f       	subi	r28, 0xFA	; 250
    18a2:	df 4d       	sbci	r29, 0xDF	; 223
    18a4:	c1 2c       	mov	r12, r1
    18a6:	d1 2c       	mov	r13, r1
    18a8:	76 01       	movw	r14, r12
    18aa:	8a 01       	movw	r16, r20
    18ac:	9b 01       	movw	r18, r22
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	be 01       	movw	r22, r28
    18b2:	80 ea       	ldi	r24, 0xA0	; 160
    18b4:	98 e0       	ldi	r25, 0x08	; 8
    18b6:	0e 94 7f 72 	call	0xe4fe	; 0xe4fe <usart_spi_setup_device>
    18ba:	be 01       	movw	r22, r28
    18bc:	80 ea       	ldi	r24, 0xA0	; 160
    18be:	98 e0       	ldi	r25, 0x08	; 8
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	0c 94 c8 72 	jmp	0xe590	; 0xe590 <usart_spi_select_device>

000018d4 <sd_mmc_spi_deselect_device>:
    18d4:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    18d8:	68 2f       	mov	r22, r24
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	6a 5f       	subi	r22, 0xFA	; 250
    18de:	7f 4d       	sbci	r23, 0xDF	; 223
    18e0:	80 ea       	ldi	r24, 0xA0	; 160
    18e2:	98 e0       	ldi	r25, 0x08	; 8
    18e4:	0c 94 de 72 	jmp	0xe5bc	; 0xe5bc <usart_spi_deselect_device>

000018e8 <sd_mmc_spi_send_clock>:
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	1f 92       	push	r1
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    18fc:	1a e0       	ldi	r17, 0x0A	; 10
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	be 01       	movw	r22, r28
    1904:	6f 5f       	subi	r22, 0xFF	; 255
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	80 ea       	ldi	r24, 0xA0	; 160
    190a:	98 e0       	ldi	r25, 0x08	; 8
    190c:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
    1910:	11 50       	subi	r17, 0x01	; 1
    1912:	a9 f7       	brne	.-22     	; 0x18fe <sd_mmc_spi_send_clock+0x16>
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	08 95       	ret

0000191e <sd_mmc_spi_adtc_start>:
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	29 97       	sbiw	r28, 0x09	; 9
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	4b 01       	movw	r8, r22
    1948:	5c 01       	movw	r10, r24
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	89 87       	std	Y+9, r24	; 0x09
    194e:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    1952:	98 2d       	mov	r25, r8
    1954:	9f 73       	andi	r25, 0x3F	; 63
    1956:	90 64       	ori	r25, 0x40	; 64
    1958:	99 83       	std	Y+1, r25	; 0x01
    195a:	5a 83       	std	Y+2, r21	; 0x02
    195c:	4b 83       	std	Y+3, r20	; 0x03
    195e:	3c 83       	std	Y+4, r19	; 0x04
    1960:	2d 83       	std	Y+5, r18	; 0x05
    1962:	99 0f       	add	r25, r25
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	28 2f       	mov	r18, r24
    1968:	29 27       	eor	r18, r25
    196a:	38 2f       	mov	r19, r24
    196c:	39 60       	ori	r19, 0x09	; 9
    196e:	27 fd       	sbrc	r18, 7
    1970:	ed c1       	rjmp	.+986    	; 0x1d4c <sd_mmc_spi_adtc_start+0x42e>
    1972:	99 0f       	add	r25, r25
    1974:	88 0f       	add	r24, r24
    1976:	38 2f       	mov	r19, r24
    1978:	39 27       	eor	r19, r25
    197a:	29 e0       	ldi	r18, 0x09	; 9
    197c:	28 27       	eor	r18, r24
    197e:	37 fd       	sbrc	r19, 7
    1980:	e3 c1       	rjmp	.+966    	; 0x1d48 <sd_mmc_spi_adtc_start+0x42a>
    1982:	99 0f       	add	r25, r25
    1984:	88 0f       	add	r24, r24
    1986:	38 2f       	mov	r19, r24
    1988:	39 27       	eor	r19, r25
    198a:	29 e0       	ldi	r18, 0x09	; 9
    198c:	28 27       	eor	r18, r24
    198e:	37 fd       	sbrc	r19, 7
    1990:	d9 c1       	rjmp	.+946    	; 0x1d44 <sd_mmc_spi_adtc_start+0x426>
    1992:	99 0f       	add	r25, r25
    1994:	88 0f       	add	r24, r24
    1996:	38 2f       	mov	r19, r24
    1998:	39 27       	eor	r19, r25
    199a:	29 e0       	ldi	r18, 0x09	; 9
    199c:	28 27       	eor	r18, r24
    199e:	37 fd       	sbrc	r19, 7
    19a0:	cf c1       	rjmp	.+926    	; 0x1d40 <sd_mmc_spi_adtc_start+0x422>
    19a2:	99 0f       	add	r25, r25
    19a4:	88 0f       	add	r24, r24
    19a6:	38 2f       	mov	r19, r24
    19a8:	39 27       	eor	r19, r25
    19aa:	29 e0       	ldi	r18, 0x09	; 9
    19ac:	28 27       	eor	r18, r24
    19ae:	37 fd       	sbrc	r19, 7
    19b0:	c5 c1       	rjmp	.+906    	; 0x1d3c <sd_mmc_spi_adtc_start+0x41e>
    19b2:	99 0f       	add	r25, r25
    19b4:	88 0f       	add	r24, r24
    19b6:	38 2f       	mov	r19, r24
    19b8:	39 27       	eor	r19, r25
    19ba:	29 e0       	ldi	r18, 0x09	; 9
    19bc:	28 27       	eor	r18, r24
    19be:	37 fd       	sbrc	r19, 7
    19c0:	bb c1       	rjmp	.+886    	; 0x1d38 <sd_mmc_spi_adtc_start+0x41a>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 0f       	add	r25, r25
    19c6:	98 27       	eor	r25, r24
    19c8:	29 e0       	ldi	r18, 0x09	; 9
    19ca:	28 27       	eor	r18, r24
    19cc:	97 fd       	sbrc	r25, 7
    19ce:	b2 c1       	rjmp	.+868    	; 0x1d34 <sd_mmc_spi_adtc_start+0x416>
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	88 0f       	add	r24, r24
    19d4:	38 2f       	mov	r19, r24
    19d6:	39 27       	eor	r19, r25
    19d8:	29 e0       	ldi	r18, 0x09	; 9
    19da:	28 27       	eor	r18, r24
    19dc:	37 fd       	sbrc	r19, 7
    19de:	a8 c1       	rjmp	.+848    	; 0x1d30 <sd_mmc_spi_adtc_start+0x412>
    19e0:	99 0f       	add	r25, r25
    19e2:	88 0f       	add	r24, r24
    19e4:	38 2f       	mov	r19, r24
    19e6:	39 27       	eor	r19, r25
    19e8:	29 e0       	ldi	r18, 0x09	; 9
    19ea:	28 27       	eor	r18, r24
    19ec:	37 fd       	sbrc	r19, 7
    19ee:	9e c1       	rjmp	.+828    	; 0x1d2c <sd_mmc_spi_adtc_start+0x40e>
    19f0:	99 0f       	add	r25, r25
    19f2:	88 0f       	add	r24, r24
    19f4:	38 2f       	mov	r19, r24
    19f6:	39 27       	eor	r19, r25
    19f8:	29 e0       	ldi	r18, 0x09	; 9
    19fa:	28 27       	eor	r18, r24
    19fc:	37 fd       	sbrc	r19, 7
    19fe:	94 c1       	rjmp	.+808    	; 0x1d28 <sd_mmc_spi_adtc_start+0x40a>
    1a00:	99 0f       	add	r25, r25
    1a02:	88 0f       	add	r24, r24
    1a04:	38 2f       	mov	r19, r24
    1a06:	39 27       	eor	r19, r25
    1a08:	29 e0       	ldi	r18, 0x09	; 9
    1a0a:	28 27       	eor	r18, r24
    1a0c:	37 fd       	sbrc	r19, 7
    1a0e:	8a c1       	rjmp	.+788    	; 0x1d24 <sd_mmc_spi_adtc_start+0x406>
    1a10:	99 0f       	add	r25, r25
    1a12:	88 0f       	add	r24, r24
    1a14:	38 2f       	mov	r19, r24
    1a16:	39 27       	eor	r19, r25
    1a18:	29 e0       	ldi	r18, 0x09	; 9
    1a1a:	28 27       	eor	r18, r24
    1a1c:	37 fd       	sbrc	r19, 7
    1a1e:	80 c1       	rjmp	.+768    	; 0x1d20 <sd_mmc_spi_adtc_start+0x402>
    1a20:	99 0f       	add	r25, r25
    1a22:	88 0f       	add	r24, r24
    1a24:	38 2f       	mov	r19, r24
    1a26:	39 27       	eor	r19, r25
    1a28:	29 e0       	ldi	r18, 0x09	; 9
    1a2a:	28 27       	eor	r18, r24
    1a2c:	37 fd       	sbrc	r19, 7
    1a2e:	76 c1       	rjmp	.+748    	; 0x1d1c <sd_mmc_spi_adtc_start+0x3fe>
    1a30:	99 0f       	add	r25, r25
    1a32:	88 0f       	add	r24, r24
    1a34:	38 2f       	mov	r19, r24
    1a36:	39 27       	eor	r19, r25
    1a38:	29 e0       	ldi	r18, 0x09	; 9
    1a3a:	28 27       	eor	r18, r24
    1a3c:	37 fd       	sbrc	r19, 7
    1a3e:	6c c1       	rjmp	.+728    	; 0x1d18 <sd_mmc_spi_adtc_start+0x3fa>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 0f       	add	r25, r25
    1a44:	98 27       	eor	r25, r24
    1a46:	29 e0       	ldi	r18, 0x09	; 9
    1a48:	28 27       	eor	r18, r24
    1a4a:	97 fd       	sbrc	r25, 7
    1a4c:	63 c1       	rjmp	.+710    	; 0x1d14 <sd_mmc_spi_adtc_start+0x3f6>
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	88 0f       	add	r24, r24
    1a52:	39 2f       	mov	r19, r25
    1a54:	38 27       	eor	r19, r24
    1a56:	29 e0       	ldi	r18, 0x09	; 9
    1a58:	28 27       	eor	r18, r24
    1a5a:	37 fd       	sbrc	r19, 7
    1a5c:	59 c1       	rjmp	.+690    	; 0x1d10 <sd_mmc_spi_adtc_start+0x3f2>
    1a5e:	99 0f       	add	r25, r25
    1a60:	88 0f       	add	r24, r24
    1a62:	39 2f       	mov	r19, r25
    1a64:	38 27       	eor	r19, r24
    1a66:	29 e0       	ldi	r18, 0x09	; 9
    1a68:	28 27       	eor	r18, r24
    1a6a:	37 fd       	sbrc	r19, 7
    1a6c:	4f c1       	rjmp	.+670    	; 0x1d0c <sd_mmc_spi_adtc_start+0x3ee>
    1a6e:	99 0f       	add	r25, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	39 2f       	mov	r19, r25
    1a74:	38 27       	eor	r19, r24
    1a76:	29 e0       	ldi	r18, 0x09	; 9
    1a78:	28 27       	eor	r18, r24
    1a7a:	37 fd       	sbrc	r19, 7
    1a7c:	45 c1       	rjmp	.+650    	; 0x1d08 <sd_mmc_spi_adtc_start+0x3ea>
    1a7e:	99 0f       	add	r25, r25
    1a80:	88 0f       	add	r24, r24
    1a82:	39 2f       	mov	r19, r25
    1a84:	38 27       	eor	r19, r24
    1a86:	29 e0       	ldi	r18, 0x09	; 9
    1a88:	28 27       	eor	r18, r24
    1a8a:	37 fd       	sbrc	r19, 7
    1a8c:	3b c1       	rjmp	.+630    	; 0x1d04 <sd_mmc_spi_adtc_start+0x3e6>
    1a8e:	99 0f       	add	r25, r25
    1a90:	88 0f       	add	r24, r24
    1a92:	39 2f       	mov	r19, r25
    1a94:	38 27       	eor	r19, r24
    1a96:	29 e0       	ldi	r18, 0x09	; 9
    1a98:	28 27       	eor	r18, r24
    1a9a:	37 fd       	sbrc	r19, 7
    1a9c:	31 c1       	rjmp	.+610    	; 0x1d00 <sd_mmc_spi_adtc_start+0x3e2>
    1a9e:	99 0f       	add	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	39 2f       	mov	r19, r25
    1aa4:	38 27       	eor	r19, r24
    1aa6:	29 e0       	ldi	r18, 0x09	; 9
    1aa8:	28 27       	eor	r18, r24
    1aaa:	37 fd       	sbrc	r19, 7
    1aac:	27 c1       	rjmp	.+590    	; 0x1cfc <sd_mmc_spi_adtc_start+0x3de>
    1aae:	99 0f       	add	r25, r25
    1ab0:	88 0f       	add	r24, r24
    1ab2:	39 2f       	mov	r19, r25
    1ab4:	38 27       	eor	r19, r24
    1ab6:	29 e0       	ldi	r18, 0x09	; 9
    1ab8:	28 27       	eor	r18, r24
    1aba:	37 fd       	sbrc	r19, 7
    1abc:	1d c1       	rjmp	.+570    	; 0x1cf8 <sd_mmc_spi_adtc_start+0x3da>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 0f       	add	r25, r25
    1ac2:	98 27       	eor	r25, r24
    1ac4:	29 e0       	ldi	r18, 0x09	; 9
    1ac6:	28 27       	eor	r18, r24
    1ac8:	97 fd       	sbrc	r25, 7
    1aca:	14 c1       	rjmp	.+552    	; 0x1cf4 <sd_mmc_spi_adtc_start+0x3d6>
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	88 0f       	add	r24, r24
    1ad0:	39 2f       	mov	r19, r25
    1ad2:	38 27       	eor	r19, r24
    1ad4:	29 e0       	ldi	r18, 0x09	; 9
    1ad6:	28 27       	eor	r18, r24
    1ad8:	37 fd       	sbrc	r19, 7
    1ada:	0a c1       	rjmp	.+532    	; 0x1cf0 <sd_mmc_spi_adtc_start+0x3d2>
    1adc:	99 0f       	add	r25, r25
    1ade:	88 0f       	add	r24, r24
    1ae0:	39 2f       	mov	r19, r25
    1ae2:	38 27       	eor	r19, r24
    1ae4:	29 e0       	ldi	r18, 0x09	; 9
    1ae6:	28 27       	eor	r18, r24
    1ae8:	37 fd       	sbrc	r19, 7
    1aea:	00 c1       	rjmp	.+512    	; 0x1cec <sd_mmc_spi_adtc_start+0x3ce>
    1aec:	99 0f       	add	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	39 2f       	mov	r19, r25
    1af2:	38 27       	eor	r19, r24
    1af4:	29 e0       	ldi	r18, 0x09	; 9
    1af6:	28 27       	eor	r18, r24
    1af8:	37 fd       	sbrc	r19, 7
    1afa:	f6 c0       	rjmp	.+492    	; 0x1ce8 <sd_mmc_spi_adtc_start+0x3ca>
    1afc:	99 0f       	add	r25, r25
    1afe:	88 0f       	add	r24, r24
    1b00:	39 2f       	mov	r19, r25
    1b02:	38 27       	eor	r19, r24
    1b04:	29 e0       	ldi	r18, 0x09	; 9
    1b06:	28 27       	eor	r18, r24
    1b08:	37 fd       	sbrc	r19, 7
    1b0a:	ec c0       	rjmp	.+472    	; 0x1ce4 <sd_mmc_spi_adtc_start+0x3c6>
    1b0c:	99 0f       	add	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	39 2f       	mov	r19, r25
    1b12:	38 27       	eor	r19, r24
    1b14:	29 e0       	ldi	r18, 0x09	; 9
    1b16:	28 27       	eor	r18, r24
    1b18:	37 fd       	sbrc	r19, 7
    1b1a:	e2 c0       	rjmp	.+452    	; 0x1ce0 <sd_mmc_spi_adtc_start+0x3c2>
    1b1c:	99 0f       	add	r25, r25
    1b1e:	88 0f       	add	r24, r24
    1b20:	39 2f       	mov	r19, r25
    1b22:	38 27       	eor	r19, r24
    1b24:	29 e0       	ldi	r18, 0x09	; 9
    1b26:	28 27       	eor	r18, r24
    1b28:	37 fd       	sbrc	r19, 7
    1b2a:	d8 c0       	rjmp	.+432    	; 0x1cdc <sd_mmc_spi_adtc_start+0x3be>
    1b2c:	99 0f       	add	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	39 2f       	mov	r19, r25
    1b32:	38 27       	eor	r19, r24
    1b34:	29 e0       	ldi	r18, 0x09	; 9
    1b36:	28 27       	eor	r18, r24
    1b38:	37 fd       	sbrc	r19, 7
    1b3a:	ce c0       	rjmp	.+412    	; 0x1cd8 <sd_mmc_spi_adtc_start+0x3ba>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 0f       	add	r25, r25
    1b40:	98 27       	eor	r25, r24
    1b42:	29 e0       	ldi	r18, 0x09	; 9
    1b44:	28 27       	eor	r18, r24
    1b46:	97 fd       	sbrc	r25, 7
    1b48:	c5 c0       	rjmp	.+394    	; 0x1cd4 <sd_mmc_spi_adtc_start+0x3b6>
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	88 0f       	add	r24, r24
    1b4e:	39 2f       	mov	r19, r25
    1b50:	38 27       	eor	r19, r24
    1b52:	29 e0       	ldi	r18, 0x09	; 9
    1b54:	28 27       	eor	r18, r24
    1b56:	37 fd       	sbrc	r19, 7
    1b58:	bb c0       	rjmp	.+374    	; 0x1cd0 <sd_mmc_spi_adtc_start+0x3b2>
    1b5a:	99 0f       	add	r25, r25
    1b5c:	88 0f       	add	r24, r24
    1b5e:	39 2f       	mov	r19, r25
    1b60:	38 27       	eor	r19, r24
    1b62:	29 e0       	ldi	r18, 0x09	; 9
    1b64:	28 27       	eor	r18, r24
    1b66:	37 fd       	sbrc	r19, 7
    1b68:	b1 c0       	rjmp	.+354    	; 0x1ccc <sd_mmc_spi_adtc_start+0x3ae>
    1b6a:	99 0f       	add	r25, r25
    1b6c:	88 0f       	add	r24, r24
    1b6e:	39 2f       	mov	r19, r25
    1b70:	38 27       	eor	r19, r24
    1b72:	29 e0       	ldi	r18, 0x09	; 9
    1b74:	28 27       	eor	r18, r24
    1b76:	37 fd       	sbrc	r19, 7
    1b78:	a7 c0       	rjmp	.+334    	; 0x1cc8 <sd_mmc_spi_adtc_start+0x3aa>
    1b7a:	99 0f       	add	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	39 2f       	mov	r19, r25
    1b80:	38 27       	eor	r19, r24
    1b82:	29 e0       	ldi	r18, 0x09	; 9
    1b84:	28 27       	eor	r18, r24
    1b86:	37 fd       	sbrc	r19, 7
    1b88:	9d c0       	rjmp	.+314    	; 0x1cc4 <sd_mmc_spi_adtc_start+0x3a6>
    1b8a:	99 0f       	add	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	39 2f       	mov	r19, r25
    1b90:	38 27       	eor	r19, r24
    1b92:	29 e0       	ldi	r18, 0x09	; 9
    1b94:	28 27       	eor	r18, r24
    1b96:	37 fd       	sbrc	r19, 7
    1b98:	93 c0       	rjmp	.+294    	; 0x1cc0 <sd_mmc_spi_adtc_start+0x3a2>
    1b9a:	99 0f       	add	r25, r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	39 2f       	mov	r19, r25
    1ba0:	38 27       	eor	r19, r24
    1ba2:	29 e0       	ldi	r18, 0x09	; 9
    1ba4:	28 27       	eor	r18, r24
    1ba6:	37 fd       	sbrc	r19, 7
    1ba8:	89 c0       	rjmp	.+274    	; 0x1cbc <sd_mmc_spi_adtc_start+0x39e>
    1baa:	99 0f       	add	r25, r25
    1bac:	88 0f       	add	r24, r24
    1bae:	39 2f       	mov	r19, r25
    1bb0:	38 27       	eor	r19, r24
    1bb2:	29 e0       	ldi	r18, 0x09	; 9
    1bb4:	28 27       	eor	r18, r24
    1bb6:	37 fd       	sbrc	r19, 7
    1bb8:	7f c0       	rjmp	.+254    	; 0x1cb8 <sd_mmc_spi_adtc_start+0x39a>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 0f       	add	r25, r25
    1bbe:	98 27       	eor	r25, r24
    1bc0:	29 e0       	ldi	r18, 0x09	; 9
    1bc2:	28 27       	eor	r18, r24
    1bc4:	97 fd       	sbrc	r25, 7
    1bc6:	76 c0       	rjmp	.+236    	; 0x1cb4 <sd_mmc_spi_adtc_start+0x396>
    1bc8:	88 0f       	add	r24, r24
    1bca:	81 60       	ori	r24, 0x01	; 1
    1bcc:	8e 83       	std	Y+6, r24	; 0x06
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	be 01       	movw	r22, r28
    1bd4:	67 5f       	subi	r22, 0xF7	; 247
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	80 ea       	ldi	r24, 0xA0	; 160
    1bda:	98 e0       	ldi	r25, 0x08	; 8
    1bdc:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
    1be0:	46 e0       	ldi	r20, 0x06	; 6
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	be 01       	movw	r22, r28
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	80 ea       	ldi	r24, 0xA0	; 160
    1bec:	98 e0       	ldi	r25, 0x08	; 8
    1bee:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	88 87       	std	Y+8, r24	; 0x08
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	be 01       	movw	r22, r28
    1bfc:	68 5f       	subi	r22, 0xF8	; 248
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	80 ea       	ldi	r24, 0xA0	; 160
    1c02:	98 e0       	ldi	r25, 0x08	; 8
    1c04:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1c08:	97 e0       	ldi	r25, 0x07	; 7
    1c0a:	d9 2e       	mov	r13, r25
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	be 01       	movw	r22, r28
    1c12:	68 5f       	subi	r22, 0xF8	; 248
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	80 ea       	ldi	r24, 0xA0	; 160
    1c18:	98 e0       	ldi	r25, 0x08	; 8
    1c1a:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1c1e:	88 85       	ldd	r24, Y+8	; 0x08
    1c20:	87 ff       	sbrs	r24, 7
    1c22:	1a c0       	rjmp	.+52     	; 0x1c58 <sd_mmc_spi_adtc_start+0x33a>
    1c24:	da 94       	dec	r13
    1c26:	d1 10       	cpse	r13, r1
    1c28:	f1 cf       	rjmp	.-30     	; 0x1c0c <sd_mmc_spi_adtc_start+0x2ee>
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	29 96       	adiw	r28, 0x09	; 9
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	bf 90       	pop	r11
    1c48:	af 90       	pop	r10
    1c4a:	9f 90       	pop	r9
    1c4c:	8f 90       	pop	r8
    1c4e:	7f 90       	pop	r7
    1c50:	6f 90       	pop	r6
    1c52:	5f 90       	pop	r5
    1c54:	4f 90       	pop	r4
    1c56:	08 95       	ret
    1c58:	48 2f       	mov	r20, r24
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	40 93 b0 28 	sts	0x28B0, r20	; 0x8028b0 <sd_mmc_spi_response_32>
    1c64:	50 93 b1 28 	sts	0x28B1, r21	; 0x8028b1 <sd_mmc_spi_response_32+0x1>
    1c68:	60 93 b2 28 	sts	0x28B2, r22	; 0x8028b2 <sd_mmc_spi_response_32+0x2>
    1c6c:	70 93 b3 28 	sts	0x28B3, r23	; 0x8028b3 <sd_mmc_spi_response_32+0x3>
    1c70:	83 fd       	sbrc	r24, 3
    1c72:	6e c0       	rjmp	.+220    	; 0x1d50 <sd_mmc_spi_adtc_start+0x432>
    1c74:	82 fd       	sbrc	r24, 2
    1c76:	71 c0       	rjmp	.+226    	; 0x1d5a <sd_mmc_spi_adtc_start+0x43c>
    1c78:	4e 7f       	andi	r20, 0xFE	; 254
    1c7a:	45 2b       	or	r20, r21
    1c7c:	46 2b       	or	r20, r22
    1c7e:	47 2b       	or	r20, r23
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <sd_mmc_spi_adtc_start+0x366>
    1c82:	d4 c0       	rjmp	.+424    	; 0x1e2c <sd_mmc_spi_adtc_start+0x50e>
    1c84:	95 fc       	sbrc	r9, 5
    1c86:	6e c0       	rjmp	.+220    	; 0x1d64 <sd_mmc_spi_adtc_start+0x446>
    1c88:	91 fc       	sbrc	r9, 1
    1c8a:	bf c0       	rjmp	.+382    	; 0x1e0a <sd_mmc_spi_adtc_start+0x4ec>
    1c8c:	92 fc       	sbrc	r9, 2
    1c8e:	a2 c0       	rjmp	.+324    	; 0x1dd4 <sd_mmc_spi_adtc_start+0x4b6>
    1c90:	00 93 aa 28 	sts	0x28AA, r16	; 0x8028aa <sd_mmc_spi_block_size>
    1c94:	10 93 ab 28 	sts	0x28AB, r17	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    1c98:	e0 92 a8 28 	sts	0x28A8, r14	; 0x8028a8 <sd_mmc_spi_nb_block>
    1c9c:	f0 92 a9 28 	sts	0x28A9, r15	; 0x8028a9 <sd_mmc_spi_nb_block+0x1>
    1ca0:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <sd_mmc_spi_transfert_pos>
    1ca4:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    1ca8:	10 92 ae 28 	sts	0x28AE, r1	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    1cac:	10 92 af 28 	sts	0x28AF, r1	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	bf cf       	rjmp	.-130    	; 0x1c32 <sd_mmc_spi_adtc_start+0x314>
    1cb4:	82 2f       	mov	r24, r18
    1cb6:	88 cf       	rjmp	.-240    	; 0x1bc8 <sd_mmc_spi_adtc_start+0x2aa>
    1cb8:	82 2f       	mov	r24, r18
    1cba:	7f cf       	rjmp	.-258    	; 0x1bba <sd_mmc_spi_adtc_start+0x29c>
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	75 cf       	rjmp	.-278    	; 0x1baa <sd_mmc_spi_adtc_start+0x28c>
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	6b cf       	rjmp	.-298    	; 0x1b9a <sd_mmc_spi_adtc_start+0x27c>
    1cc4:	82 2f       	mov	r24, r18
    1cc6:	61 cf       	rjmp	.-318    	; 0x1b8a <sd_mmc_spi_adtc_start+0x26c>
    1cc8:	82 2f       	mov	r24, r18
    1cca:	57 cf       	rjmp	.-338    	; 0x1b7a <sd_mmc_spi_adtc_start+0x25c>
    1ccc:	82 2f       	mov	r24, r18
    1cce:	4d cf       	rjmp	.-358    	; 0x1b6a <sd_mmc_spi_adtc_start+0x24c>
    1cd0:	82 2f       	mov	r24, r18
    1cd2:	43 cf       	rjmp	.-378    	; 0x1b5a <sd_mmc_spi_adtc_start+0x23c>
    1cd4:	82 2f       	mov	r24, r18
    1cd6:	39 cf       	rjmp	.-398    	; 0x1b4a <sd_mmc_spi_adtc_start+0x22c>
    1cd8:	82 2f       	mov	r24, r18
    1cda:	30 cf       	rjmp	.-416    	; 0x1b3c <sd_mmc_spi_adtc_start+0x21e>
    1cdc:	82 2f       	mov	r24, r18
    1cde:	26 cf       	rjmp	.-436    	; 0x1b2c <sd_mmc_spi_adtc_start+0x20e>
    1ce0:	82 2f       	mov	r24, r18
    1ce2:	1c cf       	rjmp	.-456    	; 0x1b1c <sd_mmc_spi_adtc_start+0x1fe>
    1ce4:	82 2f       	mov	r24, r18
    1ce6:	12 cf       	rjmp	.-476    	; 0x1b0c <sd_mmc_spi_adtc_start+0x1ee>
    1ce8:	82 2f       	mov	r24, r18
    1cea:	08 cf       	rjmp	.-496    	; 0x1afc <sd_mmc_spi_adtc_start+0x1de>
    1cec:	82 2f       	mov	r24, r18
    1cee:	fe ce       	rjmp	.-516    	; 0x1aec <sd_mmc_spi_adtc_start+0x1ce>
    1cf0:	82 2f       	mov	r24, r18
    1cf2:	f4 ce       	rjmp	.-536    	; 0x1adc <sd_mmc_spi_adtc_start+0x1be>
    1cf4:	82 2f       	mov	r24, r18
    1cf6:	ea ce       	rjmp	.-556    	; 0x1acc <sd_mmc_spi_adtc_start+0x1ae>
    1cf8:	82 2f       	mov	r24, r18
    1cfa:	e1 ce       	rjmp	.-574    	; 0x1abe <sd_mmc_spi_adtc_start+0x1a0>
    1cfc:	82 2f       	mov	r24, r18
    1cfe:	d7 ce       	rjmp	.-594    	; 0x1aae <sd_mmc_spi_adtc_start+0x190>
    1d00:	82 2f       	mov	r24, r18
    1d02:	cd ce       	rjmp	.-614    	; 0x1a9e <sd_mmc_spi_adtc_start+0x180>
    1d04:	82 2f       	mov	r24, r18
    1d06:	c3 ce       	rjmp	.-634    	; 0x1a8e <sd_mmc_spi_adtc_start+0x170>
    1d08:	82 2f       	mov	r24, r18
    1d0a:	b9 ce       	rjmp	.-654    	; 0x1a7e <sd_mmc_spi_adtc_start+0x160>
    1d0c:	82 2f       	mov	r24, r18
    1d0e:	af ce       	rjmp	.-674    	; 0x1a6e <sd_mmc_spi_adtc_start+0x150>
    1d10:	82 2f       	mov	r24, r18
    1d12:	a5 ce       	rjmp	.-694    	; 0x1a5e <sd_mmc_spi_adtc_start+0x140>
    1d14:	82 2f       	mov	r24, r18
    1d16:	9b ce       	rjmp	.-714    	; 0x1a4e <sd_mmc_spi_adtc_start+0x130>
    1d18:	82 2f       	mov	r24, r18
    1d1a:	92 ce       	rjmp	.-732    	; 0x1a40 <sd_mmc_spi_adtc_start+0x122>
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	88 ce       	rjmp	.-752    	; 0x1a30 <sd_mmc_spi_adtc_start+0x112>
    1d20:	82 2f       	mov	r24, r18
    1d22:	7e ce       	rjmp	.-772    	; 0x1a20 <sd_mmc_spi_adtc_start+0x102>
    1d24:	82 2f       	mov	r24, r18
    1d26:	74 ce       	rjmp	.-792    	; 0x1a10 <sd_mmc_spi_adtc_start+0xf2>
    1d28:	82 2f       	mov	r24, r18
    1d2a:	6a ce       	rjmp	.-812    	; 0x1a00 <sd_mmc_spi_adtc_start+0xe2>
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	60 ce       	rjmp	.-832    	; 0x19f0 <sd_mmc_spi_adtc_start+0xd2>
    1d30:	82 2f       	mov	r24, r18
    1d32:	56 ce       	rjmp	.-852    	; 0x19e0 <sd_mmc_spi_adtc_start+0xc2>
    1d34:	82 2f       	mov	r24, r18
    1d36:	4c ce       	rjmp	.-872    	; 0x19d0 <sd_mmc_spi_adtc_start+0xb2>
    1d38:	82 2f       	mov	r24, r18
    1d3a:	43 ce       	rjmp	.-890    	; 0x19c2 <sd_mmc_spi_adtc_start+0xa4>
    1d3c:	82 2f       	mov	r24, r18
    1d3e:	39 ce       	rjmp	.-910    	; 0x19b2 <sd_mmc_spi_adtc_start+0x94>
    1d40:	82 2f       	mov	r24, r18
    1d42:	2f ce       	rjmp	.-930    	; 0x19a2 <sd_mmc_spi_adtc_start+0x84>
    1d44:	82 2f       	mov	r24, r18
    1d46:	25 ce       	rjmp	.-950    	; 0x1992 <sd_mmc_spi_adtc_start+0x74>
    1d48:	82 2f       	mov	r24, r18
    1d4a:	1b ce       	rjmp	.-970    	; 0x1982 <sd_mmc_spi_adtc_start+0x64>
    1d4c:	83 2f       	mov	r24, r19
    1d4e:	11 ce       	rjmp	.-990    	; 0x1972 <sd_mmc_spi_adtc_start+0x54>
    1d50:	86 e0       	ldi	r24, 0x06	; 6
    1d52:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	6c cf       	rjmp	.-296    	; 0x1c32 <sd_mmc_spi_adtc_start+0x314>
    1d5a:	89 e0       	ldi	r24, 0x09	; 9
    1d5c:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	67 cf       	rjmp	.-306    	; 0x1c32 <sd_mmc_spi_adtc_start+0x314>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	8f 83       	std	Y+7, r24	; 0x07
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	be 01       	movw	r22, r28
    1d6e:	69 5f       	subi	r22, 0xF9	; 249
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	80 ea       	ldi	r24, 0xA0	; 160
    1d74:	98 e0       	ldi	r25, 0x08	; 8
    1d76:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	be 01       	movw	r22, r28
    1d80:	69 5f       	subi	r22, 0xF9	; 249
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	80 ea       	ldi	r24, 0xA0	; 160
    1d86:	98 e0       	ldi	r25, 0x08	; 8
    1d88:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	be 01       	movw	r22, r28
    1d92:	69 5f       	subi	r22, 0xF9	; 249
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	80 ea       	ldi	r24, 0xA0	; 160
    1d98:	98 e0       	ldi	r25, 0x08	; 8
    1d9a:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1d9e:	80 e4       	ldi	r24, 0x40	; 64
    1da0:	48 2e       	mov	r4, r24
    1da2:	8d e0       	ldi	r24, 0x0D	; 13
    1da4:	58 2e       	mov	r5, r24
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	68 2e       	mov	r6, r24
    1daa:	71 2c       	mov	r7, r1
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <sd_mmc_spi_adtc_start+0x4ae>
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	be 01       	movw	r22, r28
    1db4:	69 5f       	subi	r22, 0xF9	; 249
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	80 ea       	ldi	r24, 0xA0	; 160
    1dba:	98 e0       	ldi	r25, 0x08	; 8
    1dbc:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	48 1a       	sub	r4, r24
    1dc4:	51 08       	sbc	r5, r1
    1dc6:	61 08       	sbc	r6, r1
    1dc8:	71 08       	sbc	r7, r1
    1dca:	a9 f1       	breq	.+106    	; 0x1e36 <sd_mmc_spi_adtc_start+0x518>
    1dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dce:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd0:	71 f7       	brne	.-36     	; 0x1dae <sd_mmc_spi_adtc_start+0x490>
    1dd2:	5a cf       	rjmp	.-332    	; 0x1c88 <sd_mmc_spi_adtc_start+0x36a>
    1dd4:	44 e0       	ldi	r20, 0x04	; 4
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	60 eb       	ldi	r22, 0xB0	; 176
    1dda:	78 e2       	ldi	r23, 0x28	; 40
    1ddc:	80 ea       	ldi	r24, 0xA0	; 160
    1dde:	98 e0       	ldi	r25, 0x08	; 8
    1de0:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1de4:	60 91 b0 28 	lds	r22, 0x28B0	; 0x8028b0 <sd_mmc_spi_response_32>
    1de8:	70 91 b1 28 	lds	r23, 0x28B1	; 0x8028b1 <sd_mmc_spi_response_32+0x1>
    1dec:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <sd_mmc_spi_response_32+0x2>
    1df0:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <sd_mmc_spi_response_32+0x3>
    1df4:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <__bswapsi2>
    1df8:	60 93 b0 28 	sts	0x28B0, r22	; 0x8028b0 <sd_mmc_spi_response_32>
    1dfc:	70 93 b1 28 	sts	0x28B1, r23	; 0x8028b1 <sd_mmc_spi_response_32+0x1>
    1e00:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <sd_mmc_spi_response_32+0x2>
    1e04:	90 93 b3 28 	sts	0x28B3, r25	; 0x8028b3 <sd_mmc_spi_response_32+0x3>
    1e08:	43 cf       	rjmp	.-378    	; 0x1c90 <sd_mmc_spi_adtc_start+0x372>
    1e0a:	10 92 b0 28 	sts	0x28B0, r1	; 0x8028b0 <sd_mmc_spi_response_32>
    1e0e:	10 92 b1 28 	sts	0x28B1, r1	; 0x8028b1 <sd_mmc_spi_response_32+0x1>
    1e12:	10 92 b2 28 	sts	0x28B2, r1	; 0x8028b2 <sd_mmc_spi_response_32+0x2>
    1e16:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <sd_mmc_spi_response_32+0x3>
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	60 eb       	ldi	r22, 0xB0	; 176
    1e20:	78 e2       	ldi	r23, 0x28	; 40
    1e22:	80 ea       	ldi	r24, 0xA0	; 160
    1e24:	98 e0       	ldi	r25, 0x08	; 8
    1e26:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1e2a:	30 cf       	rjmp	.-416    	; 0x1c8c <sd_mmc_spi_adtc_start+0x36e>
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	fe ce       	rjmp	.-516    	; 0x1c32 <sd_mmc_spi_adtc_start+0x314>
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	f9 ce       	rjmp	.-526    	; 0x1c32 <sd_mmc_spi_adtc_start+0x314>

00001e40 <sd_mmc_spi_send_cmd>:
    1e40:	cf 92       	push	r12
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	c1 2c       	mov	r12, r1
    1e4c:	e1 2c       	mov	r14, r1
    1e4e:	f1 2c       	mov	r15, r1
    1e50:	00 e0       	ldi	r16, 0x00	; 0
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	64 dd       	rcall	.-1336   	; 0x191e <sd_mmc_spi_adtc_start>
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	cf 90       	pop	r12
    1e60:	08 95       	ret

00001e62 <sd_mmc_spi_get_response>:
    1e62:	60 91 b0 28 	lds	r22, 0x28B0	; 0x8028b0 <sd_mmc_spi_response_32>
    1e66:	70 91 b1 28 	lds	r23, 0x28B1	; 0x8028b1 <sd_mmc_spi_response_32+0x1>
    1e6a:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <sd_mmc_spi_response_32+0x2>
    1e6e:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <sd_mmc_spi_response_32+0x3>
    1e72:	08 95       	ret

00001e74 <sd_mmc_spi_read_word>:
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	1f 92       	push	r1
    1e86:	1f 92       	push	r1
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	8c 01       	movw	r16, r24
    1e8e:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
    1e92:	20 91 aa 28 	lds	r18, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    1e96:	30 91 ab 28 	lds	r19, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	60 91 ac 28 	lds	r22, 0x28AC	; 0x8028ac <sd_mmc_spi_transfert_pos>
    1ea2:	70 91 ad 28 	lds	r23, 0x28AD	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    1ea6:	80 91 ae 28 	lds	r24, 0x28AE	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    1eaa:	90 91 af 28 	lds	r25, 0x28AF	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    1eae:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    1eb2:	67 2b       	or	r22, r23
    1eb4:	68 2b       	or	r22, r24
    1eb6:	69 2b       	or	r22, r25
    1eb8:	39 f5       	brne	.+78     	; 0x1f08 <sd_mmc_spi_read_word+0x94>
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	c8 2e       	mov	r12, r24
    1ec0:	81 ea       	ldi	r24, 0xA1	; 161
    1ec2:	d8 2e       	mov	r13, r24
    1ec4:	87 e0       	ldi	r24, 0x07	; 7
    1ec6:	e8 2e       	mov	r14, r24
    1ec8:	f1 2c       	mov	r15, r1
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <sd_mmc_spi_read_word+0x6a>
    1ecc:	8e 3f       	cpi	r24, 0xFE	; 254
    1ece:	e1 f0       	breq	.+56     	; 0x1f08 <sd_mmc_spi_read_word+0x94>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	c8 1a       	sub	r12, r24
    1ed4:	d1 08       	sbc	r13, r1
    1ed6:	e1 08       	sbc	r14, r1
    1ed8:	f1 08       	sbc	r15, r1
    1eda:	09 f4       	brne	.+2      	; 0x1ede <sd_mmc_spi_read_word+0x6a>
    1edc:	5a c0       	rjmp	.+180    	; 0x1f92 <sd_mmc_spi_read_word+0x11e>
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	be 01       	movw	r22, r28
    1ee4:	6f 5f       	subi	r22, 0xFF	; 255
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	80 ea       	ldi	r24, 0xA0	; 160
    1eea:	98 e0       	ldi	r25, 0x08	; 8
    1eec:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	90 7f       	andi	r25, 0xF0	; 240
    1ef6:	51 f7       	brne	.-44     	; 0x1ecc <sd_mmc_spi_read_word+0x58>
    1ef8:	87 70       	andi	r24, 0x07	; 7
    1efa:	09 f4       	brne	.+2      	; 0x1efe <sd_mmc_spi_read_word+0x8a>
    1efc:	45 c0       	rjmp	.+138    	; 0x1f88 <sd_mmc_spi_read_word+0x114>
    1efe:	87 e0       	ldi	r24, 0x07	; 7
    1f00:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	2a c0       	rjmp	.+84     	; 0x1f5c <sd_mmc_spi_read_word+0xe8>
    1f08:	44 e0       	ldi	r20, 0x04	; 4
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	b8 01       	movw	r22, r16
    1f0e:	80 ea       	ldi	r24, 0xA0	; 160
    1f10:	98 e0       	ldi	r25, 0x08	; 8
    1f12:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1f16:	80 91 ac 28 	lds	r24, 0x28AC	; 0x8028ac <sd_mmc_spi_transfert_pos>
    1f1a:	90 91 ad 28 	lds	r25, 0x28AD	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    1f1e:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    1f22:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	6c 5f       	subi	r22, 0xFC	; 252
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f30:	9f 4f       	sbci	r25, 0xFF	; 255
    1f32:	60 93 ac 28 	sts	0x28AC, r22	; 0x8028ac <sd_mmc_spi_transfert_pos>
    1f36:	70 93 ad 28 	sts	0x28AD, r23	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    1f3a:	80 93 ae 28 	sts	0x28AE, r24	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    1f3e:	90 93 af 28 	sts	0x28AF, r25	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    1f42:	20 91 aa 28 	lds	r18, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    1f46:	30 91 ab 28 	lds	r19, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    1f52:	67 2b       	or	r22, r23
    1f54:	68 2b       	or	r22, r24
    1f56:	69 2b       	or	r22, r25
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <sd_mmc_spi_read_word+0xfe>
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	df 90       	pop	r13
    1f6e:	cf 90       	pop	r12
    1f70:	08 95       	ret
    1f72:	42 e0       	ldi	r20, 0x02	; 2
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	be 01       	movw	r22, r28
    1f78:	6f 5f       	subi	r22, 0xFF	; 255
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	80 ea       	ldi	r24, 0xA0	; 160
    1f7e:	98 e0       	ldi	r25, 0x08	; 8
    1f80:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	ea cf       	rjmp	.-44     	; 0x1f5c <sd_mmc_spi_read_word+0xe8>
    1f88:	8b e0       	ldi	r24, 0x0B	; 11
    1f8a:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	e5 cf       	rjmp	.-54     	; 0x1f5c <sd_mmc_spi_read_word+0xe8>
    1f92:	84 e0       	ldi	r24, 0x04	; 4
    1f94:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	e0 cf       	rjmp	.-64     	; 0x1f5c <sd_mmc_spi_read_word+0xe8>

00001f9c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1f9c:	4f 92       	push	r4
    1f9e:	5f 92       	push	r5
    1fa0:	6f 92       	push	r6
    1fa2:	7f 92       	push	r7
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	1f 92       	push	r1
    1fba:	1f 92       	push	r1
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1fc0:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
	pos = 0;
	while (nb_block--) {
    1fc4:	61 15       	cp	r22, r1
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <sd_mmc_spi_start_read_blocks+0x30>
    1fca:	72 c0       	rjmp	.+228    	; 0x20b0 <sd_mmc_spi_start_read_blocks+0x114>
    1fcc:	5c 01       	movw	r10, r24
    1fce:	41 2c       	mov	r4, r1
    1fd0:	51 2c       	mov	r5, r1
    1fd2:	32 01       	movw	r6, r4
    1fd4:	8b 01       	movw	r16, r22
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
    1fd6:	19 82       	std	Y+1, r1	; 0x01
    1fd8:	80 e2       	ldi	r24, 0x20	; 32
    1fda:	c8 2e       	mov	r12, r24
    1fdc:	81 ea       	ldi	r24, 0xA1	; 161
    1fde:	d8 2e       	mov	r13, r24
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	e8 2e       	mov	r14, r24
    1fe4:	f1 2c       	mov	r15, r1
    1fe6:	09 c0       	rjmp	.+18     	; 0x1ffa <sd_mmc_spi_start_read_blocks+0x5e>
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
			}
			return false;
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    1fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fea:	61 f1       	breq	.+88     	; 0x2044 <sd_mmc_spi_start_read_blocks+0xa8>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	c8 1a       	sub	r12, r24
    1ff0:	d1 08       	sbc	r13, r1
    1ff2:	e1 08       	sbc	r14, r1
    1ff4:	f1 08       	sbc	r15, r1
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
	i = 500000;
	do {
		if (i-- == 0) {
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <sd_mmc_spi_start_read_blocks+0x5e>
    1ff8:	61 c0       	rjmp	.+194    	; 0x20bc <sd_mmc_spi_start_read_blocks+0x120>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	be 01       	movw	r22, r28
    2000:	6f 5f       	subi	r22, 0xFF	; 255
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	80 ea       	ldi	r24, 0xA0	; 160
    2006:	98 e0       	ldi	r25, 0x08	; 8
    2008:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    200c:	99 81       	ldd	r25, Y+1	; 0x01
    200e:	89 2f       	mov	r24, r25
    2010:	80 7f       	andi	r24, 0xF0	; 240
    2012:	51 f7       	brne	.-44     	; 0x1fe8 <sd_mmc_spi_start_read_blocks+0x4c>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2014:	97 70       	andi	r25, 0x07	; 7
    2016:	09 f4       	brne	.+2      	; 0x201a <sd_mmc_spi_start_read_blocks+0x7e>
    2018:	4d c0       	rjmp	.+154    	; 0x20b4 <sd_mmc_spi_start_read_blocks+0x118>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    201a:	87 e0       	ldi	r24, 0x07	; 7
    201c:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
			return false;
    2020:	80 e0       	ldi	r24, 0x00	; 0
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	df 90       	pop	r13
    2034:	cf 90       	pop	r12
    2036:	bf 90       	pop	r11
    2038:	af 90       	pop	r10
    203a:	7f 90       	pop	r7
    203c:	6f 90       	pop	r6
    203e:	5f 90       	pop	r5
    2040:	4f 90       	pop	r4
    2042:	08 95       	ret
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
    2044:	40 91 aa 28 	lds	r20, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    2048:	50 91 ab 28 	lds	r21, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    204c:	b5 01       	movw	r22, r10
    204e:	64 0d       	add	r22, r4
    2050:	75 1d       	adc	r23, r5
    2052:	80 ea       	ldi	r24, 0xA0	; 160
    2054:	98 e0       	ldi	r25, 0x08	; 8
    2056:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
		pos += sd_mmc_spi_block_size;
    205a:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    205e:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    2062:	a0 e0       	ldi	r26, 0x00	; 0
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	48 0e       	add	r4, r24
    2068:	59 1e       	adc	r5, r25
    206a:	6a 1e       	adc	r6, r26
    206c:	7b 1e       	adc	r7, r27
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    206e:	40 91 ac 28 	lds	r20, 0x28AC	; 0x8028ac <sd_mmc_spi_transfert_pos>
    2072:	50 91 ad 28 	lds	r21, 0x28AD	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    2076:	60 91 ae 28 	lds	r22, 0x28AE	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    207a:	70 91 af 28 	lds	r23, 0x28AF	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    207e:	84 0f       	add	r24, r20
    2080:	95 1f       	adc	r25, r21
    2082:	a6 1f       	adc	r26, r22
    2084:	b7 1f       	adc	r27, r23
    2086:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <sd_mmc_spi_transfert_pos>
    208a:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    208e:	a0 93 ae 28 	sts	0x28AE, r26	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    2092:	b0 93 af 28 	sts	0x28AF, r27	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
 */
static void sd_mmc_spi_stop_read_block(void)
{
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
    2096:	42 e0       	ldi	r20, 0x02	; 2
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	be 01       	movw	r22, r28
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	80 ea       	ldi	r24, 0xA0	; 160
    20a2:	98 e0       	ldi	r25, 0x08	; 8
    20a4:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    20a8:	01 50       	subi	r16, 0x01	; 1
    20aa:	11 09       	sbc	r17, r1
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <sd_mmc_spi_start_read_blocks+0x114>
    20ae:	93 cf       	rjmp	.-218    	; 0x1fd6 <sd_mmc_spi_start_read_blocks+0x3a>
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	b7 cf       	rjmp	.-146    	; 0x2022 <sd_mmc_spi_start_read_blocks+0x86>
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    20b4:	8b e0       	ldi	r24, 0x0B	; 11
    20b6:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    20ba:	b2 cf       	rjmp	.-156    	; 0x2020 <sd_mmc_spi_start_read_blocks+0x84>
	 */
	token = 0;
	i = 500000;
	do {
		if (i-- == 0) {
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    20c2:	ae cf       	rjmp	.-164    	; 0x2020 <sd_mmc_spi_start_read_blocks+0x84>

000020c4 <sd_mmc_spi_wait_end_of_read_blocks>:
}

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	08 95       	ret

000020c8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    20c8:	2f 92       	push	r2
    20ca:	3f 92       	push	r3
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <sd_mmc_spi_start_write_blocks+0x26>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	6c 01       	movw	r12, r24
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    20f4:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <sd_mmc_spi_err>
	pos = 0;
    20f8:	41 2c       	mov	r4, r1
    20fa:	51 2c       	mov	r5, r1
    20fc:	32 01       	movw	r6, r4
/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
	uint8_t dummy = 0xFF;
    20fe:	33 24       	eor	r3, r3
    2100:	3a 94       	dec	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2102:	9c ef       	ldi	r25, 0xFC	; 252
    2104:	29 2e       	mov	r2, r25
{
	uint8_t resp;
	uint16_t crc;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2106:	ee 24       	eor	r14, r14
    2108:	ea 94       	dec	r14
    210a:	fe 2c       	mov	r15, r14
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
    210c:	8b 01       	movw	r16, r22
    210e:	01 50       	subi	r16, 0x01	; 1
    2110:	11 09       	sbc	r17, r1
    2112:	67 2b       	or	r22, r23
    2114:	09 f4       	brne	.+2      	; 0x2118 <sd_mmc_spi_start_write_blocks+0x50>
    2116:	87 c0       	rjmp	.+270    	; 0x2226 <sd_mmc_spi_start_write_blocks+0x15e>
/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
	uint8_t dummy = 0xFF;
    2118:	3b 82       	std	Y+3, r3	; 0x03
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	be 01       	movw	r22, r28
    2120:	6d 5f       	subi	r22, 0xFD	; 253
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	80 ea       	ldi	r24, 0xA0	; 160
    2126:	98 e0       	ldi	r25, 0x08	; 8
    2128:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    212c:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <sd_mmc_spi_nb_block>
    2130:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <sd_mmc_spi_nb_block+0x1>
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	09 f4       	brne	.+2      	; 0x213a <sd_mmc_spi_start_write_blocks+0x72>
    2138:	b3 c0       	rjmp	.+358    	; 0x22a0 <sd_mmc_spi_start_write_blocks+0x1d8>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    213a:	29 82       	std	Y+1, r2	; 0x01
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	be 01       	movw	r22, r28
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	80 ea       	ldi	r24, 0xA0	; 160
    2148:	98 e0       	ldi	r25, 0x08	; 8
    214a:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
    214e:	40 91 aa 28 	lds	r20, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    2152:	50 91 ab 28 	lds	r21, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    2156:	b6 01       	movw	r22, r12
    2158:	64 0d       	add	r22, r4
    215a:	75 1d       	adc	r23, r5
    215c:	80 ea       	ldi	r24, 0xA0	; 160
    215e:	98 e0       	ldi	r25, 0x08	; 8
    2160:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
		pos += sd_mmc_spi_block_size;
    2164:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    2168:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	48 0e       	add	r4, r24
    2172:	59 1e       	adc	r5, r25
    2174:	6a 1e       	adc	r6, r26
    2176:	7b 1e       	adc	r7, r27
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2178:	40 91 ac 28 	lds	r20, 0x28AC	; 0x8028ac <sd_mmc_spi_transfert_pos>
    217c:	50 91 ad 28 	lds	r21, 0x28AD	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    2180:	60 91 ae 28 	lds	r22, 0x28AE	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    2184:	70 91 af 28 	lds	r23, 0x28AF	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    2188:	84 0f       	add	r24, r20
    218a:	95 1f       	adc	r25, r21
    218c:	a6 1f       	adc	r26, r22
    218e:	b7 1f       	adc	r27, r23
    2190:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <sd_mmc_spi_transfert_pos>
    2194:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    2198:	a0 93 ae 28 	sts	0x28AE, r26	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    219c:	b0 93 af 28 	sts	0x28AF, r27	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
{
	uint8_t resp;
	uint16_t crc;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    21a0:	e9 82       	std	Y+1, r14	; 0x01
    21a2:	fa 82       	std	Y+2, r15	; 0x02
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
    21a4:	42 e0       	ldi	r20, 0x02	; 2
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	be 01       	movw	r22, r28
    21aa:	6f 5f       	subi	r22, 0xFF	; 255
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	80 ea       	ldi	r24, 0xA0	; 160
    21b0:	98 e0       	ldi	r25, 0x08	; 8
    21b2:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
	// Receiv data response token
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	be 01       	movw	r22, r28
    21bc:	6d 5f       	subi	r22, 0xFD	; 253
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	80 ea       	ldi	r24, 0xA0	; 160
    21c2:	98 e0       	ldi	r25, 0x08	; 8
    21c4:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	84 fd       	sbrc	r24, 4
    21cc:	65 c0       	rjmp	.+202    	; 0x2298 <sd_mmc_spi_start_write_blocks+0x1d0>
    21ce:	80 ff       	sbrs	r24, 0
    21d0:	63 c0       	rjmp	.+198    	; 0x2298 <sd_mmc_spi_start_write_blocks+0x1d0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    21d2:	8e 71       	andi	r24, 0x1E	; 30
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	e9 f0       	breq	.+58     	; 0x2212 <sd_mmc_spi_start_write_blocks+0x14a>
    21d8:	8a 30       	cpi	r24, 0x0A	; 10
    21da:	09 f0       	breq	.+2      	; 0x21de <sd_mmc_spi_start_write_blocks+0x116>
    21dc:	64 c0       	rjmp	.+200    	; 0x22a6 <sd_mmc_spi_start_write_blocks+0x1de>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    21de:	88 e0       	ldi	r24, 0x08	; 8
    21e0:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
		if (nb_block) {
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    21e4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return true;
}
    21e6:	23 96       	adiw	r28, 0x03	; 3
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	bf 90       	pop	r11
    21fe:	af 90       	pop	r10
    2200:	9f 90       	pop	r9
    2202:	8f 90       	pop	r8
    2204:	7f 90       	pop	r7
    2206:	6f 90       	pop	r6
    2208:	5f 90       	pop	r5
    220a:	4f 90       	pop	r4
    220c:	3f 90       	pop	r3
    220e:	2f 90       	pop	r2
    2210:	08 95       	ret
		if (!sd_mmc_spi_stop_write_block()) {
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    2212:	01 15       	cp	r16, r1
    2214:	11 05       	cpc	r17, r1
    2216:	49 f4       	brne	.+18     	; 0x222a <sd_mmc_spi_start_write_blocks+0x162>
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    2218:	b8 01       	movw	r22, r16
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
    221a:	8b 01       	movw	r16, r22
    221c:	01 50       	subi	r16, 0x01	; 1
    221e:	11 09       	sbc	r17, r1
    2220:	67 2b       	or	r22, r23
    2222:	09 f0       	breq	.+2      	; 0x2226 <sd_mmc_spi_start_write_blocks+0x15e>
    2224:	79 cf       	rjmp	.-270    	; 0x2118 <sd_mmc_spi_start_write_blocks+0x50>
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
			}
		}
	}
	return true;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	de cf       	rjmp	.-68     	; 0x21e6 <sd_mmc_spi_start_write_blocks+0x11e>
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
	uint8_t line = 0xFF;
    222a:	39 82       	std	Y+1, r3	; 0x01

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	be 01       	movw	r22, r28
    2232:	6f 5f       	subi	r22, 0xFF	; 255
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	80 ea       	ldi	r24, 0xA0	; 160
    2238:	98 e0       	ldi	r25, 0x08	; 8
    223a:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	be 01       	movw	r22, r28
    2244:	6f 5f       	subi	r22, 0xFF	; 255
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	80 ea       	ldi	r24, 0xA0	; 160
    224a:	98 e0       	ldi	r25, 0x08	; 8
    224c:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	be 01       	movw	r22, r28
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	80 ea       	ldi	r24, 0xA0	; 160
    225c:	98 e0       	ldi	r25, 0x08	; 8
    225e:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    2262:	80 e4       	ldi	r24, 0x40	; 64
    2264:	88 2e       	mov	r8, r24
    2266:	8d e0       	ldi	r24, 0x0D	; 13
    2268:	98 2e       	mov	r9, r24
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	a8 2e       	mov	r10, r24
    226e:	b1 2c       	mov	r11, r1
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <sd_mmc_spi_start_write_blocks+0x1c8>
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	be 01       	movw	r22, r28
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	80 ea       	ldi	r24, 0xA0	; 160
    227e:	98 e0       	ldi	r25, 0x08	; 8
    2280:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	88 1a       	sub	r8, r24
    2288:	91 08       	sbc	r9, r1
    228a:	a1 08       	sbc	r10, r1
    228c:	b1 08       	sbc	r11, r1
		if (!(nec_timeout--)) {
    228e:	79 f0       	breq	.+30     	; 0x22ae <sd_mmc_spi_start_write_blocks+0x1e6>
			return false;
		}
	} while (line != 0xFF);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	8f 3f       	cpi	r24, 0xFF	; 255
    2294:	71 f7       	brne	.-36     	; 0x2272 <sd_mmc_spi_start_write_blocks+0x1aa>
    2296:	c0 cf       	rjmp	.-128    	; 0x2218 <sd_mmc_spi_start_write_blocks+0x150>
	crc = 0xFFFF; /// CRC is disabled in SPI mode
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
	// Receiv data response token
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    229e:	a2 cf       	rjmp	.-188    	; 0x21e4 <sd_mmc_spi_start_write_blocks+0x11c>
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
		token = SPI_TOKEN_SINGLE_WRITE;
    22a0:	8e ef       	ldi	r24, 0xFE	; 254
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	4b cf       	rjmp	.-362    	; 0x213c <sd_mmc_spi_start_write_blocks+0x74>
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    22a6:	8a e0       	ldi	r24, 0x0A	; 10
    22a8:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    22ac:	9b cf       	rjmp	.-202    	; 0x21e4 <sd_mmc_spi_start_write_blocks+0x11c>
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    22ae:	85 e0       	ldi	r24, 0x05	; 5
    22b0:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
    22b4:	97 cf       	rjmp	.-210    	; 0x21e4 <sd_mmc_spi_start_write_blocks+0x11c>

000022b6 <sd_mmc_spi_wait_end_of_write_blocks>:
	}
	return true;
}

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	1f 92       	push	r1
    22c6:	1f 92       	push	r1
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
	uint8_t line = 0xFF;
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	89 83       	std	Y+1, r24	; 0x01

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	be 01       	movw	r22, r28
    22d6:	6f 5f       	subi	r22, 0xFF	; 255
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	80 ea       	ldi	r24, 0xA0	; 160
    22dc:	98 e0       	ldi	r25, 0x08	; 8
    22de:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	be 01       	movw	r22, r28
    22e8:	6f 5f       	subi	r22, 0xFF	; 255
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	80 ea       	ldi	r24, 0xA0	; 160
    22ee:	98 e0       	ldi	r25, 0x08	; 8
    22f0:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	be 01       	movw	r22, r28
    22fa:	6f 5f       	subi	r22, 0xFF	; 255
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	80 ea       	ldi	r24, 0xA0	; 160
    2300:	98 e0       	ldi	r25, 0x08	; 8
    2302:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    2306:	90 e4       	ldi	r25, 0x40	; 64
    2308:	c9 2e       	mov	r12, r25
    230a:	9d e0       	ldi	r25, 0x0D	; 13
    230c:	d9 2e       	mov	r13, r25
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	e9 2e       	mov	r14, r25
    2312:	f1 2c       	mov	r15, r1
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <sd_mmc_spi_wait_end_of_write_blocks+0x7e>
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	be 01       	movw	r22, r28
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	80 ea       	ldi	r24, 0xA0	; 160
    2322:	98 e0       	ldi	r25, 0x08	; 8
    2324:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	c8 1a       	sub	r12, r24
    232c:	d1 08       	sbc	r13, r1
    232e:	e1 08       	sbc	r14, r1
    2330:	f1 08       	sbc	r15, r1
		if (!(nec_timeout--)) {
    2332:	21 f1       	breq	.+72     	; 0x237c <sd_mmc_spi_wait_end_of_write_blocks+0xc6>
			return false;
		}
	} while (line != 0xFF);
    2334:	19 81       	ldd	r17, Y+1	; 0x01
    2336:	1f 3f       	cpi	r17, 0xFF	; 255
    2338:	71 f7       	brne	.-36     	; 0x2316 <sd_mmc_spi_wait_end_of_write_blocks+0x60>
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    233a:	c0 90 a8 28 	lds	r12, 0x28A8	; 0x8028a8 <sd_mmc_spi_nb_block>
    233e:	d0 90 a9 28 	lds	r13, 0x28A9	; 0x8028a9 <sd_mmc_spi_nb_block+0x1>
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	c8 16       	cp	r12, r24
    2346:	d1 04       	cpc	r13, r1
    2348:	b9 f0       	breq	.+46     	; 0x2378 <sd_mmc_spi_wait_end_of_write_blocks+0xc2>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
    234a:	e1 2c       	mov	r14, r1
    234c:	f1 2c       	mov	r15, r1
    234e:	20 91 aa 28 	lds	r18, 0x28AA	; 0x8028aa <sd_mmc_spi_block_size>
    2352:	30 91 ab 28 	lds	r19, 0x28AB	; 0x8028ab <sd_mmc_spi_block_size+0x1>
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	60 91 ac 28 	lds	r22, 0x28AC	; 0x8028ac <sd_mmc_spi_transfert_pos>
    235e:	70 91 ad 28 	lds	r23, 0x28AD	; 0x8028ad <sd_mmc_spi_transfert_pos+0x1>
    2362:	80 91 ae 28 	lds	r24, 0x28AE	; 0x8028ae <sd_mmc_spi_transfert_pos+0x2>
    2366:	90 91 af 28 	lds	r25, 0x28AF	; 0x8028af <sd_mmc_spi_transfert_pos+0x3>
    236a:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    236e:	2c 15       	cp	r18, r12
    2370:	3d 05       	cpc	r19, r13
    2372:	4e 05       	cpc	r20, r14
    2374:	5f 05       	cpc	r21, r15
    2376:	80 f4       	brcc	.+32     	; 0x2398 <sd_mmc_spi_wait_end_of_write_blocks+0xe2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <sd_mmc_spi_wait_end_of_write_blocks+0xce>
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    237c:	85 e0       	ldi	r24, 0x05	; 5
    237e:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <sd_mmc_spi_err>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2382:	80 e0       	ldi	r24, 0x00	; 0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	08 95       	ret
		return true; // It is not the End of multi write
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2398:	1a 83       	std	Y+2, r17	; 0x02
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	be 01       	movw	r22, r28
    23a0:	6e 5f       	subi	r22, 0xFE	; 254
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	80 ea       	ldi	r24, 0xA0	; 160
    23a6:	98 e0       	ldi	r25, 0x08	; 8
    23a8:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    23ac:	8d ef       	ldi	r24, 0xFD	; 253
    23ae:	8a 83       	std	Y+2, r24	; 0x02
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	be 01       	movw	r22, r28
    23b6:	6e 5f       	subi	r22, 0xFE	; 254
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	80 ea       	ldi	r24, 0xA0	; 160
    23bc:	98 e0       	ldi	r25, 0x08	; 8
    23be:	0e 94 99 72 	call	0xe532	; 0xe532 <usart_spi_write_packet>
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
	uint8_t line = 0xFF;
    23c2:	19 83       	std	Y+1, r17	; 0x01

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	be 01       	movw	r22, r28
    23ca:	6f 5f       	subi	r22, 0xFF	; 255
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	80 ea       	ldi	r24, 0xA0	; 160
    23d0:	98 e0       	ldi	r25, 0x08	; 8
    23d2:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	be 01       	movw	r22, r28
    23dc:	6f 5f       	subi	r22, 0xFF	; 255
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	80 ea       	ldi	r24, 0xA0	; 160
    23e2:	98 e0       	ldi	r25, 0x08	; 8
    23e4:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	be 01       	movw	r22, r28
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	80 ea       	ldi	r24, 0xA0	; 160
    23f4:	98 e0       	ldi	r25, 0x08	; 8
    23f6:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    23fa:	80 e4       	ldi	r24, 0x40	; 64
    23fc:	c8 2e       	mov	r12, r24
    23fe:	8d e0       	ldi	r24, 0x0D	; 13
    2400:	d8 2e       	mov	r13, r24
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	e8 2e       	mov	r14, r24
    2406:	f1 2c       	mov	r15, r1
    2408:	10 c0       	rjmp	.+32     	; 0x242a <sd_mmc_spi_wait_end_of_write_blocks+0x174>
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	be 01       	movw	r22, r28
    2410:	6f 5f       	subi	r22, 0xFF	; 255
    2412:	7f 4f       	sbci	r23, 0xFF	; 255
    2414:	80 ea       	ldi	r24, 0xA0	; 160
    2416:	98 e0       	ldi	r25, 0x08	; 8
    2418:	0e 94 b0 72 	call	0xe560	; 0xe560 <usart_spi_read_packet>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	c8 1a       	sub	r12, r24
    2420:	d1 08       	sbc	r13, r1
    2422:	e1 08       	sbc	r14, r1
    2424:	f1 08       	sbc	r15, r1
		if (!(nec_timeout--)) {
    2426:	09 f4       	brne	.+2      	; 0x242a <sd_mmc_spi_wait_end_of_write_blocks+0x174>
    2428:	a9 cf       	rjmp	.-174    	; 0x237c <sd_mmc_spi_wait_end_of_write_blocks+0xc6>
			return false;
		}
	} while (line != 0xFF);
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	8f 3f       	cpi	r24, 0xFF	; 255
    242e:	69 f7       	brne	.-38     	; 0x240a <sd_mmc_spi_wait_end_of_write_blocks+0x154>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	a8 cf       	rjmp	.-176    	; 0x2384 <sd_mmc_spi_wait_end_of_write_blocks+0xce>

00002434 <calendar_timestamp_to_date>:
 * \param date_out   Date to store result
 *
 */
void calendar_timestamp_to_date(uint32_t timestamp,
		struct calendar_date *date_out)
{
    2434:	4f 92       	push	r4
    2436:	5f 92       	push	r5
    2438:	6f 92       	push	r6
    243a:	7f 92       	push	r7
    243c:	8f 92       	push	r8
    243e:	9f 92       	push	r9
    2440:	af 92       	push	r10
    2442:	bf 92       	push	r11
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	ea 01       	movw	r28, r20
	uint32_t day_number;
	uint32_t day_clock;

	date_out->year = EPOCH_YEAR;
    2456:	22 eb       	ldi	r18, 0xB2	; 178
    2458:	37 e0       	ldi	r19, 0x07	; 7
    245a:	2d 83       	std	Y+5, r18	; 0x05
    245c:	3e 83       	std	Y+6, r19	; 0x06
	date_out->month = 0;
    245e:	1c 82       	std	Y+4, r1	; 0x04

	day_clock = timestamp % SECS_PER_DAY;
	day_number = timestamp / SECS_PER_DAY;
    2460:	20 e8       	ldi	r18, 0x80	; 128
    2462:	31 e5       	ldi	r19, 0x51	; 81
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    246c:	69 01       	movw	r12, r18
    246e:	7a 01       	movw	r14, r20
    2470:	2b 01       	movw	r4, r22
    2472:	3c 01       	movw	r6, r24

	date_out->second = day_clock % SECS_PER_MINUTE;
    2474:	ec e3       	ldi	r30, 0x3C	; 60
    2476:	8e 2e       	mov	r8, r30
    2478:	91 2c       	mov	r9, r1
    247a:	a1 2c       	mov	r10, r1
    247c:	b1 2c       	mov	r11, r1
    247e:	a5 01       	movw	r20, r10
    2480:	94 01       	movw	r18, r8
    2482:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    2486:	68 83       	st	Y, r22
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
    2488:	c3 01       	movw	r24, r6
    248a:	b2 01       	movw	r22, r4
    248c:	20 e1       	ldi	r18, 0x10	; 16
    248e:	3e e0       	ldi	r19, 0x0E	; 14
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    2498:	12 2f       	mov	r17, r18
    249a:	a5 01       	movw	r20, r10
    249c:	94 01       	movw	r18, r8
    249e:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    24a2:	29 83       	std	Y+1, r18	; 0x01
	date_out->hour = day_clock / SECS_PER_HOUR;
    24a4:	1a 83       	std	Y+2, r17	; 0x02
	date_out->dayofweek = (day_number + 4) % 7;
    24a6:	c7 01       	movw	r24, r14
    24a8:	b6 01       	movw	r22, r12
    24aa:	6c 5f       	subi	r22, 0xFC	; 252
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	27 e0       	ldi	r18, 0x07	; 7
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    24be:	6f 83       	std	Y+7, r22	; 0x07

	while (day_number >= calendar_yearsize(date_out->year)) {
    24c0:	42 eb       	ldi	r20, 0xB2	; 178
    24c2:	57 e0       	ldi	r21, 0x07	; 7
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    24c4:	f4 e6       	ldi	r31, 0x64	; 100
    24c6:	9f 2e       	mov	r9, r31
    24c8:	e0 e9       	ldi	r30, 0x90	; 144
    24ca:	f1 e0       	ldi	r31, 0x01	; 1
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    24cc:	54 c0       	rjmp	.+168    	; 0x2576 <calendar_timestamp_to_date+0x142>
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    24ce:	8a 01       	movw	r16, r20
    24d0:	16 95       	lsr	r17
    24d2:	07 95       	ror	r16
    24d4:	16 95       	lsr	r17
    24d6:	07 95       	ror	r16
    24d8:	98 01       	movw	r18, r16
    24da:	ab e7       	ldi	r26, 0x7B	; 123
    24dc:	b4 e1       	ldi	r27, 0x14	; 20
    24de:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    24e2:	96 95       	lsr	r25
    24e4:	87 95       	ror	r24
    24e6:	98 9e       	mul	r9, r24
    24e8:	90 01       	movw	r18, r0
    24ea:	99 9e       	mul	r9, r25
    24ec:	30 0d       	add	r19, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	42 17       	cp	r20, r18
    24f2:	53 07       	cpc	r21, r19
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <calendar_timestamp_to_date+0xc4>
    24f6:	52 c0       	rjmp	.+164    	; 0x259c <calendar_timestamp_to_date+0x168>
    24f8:	5a 01       	movw	r10, r20
    24fa:	b2 94       	swap	r11
    24fc:	a2 94       	swap	r10
    24fe:	2f e0       	ldi	r18, 0x0F	; 15
    2500:	a2 22       	and	r10, r18
    2502:	ab 24       	eor	r10, r11
    2504:	b2 22       	and	r11, r18
    2506:	ab 24       	eor	r10, r11
    2508:	95 01       	movw	r18, r10
    250a:	ae e3       	ldi	r26, 0x3E	; 62
    250c:	ba e0       	ldi	r27, 0x0A	; 10
    250e:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    2512:	bc 01       	movw	r22, r24
    2514:	6e 9f       	mul	r22, r30
    2516:	c0 01       	movw	r24, r0
    2518:	6f 9f       	mul	r22, r31
    251a:	90 0d       	add	r25, r0
    251c:	7e 9f       	mul	r23, r30
    251e:	90 0d       	add	r25, r0
    2520:	11 24       	eor	r1, r1
    2522:	9a 01       	movw	r18, r20
    2524:	28 1b       	sub	r18, r24
    2526:	39 0b       	sbc	r19, r25
    2528:	c9 01       	movw	r24, r18
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	09 f0       	breq	.+2      	; 0x2530 <calendar_timestamp_to_date+0xfc>
    252e:	6d c0       	rjmp	.+218    	; 0x260a <calendar_timestamp_to_date+0x1d6>
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    2530:	6e e6       	ldi	r22, 0x6E	; 110
    2532:	c6 16       	cp	r12, r22
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	d6 06       	cpc	r13, r22
    2538:	e1 04       	cpc	r14, r1
    253a:	f1 04       	cpc	r15, r1
    253c:	f0 f1       	brcs	.+124    	; 0x25ba <calendar_timestamp_to_date+0x186>
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    253e:	95 01       	movw	r18, r10
    2540:	ae e3       	ldi	r26, 0x3E	; 62
    2542:	ba e0       	ldi	r27, 0x0A	; 10
    2544:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    2548:	9c 01       	movw	r18, r24
    254a:	2e 9f       	mul	r18, r30
    254c:	c0 01       	movw	r24, r0
    254e:	2f 9f       	mul	r18, r31
    2550:	90 0d       	add	r25, r0
    2552:	3e 9f       	mul	r19, r30
    2554:	90 0d       	add	r25, r0
    2556:	11 24       	eor	r1, r1
    2558:	48 17       	cp	r20, r24
    255a:	59 07       	cpc	r21, r25
    255c:	d1 f4       	brne	.+52     	; 0x2592 <calendar_timestamp_to_date+0x15e>
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    255e:	8e e6       	ldi	r24, 0x6E	; 110
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	a0 e0       	ldi	r26, 0x00	; 0
    2564:	b0 e0       	ldi	r27, 0x00	; 0
		day_number -= calendar_yearsize(date_out->year);
    2566:	c8 1a       	sub	r12, r24
    2568:	d9 0a       	sbc	r13, r25
    256a:	ea 0a       	sbc	r14, r26
    256c:	fb 0a       	sbc	r15, r27
		date_out->year++;
    256e:	4f 5f       	subi	r20, 0xFF	; 255
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	4d 83       	std	Y+5, r20	; 0x05
    2574:	5e 83       	std	Y+6, r21	; 0x06
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    2576:	ca 01       	movw	r24, r20
    2578:	83 70       	andi	r24, 0x03	; 3
    257a:	99 27       	eor	r25, r25
    257c:	89 2b       	or	r24, r25
    257e:	09 f4       	brne	.+2      	; 0x2582 <calendar_timestamp_to_date+0x14e>
    2580:	a6 cf       	rjmp	.-180    	; 0x24ce <calendar_timestamp_to_date+0x9a>
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    2582:	7d e6       	ldi	r23, 0x6D	; 109
    2584:	c7 16       	cp	r12, r23
    2586:	71 e0       	ldi	r23, 0x01	; 1
    2588:	d7 06       	cpc	r13, r23
    258a:	e1 04       	cpc	r14, r1
    258c:	f1 04       	cpc	r15, r1
    258e:	08 f4       	brcc	.+2      	; 0x2592 <calendar_timestamp_to_date+0x15e>
    2590:	4e c0       	rjmp	.+156    	; 0x262e <calendar_timestamp_to_date+0x1fa>
    2592:	8d e6       	ldi	r24, 0x6D	; 109
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e5 cf       	rjmp	.-54     	; 0x2566 <calendar_timestamp_to_date+0x132>
    259c:	3e e6       	ldi	r19, 0x6E	; 110
    259e:	c3 16       	cp	r12, r19
    25a0:	31 e0       	ldi	r19, 0x01	; 1
    25a2:	d3 06       	cpc	r13, r19
    25a4:	e1 04       	cpc	r14, r1
    25a6:	f1 04       	cpc	r15, r1
    25a8:	d0 f6       	brcc	.-76     	; 0x255e <calendar_timestamp_to_date+0x12a>
    25aa:	5a 01       	movw	r10, r20
    25ac:	b2 94       	swap	r11
    25ae:	a2 94       	swap	r10
    25b0:	8f e0       	ldi	r24, 0x0F	; 15
    25b2:	a8 22       	and	r10, r24
    25b4:	ab 24       	eor	r10, r11
    25b6:	b8 22       	and	r11, r24
    25b8:	ab 24       	eor	r10, r11
    25ba:	98 01       	movw	r18, r16
    25bc:	ab e7       	ldi	r26, 0x7B	; 123
    25be:	b4 e1       	ldi	r27, 0x14	; 20
    25c0:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    25c4:	fc 01       	movw	r30, r24
    25c6:	f6 95       	lsr	r31
    25c8:	e7 95       	ror	r30
    25ca:	24 e6       	ldi	r18, 0x64	; 100
    25cc:	2e 9f       	mul	r18, r30
    25ce:	c0 01       	movw	r24, r0
    25d0:	2f 9f       	mul	r18, r31
    25d2:	90 0d       	add	r25, r0
    25d4:	11 24       	eor	r1, r1
    25d6:	fa 01       	movw	r30, r20
    25d8:	e8 1b       	sub	r30, r24
    25da:	f9 0b       	sbc	r31, r25
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    25dc:	95 01       	movw	r18, r10
    25de:	ae e3       	ldi	r26, 0x3E	; 62
    25e0:	ba e0       	ldi	r27, 0x0A	; 10
    25e2:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    25e6:	20 e9       	ldi	r18, 0x90	; 144
    25e8:	31 e0       	ldi	r19, 0x01	; 1
    25ea:	bc 01       	movw	r22, r24
    25ec:	62 9f       	mul	r22, r18
    25ee:	c0 01       	movw	r24, r0
    25f0:	63 9f       	mul	r22, r19
    25f2:	90 0d       	add	r25, r0
    25f4:	72 9f       	mul	r23, r18
    25f6:	90 0d       	add	r25, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	48 1b       	sub	r20, r24
    25fc:	59 0b       	sbc	r21, r25
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	91 f4       	brne	.+36     	; 0x2626 <calendar_timestamp_to_date+0x1f2>
    2602:	ef 2b       	or	r30, r31
    2604:	09 f0       	breq	.+2      	; 0x2608 <calendar_timestamp_to_date+0x1d4>
    2606:	54 c0       	rjmp	.+168    	; 0x26b0 <calendar_timestamp_to_date+0x27c>
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <calendar_timestamp_to_date+0x254>
    260a:	2d e6       	ldi	r18, 0x6D	; 109
    260c:	c2 16       	cp	r12, r18
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	d2 06       	cpc	r13, r18
    2612:	e1 04       	cpc	r14, r1
    2614:	f1 04       	cpc	r15, r1
    2616:	08 f0       	brcs	.+2      	; 0x261a <calendar_timestamp_to_date+0x1e6>
    2618:	92 cf       	rjmp	.-220    	; 0x253e <calendar_timestamp_to_date+0x10a>
    261a:	e0 e0       	ldi	r30, 0x00	; 0
    261c:	f0 e0       	ldi	r31, 0x00	; 0
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    261e:	ac 01       	movw	r20, r24
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	45 2b       	or	r20, r21
    2624:	71 f3       	breq	.-36     	; 0x2602 <calendar_timestamp_to_date+0x1ce>
    2626:	ef 2b       	or	r30, r31
    2628:	09 f0       	breq	.+2      	; 0x262c <calendar_timestamp_to_date+0x1f8>
    262a:	56 c0       	rjmp	.+172    	; 0x26d8 <calendar_timestamp_to_date+0x2a4>
    262c:	69 c0       	rjmp	.+210    	; 0x2700 <calendar_timestamp_to_date+0x2cc>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	05 c0       	rjmp	.+10     	; 0x263c <calendar_timestamp_to_date+0x208>
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    2632:	c8 1a       	sub	r12, r24
    2634:	d9 0a       	sbc	r13, r25
    2636:	ea 0a       	sbc	r14, r26
    2638:	fb 0a       	sbc	r15, r27
		date_out->month++;
    263a:	2c 83       	std	Y+4, r18	; 0x04
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    263c:	e2 2f       	mov	r30, r18
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	e1 5a       	subi	r30, 0xA1	; 161
    2642:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    2644:	80 81       	ld	r24, Z
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e0       	ldi	r26, 0x00	; 0
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	2f 5f       	subi	r18, 0xFF	; 255
    264e:	c8 16       	cp	r12, r24
    2650:	d9 06       	cpc	r13, r25
    2652:	ea 06       	cpc	r14, r26
    2654:	fb 06       	cpc	r15, r27
    2656:	68 f7       	brcc	.-38     	; 0x2632 <calendar_timestamp_to_date+0x1fe>
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
    2658:	cb 82       	std	Y+3, r12	; 0x03
}
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	7f 90       	pop	r7
    2674:	6f 90       	pop	r6
    2676:	5f 90       	pop	r5
    2678:	4f 90       	pop	r4
    267a:	08 95       	ret
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    267c:	c8 1a       	sub	r12, r24
    267e:	d9 0a       	sbc	r13, r25
    2680:	ea 0a       	sbc	r14, r26
    2682:	fb 0a       	sbc	r15, r27
		date_out->month++;
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	2c 83       	std	Y+4, r18	; 0x04
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    2688:	e2 2f       	mov	r30, r18
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	e1 5a       	subi	r30, 0xA1	; 161
    268e:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    2690:	84 85       	ldd	r24, Z+12	; 0x0c
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e0       	ldi	r26, 0x00	; 0
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	c8 16       	cp	r12, r24
    269a:	d9 06       	cpc	r13, r25
    269c:	ea 06       	cpc	r14, r26
    269e:	fb 06       	cpc	r15, r27
    26a0:	68 f7       	brcc	.-38     	; 0x267c <calendar_timestamp_to_date+0x248>
    26a2:	da cf       	rjmp	.-76     	; 0x2658 <calendar_timestamp_to_date+0x224>
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    26a4:	c8 1a       	sub	r12, r24
    26a6:	d9 0a       	sbc	r13, r25
    26a8:	ea 0a       	sbc	r14, r26
    26aa:	fb 0a       	sbc	r15, r27
		date_out->month++;
    26ac:	2f 5f       	subi	r18, 0xFF	; 255
    26ae:	2c 83       	std	Y+4, r18	; 0x04
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    26b0:	e2 2f       	mov	r30, r18
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	e1 5a       	subi	r30, 0xA1	; 161
    26b6:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    26b8:	84 85       	ldd	r24, Z+12	; 0x0c
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	c8 16       	cp	r12, r24
    26c2:	d9 06       	cpc	r13, r25
    26c4:	ea 06       	cpc	r14, r26
    26c6:	fb 06       	cpc	r15, r27
    26c8:	68 f7       	brcc	.-38     	; 0x26a4 <calendar_timestamp_to_date+0x270>
    26ca:	c6 cf       	rjmp	.-116    	; 0x2658 <calendar_timestamp_to_date+0x224>
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    26cc:	c8 1a       	sub	r12, r24
    26ce:	d9 0a       	sbc	r13, r25
    26d0:	ea 0a       	sbc	r14, r26
    26d2:	fb 0a       	sbc	r15, r27
		date_out->month++;
    26d4:	2f 5f       	subi	r18, 0xFF	; 255
    26d6:	2c 83       	std	Y+4, r18	; 0x04
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    26d8:	e2 2f       	mov	r30, r18
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	e1 5a       	subi	r30, 0xA1	; 161
    26de:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    26e0:	84 85       	ldd	r24, Z+12	; 0x0c
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	c8 16       	cp	r12, r24
    26ea:	d9 06       	cpc	r13, r25
    26ec:	ea 06       	cpc	r14, r26
    26ee:	fb 06       	cpc	r15, r27
    26f0:	68 f7       	brcc	.-38     	; 0x26cc <calendar_timestamp_to_date+0x298>
    26f2:	b2 cf       	rjmp	.-156    	; 0x2658 <calendar_timestamp_to_date+0x224>
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    26f4:	c8 1a       	sub	r12, r24
    26f6:	d9 0a       	sbc	r13, r25
    26f8:	ea 0a       	sbc	r14, r26
    26fa:	fb 0a       	sbc	r15, r27
		date_out->month++;
    26fc:	2f 5f       	subi	r18, 0xFF	; 255
    26fe:	2c 83       	std	Y+4, r18	; 0x04
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    2700:	e2 2f       	mov	r30, r18
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	e1 5a       	subi	r30, 0xA1	; 161
    2706:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    2708:	80 81       	ld	r24, Z
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	c8 16       	cp	r12, r24
    2712:	d9 06       	cpc	r13, r25
    2714:	ea 06       	cpc	r14, r26
    2716:	fb 06       	cpc	r15, r27
    2718:	68 f7       	brcc	.-38     	; 0x26f4 <calendar_timestamp_to_date+0x2c0>
    271a:	9e cf       	rjmp	.-196    	; 0x2658 <calendar_timestamp_to_date+0x224>

0000271c <mem_test_unit_ready>:
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    271c:	88 23       	and	r24, r24
    271e:	11 f0       	breq	.+4      	; 0x2724 <mem_test_unit_ready+0x8>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	08 95       	ret
    2724:	19 c8       	rjmp	.-4046   	; 0x1758 <sd_mmc_test_unit_ready_0>

00002726 <mem_read_capacity>:
    2726:	88 23       	and	r24, r24
    2728:	11 f0       	breq	.+4      	; 0x272e <mem_read_capacity+0x8>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	08 95       	ret
    272e:	cb 01       	movw	r24, r22
    2730:	2c c8       	rjmp	.-4008   	; 0x178a <sd_mmc_read_capacity_0>

00002732 <mem_sector_size>:
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	81 11       	cpse	r24, r1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	89 2f       	mov	r24, r25
    273a:	08 95       	ret

0000273c <mem_wr_protect>:
    273c:	88 23       	and	r24, r24
    273e:	11 f0       	breq	.+4      	; 0x2744 <mem_wr_protect+0x8>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	08 95       	ret
    2744:	53 c8       	rjmp	.-3930   	; 0x17ec <sd_mmc_wr_protect_0>

00002746 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	6a 01       	movw	r12, r20
    2750:	7b 01       	movw	r14, r22
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    2752:	88 23       	and	r24, r24
    2754:	31 f0       	breq	.+12     	; 0x2762 <memory_2_ram+0x1c>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	08 95       	ret
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    2762:	a9 01       	movw	r20, r18
    2764:	c7 01       	movw	r24, r14
    2766:	b6 01       	movw	r22, r12
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    2770:	3f c8       	rjmp	.-3970   	; 0x17f0 <sd_mmc_mem_2_ram_0>

00002772 <ram_2_memory>:
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	6a 01       	movw	r12, r20
    277c:	7b 01       	movw	r14, r22
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    277e:	88 23       	and	r24, r24
    2780:	31 f0       	breq	.+12     	; 0x278e <ram_2_memory+0x1c>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	08 95       	ret
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    278e:	a9 01       	movw	r20, r18
    2790:	c7 01       	movw	r24, r14
    2792:	b6 01       	movw	r22, r12
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	df 90       	pop	r13
    279a:	cf 90       	pop	r12
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    279c:	4c c8       	rjmp	.-3944   	; 0x1836 <sd_mmc_ram_2_mem_0>

0000279e <udi_cdc_comm_enable>:
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    279e:	10 92 ca 29 	sts	0x29CA, r1	; 0x8029ca <udi_cdc_nb_comm_enabled>
    27a2:	10 92 d6 29 	sts	0x29D6, r1	; 0x8029d6 <udi_cdc_state>
    27a6:	10 92 d7 29 	sts	0x29D7, r1	; 0x8029d7 <udi_cdc_state+0x1>
    27aa:	ec ec       	ldi	r30, 0xCC	; 204
    27ac:	f9 e2       	ldi	r31, 0x29	; 41
    27ae:	81 ea       	ldi	r24, 0xA1	; 161
    27b0:	80 83       	st	Z, r24
    27b2:	80 e2       	ldi	r24, 0x20	; 32
    27b4:	81 83       	std	Z+1, r24	; 0x01
    27b6:	12 82       	std	Z+2, r1	; 0x02
    27b8:	13 82       	std	Z+3, r1	; 0x03
    27ba:	14 82       	std	Z+4, r1	; 0x04
    27bc:	15 82       	std	Z+5, r1	; 0x05
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	86 83       	std	Z+6, r24	; 0x06
    27c4:	97 83       	std	Z+7, r25	; 0x07
    27c6:	10 86       	std	Z+8, r1	; 0x08
    27c8:	11 86       	std	Z+9, r1	; 0x09
    27ca:	e8 ed       	ldi	r30, 0xD8	; 216
    27cc:	f9 e2       	ldi	r31, 0x29	; 41
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	92 ec       	ldi	r25, 0xC2	; 194
    27d2:	a1 e0       	ldi	r26, 0x01	; 1
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	80 83       	st	Z, r24
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	a2 83       	std	Z+2, r26	; 0x02
    27dc:	b3 83       	std	Z+3, r27	; 0x03
    27de:	14 82       	std	Z+4, r1	; 0x04
    27e0:	15 82       	std	Z+5, r1	; 0x05
    27e2:	88 e0       	ldi	r24, 0x08	; 8
    27e4:	86 83       	std	Z+6, r24	; 0x06
    27e6:	80 91 ca 29 	lds	r24, 0x29CA	; 0x8029ca <udi_cdc_nb_comm_enabled>
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	80 93 ca 29 	sts	0x29CA, r24	; 0x8029ca <udi_cdc_nb_comm_enabled>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	08 95       	ret

000027f4 <udi_cdc_comm_disable>:
    27f4:	80 91 ca 29 	lds	r24, 0x29CA	; 0x8029ca <udi_cdc_nb_comm_enabled>
    27f8:	81 50       	subi	r24, 0x01	; 1
    27fa:	80 93 ca 29 	sts	0x29CA, r24	; 0x8029ca <udi_cdc_nb_comm_enabled>
    27fe:	08 95       	ret

00002800 <udi_cdc_data_disable>:
    2800:	80 91 c9 29 	lds	r24, 0x29C9	; 0x8029c9 <udi_cdc_nb_data_enabled>
    2804:	81 50       	subi	r24, 0x01	; 1
    2806:	80 93 c9 29 	sts	0x29C9, r24	; 0x8029c9 <udi_cdc_nb_data_enabled>
    280a:	80 91 c9 29 	lds	r24, 0x29C9	; 0x8029c9 <udi_cdc_nb_data_enabled>
    280e:	10 92 c8 29 	sts	0x29C8, r1	; 0x8029c8 <udi_cdc_data_running>
    2812:	08 95       	ret

00002814 <udi_cdc_data_setup>:
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	08 95       	ret

00002818 <udi_cdc_getsetting>:
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	08 95       	ret

0000281c <udi_cdc_line_coding_received>:
    281c:	08 95       	ret

0000281e <udi_cdc_comm_setup>:
    281e:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    2822:	87 fd       	sbrc	r24, 7
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <udi_cdc_comm_setup+0x12>
    2826:	80 76       	andi	r24, 0x60	; 96
    2828:	80 32       	cpi	r24, 0x20	; 32
    282a:	d9 f0       	breq	.+54     	; 0x2862 <udi_cdc_comm_setup+0x44>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	08 95       	ret
    2830:	80 76       	andi	r24, 0x60	; 96
    2832:	80 32       	cpi	r24, 0x20	; 32
    2834:	d9 f7       	brne	.-10     	; 0x282c <udi_cdc_comm_setup+0xe>
    2836:	80 91 bd 2d 	lds	r24, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    283a:	81 32       	cpi	r24, 0x21	; 33
    283c:	b9 f7       	brne	.-18     	; 0x282c <udi_cdc_comm_setup+0xe>
    283e:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    2842:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    2846:	87 30       	cpi	r24, 0x07	; 7
    2848:	91 05       	cpc	r25, r1
    284a:	81 f7       	brne	.-32     	; 0x282c <udi_cdc_comm_setup+0xe>
    284c:	28 ed       	ldi	r18, 0xD8	; 216
    284e:	39 e2       	ldi	r19, 0x29	; 41
    2850:	20 93 c4 2d 	sts	0x2DC4, r18	; 0x802dc4 <udd_g_ctrlreq+0x8>
    2854:	30 93 c5 2d 	sts	0x2DC5, r19	; 0x802dc5 <udd_g_ctrlreq+0x9>
    2858:	80 93 c6 2d 	sts	0x2DC6, r24	; 0x802dc6 <udd_g_ctrlreq+0xa>
    285c:	90 93 c7 2d 	sts	0x2DC7, r25	; 0x802dc7 <udd_g_ctrlreq+0xb>
    2860:	06 c0       	rjmp	.+12     	; 0x286e <udi_cdc_comm_setup+0x50>
    2862:	80 91 bd 2d 	lds	r24, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    2866:	80 32       	cpi	r24, 0x20	; 32
    2868:	21 f0       	breq	.+8      	; 0x2872 <udi_cdc_comm_setup+0x54>
    286a:	82 32       	cpi	r24, 0x22	; 34
    286c:	f9 f6       	brne	.-66     	; 0x282c <udi_cdc_comm_setup+0xe>
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	08 95       	ret
    2872:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    2876:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    287a:	87 30       	cpi	r24, 0x07	; 7
    287c:	91 05       	cpc	r25, r1
    287e:	b1 f6       	brne	.-84     	; 0x282c <udi_cdc_comm_setup+0xe>
    2880:	2e e0       	ldi	r18, 0x0E	; 14
    2882:	34 e1       	ldi	r19, 0x14	; 20
    2884:	20 93 c8 2d 	sts	0x2DC8, r18	; 0x802dc8 <udd_g_ctrlreq+0xc>
    2888:	30 93 c9 2d 	sts	0x2DC9, r19	; 0x802dc9 <udd_g_ctrlreq+0xd>
    288c:	df cf       	rjmp	.-66     	; 0x284c <udi_cdc_comm_setup+0x2e>

0000288e <udi_cdc_tx_send.isra.1.part.2>:
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	1f 92       	push	r1
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	8f b7       	in	r24, 0x3f	; 63
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	f8 94       	cli
    28aa:	c9 80       	ldd	r12, Y+1	; 0x01
    28ac:	d0 90 bb 28 	lds	r13, 0x28BB	; 0x8028bb <udi_cdc_tx_buf_sel>
    28b0:	0d 2d       	mov	r16, r13
    28b2:	10 e0       	ldi	r17, 0x00	; 0
    28b4:	78 01       	movw	r14, r16
    28b6:	ee 0c       	add	r14, r14
    28b8:	ff 1c       	adc	r15, r15
    28ba:	f7 01       	movw	r30, r14
    28bc:	e4 54       	subi	r30, 0x44	; 68
    28be:	f7 4d       	sbci	r31, 0xD7	; 215
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	89 2b       	or	r24, r25
    28c6:	09 f4       	brne	.+2      	; 0x28ca <udi_cdc_tx_send.isra.1.part.2+0x3c>
    28c8:	5b c0       	rjmp	.+182    	; 0x2980 <udi_cdc_tx_send.isra.1.part.2+0xf2>
    28ca:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <sof_zlp_counter.4846>
    28ce:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    28d2:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <udi_cdc_tx_send.isra.1.part.2+0x4e>
    28da:	47 c0       	rjmp	.+142    	; 0x296a <udi_cdc_tx_send.isra.1.part.2+0xdc>
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	d1 10       	cpse	r13, r1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	09 2f       	mov	r16, r25
    28e6:	18 2f       	mov	r17, r24
    28e8:	78 01       	movw	r14, r16
    28ea:	ee 0c       	add	r14, r14
    28ec:	ff 1c       	adc	r15, r15
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    28f4:	cf be       	out	0x3f, r12	; 63
    28f6:	f7 01       	movw	r30, r14
    28f8:	e4 54       	subi	r30, 0x44	; 68
    28fa:	f7 4d       	sbci	r31, 0xD7	; 215
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	dd 24       	eor	r13, r13
    2902:	d3 94       	inc	r13
    2904:	20 34       	cpi	r18, 0x40	; 64
    2906:	31 05       	cpc	r19, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <udi_cdc_tx_send.isra.1.part.2+0x7e>
    290a:	5d c0       	rjmp	.+186    	; 0x29c6 <udi_cdc_tx_send.isra.1.part.2+0x138>
    290c:	20 34       	cpi	r18, 0x40	; 64
    290e:	31 05       	cpc	r19, r1
    2910:	91 f1       	breq	.+100    	; 0x2976 <udi_cdc_tx_send.isra.1.part.2+0xe8>
    2912:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2916:	88 23       	and	r24, r24
    2918:	09 f4       	brne	.+2      	; 0x291c <udi_cdc_tx_send.isra.1.part.2+0x8e>
    291a:	57 c0       	rjmp	.+174    	; 0x29ca <udi_cdc_tx_send.isra.1.part.2+0x13c>
    291c:	0e 94 92 53 	call	0xa724	; 0xa724 <udd_get_micro_frame_number>
    2920:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <udi_cdc_tx_sof_num>
    2924:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2928:	f7 01       	movw	r30, r14
    292a:	e4 54       	subi	r30, 0x44	; 68
    292c:	f7 4d       	sbci	r31, 0xD7	; 215
    292e:	20 81       	ld	r18, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	a8 01       	movw	r20, r16
    2934:	00 24       	eor	r0, r0
    2936:	56 95       	lsr	r21
    2938:	47 95       	ror	r20
    293a:	07 94       	ror	r0
    293c:	56 95       	lsr	r21
    293e:	47 95       	ror	r20
    2940:	07 94       	ror	r0
    2942:	54 2f       	mov	r21, r20
    2944:	40 2d       	mov	r20, r0
    2946:	40 54       	subi	r20, 0x40	; 64
    2948:	57 4d       	sbci	r21, 0xD7	; 215
    294a:	01 ef       	ldi	r16, 0xF1	; 241
    294c:	14 e1       	ldi	r17, 0x14	; 20
    294e:	6d 2d       	mov	r22, r13
    2950:	81 e8       	ldi	r24, 0x81	; 129
    2952:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2956:	0f 90       	pop	r0
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	08 95       	ret
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	d1 10       	cpse	r13, r1
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <udi_cdc_tx_buf_sel>
    2974:	bc cf       	rjmp	.-136    	; 0x28ee <udi_cdc_tx_send.isra.1.part.2+0x60>
    2976:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <udi_cdc_tx_sof_num>
    297a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    297e:	d9 cf       	rjmp	.-78     	; 0x2932 <udi_cdc_tx_send.isra.1.part.2+0xa4>
    2980:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    2984:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <sof_zlp_counter.4846>
    298e:	90 93 b6 28 	sts	0x28B6, r25	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2992:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2996:	81 11       	cpse	r24, r1
    2998:	07 c0       	rjmp	.+14     	; 0x29a8 <udi_cdc_tx_send.isra.1.part.2+0x11a>
    299a:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    299e:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    29a2:	84 36       	cpi	r24, 0x64	; 100
    29a4:	91 05       	cpc	r25, r1
    29a6:	68 f0       	brcs	.+26     	; 0x29c2 <udi_cdc_tx_send.isra.1.part.2+0x134>
    29a8:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    29ac:	88 23       	and	r24, r24
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <udi_cdc_tx_send.isra.1.part.2+0x124>
    29b0:	8c cf       	rjmp	.-232    	; 0x28ca <udi_cdc_tx_send.isra.1.part.2+0x3c>
    29b2:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    29b6:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    29ba:	80 32       	cpi	r24, 0x20	; 32
    29bc:	93 40       	sbci	r25, 0x03	; 3
    29be:	08 f0       	brcs	.+2      	; 0x29c2 <udi_cdc_tx_send.isra.1.part.2+0x134>
    29c0:	84 cf       	rjmp	.-248    	; 0x28ca <udi_cdc_tx_send.isra.1.part.2+0x3c>
    29c2:	cf be       	out	0x3f, r12	; 63
    29c4:	c8 cf       	rjmp	.-112    	; 0x2956 <udi_cdc_tx_send.isra.1.part.2+0xc8>
    29c6:	d1 2c       	mov	r13, r1
    29c8:	a1 cf       	rjmp	.-190    	; 0x290c <udi_cdc_tx_send.isra.1.part.2+0x7e>
    29ca:	0e 94 8d 53 	call	0xa71a	; 0xa71a <udd_get_frame_number>
    29ce:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <udi_cdc_tx_sof_num>
    29d2:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    29d6:	f7 01       	movw	r30, r14
    29d8:	e4 54       	subi	r30, 0x44	; 68
    29da:	f7 4d       	sbci	r31, 0xD7	; 215
    29dc:	20 81       	ld	r18, Z
    29de:	31 81       	ldd	r19, Z+1	; 0x01
    29e0:	a8 cf       	rjmp	.-176    	; 0x2932 <udi_cdc_tx_send.isra.1.part.2+0xa4>

000029e2 <udi_cdc_data_sent>:
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	88 23       	and	r24, r24
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <udi_cdc_data_sent+0xe>
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret
    29f0:	20 91 bb 28 	lds	r18, 0x28BB	; 0x8028bb <udi_cdc_tx_buf_sel>
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	21 11       	cpse	r18, r1
    29fa:	1f c0       	rjmp	.+62     	; 0x2a3a <udi_cdc_data_sent+0x58>
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	fc 01       	movw	r30, r24
    2a02:	e4 54       	subi	r30, 0x44	; 68
    2a04:	f7 4d       	sbci	r31, 0xD7	; 215
    2a06:	10 82       	st	Z, r1
    2a08:	11 82       	std	Z+1, r1	; 0x01
    2a0a:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
    2a0e:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2a12:	80 91 b8 28 	lds	r24, 0x28B8	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2a16:	81 11       	cpse	r24, r1
    2a18:	e8 cf       	rjmp	.-48     	; 0x29ea <udi_cdc_data_sent+0x8>
    2a1a:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2a1e:	c0 91 b9 28 	lds	r28, 0x28B9	; 0x8028b9 <udi_cdc_tx_sof_num>
    2a22:	d0 91 ba 28 	lds	r29, 0x28BA	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2a26:	88 23       	and	r24, r24
    2a28:	59 f0       	breq	.+22     	; 0x2a40 <udi_cdc_data_sent+0x5e>
    2a2a:	0e 94 92 53 	call	0xa724	; 0xa724 <udd_get_micro_frame_number>
    2a2e:	c8 17       	cp	r28, r24
    2a30:	d9 07       	cpc	r29, r25
    2a32:	d9 f2       	breq	.-74     	; 0x29ea <udi_cdc_data_sent+0x8>
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	2a cf       	rjmp	.-428    	; 0x288e <udi_cdc_tx_send.isra.1.part.2>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	de cf       	rjmp	.-68     	; 0x29fc <udi_cdc_data_sent+0x1a>
    2a40:	0e 94 8d 53 	call	0xa71a	; 0xa71a <udd_get_frame_number>
    2a44:	c8 17       	cp	r28, r24
    2a46:	d9 07       	cpc	r29, r25
    2a48:	a9 f7       	brne	.-22     	; 0x2a34 <udi_cdc_data_sent+0x52>
    2a4a:	cf cf       	rjmp	.-98     	; 0x29ea <udi_cdc_data_sent+0x8>

00002a4c <udi_cdc_data_sof_notify>:
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	1f 92       	push	r1
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	80 91 b8 28 	lds	r24, 0x28B8	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2a66:	88 23       	and	r24, r24
    2a68:	51 f0       	breq	.+20     	; 0x2a7e <udi_cdc_data_sof_notify+0x32>
    2a6a:	0f 90       	pop	r0
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	ff 90       	pop	r15
    2a76:	ef 90       	pop	r14
    2a78:	df 90       	pop	r13
    2a7a:	cf 90       	pop	r12
    2a7c:	08 95       	ret
    2a7e:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2a82:	00 91 b9 28 	lds	r16, 0x28B9	; 0x8028b9 <udi_cdc_tx_sof_num>
    2a86:	10 91 ba 28 	lds	r17, 0x28BA	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	5a c0       	rjmp	.+180    	; 0x2b42 <udi_cdc_data_sof_notify+0xf6>
    2a8e:	0e 94 8d 53 	call	0xa71a	; 0xa71a <udd_get_frame_number>
    2a92:	08 17       	cp	r16, r24
    2a94:	19 07       	cpc	r17, r25
    2a96:	49 f3       	breq	.-46     	; 0x2a6a <udi_cdc_data_sof_notify+0x1e>
    2a98:	8f b7       	in	r24, 0x3f	; 63
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	f8 94       	cli
    2a9e:	c9 80       	ldd	r12, Y+1	; 0x01
    2aa0:	d0 90 bb 28 	lds	r13, 0x28BB	; 0x8028bb <udi_cdc_tx_buf_sel>
    2aa4:	0d 2d       	mov	r16, r13
    2aa6:	10 e0       	ldi	r17, 0x00	; 0
    2aa8:	78 01       	movw	r14, r16
    2aaa:	ee 0c       	add	r14, r14
    2aac:	ff 1c       	adc	r15, r15
    2aae:	f7 01       	movw	r30, r14
    2ab0:	e4 54       	subi	r30, 0x44	; 68
    2ab2:	f7 4d       	sbci	r31, 0xD7	; 215
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	89 2b       	or	r24, r25
    2aba:	09 f4       	brne	.+2      	; 0x2abe <udi_cdc_data_sof_notify+0x72>
    2abc:	58 c0       	rjmp	.+176    	; 0x2b6e <udi_cdc_data_sof_notify+0x122>
    2abe:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <sof_zlp_counter.4846>
    2ac2:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2ac6:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
    2aca:	81 11       	cpse	r24, r1
    2acc:	41 c0       	rjmp	.+130    	; 0x2b50 <udi_cdc_data_sof_notify+0x104>
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	d1 10       	cpse	r13, r1
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <udi_cdc_tx_buf_sel>
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2ade:	cf be       	out	0x3f, r12	; 63
    2ae0:	f7 01       	movw	r30, r14
    2ae2:	e4 54       	subi	r30, 0x44	; 68
    2ae4:	f7 4d       	sbci	r31, 0xD7	; 215
    2ae6:	20 81       	ld	r18, Z
    2ae8:	31 81       	ldd	r19, Z+1	; 0x01
    2aea:	dd 24       	eor	r13, r13
    2aec:	d3 94       	inc	r13
    2aee:	20 34       	cpi	r18, 0x40	; 64
    2af0:	31 05       	cpc	r19, r1
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <udi_cdc_data_sof_notify+0xaa>
    2af4:	5f c0       	rjmp	.+190    	; 0x2bb4 <udi_cdc_data_sof_notify+0x168>
    2af6:	20 34       	cpi	r18, 0x40	; 64
    2af8:	31 05       	cpc	r19, r1
    2afa:	a1 f1       	breq	.+104    	; 0x2b64 <udi_cdc_data_sof_notify+0x118>
    2afc:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2b00:	88 23       	and	r24, r24
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <udi_cdc_data_sof_notify+0xba>
    2b04:	59 c0       	rjmp	.+178    	; 0x2bb8 <udi_cdc_data_sof_notify+0x16c>
    2b06:	0e 94 92 53 	call	0xa724	; 0xa724 <udd_get_micro_frame_number>
    2b0a:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <udi_cdc_tx_sof_num>
    2b0e:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2b12:	f7 01       	movw	r30, r14
    2b14:	e4 54       	subi	r30, 0x44	; 68
    2b16:	f7 4d       	sbci	r31, 0xD7	; 215
    2b18:	20 81       	ld	r18, Z
    2b1a:	31 81       	ldd	r19, Z+1	; 0x01
    2b1c:	a8 01       	movw	r20, r16
    2b1e:	00 24       	eor	r0, r0
    2b20:	56 95       	lsr	r21
    2b22:	47 95       	ror	r20
    2b24:	07 94       	ror	r0
    2b26:	56 95       	lsr	r21
    2b28:	47 95       	ror	r20
    2b2a:	07 94       	ror	r0
    2b2c:	54 2f       	mov	r21, r20
    2b2e:	40 2d       	mov	r20, r0
    2b30:	40 54       	subi	r20, 0x40	; 64
    2b32:	57 4d       	sbci	r21, 0xD7	; 215
    2b34:	01 ef       	ldi	r16, 0xF1	; 241
    2b36:	14 e1       	ldi	r17, 0x14	; 20
    2b38:	6d 2d       	mov	r22, r13
    2b3a:	81 e8       	ldi	r24, 0x81	; 129
    2b3c:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2b40:	94 cf       	rjmp	.-216    	; 0x2a6a <udi_cdc_data_sof_notify+0x1e>
    2b42:	0e 94 92 53 	call	0xa724	; 0xa724 <udd_get_micro_frame_number>
    2b46:	08 17       	cp	r16, r24
    2b48:	19 07       	cpc	r17, r25
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <udi_cdc_data_sof_notify+0x102>
    2b4c:	a5 cf       	rjmp	.-182    	; 0x2a98 <udi_cdc_data_sof_notify+0x4c>
    2b4e:	8d cf       	rjmp	.-230    	; 0x2a6a <udi_cdc_data_sof_notify+0x1e>
    2b50:	91 e0       	ldi	r25, 0x01	; 1
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	d1 10       	cpse	r13, r1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	09 2f       	mov	r16, r25
    2b5a:	18 2f       	mov	r17, r24
    2b5c:	78 01       	movw	r14, r16
    2b5e:	ee 0c       	add	r14, r14
    2b60:	ff 1c       	adc	r15, r15
    2b62:	ba cf       	rjmp	.-140    	; 0x2ad8 <udi_cdc_data_sof_notify+0x8c>
    2b64:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <udi_cdc_tx_sof_num>
    2b68:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2b6c:	d7 cf       	rjmp	.-82     	; 0x2b1c <udi_cdc_data_sof_notify+0xd0>
    2b6e:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    2b72:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <sof_zlp_counter.4846>
    2b7c:	90 93 b6 28 	sts	0x28B6, r25	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2b80:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2b84:	81 11       	cpse	r24, r1
    2b86:	07 c0       	rjmp	.+14     	; 0x2b96 <udi_cdc_data_sof_notify+0x14a>
    2b88:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    2b8c:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2b90:	84 36       	cpi	r24, 0x64	; 100
    2b92:	91 05       	cpc	r25, r1
    2b94:	68 f0       	brcs	.+26     	; 0x2bb0 <udi_cdc_data_sof_notify+0x164>
    2b96:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <udi_cdc_data_sof_notify+0x154>
    2b9e:	8f cf       	rjmp	.-226    	; 0x2abe <udi_cdc_data_sof_notify+0x72>
    2ba0:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <sof_zlp_counter.4846>
    2ba4:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <sof_zlp_counter.4846+0x1>
    2ba8:	80 32       	cpi	r24, 0x20	; 32
    2baa:	93 40       	sbci	r25, 0x03	; 3
    2bac:	08 f0       	brcs	.+2      	; 0x2bb0 <udi_cdc_data_sof_notify+0x164>
    2bae:	87 cf       	rjmp	.-242    	; 0x2abe <udi_cdc_data_sof_notify+0x72>
    2bb0:	cf be       	out	0x3f, r12	; 63
    2bb2:	5b cf       	rjmp	.-330    	; 0x2a6a <udi_cdc_data_sof_notify+0x1e>
    2bb4:	d1 2c       	mov	r13, r1
    2bb6:	9f cf       	rjmp	.-194    	; 0x2af6 <udi_cdc_data_sof_notify+0xaa>
    2bb8:	0e 94 8d 53 	call	0xa71a	; 0xa71a <udd_get_frame_number>
    2bbc:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <udi_cdc_tx_sof_num>
    2bc0:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2bc4:	f7 01       	movw	r30, r14
    2bc6:	e4 54       	subi	r30, 0x44	; 68
    2bc8:	f7 4d       	sbci	r31, 0xD7	; 215
    2bca:	20 81       	ld	r18, Z
    2bcc:	31 81       	ldd	r19, Z+1	; 0x01
    2bce:	a6 cf       	rjmp	.-180    	; 0x2b1c <udi_cdc_data_sof_notify+0xd0>

00002bd0 <udi_cdc_data_enable>:
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	1f 92       	push	r1
    2bda:	1f 92       	push	r1
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	10 92 c9 29 	sts	0x29C9, r1	; 0x8029c9 <udi_cdc_nb_data_enabled>
    2be4:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2be8:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
    2bec:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <udi_cdc_tx_buf_sel>
    2bf0:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <udi_cdc_tx_buf_nb>
    2bf4:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <udi_cdc_tx_buf_nb+0x1>
    2bf8:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <udi_cdc_tx_buf_nb+0x2>
    2bfc:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <udi_cdc_tx_buf_nb+0x3>
    2c00:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <udi_cdc_tx_sof_num>
    2c04:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2c08:	80 91 b8 28 	lds	r24, 0x28B8	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    2c0c:	88 23       	and	r24, r24
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <udi_cdc_data_enable+0x42>
    2c10:	7a c0       	rjmp	.+244    	; 0x2d06 <udi_cdc_data_enable+0x136>
    2c12:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2c16:	10 92 43 29 	sts	0x2943, r1	; 0x802943 <udi_cdc_rx_buf_sel>
    2c1a:	10 92 44 29 	sts	0x2944, r1	; 0x802944 <udi_cdc_rx_buf_nb>
    2c1e:	10 92 45 29 	sts	0x2945, r1	; 0x802945 <udi_cdc_rx_buf_nb+0x1>
    2c22:	10 92 46 29 	sts	0x2946, r1	; 0x802946 <udi_cdc_rx_buf_nb+0x2>
    2c26:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <udi_cdc_rx_buf_nb+0x3>
    2c2a:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <udi_cdc_rx_pos>
    2c2e:	10 92 42 29 	sts	0x2942, r1	; 0x802942 <udi_cdc_rx_pos+0x1>
    2c32:	8f b7       	in	r24, 0x3f	; 63
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	f8 94       	cli
    2c38:	99 81       	ldd	r25, Y+1	; 0x01
    2c3a:	20 91 43 29 	lds	r18, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2c3e:	80 91 40 29 	lds	r24, 0x2940	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2c42:	81 11       	cpse	r24, r1
    2c44:	10 c0       	rjmp	.+32     	; 0x2c66 <udi_cdc_data_enable+0x96>
    2c46:	a0 91 41 29 	lds	r26, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2c4a:	b0 91 42 29 	lds	r27, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2c4e:	42 2f       	mov	r20, r18
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	fa 01       	movw	r30, r20
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	ec 5b       	subi	r30, 0xBC	; 188
    2c5a:	f6 4d       	sbci	r31, 0xD6	; 214
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	a6 17       	cp	r26, r22
    2c62:	b7 07       	cpc	r27, r23
    2c64:	48 f4       	brcc	.+18     	; 0x2c78 <udi_cdc_data_enable+0xa8>
    2c66:	9f bf       	out	0x3f, r25	; 63
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret
    2c78:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <udi_cdc_rx_pos>
    2c7c:	10 92 42 29 	sts	0x2942, r1	; 0x802942 <udi_cdc_rx_pos+0x1>
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	21 11       	cpse	r18, r1
    2c84:	56 c0       	rjmp	.+172    	; 0x2d32 <udi_cdc_data_enable+0x162>
    2c86:	80 93 43 29 	sts	0x2943, r24	; 0x802943 <udi_cdc_rx_buf_sel>
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2c90:	9f bf       	out	0x3f, r25	; 63
    2c92:	8f b7       	in	r24, 0x3f	; 63
    2c94:	8a 83       	std	Y+2, r24	; 0x02
    2c96:	f8 94       	cli
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	20 91 41 29 	lds	r18, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2c9e:	30 91 42 29 	lds	r19, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2ca2:	e0 91 43 29 	lds	r30, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	ec 5b       	subi	r30, 0xBC	; 188
    2cae:	f6 4d       	sbci	r31, 0xD6	; 214
    2cb0:	20 81       	ld	r18, Z
    2cb2:	31 81       	ldd	r19, Z+1	; 0x01
    2cb4:	8f bf       	out	0x3f, r24	; 63
    2cb6:	00 24       	eor	r0, r0
    2cb8:	56 95       	lsr	r21
    2cba:	47 95       	ror	r20
    2cbc:	07 94       	ror	r0
    2cbe:	56 95       	lsr	r21
    2cc0:	47 95       	ror	r20
    2cc2:	07 94       	ror	r0
    2cc4:	54 2f       	mov	r21, r20
    2cc6:	40 2d       	mov	r20, r0
    2cc8:	48 5b       	subi	r20, 0xB8	; 184
    2cca:	56 4d       	sbci	r21, 0xD6	; 214
    2ccc:	0b e9       	ldi	r16, 0x9B	; 155
    2cce:	16 e1       	ldi	r17, 0x16	; 22
    2cd0:	20 e4       	ldi	r18, 0x40	; 64
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	61 e0       	ldi	r22, 0x01	; 1
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2cdc:	88 23       	and	r24, r24
    2cde:	29 f2       	breq	.-118    	; 0x2c6a <udi_cdc_data_enable+0x9a>
    2ce0:	90 91 c9 29 	lds	r25, 0x29C9	; 0x8029c9 <udi_cdc_nb_data_enabled>
    2ce4:	9f 5f       	subi	r25, 0xFF	; 255
    2ce6:	90 93 c9 29 	sts	0x29C9, r25	; 0x8029c9 <udi_cdc_nb_data_enabled>
    2cea:	90 91 c9 29 	lds	r25, 0x29C9	; 0x8029c9 <udi_cdc_nb_data_enabled>
    2cee:	91 30       	cpi	r25, 0x01	; 1
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <udi_cdc_data_enable+0x124>
    2cf2:	bb cf       	rjmp	.-138    	; 0x2c6a <udi_cdc_data_enable+0x9a>
    2cf4:	90 93 c8 29 	sts	0x29C8, r25	; 0x8029c8 <udi_cdc_data_running>
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	08 95       	ret
    2d06:	0e 94 85 53 	call	0xa70a	; 0xa70a <udd_is_high_speed>
    2d0a:	00 91 b9 28 	lds	r16, 0x28B9	; 0x8028b9 <udi_cdc_tx_sof_num>
    2d0e:	10 91 ba 28 	lds	r17, 0x28BA	; 0x8028ba <udi_cdc_tx_sof_num+0x1>
    2d12:	81 11       	cpse	r24, r1
    2d14:	08 c0       	rjmp	.+16     	; 0x2d26 <udi_cdc_data_enable+0x156>
    2d16:	0e 94 8d 53 	call	0xa71a	; 0xa71a <udd_get_frame_number>
    2d1a:	08 17       	cp	r16, r24
    2d1c:	19 07       	cpc	r17, r25
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <udi_cdc_data_enable+0x152>
    2d20:	78 cf       	rjmp	.-272    	; 0x2c12 <udi_cdc_data_enable+0x42>
    2d22:	b5 dd       	rcall	.-1174   	; 0x288e <udi_cdc_tx_send.isra.1.part.2>
    2d24:	76 cf       	rjmp	.-276    	; 0x2c12 <udi_cdc_data_enable+0x42>
    2d26:	0e 94 92 53 	call	0xa724	; 0xa724 <udd_get_micro_frame_number>
    2d2a:	08 17       	cp	r16, r24
    2d2c:	19 07       	cpc	r17, r25
    2d2e:	c9 f7       	brne	.-14     	; 0x2d22 <udi_cdc_data_enable+0x152>
    2d30:	70 cf       	rjmp	.-288    	; 0x2c12 <udi_cdc_data_enable+0x42>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	a8 cf       	rjmp	.-176    	; 0x2c86 <udi_cdc_data_enable+0xb6>

00002d36 <udi_cdc_data_received>:
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	1f 92       	push	r1
    2d40:	1f 92       	push	r1
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	81 11       	cpse	r24, r1
    2d48:	2d c0       	rjmp	.+90     	; 0x2da4 <udi_cdc_data_received+0x6e>
    2d4a:	80 91 43 29 	lds	r24, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2d4e:	e1 e0       	ldi	r30, 0x01	; 1
    2d50:	81 11       	cpse	r24, r1
    2d52:	2f c0       	rjmp	.+94     	; 0x2db2 <udi_cdc_data_received+0x7c>
    2d54:	84 2f       	mov	r24, r20
    2d56:	61 15       	cp	r22, r1
    2d58:	71 05       	cpc	r23, r1
    2d5a:	81 f1       	breq	.+96     	; 0x2dbc <udi_cdc_data_received+0x86>
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	ee 0f       	add	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	ec 5b       	subi	r30, 0xBC	; 188
    2d64:	f6 4d       	sbci	r31, 0xD6	; 214
    2d66:	60 83       	st	Z, r22
    2d68:	71 83       	std	Z+1, r23	; 0x01
    2d6a:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2d6e:	8f b7       	in	r24, 0x3f	; 63
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	f8 94       	cli
    2d74:	99 81       	ldd	r25, Y+1	; 0x01
    2d76:	20 91 43 29 	lds	r18, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2d7a:	80 91 40 29 	lds	r24, 0x2940	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2d7e:	81 11       	cpse	r24, r1
    2d80:	10 c0       	rjmp	.+32     	; 0x2da2 <udi_cdc_data_received+0x6c>
    2d82:	a0 91 41 29 	lds	r26, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2d86:	b0 91 42 29 	lds	r27, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2d8a:	42 2f       	mov	r20, r18
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	fa 01       	movw	r30, r20
    2d90:	ee 0f       	add	r30, r30
    2d92:	ff 1f       	adc	r31, r31
    2d94:	ec 5b       	subi	r30, 0xBC	; 188
    2d96:	f6 4d       	sbci	r31, 0xD6	; 214
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	a6 17       	cp	r26, r22
    2d9e:	b7 07       	cpc	r27, r23
    2da0:	40 f5       	brcc	.+80     	; 0x2df2 <udi_cdc_data_received+0xbc>
    2da2:	9f bf       	out	0x3f, r25	; 63
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret
    2db2:	e0 e0       	ldi	r30, 0x00	; 0
    2db4:	84 2f       	mov	r24, r20
    2db6:	61 15       	cp	r22, r1
    2db8:	71 05       	cpc	r23, r1
    2dba:	81 f6       	brne	.-96     	; 0x2d5c <udi_cdc_data_received+0x26>
    2dbc:	4e 2f       	mov	r20, r30
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	00 24       	eor	r0, r0
    2dc2:	56 95       	lsr	r21
    2dc4:	47 95       	ror	r20
    2dc6:	07 94       	ror	r0
    2dc8:	56 95       	lsr	r21
    2dca:	47 95       	ror	r20
    2dcc:	07 94       	ror	r0
    2dce:	54 2f       	mov	r21, r20
    2dd0:	40 2d       	mov	r20, r0
    2dd2:	48 5b       	subi	r20, 0xB8	; 184
    2dd4:	56 4d       	sbci	r21, 0xD6	; 214
    2dd6:	0b e9       	ldi	r16, 0x9B	; 155
    2dd8:	16 e1       	ldi	r17, 0x16	; 22
    2dda:	20 e4       	ldi	r18, 0x40	; 64
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	08 95       	ret
    2df2:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <udi_cdc_rx_pos>
    2df6:	10 92 42 29 	sts	0x2942, r1	; 0x802942 <udi_cdc_rx_pos+0x1>
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	21 11       	cpse	r18, r1
    2dfe:	2c c0       	rjmp	.+88     	; 0x2e58 <udi_cdc_data_received+0x122>
    2e00:	80 93 43 29 	sts	0x2943, r24	; 0x802943 <udi_cdc_rx_buf_sel>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2e0a:	9f bf       	out	0x3f, r25	; 63
    2e0c:	8f b7       	in	r24, 0x3f	; 63
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
    2e10:	f8 94       	cli
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	20 91 41 29 	lds	r18, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2e18:	30 91 42 29 	lds	r19, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2e1c:	e0 91 43 29 	lds	r30, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	ee 0f       	add	r30, r30
    2e24:	ff 1f       	adc	r31, r31
    2e26:	ec 5b       	subi	r30, 0xBC	; 188
    2e28:	f6 4d       	sbci	r31, 0xD6	; 214
    2e2a:	20 81       	ld	r18, Z
    2e2c:	31 81       	ldd	r19, Z+1	; 0x01
    2e2e:	8f bf       	out	0x3f, r24	; 63
    2e30:	00 24       	eor	r0, r0
    2e32:	56 95       	lsr	r21
    2e34:	47 95       	ror	r20
    2e36:	07 94       	ror	r0
    2e38:	56 95       	lsr	r21
    2e3a:	47 95       	ror	r20
    2e3c:	07 94       	ror	r0
    2e3e:	54 2f       	mov	r21, r20
    2e40:	40 2d       	mov	r20, r0
    2e42:	48 5b       	subi	r20, 0xB8	; 184
    2e44:	56 4d       	sbci	r21, 0xD6	; 214
    2e46:	0b e9       	ldi	r16, 0x9B	; 155
    2e48:	16 e1       	ldi	r17, 0x16	; 22
    2e4a:	20 e4       	ldi	r18, 0x40	; 64
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	61 e0       	ldi	r22, 0x01	; 1
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2e56:	a6 cf       	rjmp	.-180    	; 0x2da4 <udi_cdc_data_received+0x6e>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	d2 cf       	rjmp	.-92     	; 0x2e00 <udi_cdc_data_received+0xca>

00002e5c <udi_cdc_getc>:
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <udi_cdc_getc+0x10>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	ff 24       	eor	r15, r15
    2e72:	f3 94       	inc	r15
    2e74:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <udi_cdc_line_coding+0x6>
    2e78:	89 30       	cpi	r24, 0x09	; 9
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <udi_cdc_getc+0x22>
    2e7c:	f1 2c       	mov	r15, r1
    2e7e:	40 e0       	ldi	r20, 0x00	; 0
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	8f b7       	in	r24, 0x3f	; 63
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	f8 94       	cli
    2e88:	ab 81       	ldd	r26, Y+3	; 0x03
    2e8a:	20 91 41 29 	lds	r18, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2e8e:	30 91 42 29 	lds	r19, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2e92:	80 91 43 29 	lds	r24, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	fc 01       	movw	r30, r24
    2e9a:	ee 0f       	add	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	ec 5b       	subi	r30, 0xBC	; 188
    2ea0:	f6 4d       	sbci	r31, 0xD6	; 214
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	af bf       	out	0x3f, r26	; 63
    2ea8:	26 17       	cp	r18, r22
    2eaa:	37 07       	cpc	r19, r23
    2eac:	80 f0       	brcs	.+32     	; 0x2ece <udi_cdc_getc+0x72>
    2eae:	80 91 c8 29 	lds	r24, 0x29C8	; 0x8029c8 <udi_cdc_data_running>
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	e6 cf       	rjmp	.-52     	; 0x2e82 <udi_cdc_getc+0x26>
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	23 96       	adiw	r28, 0x03	; 3
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	ff 90       	pop	r15
    2ec8:	df 90       	pop	r13
    2eca:	cf 90       	pop	r12
    2ecc:	08 95       	ret
    2ece:	fc 01       	movw	r30, r24
    2ed0:	00 24       	eor	r0, r0
    2ed2:	f6 95       	lsr	r31
    2ed4:	e7 95       	ror	r30
    2ed6:	07 94       	ror	r0
    2ed8:	f6 95       	lsr	r31
    2eda:	e7 95       	ror	r30
    2edc:	07 94       	ror	r0
    2ede:	fe 2f       	mov	r31, r30
    2ee0:	e0 2d       	mov	r30, r0
    2ee2:	e8 5b       	subi	r30, 0xB8	; 184
    2ee4:	f6 4d       	sbci	r31, 0xD6	; 214
    2ee6:	e2 0f       	add	r30, r18
    2ee8:	f3 1f       	adc	r31, r19
    2eea:	80 81       	ld	r24, Z
    2eec:	6a 01       	movw	r12, r20
    2eee:	c8 2a       	or	r12, r24
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	20 93 41 29 	sts	0x2941, r18	; 0x802941 <udi_cdc_rx_pos>
    2ef8:	30 93 42 29 	sts	0x2942, r19	; 0x802942 <udi_cdc_rx_pos+0x1>
    2efc:	8f b7       	in	r24, 0x3f	; 63
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	f8 94       	cli
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	20 91 43 29 	lds	r18, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2f08:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2f0c:	91 11       	cpse	r25, r1
    2f0e:	10 c0       	rjmp	.+32     	; 0x2f30 <udi_cdc_getc+0xd4>
    2f10:	a0 91 41 29 	lds	r26, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2f14:	b0 91 42 29 	lds	r27, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2f18:	42 2f       	mov	r20, r18
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	fa 01       	movw	r30, r20
    2f1e:	ee 0f       	add	r30, r30
    2f20:	ff 1f       	adc	r31, r31
    2f22:	ec 5b       	subi	r30, 0xBC	; 188
    2f24:	f6 4d       	sbci	r31, 0xD6	; 214
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	a6 17       	cp	r26, r22
    2f2c:	b7 07       	cpc	r27, r23
    2f2e:	38 f4       	brcc	.+14     	; 0x2f3e <udi_cdc_getc+0xe2>
    2f30:	8f bf       	out	0x3f, r24	; 63
    2f32:	ff 20       	and	r15, r15
    2f34:	c1 f1       	breq	.+112    	; 0x2fa6 <udi_cdc_getc+0x14a>
    2f36:	5c 2d       	mov	r21, r12
    2f38:	44 27       	eor	r20, r20
    2f3a:	f1 2c       	mov	r15, r1
    2f3c:	a2 cf       	rjmp	.-188    	; 0x2e82 <udi_cdc_getc+0x26>
    2f3e:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <udi_cdc_rx_pos>
    2f42:	10 92 42 29 	sts	0x2942, r1	; 0x802942 <udi_cdc_rx_pos+0x1>
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	21 11       	cpse	r18, r1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	90 93 43 29 	sts	0x2943, r25	; 0x802943 <udi_cdc_rx_buf_sel>
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	90 93 40 29 	sts	0x2940, r25	; 0x802940 <udi_cdc_rx_trans_ongoing>
    2f56:	8f bf       	out	0x3f, r24	; 63
    2f58:	8f b7       	in	r24, 0x3f	; 63
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	f8 94       	cli
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	20 91 41 29 	lds	r18, 0x2941	; 0x802941 <udi_cdc_rx_pos>
    2f64:	30 91 42 29 	lds	r19, 0x2942	; 0x802942 <udi_cdc_rx_pos+0x1>
    2f68:	e0 91 43 29 	lds	r30, 0x2943	; 0x802943 <udi_cdc_rx_buf_sel>
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	ee 0f       	add	r30, r30
    2f70:	ff 1f       	adc	r31, r31
    2f72:	ec 5b       	subi	r30, 0xBC	; 188
    2f74:	f6 4d       	sbci	r31, 0xD6	; 214
    2f76:	20 81       	ld	r18, Z
    2f78:	31 81       	ldd	r19, Z+1	; 0x01
    2f7a:	8f bf       	out	0x3f, r24	; 63
    2f7c:	00 24       	eor	r0, r0
    2f7e:	56 95       	lsr	r21
    2f80:	47 95       	ror	r20
    2f82:	07 94       	ror	r0
    2f84:	56 95       	lsr	r21
    2f86:	47 95       	ror	r20
    2f88:	07 94       	ror	r0
    2f8a:	54 2f       	mov	r21, r20
    2f8c:	40 2d       	mov	r20, r0
    2f8e:	48 5b       	subi	r20, 0xB8	; 184
    2f90:	56 4d       	sbci	r21, 0xD6	; 214
    2f92:	0b e9       	ldi	r16, 0x9B	; 155
    2f94:	16 e1       	ldi	r17, 0x16	; 22
    2f96:	20 e4       	ldi	r18, 0x40	; 64
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <udd_ep_run>
    2fa2:	f1 10       	cpse	r15, r1
    2fa4:	c8 cf       	rjmp	.-112    	; 0x2f36 <udi_cdc_getc+0xda>
    2fa6:	c6 01       	movw	r24, r12
    2fa8:	87 cf       	rjmp	.-242    	; 0x2eb8 <udi_cdc_getc+0x5c>

00002faa <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	1f 92       	push	r1
    2fb4:	1f 92       	push	r1
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2fba:	61 e0       	ldi	r22, 0x01	; 1
    2fbc:	20 91 de 29 	lds	r18, 0x29DE	; 0x8029de <udi_cdc_line_coding+0x6>
    2fc0:	29 30       	cpi	r18, 0x09	; 9
    2fc2:	09 f0       	breq	.+2      	; 0x2fc6 <udi_cdc_putc+0x1c>
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
		if ((!udi_cdc_tx_trans_ongoing[port])
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    2fc6:	71 e0       	ldi	r23, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2fc8:	2f b7       	in	r18, 0x3f	; 63
    2fca:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2fcc:	f8 94       	cli
	return flags;
    2fce:	59 81       	ldd	r21, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    2fd0:	40 91 bb 28 	lds	r20, 0x28BB	; 0x8028bb <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    2fd4:	e4 2f       	mov	r30, r20
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	e4 54       	subi	r30, 0x44	; 68
    2fde:	f7 4d       	sbci	r31, 0xD7	; 215
    2fe0:	20 81       	ld	r18, Z
    2fe2:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    2fe4:	20 34       	cpi	r18, 0x40	; 64
    2fe6:	31 05       	cpc	r19, r1
    2fe8:	d9 f1       	breq	.+118    	; 0x3060 <udi_cdc_putc+0xb6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fea:	5f bf       	out	0x3f, r21	; 63

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    2fec:	20 34       	cpi	r18, 0x40	; 64
    2fee:	31 05       	cpc	r19, r1
    2ff0:	69 f4       	brne	.+26     	; 0x300c <udi_cdc_putc+0x62>
		if (!udi_cdc_data_running) {
    2ff2:	20 91 c8 29 	lds	r18, 0x29C8	; 0x8029c8 <udi_cdc_data_running>
    2ff6:	21 11       	cpse	r18, r1
    2ff8:	e7 cf       	rjmp	.-50     	; 0x2fc8 <udi_cdc_putc+0x1e>
			return false;
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
}

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    300c:	2f b7       	in	r18, 0x3f	; 63
    300e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    3010:	f8 94       	cli
	return flags;
    3012:	aa 81       	ldd	r26, Y+2	; 0x02
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3014:	20 91 bb 28 	lds	r18, 0x28BB	; 0x8028bb <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	f9 01       	movw	r30, r18
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	e4 54       	subi	r30, 0x44	; 68
    3022:	f7 4d       	sbci	r31, 0xD7	; 215
    3024:	40 81       	ld	r20, Z
    3026:	51 81       	ldd	r21, Z+1	; 0x01
    3028:	8a 01       	movw	r16, r20
    302a:	0f 5f       	subi	r16, 0xFF	; 255
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	00 83       	st	Z, r16
    3030:	11 83       	std	Z+1, r17	; 0x01
    3032:	00 24       	eor	r0, r0
    3034:	36 95       	lsr	r19
    3036:	27 95       	ror	r18
    3038:	07 94       	ror	r0
    303a:	36 95       	lsr	r19
    303c:	27 95       	ror	r18
    303e:	07 94       	ror	r0
    3040:	32 2f       	mov	r19, r18
    3042:	20 2d       	mov	r18, r0
    3044:	20 54       	subi	r18, 0x40	; 64
    3046:	37 4d       	sbci	r19, 0xD7	; 215
    3048:	f9 01       	movw	r30, r18
    304a:	e4 0f       	add	r30, r20
    304c:	f5 1f       	adc	r31, r21
    304e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3050:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3052:	66 23       	and	r22, r22
    3054:	b9 f0       	breq	.+46     	; 0x3084 <udi_cdc_putc+0xda>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3056:	89 2f       	mov	r24, r25
    3058:	99 0f       	add	r25, r25
    305a:	99 0b       	sbc	r25, r25
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	b4 cf       	rjmp	.-152    	; 0x2fc8 <udi_cdc_putc+0x1e>

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
    3060:	e0 91 b8 28 	lds	r30, 0x28B8	; 0x8028b8 <udi_cdc_tx_trans_ongoing>
    3064:	e1 11       	cpse	r30, r1
    3066:	c1 cf       	rjmp	.-126    	; 0x2fea <udi_cdc_putc+0x40>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    3068:	e0 91 b7 28 	lds	r30, 0x28B7	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
    306c:	e1 11       	cpse	r30, r1
    306e:	bd cf       	rjmp	.-134    	; 0x2fea <udi_cdc_putc+0x40>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    3070:	70 93 b7 28 	sts	0x28B7, r23	; 0x8028b7 <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    3074:	21 e0       	ldi	r18, 0x01	; 1
    3076:	41 11       	cpse	r20, r1
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	20 93 bb 28 	sts	0x28BB, r18	; 0x8028bb <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	b3 cf       	rjmp	.-154    	; 0x2fea <udi_cdc_putc+0x40>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
}

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	08 95       	ret

00003096 <udc_valid_address>:
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
}
    3096:	80 91 be 2d 	lds	r24, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    309a:	8f 77       	andi	r24, 0x7F	; 127
    309c:	0c 94 87 53 	jmp	0xa70e	; 0xa70e <udd_set_address>

000030a0 <udc_update_iface_desc.part.0>:
    30a0:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    30a4:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    30a8:	01 90       	ld	r0, Z+
    30aa:	f0 81       	ld	r31, Z
    30ac:	e0 2d       	mov	r30, r0
    30ae:	94 81       	ldd	r25, Z+4	; 0x04
    30b0:	89 17       	cp	r24, r25
    30b2:	28 f5       	brcc	.+74     	; 0x30fe <udc_update_iface_desc.part.0+0x5e>
    30b4:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    30b8:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    30bc:	22 81       	ldd	r18, Z+2	; 0x02
    30be:	33 81       	ldd	r19, Z+3	; 0x03
    30c0:	2e 0f       	add	r18, r30
    30c2:	3f 1f       	adc	r19, r31
    30c4:	e2 17       	cp	r30, r18
    30c6:	f3 07       	cpc	r31, r19
    30c8:	38 f0       	brcs	.+14     	; 0x30d8 <udc_update_iface_desc.part.0+0x38>
    30ca:	19 c0       	rjmp	.+50     	; 0x30fe <udc_update_iface_desc.part.0+0x5e>
    30cc:	90 81       	ld	r25, Z
    30ce:	e9 0f       	add	r30, r25
    30d0:	f1 1d       	adc	r31, r1
    30d2:	e2 17       	cp	r30, r18
    30d4:	f3 07       	cpc	r31, r19
    30d6:	78 f4       	brcc	.+30     	; 0x30f6 <udc_update_iface_desc.part.0+0x56>
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	94 30       	cpi	r25, 0x04	; 4
    30dc:	b9 f7       	brne	.-18     	; 0x30cc <udc_update_iface_desc.part.0+0x2c>
    30de:	92 81       	ldd	r25, Z+2	; 0x02
    30e0:	89 13       	cpse	r24, r25
    30e2:	f4 cf       	rjmp	.-24     	; 0x30cc <udc_update_iface_desc.part.0+0x2c>
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	96 13       	cpse	r25, r22
    30e8:	f1 cf       	rjmp	.-30     	; 0x30cc <udc_update_iface_desc.part.0+0x2c>
    30ea:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    30ee:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	08 95       	ret
    30f6:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    30fa:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	08 95       	ret

00003102 <udc_iface_disable.part.1>:
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	f8 2e       	mov	r15, r24
    310e:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3112:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    3116:	e8 2f       	mov	r30, r24
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	cf 01       	movw	r24, r30
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	12 96       	adiw	r26, 0x02	; 2
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	13 97       	sbiw	r26, 0x03	; 3
    3128:	e8 0f       	add	r30, r24
    312a:	f9 1f       	adc	r31, r25
    312c:	00 81       	ld	r16, Z
    312e:	11 81       	ldd	r17, Z+1	; 0x01
    3130:	d8 01       	movw	r26, r16
    3132:	16 96       	adiw	r26, 0x06	; 6
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	17 97       	sbiw	r26, 0x07	; 7
    313a:	19 95       	eicall
    313c:	90 91 e6 29 	lds	r25, 0x29E6	; 0x8029e6 <udc_num_configuration>
    3140:	91 11       	cpse	r25, r1
    3142:	07 c0       	rjmp	.+14     	; 0x3152 <udc_iface_disable.part.1+0x50>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	08 95       	ret
    3152:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3156:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    315a:	01 90       	ld	r0, Z+
    315c:	f0 81       	ld	r31, Z
    315e:	e0 2d       	mov	r30, r0
    3160:	94 81       	ldd	r25, Z+4	; 0x04
    3162:	f9 16       	cp	r15, r25
    3164:	78 f7       	brcc	.-34     	; 0x3144 <udc_iface_disable.part.1+0x42>
    3166:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    316a:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    316e:	22 81       	ldd	r18, Z+2	; 0x02
    3170:	33 81       	ldd	r19, Z+3	; 0x03
    3172:	2e 0f       	add	r18, r30
    3174:	3f 1f       	adc	r19, r31
    3176:	e2 17       	cp	r30, r18
    3178:	f3 07       	cpc	r31, r19
    317a:	20 f7       	brcc	.-56     	; 0x3144 <udc_iface_disable.part.1+0x42>
    317c:	ef 01       	movw	r28, r30
    317e:	06 c0       	rjmp	.+12     	; 0x318c <udc_iface_disable.part.1+0x8a>
    3180:	98 81       	ld	r25, Y
    3182:	c9 0f       	add	r28, r25
    3184:	d1 1d       	adc	r29, r1
    3186:	c2 17       	cp	r28, r18
    3188:	d3 07       	cpc	r29, r19
    318a:	30 f5       	brcc	.+76     	; 0x31d8 <udc_iface_disable.part.1+0xd6>
    318c:	99 81       	ldd	r25, Y+1	; 0x01
    318e:	94 30       	cpi	r25, 0x04	; 4
    3190:	b9 f7       	brne	.-18     	; 0x3180 <udc_iface_disable.part.1+0x7e>
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	f9 12       	cpse	r15, r25
    3196:	f4 cf       	rjmp	.-24     	; 0x3180 <udc_iface_disable.part.1+0x7e>
    3198:	9b 81       	ldd	r25, Y+3	; 0x03
    319a:	89 13       	cpse	r24, r25
    319c:	f1 cf       	rjmp	.-30     	; 0x3180 <udc_iface_disable.part.1+0x7e>
    319e:	c0 93 e2 29 	sts	0x29E2, r28	; 0x8029e2 <udc_ptr_iface>
    31a2:	d0 93 e3 29 	sts	0x29E3, r29	; 0x8029e3 <udc_ptr_iface+0x1>
    31a6:	05 c0       	rjmp	.+10     	; 0x31b2 <udc_iface_disable.part.1+0xb0>
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	84 30       	cpi	r24, 0x04	; 4
    31ac:	41 f0       	breq	.+16     	; 0x31be <udc_iface_disable.part.1+0xbc>
    31ae:	85 30       	cpi	r24, 0x05	; 5
    31b0:	c1 f0       	breq	.+48     	; 0x31e2 <udc_iface_disable.part.1+0xe0>
    31b2:	88 81       	ld	r24, Y
    31b4:	c8 0f       	add	r28, r24
    31b6:	d1 1d       	adc	r29, r1
    31b8:	c2 17       	cp	r28, r18
    31ba:	d3 07       	cpc	r29, r19
    31bc:	a8 f3       	brcs	.-22     	; 0x31a8 <udc_iface_disable.part.1+0xa6>
    31be:	d8 01       	movw	r26, r16
    31c0:	12 96       	adiw	r26, 0x02	; 2
    31c2:	ed 91       	ld	r30, X+
    31c4:	fc 91       	ld	r31, X
    31c6:	13 97       	sbiw	r26, 0x03	; 3
    31c8:	19 95       	eicall
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	08 95       	ret
    31d8:	c0 93 e2 29 	sts	0x29E2, r28	; 0x8029e2 <udc_ptr_iface>
    31dc:	d0 93 e3 29 	sts	0x29E3, r29	; 0x8029e3 <udc_ptr_iface+0x1>
    31e0:	b1 cf       	rjmp	.-158    	; 0x3144 <udc_iface_disable.part.1+0x42>
    31e2:	20 97       	sbiw	r28, 0x00	; 0
    31e4:	61 f3       	breq	.-40     	; 0x31be <udc_iface_disable.part.1+0xbc>
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	0e 94 17 54 	call	0xa82e	; 0xa82e <udd_ep_free>
    31ec:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    31f0:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    31f4:	01 90       	ld	r0, Z+
    31f6:	f0 81       	ld	r31, Z
    31f8:	e0 2d       	mov	r30, r0
    31fa:	22 81       	ldd	r18, Z+2	; 0x02
    31fc:	33 81       	ldd	r19, Z+3	; 0x03
    31fe:	2e 0f       	add	r18, r30
    3200:	3f 1f       	adc	r19, r31
    3202:	d7 cf       	rjmp	.-82     	; 0x31b2 <udc_iface_disable.part.1+0xb0>

00003204 <udc_start>:
    3204:	0c 94 c2 52 	jmp	0xa584	; 0xa584 <udd_enable>

00003208 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3208:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    320a:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    320e:	88 23       	and	r24, r24
    3210:	09 f4       	brne	.+2      	; 0x3214 <udc_reset+0xc>
    3212:	46 c0       	rjmp	.+140    	; 0x32a0 <udc_reset+0x98>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3214:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3218:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    321c:	a0 81       	ld	r26, Z
    321e:	b1 81       	ldd	r27, Z+1	; 0x01
    3220:	14 96       	adiw	r26, 0x04	; 4
    3222:	9c 91       	ld	r25, X
    3224:	14 97       	sbiw	r26, 0x04	; 4
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3226:	99 23       	and	r25, r25
    3228:	d9 f1       	breq	.+118    	; 0x32a0 <udc_reset+0x98>
    322a:	c0 e0       	ldi	r28, 0x00	; 0
    322c:	05 c0       	rjmp	.+10     	; 0x3238 <udc_reset+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    322e:	cf 5f       	subi	r28, 0xFF	; 255
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3230:	c9 17       	cp	r28, r25
    3232:	b0 f5       	brcc	.+108    	; 0x32a0 <udc_reset+0x98>
    3234:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3238:	88 23       	and	r24, r24
    323a:	c9 f3       	breq	.-14     	; 0x322e <udc_reset+0x26>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    323c:	c9 17       	cp	r28, r25
    323e:	b8 f7       	brcc	.-18     	; 0x322e <udc_reset+0x26>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3240:	a0 93 e2 29 	sts	0x29E2, r26	; 0x8029e2 <udc_ptr_iface>
    3244:	b0 93 e3 29 	sts	0x29E3, r27	; 0x8029e3 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3248:	12 96       	adiw	r26, 0x02	; 2
    324a:	2d 91       	ld	r18, X+
    324c:	3c 91       	ld	r19, X
    324e:	13 97       	sbiw	r26, 0x03	; 3
    3250:	2a 0f       	add	r18, r26
    3252:	3b 1f       	adc	r19, r27
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3254:	a2 17       	cp	r26, r18
    3256:	b3 07       	cpc	r27, r19
    3258:	50 f7       	brcc	.-44     	; 0x322e <udc_reset+0x26>
    325a:	fd 01       	movw	r30, r26
    325c:	06 c0       	rjmp	.+12     	; 0x326a <udc_reset+0x62>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    325e:	80 81       	ld	r24, Z
    3260:	e8 0f       	add	r30, r24
    3262:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3264:	e2 17       	cp	r30, r18
    3266:	f3 07       	cpc	r31, r19
    3268:	28 f5       	brcc	.+74     	; 0x32b4 <udc_reset+0xac>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    326a:	81 81       	ldd	r24, Z+1	; 0x01
    326c:	84 30       	cpi	r24, 0x04	; 4
    326e:	b9 f7       	brne	.-18     	; 0x325e <udc_reset+0x56>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	c8 13       	cpse	r28, r24
    3274:	f4 cf       	rjmp	.-24     	; 0x325e <udc_reset+0x56>
    3276:	83 81       	ldd	r24, Z+3	; 0x03
    3278:	81 11       	cpse	r24, r1
    327a:	f1 cf       	rjmp	.-30     	; 0x325e <udc_reset+0x56>
    327c:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    3280:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    3284:	8c 2f       	mov	r24, r28
    3286:	3d df       	rcall	.-390    	; 0x3102 <udc_iface_disable.part.1>
    3288:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    328c:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    3290:	a0 81       	ld	r26, Z
    3292:	b1 81       	ldd	r27, Z+1	; 0x01
    3294:	14 96       	adiw	r26, 0x04	; 4
    3296:	9c 91       	ld	r25, X
    3298:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    329a:	cf 5f       	subi	r28, 0xFF	; 255
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    329c:	c9 17       	cp	r28, r25
    329e:	50 f2       	brcs	.-108    	; 0x3234 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    32a0:	10 92 e6 29 	sts	0x29E6, r1	; 0x8029e6 <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	80 93 ea 29 	sts	0x29EA, r24	; 0x8029ea <udc_device_status>
    32ac:	90 93 eb 29 	sts	0x29EB, r25	; 0x8029eb <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    32b0:	cf 91       	pop	r28
    32b2:	08 95       	ret
    32b4:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    32b8:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    32bc:	b8 cf       	rjmp	.-144    	; 0x322e <udc_reset+0x26>

000032be <udc_sof_notify>:

void udc_sof_notify(void)
{
    32be:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    32c0:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    32c4:	88 23       	and	r24, r24
    32c6:	49 f1       	breq	.+82     	; 0x331a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    32c8:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    32cc:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    32d0:	ed 91       	ld	r30, X+
    32d2:	fc 91       	ld	r31, X
    32d4:	11 97       	sbiw	r26, 0x01	; 1
    32d6:	24 81       	ldd	r18, Z+4	; 0x04
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    32d8:	22 23       	and	r18, r18
    32da:	f9 f0       	breq	.+62     	; 0x331a <udc_sof_notify+0x5c>
    32dc:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    32de:	ec 2f       	mov	r30, r28
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	ee 0f       	add	r30, r30
    32e4:	ff 1f       	adc	r31, r31
    32e6:	12 96       	adiw	r26, 0x02	; 2
    32e8:	8d 91       	ld	r24, X+
    32ea:	9c 91       	ld	r25, X
    32ec:	13 97       	sbiw	r26, 0x03	; 3
    32ee:	e8 0f       	add	r30, r24
    32f0:	f9 1f       	adc	r31, r25
    32f2:	01 90       	ld	r0, Z+
    32f4:	f0 81       	ld	r31, Z
    32f6:	e0 2d       	mov	r30, r0
    32f8:	00 84       	ldd	r0, Z+8	; 0x08
    32fa:	f1 85       	ldd	r31, Z+9	; 0x09
    32fc:	e0 2d       	mov	r30, r0
    32fe:	30 97       	sbiw	r30, 0x00	; 0
    3300:	49 f0       	breq	.+18     	; 0x3314 <udc_sof_notify+0x56>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3302:	19 95       	eicall
    3304:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3308:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    330c:	ed 91       	ld	r30, X+
    330e:	fc 91       	ld	r31, X
    3310:	11 97       	sbiw	r26, 0x01	; 1
    3312:	24 81       	ldd	r18, Z+4	; 0x04
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3314:	cf 5f       	subi	r28, 0xFF	; 255
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3316:	c2 17       	cp	r28, r18
    3318:	10 f3       	brcs	.-60     	; 0x32de <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3326:	10 92 c6 2d 	sts	0x2DC6, r1	; 0x802dc6 <udd_g_ctrlreq+0xa>
    332a:	10 92 c7 2d 	sts	0x2DC7, r1	; 0x802dc7 <udd_g_ctrlreq+0xb>
	udd_g_ctrlreq.callback = NULL;
    332e:	10 92 c8 2d 	sts	0x2DC8, r1	; 0x802dc8 <udd_g_ctrlreq+0xc>
    3332:	10 92 c9 2d 	sts	0x2DC9, r1	; 0x802dc9 <udd_g_ctrlreq+0xd>
	udd_g_ctrlreq.over_under_run = NULL;
    3336:	10 92 ca 2d 	sts	0x2DCA, r1	; 0x802dca <udd_g_ctrlreq+0xe>
    333a:	10 92 cb 2d 	sts	0x2DCB, r1	; 0x802dcb <udd_g_ctrlreq+0xf>

	if (Udd_setup_is_in()) {
    333e:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    3342:	87 fd       	sbrc	r24, 7
    3344:	11 c0       	rjmp	.+34     	; 0x3368 <udc_process_setup+0x4a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3346:	98 2f       	mov	r25, r24
    3348:	90 76       	andi	r25, 0x60	; 96
    334a:	09 f4       	brne	.+2      	; 0x334e <udc_process_setup+0x30>
    334c:	94 c0       	rjmp	.+296    	; 0x3476 <udc_process_setup+0x158>
    334e:	98 2f       	mov	r25, r24
    3350:	9f 71       	andi	r25, 0x1F	; 31
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3352:	91 30       	cpi	r25, 0x01	; 1
    3354:	09 f4       	brne	.+2      	; 0x3358 <udc_process_setup+0x3a>
    3356:	b7 c0       	rjmp	.+366    	; 0x34c6 <udc_process_setup+0x1a8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3358:	92 30       	cpi	r25, 0x02	; 2
    335a:	49 f1       	breq	.+82     	; 0x33ae <udc_process_setup+0x90>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    335c:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	08 95       	ret
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
    3368:	20 91 c2 2d 	lds	r18, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    336c:	30 91 c3 2d 	lds	r19, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    3370:	21 15       	cp	r18, r1
    3372:	31 05       	cpc	r19, r1
    3374:	99 f3       	breq	.-26     	; 0x335c <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3376:	98 2f       	mov	r25, r24
    3378:	90 76       	andi	r25, 0x60	; 96
    337a:	49 f7       	brne	.-46     	; 0x334e <udc_process_setup+0x30>
    337c:	98 2f       	mov	r25, r24
    337e:	9f 71       	andi	r25, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3380:	09 f0       	breq	.+2      	; 0x3384 <udc_process_setup+0x66>
    3382:	38 c1       	rjmp	.+624    	; 0x35f4 <udc_process_setup+0x2d6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3384:	90 91 bd 2d 	lds	r25, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3388:	96 30       	cpi	r25, 0x06	; 6
    338a:	09 f4       	brne	.+2      	; 0x338e <udc_process_setup+0x70>
    338c:	1b c2       	rjmp	.+1078   	; 0x37c4 <udc_process_setup+0x4a6>
    338e:	98 30       	cpi	r25, 0x08	; 8
    3390:	09 f4       	brne	.+2      	; 0x3394 <udc_process_setup+0x76>
    3392:	0c c2       	rjmp	.+1048   	; 0x37ac <udc_process_setup+0x48e>
    3394:	91 11       	cpse	r25, r1
    3396:	e2 cf       	rjmp	.-60     	; 0x335c <udc_process_setup+0x3e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3398:	22 30       	cpi	r18, 0x02	; 2
    339a:	31 05       	cpc	r19, r1
    339c:	f9 f6       	brne	.-66     	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    339e:	62 e0       	ldi	r22, 0x02	; 2
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	8a ee       	ldi	r24, 0xEA	; 234
    33a4:	99 e2       	ldi	r25, 0x29	; 41
    33a6:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	d8 cf       	rjmp	.-80     	; 0x335e <udc_process_setup+0x40>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    33ae:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    33b2:	88 23       	and	r24, r24
    33b4:	99 f2       	breq	.-90     	; 0x335c <udc_process_setup+0x3e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    33b6:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    33ba:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    33be:	ed 91       	ld	r30, X+
    33c0:	fc 91       	ld	r31, X
    33c2:	11 97       	sbiw	r26, 0x01	; 1
    33c4:	84 81       	ldd	r24, Z+4	; 0x04
    33c6:	88 23       	and	r24, r24
    33c8:	49 f2       	breq	.-110    	; 0x335c <udc_process_setup+0x3e>
    33ca:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    33cc:	e1 2f       	mov	r30, r17
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	ee 0f       	add	r30, r30
    33d2:	ff 1f       	adc	r31, r31
    33d4:	12 96       	adiw	r26, 0x02	; 2
    33d6:	8d 91       	ld	r24, X+
    33d8:	9c 91       	ld	r25, X
    33da:	13 97       	sbiw	r26, 0x03	; 3
    33dc:	e8 0f       	add	r30, r24
    33de:	f9 1f       	adc	r31, r25
    33e0:	c0 81       	ld	r28, Z
    33e2:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    33e4:	ee 81       	ldd	r30, Y+6	; 0x06
    33e6:	ff 81       	ldd	r31, Y+7	; 0x07
    33e8:	19 95       	eicall
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    33ea:	90 91 e6 29 	lds	r25, 0x29E6	; 0x8029e6 <udc_num_configuration>
    33ee:	99 23       	and	r25, r25
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <udc_process_setup+0xd6>
    33f2:	b4 cf       	rjmp	.-152    	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    33f4:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    33f8:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    33fc:	01 90       	ld	r0, Z+
    33fe:	f0 81       	ld	r31, Z
    3400:	e0 2d       	mov	r30, r0
    3402:	94 81       	ldd	r25, Z+4	; 0x04
    3404:	19 17       	cp	r17, r25
    3406:	08 f0       	brcs	.+2      	; 0x340a <udc_process_setup+0xec>
    3408:	a9 cf       	rjmp	.-174    	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    340a:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    340e:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3412:	22 81       	ldd	r18, Z+2	; 0x02
    3414:	33 81       	ldd	r19, Z+3	; 0x03
    3416:	2e 0f       	add	r18, r30
    3418:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    341a:	e2 17       	cp	r30, r18
    341c:	f3 07       	cpc	r31, r19
    341e:	38 f0       	brcs	.+14     	; 0x342e <udc_process_setup+0x110>
    3420:	9d cf       	rjmp	.-198    	; 0x335c <udc_process_setup+0x3e>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3422:	90 81       	ld	r25, Z
    3424:	e9 0f       	add	r30, r25
    3426:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3428:	e2 17       	cp	r30, r18
    342a:	f3 07       	cpc	r31, r19
    342c:	f8 f4       	brcc	.+62     	; 0x346c <udc_process_setup+0x14e>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	94 30       	cpi	r25, 0x04	; 4
    3432:	b9 f7       	brne	.-18     	; 0x3422 <udc_process_setup+0x104>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3434:	92 81       	ldd	r25, Z+2	; 0x02
    3436:	19 13       	cpse	r17, r25
    3438:	f4 cf       	rjmp	.-24     	; 0x3422 <udc_process_setup+0x104>
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	89 13       	cpse	r24, r25
    343e:	f1 cf       	rjmp	.-30     	; 0x3422 <udc_process_setup+0x104>
    3440:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    3444:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3448:	ec 81       	ldd	r30, Y+4	; 0x04
    344a:	fd 81       	ldd	r31, Y+5	; 0x05
    344c:	19 95       	eicall
    344e:	81 11       	cpse	r24, r1
    3450:	ac cf       	rjmp	.-168    	; 0x33aa <udc_process_setup+0x8c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3452:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3454:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3458:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    345c:	ed 91       	ld	r30, X+
    345e:	fc 91       	ld	r31, X
    3460:	11 97       	sbiw	r26, 0x01	; 1
    3462:	84 81       	ldd	r24, Z+4	; 0x04
    3464:	18 17       	cp	r17, r24
    3466:	08 f4       	brcc	.+2      	; 0x346a <udc_process_setup+0x14c>
    3468:	b1 cf       	rjmp	.-158    	; 0x33cc <udc_process_setup+0xae>
    346a:	78 cf       	rjmp	.-272    	; 0x335c <udc_process_setup+0x3e>
    346c:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    3470:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    3474:	73 cf       	rjmp	.-282    	; 0x335c <udc_process_setup+0x3e>
    3476:	98 2f       	mov	r25, r24
    3478:	9f 71       	andi	r25, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    347a:	09 f0       	breq	.+2      	; 0x347e <udc_process_setup+0x160>
    347c:	74 c0       	rjmp	.+232    	; 0x3566 <udc_process_setup+0x248>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    347e:	80 91 bd 2d 	lds	r24, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3482:	85 30       	cpi	r24, 0x05	; 5
    3484:	09 f4       	brne	.+2      	; 0x3488 <udc_process_setup+0x16a>
    3486:	31 c1       	rjmp	.+610    	; 0x36ea <udc_process_setup+0x3cc>
    3488:	89 30       	cpi	r24, 0x09	; 9
    348a:	09 f4       	brne	.+2      	; 0x348e <udc_process_setup+0x170>
    348c:	95 c0       	rjmp	.+298    	; 0x35b8 <udc_process_setup+0x29a>
    348e:	81 30       	cpi	r24, 0x01	; 1
    3490:	09 f0       	breq	.+2      	; 0x3494 <udc_process_setup+0x176>
    3492:	64 cf       	rjmp	.-312    	; 0x335c <udc_process_setup+0x3e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3494:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    3498:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    349c:	89 2b       	or	r24, r25
    349e:	09 f0       	breq	.+2      	; 0x34a2 <udc_process_setup+0x184>
    34a0:	5d cf       	rjmp	.-326    	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    34a2:	80 91 be 2d 	lds	r24, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    34a6:	90 91 bf 2d 	lds	r25, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <udc_process_setup+0x192>
    34ae:	56 cf       	rjmp	.-340    	; 0x335c <udc_process_setup+0x3e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    34b0:	80 91 ea 29 	lds	r24, 0x29EA	; 0x8029ea <udc_device_status>
    34b4:	90 91 eb 29 	lds	r25, 0x29EB	; 0x8029eb <udc_device_status+0x1>
    34b8:	8d 7f       	andi	r24, 0xFD	; 253
    34ba:	80 93 ea 29 	sts	0x29EA, r24	; 0x8029ea <udc_device_status>
    34be:	90 93 eb 29 	sts	0x29EB, r25	; 0x8029eb <udc_device_status+0x1>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	4c cf       	rjmp	.-360    	; 0x335e <udc_process_setup+0x40>
    34c6:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    34ca:	88 23       	and	r24, r24
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <udc_process_setup+0x1b2>
    34ce:	46 cf       	rjmp	.-372    	; 0x335c <udc_process_setup+0x3e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    34d0:	20 91 c0 2d 	lds	r18, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    34d4:	30 91 c1 2d 	lds	r19, 0x2DC1	; 0x802dc1 <udd_g_ctrlreq+0x5>
    34d8:	c2 2f       	mov	r28, r18
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    34da:	a0 91 e4 29 	lds	r26, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    34de:	b0 91 e5 29 	lds	r27, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    34e2:	ed 91       	ld	r30, X+
    34e4:	fc 91       	ld	r31, X
    34e6:	11 97       	sbiw	r26, 0x01	; 1
    34e8:	84 81       	ldd	r24, Z+4	; 0x04
    34ea:	28 17       	cp	r18, r24
    34ec:	08 f0       	brcs	.+2      	; 0x34f0 <udc_process_setup+0x1d2>
    34ee:	36 cf       	rjmp	.-404    	; 0x335c <udc_process_setup+0x3e>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    34f0:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    34f4:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    34f8:	42 81       	ldd	r20, Z+2	; 0x02
    34fa:	53 81       	ldd	r21, Z+3	; 0x03
    34fc:	4e 0f       	add	r20, r30
    34fe:	5f 1f       	adc	r21, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3500:	e4 17       	cp	r30, r20
    3502:	f5 07       	cpc	r31, r21
    3504:	40 f0       	brcs	.+16     	; 0x3516 <udc_process_setup+0x1f8>
    3506:	2a cf       	rjmp	.-428    	; 0x335c <udc_process_setup+0x3e>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3508:	80 81       	ld	r24, Z
    350a:	e8 0f       	add	r30, r24
    350c:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    350e:	e4 17       	cp	r30, r20
    3510:	f5 07       	cpc	r31, r21
    3512:	08 f0       	brcs	.+2      	; 0x3516 <udc_process_setup+0x1f8>
    3514:	ab cf       	rjmp	.-170    	; 0x346c <udc_process_setup+0x14e>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3516:	81 81       	ldd	r24, Z+1	; 0x01
    3518:	84 30       	cpi	r24, 0x04	; 4
    351a:	b1 f7       	brne	.-20     	; 0x3508 <udc_process_setup+0x1ea>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	c8 13       	cpse	r28, r24
    3520:	f3 cf       	rjmp	.-26     	; 0x3508 <udc_process_setup+0x1ea>
    3522:	83 81       	ldd	r24, Z+3	; 0x03
    3524:	81 11       	cpse	r24, r1
    3526:	f0 cf       	rjmp	.-32     	; 0x3508 <udc_process_setup+0x1ea>
    3528:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    352c:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3530:	c9 01       	movw	r24, r18
    3532:	99 27       	eor	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	12 96       	adiw	r26, 0x02	; 2
    353a:	ed 91       	ld	r30, X+
    353c:	fc 91       	ld	r31, X
    353e:	13 97       	sbiw	r26, 0x03	; 3
    3540:	e8 0f       	add	r30, r24
    3542:	f9 1f       	adc	r31, r25
    3544:	00 81       	ld	r16, Z
    3546:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3548:	d8 01       	movw	r26, r16
    354a:	16 96       	adiw	r26, 0x06	; 6
    354c:	8d 91       	ld	r24, X+
    354e:	9c 91       	ld	r25, X
    3550:	17 97       	sbiw	r26, 0x07	; 7
    3552:	fc 01       	movw	r30, r24
    3554:	19 95       	eicall
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3556:	90 91 e6 29 	lds	r25, 0x29E6	; 0x8029e6 <udc_num_configuration>
    355a:	91 11       	cpse	r25, r1
    355c:	67 c1       	rjmp	.+718    	; 0x382c <udc_process_setup+0x50e>
    355e:	90 91 bc 2d 	lds	r25, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    3562:	9f 71       	andi	r25, 0x1F	; 31
    3564:	f9 ce       	rjmp	.-526    	; 0x3358 <udc_process_setup+0x3a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3566:	91 30       	cpi	r25, 0x01	; 1
    3568:	09 f4       	brne	.+2      	; 0x356c <udc_process_setup+0x24e>
    356a:	63 c0       	rjmp	.+198    	; 0x3632 <udc_process_setup+0x314>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    356c:	92 30       	cpi	r25, 0x02	; 2
    356e:	09 f0       	breq	.+2      	; 0x3572 <udc_process_setup+0x254>
    3570:	f0 ce       	rjmp	.-544    	; 0x3352 <udc_process_setup+0x34>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3572:	80 91 bd 2d 	lds	r24, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3576:	81 30       	cpi	r24, 0x01	; 1
    3578:	09 f4       	brne	.+2      	; 0x357c <udc_process_setup+0x25e>
    357a:	c6 c0       	rjmp	.+396    	; 0x3708 <udc_process_setup+0x3ea>
    357c:	83 30       	cpi	r24, 0x03	; 3
    357e:	09 f0       	breq	.+2      	; 0x3582 <udc_process_setup+0x264>
    3580:	16 cf       	rjmp	.-468    	; 0x33ae <udc_process_setup+0x90>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3582:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    3586:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    358a:	89 2b       	or	r24, r25
    358c:	09 f0       	breq	.+2      	; 0x3590 <udc_process_setup+0x272>
    358e:	0f cf       	rjmp	.-482    	; 0x33ae <udc_process_setup+0x90>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3590:	80 91 be 2d 	lds	r24, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    3594:	90 91 bf 2d 	lds	r25, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>
    3598:	89 2b       	or	r24, r25
    359a:	09 f0       	breq	.+2      	; 0x359e <udc_process_setup+0x280>
    359c:	08 cf       	rjmp	.-496    	; 0x33ae <udc_process_setup+0x90>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    359e:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    35a2:	0e 94 c4 55 	call	0xab88	; 0xab88 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    35a6:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    35aa:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <udd_ep_set_halt>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    35ae:	81 11       	cpse	r24, r1
    35b0:	fc ce       	rjmp	.-520    	; 0x33aa <udc_process_setup+0x8c>
    35b2:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    35b6:	cb ce       	rjmp	.-618    	; 0x334e <udc_process_setup+0x30>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    35b8:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    35bc:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    35c0:	89 2b       	or	r24, r25
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <udc_process_setup+0x2a8>
    35c4:	cb ce       	rjmp	.-618    	; 0x335c <udc_process_setup+0x3e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    35c6:	0e 94 8a 53 	call	0xa714	; 0xa714 <udd_getaddress>
    35ca:	88 23       	and	r24, r24
    35cc:	79 f0       	breq	.+30     	; 0x35ec <udc_process_setup+0x2ce>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    35ce:	20 91 be 2d 	lds	r18, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    35d2:	30 91 bf 2d 	lds	r19, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>
    35d6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    35d8:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config>
    35dc:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    35e0:	81 89       	ldd	r24, Z+17	; 0x11
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	82 17       	cp	r24, r18
    35e6:	93 07       	cpc	r25, r19
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <udc_process_setup+0x2ce>
    35ea:	69 c1       	rjmp	.+722    	; 0x38be <udc_process_setup+0x5a0>
    35ec:	90 91 bc 2d 	lds	r25, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    35f0:	9f 71       	andi	r25, 0x1F	; 31
    35f2:	af ce       	rjmp	.-674    	; 0x3352 <udc_process_setup+0x34>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    35f4:	91 30       	cpi	r25, 0x01	; 1
    35f6:	09 f4       	brne	.+2      	; 0x35fa <udc_process_setup+0x2dc>
    35f8:	9a c0       	rjmp	.+308    	; 0x372e <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    35fa:	92 30       	cpi	r25, 0x02	; 2
    35fc:	09 f0       	breq	.+2      	; 0x3600 <udc_process_setup+0x2e2>
    35fe:	a9 ce       	rjmp	.-686    	; 0x3352 <udc_process_setup+0x34>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3600:	80 91 bd 2d 	lds	r24, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3604:	81 11       	cpse	r24, r1
    3606:	d3 ce       	rjmp	.-602    	; 0x33ae <udc_process_setup+0x90>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3608:	22 30       	cpi	r18, 0x02	; 2
    360a:	31 05       	cpc	r19, r1
    360c:	09 f0       	breq	.+2      	; 0x3610 <udc_process_setup+0x2f2>
    360e:	cf ce       	rjmp	.-610    	; 0x33ae <udc_process_setup+0x90>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3610:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    3614:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <udd_ep_is_halted>
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	80 93 e0 29 	sts	0x29E0, r24	; 0x8029e0 <udc_ep_status.4539>
    361e:	90 93 e1 29 	sts	0x29E1, r25	; 0x8029e1 <udc_ep_status.4539+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3622:	62 e0       	ldi	r22, 0x02	; 2
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	80 ee       	ldi	r24, 0xE0	; 224
    3628:	99 e2       	ldi	r25, 0x29	; 41
    362a:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	96 ce       	rjmp	.-724    	; 0x335e <udc_process_setup+0x40>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3632:	90 91 bd 2d 	lds	r25, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3636:	9b 30       	cpi	r25, 0x0B	; 11
    3638:	09 f0       	breq	.+2      	; 0x363c <udc_process_setup+0x31e>
    363a:	89 ce       	rjmp	.-750    	; 0x334e <udc_process_setup+0x30>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    363c:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    3640:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    3644:	89 2b       	or	r24, r25
    3646:	09 f0       	breq	.+2      	; 0x364a <udc_process_setup+0x32c>
    3648:	3e cf       	rjmp	.-388    	; 0x34c6 <udc_process_setup+0x1a8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    364a:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    364e:	88 23       	and	r24, r24
    3650:	09 f4       	brne	.+2      	; 0x3654 <udc_process_setup+0x336>
    3652:	84 ce       	rjmp	.-760    	; 0x335c <udc_process_setup+0x3e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3654:	00 91 c0 2d 	lds	r16, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    3658:	10 91 c1 2d 	lds	r17, 0x2DC1	; 0x802dc1 <udd_g_ctrlreq+0x5>
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    365c:	c0 91 be 2d 	lds	r28, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	80 2f       	mov	r24, r16
    3664:	1d dd       	rcall	.-1478   	; 0x30a0 <udc_update_iface_desc.part.0>
{
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3666:	88 23       	and	r24, r24
    3668:	09 f4       	brne	.+2      	; 0x366c <udc_process_setup+0x34e>
    366a:	c0 cf       	rjmp	.-128    	; 0x35ec <udc_process_setup+0x2ce>
    366c:	80 2f       	mov	r24, r16
    366e:	49 dd       	rcall	.-1390   	; 0x3102 <udc_iface_disable.part.1>

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3670:	88 23       	and	r24, r24
    3672:	09 f4       	brne	.+2      	; 0x3676 <udc_process_setup+0x358>
    3674:	bb cf       	rjmp	.-138    	; 0x35ec <udc_process_setup+0x2ce>
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3676:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    367a:	88 23       	and	r24, r24
    367c:	09 f4       	brne	.+2      	; 0x3680 <udc_process_setup+0x362>
    367e:	b6 cf       	rjmp	.-148    	; 0x35ec <udc_process_setup+0x2ce>
    3680:	6c 2f       	mov	r22, r28
    3682:	80 2f       	mov	r24, r16
    3684:	0d dd       	rcall	.-1510   	; 0x30a0 <udc_update_iface_desc.part.0>
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3686:	88 23       	and	r24, r24
    3688:	09 f4       	brne	.+2      	; 0x368c <udc_process_setup+0x36e>
    368a:	b0 cf       	rjmp	.-160    	; 0x35ec <udc_process_setup+0x2ce>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    368c:	c0 91 e2 29 	lds	r28, 0x29E2	; 0x8029e2 <udc_ptr_iface>
    3690:	d0 91 e3 29 	lds	r29, 0x29E3	; 0x8029e3 <udc_ptr_iface+0x1>
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3694:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3698:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    369c:	a0 81       	ld	r26, Z
    369e:	b1 81       	ldd	r27, Z+1	; 0x01
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    36a0:	12 96       	adiw	r26, 0x02	; 2
    36a2:	8d 91       	ld	r24, X+
    36a4:	9c 91       	ld	r25, X
    36a6:	13 97       	sbiw	r26, 0x03	; 3
    36a8:	9d 01       	movw	r18, r26
    36aa:	28 0f       	add	r18, r24
    36ac:	39 1f       	adc	r19, r25
    36ae:	06 c0       	rjmp	.+12     	; 0x36bc <udc_process_setup+0x39e>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	84 30       	cpi	r24, 0x04	; 4
    36b4:	49 f0       	breq	.+18     	; 0x36c8 <udc_process_setup+0x3aa>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    36b6:	85 30       	cpi	r24, 0x05	; 5
    36b8:	09 f4       	brne	.+2      	; 0x36bc <udc_process_setup+0x39e>
    36ba:	8e c1       	rjmp	.+796    	; 0x39d8 <udc_process_setup+0x6ba>
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    36bc:	88 81       	ld	r24, Y
    36be:	c8 0f       	add	r28, r24
    36c0:	d1 1d       	adc	r29, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    36c2:	c2 17       	cp	r28, r18
    36c4:	d3 07       	cpc	r29, r19
    36c6:	a0 f3       	brcs	.-24     	; 0x36b0 <udc_process_setup+0x392>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    36c8:	c8 01       	movw	r24, r16
    36ca:	99 27       	eor	r25, r25
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	02 80       	ldd	r0, Z+2	; 0x02
    36d2:	f3 81       	ldd	r31, Z+3	; 0x03
    36d4:	e0 2d       	mov	r30, r0
    36d6:	e8 0f       	add	r30, r24
    36d8:	f9 1f       	adc	r31, r25
    36da:	01 90       	ld	r0, Z+
    36dc:	f0 81       	ld	r31, Z
    36de:	e0 2d       	mov	r30, r0
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	fc 01       	movw	r30, r24
    36e6:	19 95       	eicall
    36e8:	62 cf       	rjmp	.-316    	; 0x35ae <udc_process_setup+0x290>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    36ea:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    36ee:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    36f2:	89 2b       	or	r24, r25
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <udc_process_setup+0x3da>
    36f6:	32 ce       	rjmp	.-924    	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    36f8:	8b e4       	ldi	r24, 0x4B	; 75
    36fa:	98 e1       	ldi	r25, 0x18	; 24
    36fc:	80 93 c8 2d 	sts	0x2DC8, r24	; 0x802dc8 <udd_g_ctrlreq+0xc>
    3700:	90 93 c9 2d 	sts	0x2DC9, r25	; 0x802dc9 <udd_g_ctrlreq+0xd>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	2b ce       	rjmp	.-938    	; 0x335e <udc_process_setup+0x40>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3708:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    370c:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    3710:	89 2b       	or	r24, r25
    3712:	09 f0       	breq	.+2      	; 0x3716 <udc_process_setup+0x3f8>
    3714:	4c ce       	rjmp	.-872    	; 0x33ae <udc_process_setup+0x90>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3716:	80 91 be 2d 	lds	r24, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    371a:	90 91 bf 2d 	lds	r25, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>
    371e:	89 2b       	or	r24, r25
    3720:	09 f0       	breq	.+2      	; 0x3724 <udc_process_setup+0x406>
    3722:	45 ce       	rjmp	.-886    	; 0x33ae <udc_process_setup+0x90>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3724:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    3728:	0e 94 cd 54 	call	0xa99a	; 0xa99a <udd_ep_clear_halt>
    372c:	40 cf       	rjmp	.-384    	; 0x35ae <udc_process_setup+0x290>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    372e:	90 91 bd 2d 	lds	r25, 0x2DBD	; 0x802dbd <udd_g_ctrlreq+0x1>
    3732:	9a 30       	cpi	r25, 0x0A	; 10
    3734:	09 f0       	breq	.+2      	; 0x3738 <udc_process_setup+0x41a>
    3736:	0b ce       	rjmp	.-1002   	; 0x334e <udc_process_setup+0x30>
    3738:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    373c:	21 30       	cpi	r18, 0x01	; 1
    373e:	31 05       	cpc	r19, r1
    3740:	09 f0       	breq	.+2      	; 0x3744 <udc_process_setup+0x426>
    3742:	c3 ce       	rjmp	.-634    	; 0x34ca <udc_process_setup+0x1ac>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3744:	88 23       	and	r24, r24
    3746:	09 f4       	brne	.+2      	; 0x374a <udc_process_setup+0x42c>
    3748:	09 ce       	rjmp	.-1006   	; 0x335c <udc_process_setup+0x3e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    374a:	c0 91 c0 2d 	lds	r28, 0x2DC0	; 0x802dc0 <udd_g_ctrlreq+0x4>
    374e:	d0 91 c1 2d 	lds	r29, 0x2DC1	; 0x802dc1 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3752:	00 91 e4 29 	lds	r16, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3756:	10 91 e5 29 	lds	r17, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    375a:	d8 01       	movw	r26, r16
    375c:	ed 91       	ld	r30, X+
    375e:	fc 91       	ld	r31, X
    3760:	94 81       	ldd	r25, Z+4	; 0x04
    3762:	c9 17       	cp	r28, r25
    3764:	08 f0       	brcs	.+2      	; 0x3768 <udc_process_setup+0x44a>
    3766:	b1 ce       	rjmp	.-670    	; 0x34ca <udc_process_setup+0x1ac>
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	8c 2f       	mov	r24, r28
    376c:	99 dc       	rcall	.-1742   	; 0x30a0 <udc_update_iface_desc.part.0>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    376e:	88 23       	and	r24, r24
    3770:	09 f4       	brne	.+2      	; 0x3774 <udc_process_setup+0x456>
    3772:	3c cf       	rjmp	.-392    	; 0x35ec <udc_process_setup+0x2ce>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3774:	ce 01       	movw	r24, r28
    3776:	99 27       	eor	r25, r25
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	d8 01       	movw	r26, r16
    377e:	12 96       	adiw	r26, 0x02	; 2
    3780:	ed 91       	ld	r30, X+
    3782:	fc 91       	ld	r31, X
    3784:	13 97       	sbiw	r26, 0x03	; 3
    3786:	e8 0f       	add	r30, r24
    3788:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    378a:	01 90       	ld	r0, Z+
    378c:	f0 81       	ld	r31, Z
    378e:	e0 2d       	mov	r30, r0
    3790:	86 81       	ldd	r24, Z+6	; 0x06
    3792:	97 81       	ldd	r25, Z+7	; 0x07
    3794:	fc 01       	movw	r30, r24
    3796:	19 95       	eicall
    3798:	80 93 e8 29 	sts	0x29E8, r24	; 0x8029e8 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	88 ee       	ldi	r24, 0xE8	; 232
    37a2:	99 e2       	ldi	r25, 0x29	; 41
    37a4:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	d9 cd       	rjmp	.-1102   	; 0x335e <udc_process_setup+0x40>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    37ac:	21 30       	cpi	r18, 0x01	; 1
    37ae:	31 05       	cpc	r19, r1
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <udc_process_setup+0x496>
    37b2:	d4 cd       	rjmp	.-1112   	; 0x335c <udc_process_setup+0x3e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    37b4:	61 e0       	ldi	r22, 0x01	; 1
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	86 ee       	ldi	r24, 0xE6	; 230
    37ba:	99 e2       	ldi	r25, 0x29	; 41
    37bc:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	cd cd       	rjmp	.-1126   	; 0x335e <udc_process_setup+0x40>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    37c4:	20 91 be 2d 	lds	r18, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    37c8:	30 91 bf 2d 	lds	r19, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    37cc:	43 2f       	mov	r20, r19
    37ce:	55 27       	eor	r21, r21
    37d0:	42 30       	cpi	r20, 0x02	; 2
    37d2:	51 05       	cpc	r21, r1
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <udc_process_setup+0x4ba>
    37d6:	1a c1       	rjmp	.+564    	; 0x3a0c <udc_process_setup+0x6ee>
    37d8:	08 f4       	brcc	.+2      	; 0x37dc <udc_process_setup+0x4be>
    37da:	63 c0       	rjmp	.+198    	; 0x38a2 <udc_process_setup+0x584>
    37dc:	43 30       	cpi	r20, 0x03	; 3
    37de:	51 05       	cpc	r21, r1
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <udc_process_setup+0x4c6>
    37e2:	0b c1       	rjmp	.+534    	; 0x39fa <udc_process_setup+0x6dc>
    37e4:	4f 30       	cpi	r20, 0x0F	; 15
    37e6:	51 05       	cpc	r21, r1
    37e8:	09 f0       	breq	.+2      	; 0x37ec <udc_process_setup+0x4ce>
    37ea:	b8 cd       	rjmp	.-1168   	; 0x335c <udc_process_setup+0x3e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    37ec:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <udc_config+0x4>
    37f0:	90 91 20 20 	lds	r25, 0x2020	; 0x802020 <udc_config+0x5>
    37f4:	00 97       	sbiw	r24, 0x00	; 0
    37f6:	09 f4       	brne	.+2      	; 0x37fa <udc_process_setup+0x4dc>
    37f8:	b1 cd       	rjmp	.-1182   	; 0x335c <udc_process_setup+0x3e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    37fa:	dc 01       	movw	r26, r24
    37fc:	12 96       	adiw	r26, 0x02	; 2
    37fe:	6d 91       	ld	r22, X+
    3800:	7c 91       	ld	r23, X
    3802:	13 97       	sbiw	r26, 0x03	; 3
    3804:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3808:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    380c:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    3810:	20 91 c6 2d 	lds	r18, 0x2DC6	; 0x802dc6 <udd_g_ctrlreq+0xa>
    3814:	30 91 c7 2d 	lds	r19, 0x2DC7	; 0x802dc7 <udd_g_ctrlreq+0xb>
    3818:	82 17       	cp	r24, r18
    381a:	93 07       	cpc	r25, r19
    381c:	08 f0       	brcs	.+2      	; 0x3820 <udc_process_setup+0x502>
    381e:	c5 cd       	rjmp	.-1142   	; 0x33aa <udc_process_setup+0x8c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3820:	80 93 c6 2d 	sts	0x2DC6, r24	; 0x802dc6 <udd_g_ctrlreq+0xa>
    3824:	90 93 c7 2d 	sts	0x2DC7, r25	; 0x802dc7 <udd_g_ctrlreq+0xb>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	99 cd       	rjmp	.-1230   	; 0x335e <udc_process_setup+0x40>

	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    382c:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    3830:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    3834:	01 90       	ld	r0, Z+
    3836:	f0 81       	ld	r31, Z
    3838:	e0 2d       	mov	r30, r0
    383a:	94 81       	ldd	r25, Z+4	; 0x04
    383c:	c9 17       	cp	r28, r25
    383e:	08 f0       	brcs	.+2      	; 0x3842 <udc_process_setup+0x524>
    3840:	8e ce       	rjmp	.-740    	; 0x355e <udc_process_setup+0x240>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3842:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    3846:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    384a:	22 81       	ldd	r18, Z+2	; 0x02
    384c:	33 81       	ldd	r19, Z+3	; 0x03
    384e:	2e 0f       	add	r18, r30
    3850:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3852:	e2 17       	cp	r30, r18
    3854:	f3 07       	cpc	r31, r19
    3856:	38 f0       	brcs	.+14     	; 0x3866 <udc_process_setup+0x548>
    3858:	82 ce       	rjmp	.-764    	; 0x355e <udc_process_setup+0x240>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    385a:	90 81       	ld	r25, Z
    385c:	e9 0f       	add	r30, r25
    385e:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3860:	e2 17       	cp	r30, r18
    3862:	f3 07       	cpc	r31, r19
    3864:	c8 f4       	brcc	.+50     	; 0x3898 <udc_process_setup+0x57a>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3866:	91 81       	ldd	r25, Z+1	; 0x01
    3868:	94 30       	cpi	r25, 0x04	; 4
    386a:	b9 f7       	brne	.-18     	; 0x385a <udc_process_setup+0x53c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    386c:	92 81       	ldd	r25, Z+2	; 0x02
    386e:	c9 13       	cpse	r28, r25
    3870:	f4 cf       	rjmp	.-24     	; 0x385a <udc_process_setup+0x53c>
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	89 13       	cpse	r24, r25
    3876:	f1 cf       	rjmp	.-30     	; 0x385a <udc_process_setup+0x53c>
    3878:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    387c:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3880:	d8 01       	movw	r26, r16
    3882:	14 96       	adiw	r26, 0x04	; 4
    3884:	8d 91       	ld	r24, X+
    3886:	9c 91       	ld	r25, X
    3888:	15 97       	sbiw	r26, 0x05	; 5
    388a:	fc 01       	movw	r30, r24
    388c:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    388e:	88 23       	and	r24, r24
    3890:	09 f4       	brne	.+2      	; 0x3894 <udc_process_setup+0x576>
    3892:	65 ce       	rjmp	.-822    	; 0x355e <udc_process_setup+0x240>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	63 cd       	rjmp	.-1338   	; 0x335e <udc_process_setup+0x40>
    3898:	e0 93 e2 29 	sts	0x29E2, r30	; 0x8029e2 <udc_ptr_iface>
    389c:	f0 93 e3 29 	sts	0x29E3, r31	; 0x8029e3 <udc_ptr_iface+0x1>
    38a0:	5e ce       	rjmp	.-836    	; 0x355e <udc_process_setup+0x240>
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    38a2:	41 30       	cpi	r20, 0x01	; 1
    38a4:	51 05       	cpc	r21, r1
    38a6:	09 f0       	breq	.+2      	; 0x38aa <udc_process_setup+0x58c>
    38a8:	59 cd       	rjmp	.-1358   	; 0x335c <udc_process_setup+0x3e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    38aa:	80 91 1b 20 	lds	r24, 0x201B	; 0x80201b <udc_config>
    38ae:	90 91 1c 20 	lds	r25, 0x201C	; 0x80201c <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    38b2:	dc 01       	movw	r26, r24
    38b4:	6c 91       	ld	r22, X
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    38bc:	a5 cf       	rjmp	.-182    	; 0x3808 <udc_process_setup+0x4ea>
    38be:	a4 dc       	rcall	.-1720   	; 0x3208 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    38c0:	80 91 be 2d 	lds	r24, 0x2DBE	; 0x802dbe <udd_g_ctrlreq+0x2>
    38c4:	90 91 bf 2d 	lds	r25, 0x2DBF	; 0x802dbf <udd_g_ctrlreq+0x3>
    38c8:	80 93 e6 29 	sts	0x29E6, r24	; 0x8029e6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    38cc:	88 23       	and	r24, r24
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <udc_process_setup+0x5b4>
    38d0:	6c cd       	rjmp	.-1320   	; 0x33aa <udc_process_setup+0x8c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    38d2:	99 27       	eor	r25, r25
    38d4:	81 50       	subi	r24, 0x01	; 1
    38d6:	90 4c       	sbci	r25, 0xC0	; 192
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	e0 91 1d 20 	lds	r30, 0x201D	; 0x80201d <udc_config+0x2>
    38e4:	f0 91 1e 20 	lds	r31, 0x201E	; 0x80201e <udc_config+0x3>
    38e8:	e8 0f       	add	r30, r24
    38ea:	f9 1f       	adc	r31, r25
    38ec:	e0 93 e4 29 	sts	0x29E4, r30	; 0x8029e4 <udc_ptr_conf>
    38f0:	f0 93 e5 29 	sts	0x29E5, r31	; 0x8029e5 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    38f4:	c0 81       	ld	r28, Z
    38f6:	d1 81       	ldd	r29, Z+1	; 0x01
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	99 23       	and	r25, r25
    38fc:	09 f4       	brne	.+2      	; 0x3900 <udc_process_setup+0x5e2>
    38fe:	55 cd       	rjmp	.-1366   	; 0x33aa <udc_process_setup+0x8c>
    3900:	10 e0       	ldi	r17, 0x00	; 0

	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3902:	19 17       	cp	r17, r25
    3904:	08 f0       	brcs	.+2      	; 0x3908 <udc_process_setup+0x5ea>
    3906:	72 ce       	rjmp	.-796    	; 0x35ec <udc_process_setup+0x2ce>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3908:	c0 93 e2 29 	sts	0x29E2, r28	; 0x8029e2 <udc_ptr_iface>
    390c:	d0 93 e3 29 	sts	0x29E3, r29	; 0x8029e3 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	8c 0f       	add	r24, r28
    3916:	9d 1f       	adc	r25, r29
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3918:	c8 17       	cp	r28, r24
    391a:	d9 07       	cpc	r29, r25
    391c:	40 f0       	brcs	.+16     	; 0x392e <udc_process_setup+0x610>
    391e:	66 ce       	rjmp	.-820    	; 0x35ec <udc_process_setup+0x2ce>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3920:	28 81       	ld	r18, Y
    3922:	c2 0f       	add	r28, r18
    3924:	d1 1d       	adc	r29, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3926:	c8 17       	cp	r28, r24
    3928:	d9 07       	cpc	r29, r25
    392a:	08 f0       	brcs	.+2      	; 0x392e <udc_process_setup+0x610>
    392c:	61 c0       	rjmp	.+194    	; 0x39f0 <udc_process_setup+0x6d2>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    392e:	29 81       	ldd	r18, Y+1	; 0x01
    3930:	24 30       	cpi	r18, 0x04	; 4
    3932:	b1 f7       	brne	.-20     	; 0x3920 <udc_process_setup+0x602>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3934:	2a 81       	ldd	r18, Y+2	; 0x02
    3936:	12 13       	cpse	r17, r18
    3938:	f3 cf       	rjmp	.-26     	; 0x3920 <udc_process_setup+0x602>
    393a:	2b 81       	ldd	r18, Y+3	; 0x03
    393c:	21 11       	cpse	r18, r1
    393e:	f0 cf       	rjmp	.-32     	; 0x3920 <udc_process_setup+0x602>
    3940:	c0 93 e2 29 	sts	0x29E2, r28	; 0x8029e2 <udc_ptr_iface>
    3944:	d0 93 e3 29 	sts	0x29E3, r29	; 0x8029e3 <udc_ptr_iface+0x1>
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3948:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    394c:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3950:	a0 81       	ld	r26, Z
    3952:	b1 81       	ldd	r27, Z+1	; 0x01
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3954:	12 96       	adiw	r26, 0x02	; 2
    3956:	8d 91       	ld	r24, X+
    3958:	9c 91       	ld	r25, X
    395a:	13 97       	sbiw	r26, 0x03	; 3
    395c:	9d 01       	movw	r18, r26
    395e:	28 0f       	add	r18, r24
    3960:	39 1f       	adc	r19, r25
    3962:	05 c0       	rjmp	.+10     	; 0x396e <udc_process_setup+0x650>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	84 30       	cpi	r24, 0x04	; 4
    3968:	41 f0       	breq	.+16     	; 0x397a <udc_process_setup+0x65c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    396a:	85 30       	cpi	r24, 0x05	; 5
    396c:	51 f1       	breq	.+84     	; 0x39c2 <udc_process_setup+0x6a4>
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    396e:	88 81       	ld	r24, Y
    3970:	c8 0f       	add	r28, r24
    3972:	d1 1d       	adc	r29, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3974:	c2 17       	cp	r28, r18
    3976:	d3 07       	cpc	r29, r19
    3978:	a8 f3       	brcs	.-22     	; 0x3964 <udc_process_setup+0x646>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    397a:	81 2f       	mov	r24, r17
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	88 0f       	add	r24, r24
    3980:	99 1f       	adc	r25, r25
    3982:	02 80       	ldd	r0, Z+2	; 0x02
    3984:	f3 81       	ldd	r31, Z+3	; 0x03
    3986:	e0 2d       	mov	r30, r0
    3988:	e8 0f       	add	r30, r24
    398a:	f9 1f       	adc	r31, r25
    398c:	01 90       	ld	r0, Z+
    398e:	f0 81       	ld	r31, Z
    3990:	e0 2d       	mov	r30, r0
    3992:	80 81       	ld	r24, Z
    3994:	91 81       	ldd	r25, Z+1	; 0x01
    3996:	fc 01       	movw	r30, r24
    3998:	19 95       	eicall
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    399a:	88 23       	and	r24, r24
    399c:	09 f4       	brne	.+2      	; 0x39a0 <udc_process_setup+0x682>
    399e:	26 ce       	rjmp	.-948    	; 0x35ec <udc_process_setup+0x2ce>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    39a0:	1f 5f       	subi	r17, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    39a2:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <udc_ptr_conf>
    39a6:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <udc_ptr_conf+0x1>
    39aa:	c0 81       	ld	r28, Z
    39ac:	d1 81       	ldd	r29, Z+1	; 0x01
    39ae:	9c 81       	ldd	r25, Y+4	; 0x04
    39b0:	19 17       	cp	r17, r25
    39b2:	08 f0       	brcs	.+2      	; 0x39b6 <udc_process_setup+0x698>
    39b4:	fa cc       	rjmp	.-1548   	; 0x33aa <udc_process_setup+0x8c>
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    39b6:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <udc_num_configuration>
    39ba:	88 23       	and	r24, r24
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <udc_process_setup+0x6a2>
    39be:	16 ce       	rjmp	.-980    	; 0x35ec <udc_process_setup+0x2ce>
    39c0:	a0 cf       	rjmp	.-192    	; 0x3902 <udc_process_setup+0x5e4>
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    39c2:	20 97       	sbiw	r28, 0x00	; 0
    39c4:	d1 f2       	breq	.-76     	; 0x397a <udc_process_setup+0x65c>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    39c6:	4c 81       	ldd	r20, Y+4	; 0x04
    39c8:	5d 81       	ldd	r21, Y+5	; 0x05
    39ca:	6b 81       	ldd	r22, Y+3	; 0x03
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	0e 94 9c 53 	call	0xa738	; 0xa738 <udd_ep_alloc>
    39d2:	81 11       	cpse	r24, r1
    39d4:	b9 cf       	rjmp	.-142    	; 0x3948 <udc_process_setup+0x62a>
    39d6:	0a ce       	rjmp	.-1004   	; 0x35ec <udc_process_setup+0x2ce>
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    39d8:	20 97       	sbiw	r28, 0x00	; 0
    39da:	09 f4       	brne	.+2      	; 0x39de <udc_process_setup+0x6c0>
    39dc:	75 ce       	rjmp	.-790    	; 0x36c8 <udc_process_setup+0x3aa>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    39de:	4c 81       	ldd	r20, Y+4	; 0x04
    39e0:	5d 81       	ldd	r21, Y+5	; 0x05
    39e2:	6b 81       	ldd	r22, Y+3	; 0x03
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	0e 94 9c 53 	call	0xa738	; 0xa738 <udd_ep_alloc>
    39ea:	81 11       	cpse	r24, r1
    39ec:	53 ce       	rjmp	.-858    	; 0x3694 <udc_process_setup+0x376>
    39ee:	fe cd       	rjmp	.-1028   	; 0x35ec <udc_process_setup+0x2ce>
    39f0:	c0 93 e2 29 	sts	0x29E2, r28	; 0x8029e2 <udc_ptr_iface>
    39f4:	d0 93 e3 29 	sts	0x29E3, r29	; 0x8029e3 <udc_ptr_iface+0x1>
    39f8:	f9 cd       	rjmp	.-1038   	; 0x35ec <udc_process_setup+0x2ce>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    39fa:	21 11       	cpse	r18, r1
    39fc:	a8 cc       	rjmp	.-1712   	; 0x334e <udc_process_setup+0x30>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    39fe:	64 e0       	ldi	r22, 0x04	; 4
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	80 e8       	ldi	r24, 0x80	; 128
    3a04:	90 e2       	ldi	r25, 0x20	; 32
    3a06:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
    3a0a:	fe ce       	rjmp	.-516    	; 0x3808 <udc_process_setup+0x4ea>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3a0c:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config>
    3a10:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x1>
    3a14:	81 89       	ldd	r24, Z+17	; 0x11
    3a16:	28 17       	cp	r18, r24
    3a18:	08 f0       	brcs	.+2      	; 0x3a1c <udc_process_setup+0x6fe>
    3a1a:	a0 cc       	rjmp	.-1728   	; 0x335c <udc_process_setup+0x3e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3a1c:	c9 01       	movw	r24, r18
    3a1e:	99 27       	eor	r25, r25
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	e0 91 1d 20 	lds	r30, 0x201D	; 0x80201d <udc_config+0x2>
    3a2c:	f0 91 1e 20 	lds	r31, 0x201E	; 0x80201e <udc_config+0x3>
    3a30:	e8 0f       	add	r30, r24
    3a32:	f9 1f       	adc	r31, r25
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3a38:	fc 01       	movw	r30, r24
    3a3a:	62 81       	ldd	r22, Z+2	; 0x02
    3a3c:	73 81       	ldd	r23, Z+3	; 0x03
    3a3e:	0e 94 95 53 	call	0xa72a	; 0xa72a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3a42:	e0 91 c4 2d 	lds	r30, 0x2DC4	; 0x802dc4 <udd_g_ctrlreq+0x8>
    3a46:	f0 91 c5 2d 	lds	r31, 0x2DC5	; 0x802dc5 <udd_g_ctrlreq+0x9>
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	81 83       	std	Z+1, r24	; 0x01
    3a4e:	dc ce       	rjmp	.-584    	; 0x3808 <udc_process_setup+0x4ea>

00003a50 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	1f 92       	push	r1
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    3a5a:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <stdio_base>
    3a5e:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <stdio_base+0x1>
    3a62:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <ptr_get>
    3a66:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <ptr_get+0x1>
    3a6a:	be 01       	movw	r22, r28
    3a6c:	6f 5f       	subi	r22, 0xFF	; 255
    3a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a70:	19 95       	eicall
	return c;
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a74:	08 2e       	mov	r0, r24
    3a76:	00 0c       	add	r0, r0
    3a78:	99 0b       	sbc	r25, r25
    3a7a:	0f 90       	pop	r0
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	08 95       	ret

00003a82 <stdio_usb_getchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	80 91 ec 29 	lds	r24, 0x29EC	; 0x8029ec <stdio_usb_interface_enable>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	05 c0       	rjmp	.+10     	; 0x3a98 <stdio_usb_getchar+0x16>
    3a8e:	fb 01       	movw	r30, r22
    3a90:	10 82       	st	Z, r1
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	08 95       	ret
    3a98:	eb 01       	movw	r28, r22
    3a9a:	e0 d9       	rcall	.-3136   	; 0x2e5c <udi_cdc_getc>
    3a9c:	88 83       	st	Y, r24
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	08 95       	ret

00003aa4 <stdio_usb_putchar>:
    3aa4:	80 91 ec 29 	lds	r24, 0x29EC	; 0x8029ec <stdio_usb_interface_enable>
    3aa8:	81 11       	cpse	r24, r1
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <stdio_usb_putchar+0xe>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	08 95       	ret
    3ab2:	86 2f       	mov	r24, r22
    3ab4:	08 2e       	mov	r0, r24
    3ab6:	00 0c       	add	r0, r0
    3ab8:	99 0b       	sbc	r25, r25
    3aba:	77 da       	rcall	.-2834   	; 0x2faa <udi_cdc_putc>
    3abc:	21 e0       	ldi	r18, 0x01	; 1
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	89 2b       	or	r24, r25
    3ac2:	29 f4       	brne	.+10     	; 0x3ace <stdio_usb_putchar+0x2a>
    3ac4:	88 27       	eor	r24, r24
    3ac6:	99 27       	eor	r25, r25
    3ac8:	82 1b       	sub	r24, r18
    3aca:	93 0b       	sbc	r25, r19
    3acc:	08 95       	ret
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	88 27       	eor	r24, r24
    3ad4:	99 27       	eor	r25, r25
    3ad6:	82 1b       	sub	r24, r18
    3ad8:	93 0b       	sbc	r25, r19
    3ada:	08 95       	ret

00003adc <stdio_usb_enable>:
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	80 93 ec 29 	sts	0x29EC, r24	; 0x8029ec <stdio_usb_interface_enable>
    3ae2:	08 95       	ret

00003ae4 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    3ae4:	10 92 b2 2d 	sts	0x2DB2, r1	; 0x802db2 <stdio_base>
    3ae8:	10 92 b3 2d 	sts	0x2DB3, r1	; 0x802db3 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    3aec:	82 e5       	ldi	r24, 0x52	; 82
    3aee:	9d e1       	ldi	r25, 0x1D	; 29
    3af0:	80 93 b0 2d 	sts	0x2DB0, r24	; 0x802db0 <ptr_put>
    3af4:	90 93 b1 2d 	sts	0x2DB1, r25	; 0x802db1 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    3af8:	81 e4       	ldi	r24, 0x41	; 65
    3afa:	9d e1       	ldi	r25, 0x1D	; 29
    3afc:	80 93 ae 2d 	sts	0x2DAE, r24	; 0x802dae <ptr_get>
    3b00:	90 93 af 2d 	sts	0x2DAF, r25	; 0x802daf <ptr_get+0x1>
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    3b04:	7f db       	rcall	.-2306   	; 0x3204 <udc_start>

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    3b06:	68 e2       	ldi	r22, 0x28	; 40
    3b08:	7d e1       	ldi	r23, 0x1D	; 29
    3b0a:	89 e8       	ldi	r24, 0x89	; 137
    3b0c:	9d e1       	ldi	r25, 0x1D	; 29
    3b0e:	0c 94 0a 81 	jmp	0x10214	; 0x10214 <fdevopen>

00003b12 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    3b12:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    3b14:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <stdio_base>
    3b18:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <stdio_base+0x1>
    3b1c:	e0 91 b0 2d 	lds	r30, 0x2DB0	; 0x802db0 <ptr_put>
    3b20:	f0 91 b1 2d 	lds	r31, 0x2DB1	; 0x802db1 <ptr_put+0x1>
    3b24:	19 95       	eicall
    3b26:	97 fd       	sbrc	r25, 7
    3b28:	03 c0       	rjmp	.+6      	; 0x3b30 <_write+0x1e>
		return -1;
	}
	return 1;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    3b30:	8f ef       	ldi	r24, 0xFF	; 255
    3b32:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    3b34:	08 95       	ret

00003b36 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3b36:	cf 93       	push	r28
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    3b38:	82 30       	cpi	r24, 0x02	; 2
    3b3a:	18 f0       	brcs	.+6      	; 0x3b42 <disk_initialize+0xc>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3b3e:	cf 91       	pop	r28
    3b40:	08 95       	ret
    3b42:	c8 2f       	mov	r28, r24
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
    3b44:	0e 94 8e 13 	call	0x271c	; 0x271c <mem_test_unit_ready>
		if (CTRL_BUSY != mem_status) {
    3b48:	83 30       	cpi	r24, 0x03	; 3
    3b4a:	29 f4       	brne	.+10     	; 0x3b56 <disk_initialize+0x20>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
    3b4c:	8c 2f       	mov	r24, r28
    3b4e:	0e 94 8e 13 	call	0x271c	; 0x271c <mem_test_unit_ready>
		if (CTRL_BUSY != mem_status) {
    3b52:	83 30       	cpi	r24, 0x03	; 3
    3b54:	99 f3       	breq	.-26     	; 0x3b3c <disk_initialize+0x6>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
    3b56:	81 11       	cpse	r24, r1
    3b58:	f1 cf       	rjmp	.-30     	; 0x3b3c <disk_initialize+0x6>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    3b5a:	8c 2f       	mov	r24, r28
    3b5c:	0e 94 9e 13 	call	0x273c	; 0x273c <mem_wr_protect>
    3b60:	88 23       	and	r24, r24
    3b62:	69 f3       	breq	.-38     	; 0x3b3e <disk_initialize+0x8>
		return STA_PROTECT;
    3b64:	84 e0       	ldi	r24, 0x04	; 4
    3b66:	eb cf       	rjmp	.-42     	; 0x3b3e <disk_initialize+0x8>

00003b68 <disk_status>:
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
    3b68:	0e 94 8e 13 	call	0x271c	; 0x271c <mem_test_unit_ready>
    3b6c:	88 23       	and	r24, r24
    3b6e:	31 f0       	breq	.+12     	; 0x3b7c <disk_status+0x14>
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	11 f4       	brne	.+4      	; 0x3b78 <disk_status+0x10>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	08 95       	ret
	default:
		return STA_NOINIT;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	08 95       	ret
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
    3b7e:	08 95       	ret

00003b80 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3b80:	2f 92       	push	r2
    3b82:	3f 92       	push	r3
    3b84:	4f 92       	push	r4
    3b86:	5f 92       	push	r5
    3b88:	6f 92       	push	r6
    3b8a:	7f 92       	push	r7
    3b8c:	8f 92       	push	r8
    3b8e:	9f 92       	push	r9
    3b90:	af 92       	push	r10
    3b92:	bf 92       	push	r11
    3b94:	cf 92       	push	r12
    3b96:	df 92       	push	r13
    3b98:	ef 92       	push	r14
    3b9a:	ff 92       	push	r15
    3b9c:	0f 93       	push	r16
    3b9e:	1f 93       	push	r17
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	cd b7       	in	r28, 0x3d	; 61
    3ba6:	de b7       	in	r29, 0x3e	; 62
    3ba8:	2b 97       	sbiw	r28, 0x0b	; 11
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	78 2e       	mov	r7, r24
    3bb0:	6b 87       	std	Y+11, r22	; 0x0b
    3bb2:	67 2e       	mov	r6, r23
    3bb4:	69 01       	movw	r12, r18
    3bb6:	7a 01       	movw	r14, r20
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3bb8:	0e 94 99 13 	call	0x2732	; 0x2732 <mem_sector_size>
    3bbc:	18 2f       	mov	r17, r24
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	17 c0       	rjmp	.+46     	; 0x3bf0 <disk_read+0x70>
		return RES_ERROR;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3bc4:	2b 96       	adiw	r28, 0x0b	; 11
    3bc6:	cd bf       	out	0x3d, r28	; 61
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	ff 90       	pop	r15
    3bd4:	ef 90       	pop	r14
    3bd6:	df 90       	pop	r13
    3bd8:	cf 90       	pop	r12
    3bda:	bf 90       	pop	r11
    3bdc:	af 90       	pop	r10
    3bde:	9f 90       	pop	r9
    3be0:	8f 90       	pop	r8
    3be2:	7f 90       	pop	r7
    3be4:	6f 90       	pop	r6
    3be6:	5f 90       	pop	r5
    3be8:	4f 90       	pop	r4
    3bea:	3f 90       	pop	r3
    3bec:	2f 90       	pop	r2
    3bee:	08 95       	ret
	if (uc_sector_size == 0) {
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    3bf0:	be 01       	movw	r22, r28
    3bf2:	6f 5f       	subi	r22, 0xFF	; 255
    3bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf6:	87 2d       	mov	r24, r7
    3bf8:	0e 94 93 13 	call	0x2726	; 0x2726 <mem_read_capacity>
	if ((sector + count * uc_sector_size) >
    3bfc:	e1 2f       	mov	r30, r17
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
			(ul_last_sector_num + 1) * uc_sector_size) {
    3c00:	21 2e       	mov	r2, r17
    3c02:	31 2c       	mov	r3, r1
    3c04:	41 2c       	mov	r4, r1
    3c06:	51 2c       	mov	r5, r1
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
    3c08:	01 9f       	mul	r16, r17
    3c0a:	c0 01       	movw	r24, r0
    3c0c:	11 24       	eor	r1, r1
    3c0e:	09 2e       	mov	r0, r25
    3c10:	00 0c       	add	r0, r0
    3c12:	aa 0b       	sbc	r26, r26
    3c14:	bb 0b       	sbc	r27, r27
    3c16:	4c 01       	movw	r8, r24
    3c18:	5d 01       	movw	r10, r26
    3c1a:	8c 0c       	add	r8, r12
    3c1c:	9d 1c       	adc	r9, r13
    3c1e:	ae 1c       	adc	r10, r14
    3c20:	bf 1c       	adc	r11, r15
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	ab 81       	ldd	r26, Y+3	; 0x03
    3c28:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2a:	9c 01       	movw	r18, r24
    3c2c:	ad 01       	movw	r20, r26
    3c2e:	2f 5f       	subi	r18, 0xFF	; 255
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	4f 4f       	sbci	r20, 0xFF	; 255
    3c34:	5f 4f       	sbci	r21, 0xFF	; 255
    3c36:	c2 01       	movw	r24, r4
    3c38:	b1 01       	movw	r22, r2
    3c3a:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <__mulsi3>
    3c3e:	68 15       	cp	r22, r8
    3c40:	79 05       	cpc	r23, r9
    3c42:	8a 05       	cpc	r24, r10
    3c44:	9b 05       	cpc	r25, r11
    3c46:	10 f4       	brcc	.+4      	; 0x3c4c <disk_read+0xcc>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
    3c48:	84 e0       	ldi	r24, 0x04	; 4
    3c4a:	bc cf       	rjmp	.-136    	; 0x3bc4 <disk_read+0x44>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    3c4c:	80 2f       	mov	r24, r16
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e0       	ldi	r26, 0x00	; 0
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	af 83       	std	Y+7, r26	; 0x07
    3c5a:	b8 87       	std	Y+8, r27	; 0x08
    3c5c:	89 2b       	or	r24, r25
    3c5e:	8a 2b       	or	r24, r26
    3c60:	8b 2b       	or	r24, r27
    3c62:	59 f1       	breq	.+86     	; 0x3cba <disk_read+0x13a>
    3c64:	df 01       	movw	r26, r30
    3c66:	ba 2f       	mov	r27, r26
    3c68:	aa 27       	eor	r26, r26
    3c6a:	bb 0f       	add	r27, r27
    3c6c:	a9 87       	std	Y+9, r26	; 0x09
    3c6e:	ba 87       	std	Y+10, r27	; 0x0a
    3c70:	0b 85       	ldd	r16, Y+11	; 0x0b
    3c72:	16 2d       	mov	r17, r6
    3c74:	81 2c       	mov	r8, r1
    3c76:	91 2c       	mov	r9, r1
    3c78:	54 01       	movw	r10, r8
    3c7a:	16 c0       	rjmp	.+44     	; 0x3ca8 <disk_read+0x128>
    3c7c:	bf ef       	ldi	r27, 0xFF	; 255
    3c7e:	8b 1a       	sub	r8, r27
    3c80:	9b 0a       	sbc	r9, r27
    3c82:	ab 0a       	sbc	r10, r27
    3c84:	bb 0a       	sbc	r11, r27
    3c86:	c2 0c       	add	r12, r2
    3c88:	d3 1c       	adc	r13, r3
    3c8a:	e4 1c       	adc	r14, r4
    3c8c:	f5 1c       	adc	r15, r5
    3c8e:	89 85       	ldd	r24, Y+9	; 0x09
    3c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c92:	08 0f       	add	r16, r24
    3c94:	19 1f       	adc	r17, r25
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	af 81       	ldd	r26, Y+7	; 0x07
    3c9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c9e:	88 16       	cp	r8, r24
    3ca0:	99 06       	cpc	r9, r25
    3ca2:	aa 06       	cpc	r10, r26
    3ca4:	bb 06       	cpc	r11, r27
    3ca6:	48 f4       	brcc	.+18     	; 0x3cba <disk_read+0x13a>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3ca8:	98 01       	movw	r18, r16
    3caa:	b7 01       	movw	r22, r14
    3cac:	a6 01       	movw	r20, r12
    3cae:	87 2d       	mov	r24, r7
    3cb0:	0e 94 a3 13 	call	0x2746	; 0x2746 <memory_2_ram>
    3cb4:	88 23       	and	r24, r24
    3cb6:	11 f3       	breq	.-60     	; 0x3c7c <disk_read+0xfc>
    3cb8:	84 cf       	rjmp	.-248    	; 0x3bc2 <disk_read+0x42>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	83 cf       	rjmp	.-250    	; 0x3bc4 <disk_read+0x44>

00003cbe <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3cbe:	2f 92       	push	r2
    3cc0:	3f 92       	push	r3
    3cc2:	4f 92       	push	r4
    3cc4:	5f 92       	push	r5
    3cc6:	6f 92       	push	r6
    3cc8:	7f 92       	push	r7
    3cca:	8f 92       	push	r8
    3ccc:	9f 92       	push	r9
    3cce:	af 92       	push	r10
    3cd0:	bf 92       	push	r11
    3cd2:	cf 92       	push	r12
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	2b 97       	sbiw	r28, 0x0b	; 11
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	78 2e       	mov	r7, r24
    3cee:	6b 87       	std	Y+11, r22	; 0x0b
    3cf0:	67 2e       	mov	r6, r23
    3cf2:	69 01       	movw	r12, r18
    3cf4:	7a 01       	movw	r14, r20
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3cf6:	0e 94 99 13 	call	0x2732	; 0x2732 <mem_sector_size>
    3cfa:	18 2f       	mov	r17, r24
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3cfc:	81 11       	cpse	r24, r1
    3cfe:	17 c0       	rjmp	.+46     	; 0x3d2e <disk_write+0x70>
		return RES_ERROR;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3d02:	2b 96       	adiw	r28, 0x0b	; 11
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	de bf       	out	0x3e, r29	; 62
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	1f 91       	pop	r17
    3d0e:	0f 91       	pop	r16
    3d10:	ff 90       	pop	r15
    3d12:	ef 90       	pop	r14
    3d14:	df 90       	pop	r13
    3d16:	cf 90       	pop	r12
    3d18:	bf 90       	pop	r11
    3d1a:	af 90       	pop	r10
    3d1c:	9f 90       	pop	r9
    3d1e:	8f 90       	pop	r8
    3d20:	7f 90       	pop	r7
    3d22:	6f 90       	pop	r6
    3d24:	5f 90       	pop	r5
    3d26:	4f 90       	pop	r4
    3d28:	3f 90       	pop	r3
    3d2a:	2f 90       	pop	r2
    3d2c:	08 95       	ret
	if (uc_sector_size == 0) {
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    3d2e:	be 01       	movw	r22, r28
    3d30:	6f 5f       	subi	r22, 0xFF	; 255
    3d32:	7f 4f       	sbci	r23, 0xFF	; 255
    3d34:	87 2d       	mov	r24, r7
    3d36:	0e 94 93 13 	call	0x2726	; 0x2726 <mem_read_capacity>
	if ((sector + count * uc_sector_size) >
    3d3a:	e1 2f       	mov	r30, r17
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d3e:	21 2e       	mov	r2, r17
    3d40:	31 2c       	mov	r3, r1
    3d42:	41 2c       	mov	r4, r1
    3d44:	51 2c       	mov	r5, r1
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
    3d46:	01 9f       	mul	r16, r17
    3d48:	c0 01       	movw	r24, r0
    3d4a:	11 24       	eor	r1, r1
    3d4c:	09 2e       	mov	r0, r25
    3d4e:	00 0c       	add	r0, r0
    3d50:	aa 0b       	sbc	r26, r26
    3d52:	bb 0b       	sbc	r27, r27
    3d54:	4c 01       	movw	r8, r24
    3d56:	5d 01       	movw	r10, r26
    3d58:	8c 0c       	add	r8, r12
    3d5a:	9d 1c       	adc	r9, r13
    3d5c:	ae 1c       	adc	r10, r14
    3d5e:	bf 1c       	adc	r11, r15
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	ab 81       	ldd	r26, Y+3	; 0x03
    3d66:	bc 81       	ldd	r27, Y+4	; 0x04
    3d68:	9c 01       	movw	r18, r24
    3d6a:	ad 01       	movw	r20, r26
    3d6c:	2f 5f       	subi	r18, 0xFF	; 255
    3d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d70:	4f 4f       	sbci	r20, 0xFF	; 255
    3d72:	5f 4f       	sbci	r21, 0xFF	; 255
    3d74:	c2 01       	movw	r24, r4
    3d76:	b1 01       	movw	r22, r2
    3d78:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <__mulsi3>
    3d7c:	68 15       	cp	r22, r8
    3d7e:	79 05       	cpc	r23, r9
    3d80:	8a 05       	cpc	r24, r10
    3d82:	9b 05       	cpc	r25, r11
    3d84:	10 f4       	brcc	.+4      	; 0x3d8a <disk_write+0xcc>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
    3d86:	84 e0       	ldi	r24, 0x04	; 4
    3d88:	bc cf       	rjmp	.-136    	; 0x3d02 <disk_write+0x44>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    3d8a:	80 2f       	mov	r24, r16
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	a0 e0       	ldi	r26, 0x00	; 0
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	9e 83       	std	Y+6, r25	; 0x06
    3d96:	af 83       	std	Y+7, r26	; 0x07
    3d98:	b8 87       	std	Y+8, r27	; 0x08
    3d9a:	89 2b       	or	r24, r25
    3d9c:	8a 2b       	or	r24, r26
    3d9e:	8b 2b       	or	r24, r27
    3da0:	59 f1       	breq	.+86     	; 0x3df8 <disk_write+0x13a>
    3da2:	df 01       	movw	r26, r30
    3da4:	ba 2f       	mov	r27, r26
    3da6:	aa 27       	eor	r26, r26
    3da8:	bb 0f       	add	r27, r27
    3daa:	a9 87       	std	Y+9, r26	; 0x09
    3dac:	ba 87       	std	Y+10, r27	; 0x0a
    3dae:	0b 85       	ldd	r16, Y+11	; 0x0b
    3db0:	16 2d       	mov	r17, r6
    3db2:	81 2c       	mov	r8, r1
    3db4:	91 2c       	mov	r9, r1
    3db6:	54 01       	movw	r10, r8
    3db8:	16 c0       	rjmp	.+44     	; 0x3de6 <disk_write+0x128>
    3dba:	bf ef       	ldi	r27, 0xFF	; 255
    3dbc:	8b 1a       	sub	r8, r27
    3dbe:	9b 0a       	sbc	r9, r27
    3dc0:	ab 0a       	sbc	r10, r27
    3dc2:	bb 0a       	sbc	r11, r27
    3dc4:	c2 0c       	add	r12, r2
    3dc6:	d3 1c       	adc	r13, r3
    3dc8:	e4 1c       	adc	r14, r4
    3dca:	f5 1c       	adc	r15, r5
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	08 0f       	add	r16, r24
    3dd2:	19 1f       	adc	r17, r25
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	af 81       	ldd	r26, Y+7	; 0x07
    3dda:	b8 85       	ldd	r27, Y+8	; 0x08
    3ddc:	88 16       	cp	r8, r24
    3dde:	99 06       	cpc	r9, r25
    3de0:	aa 06       	cpc	r10, r26
    3de2:	bb 06       	cpc	r11, r27
    3de4:	48 f4       	brcc	.+18     	; 0x3df8 <disk_write+0x13a>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3de6:	98 01       	movw	r18, r16
    3de8:	b7 01       	movw	r22, r14
    3dea:	a6 01       	movw	r20, r12
    3dec:	87 2d       	mov	r24, r7
    3dee:	0e 94 b9 13 	call	0x2772	; 0x2772 <ram_2_memory>
    3df2:	88 23       	and	r24, r24
    3df4:	11 f3       	breq	.-60     	; 0x3dba <disk_write+0xfc>
    3df6:	84 cf       	rjmp	.-248    	; 0x3d00 <disk_write+0x42>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	83 cf       	rjmp	.-250    	; 0x3d02 <disk_write+0x44>

00003dfc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	00 d0       	rcall	.+0      	; 0x3e06 <disk_ioctl+0xa>
    3e06:	1f 92       	push	r1
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
    3e0c:	8a 01       	movw	r16, r20
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3e0e:	61 30       	cpi	r22, 0x01	; 1
    3e10:	c9 f1       	breq	.+114    	; 0x3e84 <disk_ioctl+0x88>
    3e12:	58 f1       	brcs	.+86     	; 0x3e6a <disk_ioctl+0x6e>
    3e14:	62 30       	cpi	r22, 0x02	; 2
    3e16:	a1 f0       	breq	.+40     	; 0x3e40 <disk_ioctl+0x44>
    3e18:	63 30       	cpi	r22, 0x03	; 3
    3e1a:	f1 f4       	brne	.+60     	; 0x3e58 <disk_ioctl+0x5c>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	a0 e0       	ldi	r26, 0x00	; 0
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	fa 01       	movw	r30, r20
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
		res = RES_OK;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
	default:
		res = RES_PARERR;
	}

	return res;
}
    3e30:	24 96       	adiw	r28, 0x04	; 4
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	08 95       	ret
	break;

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    3e40:	0e 94 99 13 	call	0x2732	; 0x2732 <mem_sector_size>

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3e44:	9f ef       	ldi	r25, 0xFF	; 255
    3e46:	98 0f       	add	r25, r24
    3e48:	92 30       	cpi	r25, 0x02	; 2
    3e4a:	c0 f1       	brcs	.+112    	; 0x3ebc <disk_ioctl+0xc0>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3e4c:	84 30       	cpi	r24, 0x04	; 4
    3e4e:	b1 f1       	breq	.+108    	; 0x3ebc <disk_ioctl+0xc0>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    3e50:	88 30       	cpi	r24, 0x08	; 8
    3e52:	a1 f1       	breq	.+104    	; 0x3ebc <disk_ioctl+0xc0>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	ec cf       	rjmp	.-40     	; 0x3e30 <disk_ioctl+0x34>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3e58:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    3e5a:	24 96       	adiw	r28, 0x04	; 4
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	df 91       	pop	r29
    3e62:	cf 91       	pop	r28
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	08 95       	ret
	}
	break;

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3e6a:	0e 94 8e 13 	call	0x271c	; 0x271c <mem_test_unit_ready>
    3e6e:	88 23       	and	r24, r24
    3e70:	19 f1       	breq	.+70     	; 0x3eb8 <disk_ioctl+0xbc>
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
    3e72:	83 e0       	ldi	r24, 0x03	; 3
	default:
		res = RES_PARERR;
	}

	return res;
}
    3e74:	24 96       	adiw	r28, 0x04	; 4
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	08 95       	ret
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    3e84:	be 01       	movw	r22, r28
    3e86:	6f 5f       	subi	r22, 0xFF	; 255
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	0e 94 93 13 	call	0x2726	; 0x2726 <mem_read_capacity>

		*(DWORD *)buff = ul_last_sector_num + 1;
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	ab 81       	ldd	r26, Y+3	; 0x03
    3e94:	bc 81       	ldd	r27, Y+4	; 0x04
    3e96:	01 96       	adiw	r24, 0x01	; 1
    3e98:	a1 1d       	adc	r26, r1
    3e9a:	b1 1d       	adc	r27, r1
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	80 83       	st	Z, r24
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	a2 83       	std	Z+2, r26	; 0x02
    3ea4:	b3 83       	std	Z+3, r27	; 0x03

		res = RES_OK;
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
	default:
		res = RES_PARERR;
	}

	return res;
}
    3ea8:	24 96       	adiw	r28, 0x04	; 4
    3eaa:	cd bf       	out	0x3d, r28	; 61
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	1f 91       	pop	r17
    3eb4:	0f 91       	pop	r16
    3eb6:	08 95       	ret
	break;

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
			res = RES_OK;
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	ba cf       	rjmp	.-140    	; 0x3e30 <disk_ioctl+0x34>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	10 82       	st	Z, r1

		res = RES_OK;
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
	default:
		res = RES_PARERR;
	}

	return res;
}
    3ec2:	24 96       	adiw	r28, 0x04	; 4
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	08 95       	ret

00003ed2 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	28 97       	sbiw	r28, 0x08	; 8
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	de bf       	out	0x3e, r29	; 62
	uint32_t timestamp;
	uint32_t fattime;
	struct calendar_date cal;

	/* Retrieve timestamp and convert to date and time */
	timestamp = rtc_get_time();
    3ee4:	0e 94 e0 4e 	call	0x9dc0	; 0x9dc0 <rtc_get_time>
	calendar_timestamp_to_date(timestamp, &cal);
    3ee8:	ae 01       	movw	r20, r28
    3eea:	4f 5f       	subi	r20, 0xFF	; 255
    3eec:	5f 4f       	sbci	r21, 0xFF	; 255
    3eee:	0e 94 1a 12 	call	0x2434	; 0x2434 <calendar_timestamp_to_date>

	fattime = ((cal.year - 1980) << (25 - 16))
    3ef2:	6e 81       	ldd	r22, Y+6	; 0x06
    3ef4:	7f 81       	ldd	r23, Y+7	; 0x07
    3ef6:	6c 5b       	subi	r22, 0xBC	; 188
    3ef8:	77 40       	sbci	r23, 0x07	; 7
    3efa:	76 2f       	mov	r23, r22
    3efc:	66 27       	eor	r22, r22
    3efe:	77 0f       	add	r23, r23
    3f00:	8c 81       	ldd	r24, Y+4	; 0x04
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	01 96       	adiw	r24, 0x01	; 1
    3f06:	68 2b       	or	r22, r24
    3f08:	79 2b       	or	r23, r25
    3f0a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	2f 5f       	subi	r18, 0xFF	; 255
    3f10:	3f 4f       	sbci	r19, 0xFF	; 255
    3f12:	22 0f       	add	r18, r18
    3f14:	33 1f       	adc	r19, r19
    3f16:	22 95       	swap	r18
    3f18:	32 95       	swap	r19
    3f1a:	30 7f       	andi	r19, 0xF0	; 240
    3f1c:	32 27       	eor	r19, r18
    3f1e:	20 7f       	andi	r18, 0xF0	; 240
    3f20:	32 27       	eor	r19, r18
    3f22:	62 2b       	or	r22, r18
    3f24:	73 2b       	or	r23, r19
    3f26:	cb 01       	movw	r24, r22
    3f28:	a0 e0       	ldi	r26, 0x00	; 0
    3f2a:	b0 e0       	ldi	r27, 0x00	; 0
			| ((cal.month + 1) << (21 - 16))
			| ((cal.date + 1) << (16 - 16));
	fattime <<= 16;
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	99 27       	eor	r25, r25
    3f30:	88 27       	eor	r24, r24
	fattime |= (cal.hour << 11) | (cal.minute << 5) | ((cal.second >> 1) << 0);
    3f32:	6b 81       	ldd	r22, Y+3	; 0x03
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	76 2f       	mov	r23, r22
    3f38:	66 27       	eor	r22, r22
    3f3a:	77 0f       	add	r23, r23
    3f3c:	77 0f       	add	r23, r23
    3f3e:	77 0f       	add	r23, r23
    3f40:	2a 81       	ldd	r18, Y+2	; 0x02
    3f42:	00 e2       	ldi	r16, 0x20	; 32
    3f44:	20 9f       	mul	r18, r16
    3f46:	90 01       	movw	r18, r0
    3f48:	11 24       	eor	r1, r1
    3f4a:	62 2b       	or	r22, r18
    3f4c:	73 2b       	or	r23, r19
    3f4e:	29 81       	ldd	r18, Y+1	; 0x01
    3f50:	26 95       	lsr	r18
    3f52:	62 2b       	or	r22, r18
    3f54:	ab 01       	movw	r20, r22
    3f56:	77 0f       	add	r23, r23
    3f58:	66 0b       	sbc	r22, r22
    3f5a:	77 0b       	sbc	r23, r23
    3f5c:	8a 01       	movw	r16, r20
    3f5e:	9b 01       	movw	r18, r22
    3f60:	08 2b       	or	r16, r24
    3f62:	19 2b       	or	r17, r25
    3f64:	2a 2b       	or	r18, r26
    3f66:	3b 2b       	or	r19, r27
    3f68:	c9 01       	movw	r24, r18
    3f6a:	b8 01       	movw	r22, r16

	return fattime;
}
    3f6c:	28 96       	adiw	r28, 0x08	; 8
    3f6e:	cd bf       	out	0x3d, r28	; 61
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	08 95       	ret

00003f7c <get_fileinfo>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3f7c:	af 92       	push	r10
    3f7e:	bf 92       	push	r11
    3f80:	cf 92       	push	r12
    3f82:	df 92       	push	r13
    3f84:	ef 92       	push	r14
    3f86:	ff 92       	push	r15
    3f88:	0f 93       	push	r16
    3f8a:	1f 93       	push	r17
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	fb 01       	movw	r30, r22
    3f92:	db 01       	movw	r26, r22
    3f94:	19 96       	adiw	r26, 0x09	; 9
    3f96:	ec 01       	movw	r28, r24
    3f98:	4e 85       	ldd	r20, Y+14	; 0x0e
    3f9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3f9c:	68 89       	ldd	r22, Y+16	; 0x10
    3f9e:	79 89       	ldd	r23, Y+17	; 0x11
    3fa0:	45 2b       	or	r20, r21
    3fa2:	46 2b       	or	r20, r22
    3fa4:	47 2b       	or	r20, r23
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <get_fileinfo+0x2e>
    3fa8:	8f c0       	rjmp	.+286    	; 0x40c8 <get_fileinfo+0x14c>
    3faa:	0a 89       	ldd	r16, Y+18	; 0x12
    3fac:	1b 89       	ldd	r17, Y+19	; 0x13
    3fae:	e8 01       	movw	r28, r16
    3fb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    3fb2:	23 fd       	sbrc	r18, 3
    3fb4:	de c0       	rjmp	.+444    	; 0x4172 <get_fileinfo+0x1f6>
    3fb6:	38 81       	ld	r19, Y
    3fb8:	30 32       	cpi	r19, 0x20	; 32
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <get_fileinfo+0x42>
    3fbc:	4d c0       	rjmp	.+154    	; 0x4058 <get_fileinfo+0xdc>
    3fbe:	35 30       	cpi	r19, 0x05	; 5
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <get_fileinfo+0x48>
    3fc2:	7f c1       	rjmp	.+766    	; 0x42c2 <get_fileinfo+0x346>
    3fc4:	df 01       	movw	r26, r30
    3fc6:	1a 96       	adiw	r26, 0x0a	; 10
    3fc8:	31 87       	std	Z+9, r19	; 0x09
    3fca:	e8 01       	movw	r28, r16
    3fcc:	39 81       	ldd	r19, Y+1	; 0x01
    3fce:	30 32       	cpi	r19, 0x20	; 32
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <get_fileinfo+0x58>
    3fd2:	42 c0       	rjmp	.+132    	; 0x4058 <get_fileinfo+0xdc>
    3fd4:	35 30       	cpi	r19, 0x05	; 5
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <get_fileinfo+0x5e>
    3fd8:	76 c1       	rjmp	.+748    	; 0x42c6 <get_fileinfo+0x34a>
    3fda:	df 01       	movw	r26, r30
    3fdc:	1b 96       	adiw	r26, 0x0b	; 11
    3fde:	32 87       	std	Z+10, r19	; 0x0a
    3fe0:	e8 01       	movw	r28, r16
    3fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    3fe4:	30 32       	cpi	r19, 0x20	; 32
    3fe6:	c1 f1       	breq	.+112    	; 0x4058 <get_fileinfo+0xdc>
    3fe8:	35 30       	cpi	r19, 0x05	; 5
    3fea:	09 f4       	brne	.+2      	; 0x3fee <get_fileinfo+0x72>
    3fec:	6e c1       	rjmp	.+732    	; 0x42ca <get_fileinfo+0x34e>
    3fee:	df 01       	movw	r26, r30
    3ff0:	1c 96       	adiw	r26, 0x0c	; 12
    3ff2:	33 87       	std	Z+11, r19	; 0x0b
    3ff4:	e8 01       	movw	r28, r16
    3ff6:	3b 81       	ldd	r19, Y+3	; 0x03
    3ff8:	30 32       	cpi	r19, 0x20	; 32
    3ffa:	71 f1       	breq	.+92     	; 0x4058 <get_fileinfo+0xdc>
    3ffc:	35 30       	cpi	r19, 0x05	; 5
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <get_fileinfo+0x86>
    4000:	66 c1       	rjmp	.+716    	; 0x42ce <get_fileinfo+0x352>
    4002:	df 01       	movw	r26, r30
    4004:	1d 96       	adiw	r26, 0x0d	; 13
    4006:	34 87       	std	Z+12, r19	; 0x0c
    4008:	e8 01       	movw	r28, r16
    400a:	3c 81       	ldd	r19, Y+4	; 0x04
    400c:	30 32       	cpi	r19, 0x20	; 32
    400e:	21 f1       	breq	.+72     	; 0x4058 <get_fileinfo+0xdc>
    4010:	35 30       	cpi	r19, 0x05	; 5
    4012:	09 f4       	brne	.+2      	; 0x4016 <get_fileinfo+0x9a>
    4014:	68 c1       	rjmp	.+720    	; 0x42e6 <get_fileinfo+0x36a>
    4016:	df 01       	movw	r26, r30
    4018:	1e 96       	adiw	r26, 0x0e	; 14
    401a:	35 87       	std	Z+13, r19	; 0x0d
    401c:	e8 01       	movw	r28, r16
    401e:	3d 81       	ldd	r19, Y+5	; 0x05
    4020:	30 32       	cpi	r19, 0x20	; 32
    4022:	d1 f0       	breq	.+52     	; 0x4058 <get_fileinfo+0xdc>
    4024:	35 30       	cpi	r19, 0x05	; 5
    4026:	09 f4       	brne	.+2      	; 0x402a <get_fileinfo+0xae>
    4028:	60 c1       	rjmp	.+704    	; 0x42ea <get_fileinfo+0x36e>
    402a:	df 01       	movw	r26, r30
    402c:	1f 96       	adiw	r26, 0x0f	; 15
    402e:	36 87       	std	Z+14, r19	; 0x0e
    4030:	e8 01       	movw	r28, r16
    4032:	3e 81       	ldd	r19, Y+6	; 0x06
    4034:	30 32       	cpi	r19, 0x20	; 32
    4036:	81 f0       	breq	.+32     	; 0x4058 <get_fileinfo+0xdc>
    4038:	35 30       	cpi	r19, 0x05	; 5
    403a:	09 f4       	brne	.+2      	; 0x403e <get_fileinfo+0xc2>
    403c:	5a c1       	rjmp	.+692    	; 0x42f2 <get_fileinfo+0x376>
    403e:	df 01       	movw	r26, r30
    4040:	50 96       	adiw	r26, 0x10	; 16
    4042:	37 87       	std	Z+15, r19	; 0x0f
    4044:	e8 01       	movw	r28, r16
    4046:	3f 81       	ldd	r19, Y+7	; 0x07
    4048:	30 32       	cpi	r19, 0x20	; 32
    404a:	31 f0       	breq	.+12     	; 0x4058 <get_fileinfo+0xdc>
    404c:	35 30       	cpi	r19, 0x05	; 5
    404e:	09 f4       	brne	.+2      	; 0x4052 <get_fileinfo+0xd6>
    4050:	40 c1       	rjmp	.+640    	; 0x42d2 <get_fileinfo+0x356>
    4052:	df 01       	movw	r26, r30
    4054:	51 96       	adiw	r26, 0x11	; 17
    4056:	30 8b       	std	Z+16, r19	; 0x10
    4058:	e8 01       	movw	r28, r16
    405a:	38 85       	ldd	r19, Y+8	; 0x08
    405c:	30 32       	cpi	r19, 0x20	; 32
    405e:	09 f1       	breq	.+66     	; 0x40a2 <get_fileinfo+0x126>
    4060:	ad 01       	movw	r20, r26
    4062:	4f 5f       	subi	r20, 0xFF	; 255
    4064:	5f 4f       	sbci	r21, 0xFF	; 255
    4066:	3e e2       	ldi	r19, 0x2E	; 46
    4068:	3c 93       	st	X, r19
    406a:	24 fd       	sbrc	r18, 4
    406c:	00 c1       	rjmp	.+512    	; 0x426e <get_fileinfo+0x2f2>
    406e:	28 85       	ldd	r18, Y+8	; 0x08
    4070:	20 32       	cpi	r18, 0x20	; 32
    4072:	09 f4       	brne	.+2      	; 0x4076 <get_fileinfo+0xfa>
    4074:	46 c1       	rjmp	.+652    	; 0x4302 <get_fileinfo+0x386>
    4076:	4f 5f       	subi	r20, 0xFF	; 255
    4078:	5f 4f       	sbci	r21, 0xFF	; 255
    407a:	11 96       	adiw	r26, 0x01	; 1
    407c:	2c 93       	st	X, r18
    407e:	11 97       	sbiw	r26, 0x01	; 1
    4080:	29 85       	ldd	r18, Y+9	; 0x09
    4082:	20 32       	cpi	r18, 0x20	; 32
    4084:	09 f4       	brne	.+2      	; 0x4088 <get_fileinfo+0x10c>
    4086:	3d c1       	rjmp	.+634    	; 0x4302 <get_fileinfo+0x386>
    4088:	4f 5f       	subi	r20, 0xFF	; 255
    408a:	5f 4f       	sbci	r21, 0xFF	; 255
    408c:	12 96       	adiw	r26, 0x02	; 2
    408e:	2c 93       	st	X, r18
    4090:	12 97       	sbiw	r26, 0x02	; 2
    4092:	2a 85       	ldd	r18, Y+10	; 0x0a
    4094:	20 32       	cpi	r18, 0x20	; 32
    4096:	09 f4       	brne	.+2      	; 0x409a <get_fileinfo+0x11e>
    4098:	34 c1       	rjmp	.+616    	; 0x4302 <get_fileinfo+0x386>
    409a:	13 96       	adiw	r26, 0x03	; 3
    409c:	2c 93       	st	X, r18
    409e:	13 97       	sbiw	r26, 0x03	; 3
    40a0:	14 96       	adiw	r26, 0x04	; 4
    40a2:	e8 01       	movw	r28, r16
    40a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    40a6:	20 87       	std	Z+8, r18	; 0x08
    40a8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    40aa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    40ac:	6e 8d       	ldd	r22, Y+30	; 0x1e
    40ae:	7f 8d       	ldd	r23, Y+31	; 0x1f
    40b0:	40 83       	st	Z, r20
    40b2:	51 83       	std	Z+1, r21	; 0x01
    40b4:	62 83       	std	Z+2, r22	; 0x02
    40b6:	73 83       	std	Z+3, r23	; 0x03
    40b8:	28 8d       	ldd	r18, Y+24	; 0x18
    40ba:	39 8d       	ldd	r19, Y+25	; 0x19
    40bc:	24 83       	std	Z+4, r18	; 0x04
    40be:	35 83       	std	Z+5, r19	; 0x05
    40c0:	2e 89       	ldd	r18, Y+22	; 0x16
    40c2:	3f 89       	ldd	r19, Y+23	; 0x17
    40c4:	26 83       	std	Z+6, r18	; 0x06
    40c6:	37 83       	std	Z+7, r19	; 0x07
    40c8:	1c 92       	st	X, r1
    40ca:	c6 88       	ldd	r12, Z+22	; 0x16
    40cc:	d7 88       	ldd	r13, Z+23	; 0x17
    40ce:	c1 14       	cp	r12, r1
    40d0:	d1 04       	cpc	r13, r1
    40d2:	a9 f0       	breq	.+42     	; 0x40fe <get_fileinfo+0x182>
    40d4:	20 8d       	ldd	r18, Z+24	; 0x18
    40d6:	31 8d       	ldd	r19, Z+25	; 0x19
    40d8:	23 2b       	or	r18, r19
    40da:	89 f0       	breq	.+34     	; 0x40fe <get_fileinfo+0x182>
    40dc:	dc 01       	movw	r26, r24
    40de:	1e 96       	adiw	r26, 0x0e	; 14
    40e0:	4d 91       	ld	r20, X+
    40e2:	5d 91       	ld	r21, X+
    40e4:	6d 91       	ld	r22, X+
    40e6:	7c 91       	ld	r23, X
    40e8:	51 97       	sbiw	r26, 0x11	; 17
    40ea:	45 2b       	or	r20, r21
    40ec:	46 2b       	or	r20, r22
    40ee:	47 2b       	or	r20, r23
    40f0:	89 f4       	brne	.+34     	; 0x4114 <get_fileinfo+0x198>
    40f2:	00 e0       	ldi	r16, 0x00	; 0
    40f4:	10 e0       	ldi	r17, 0x00	; 0
    40f6:	f6 01       	movw	r30, r12
    40f8:	e0 0f       	add	r30, r16
    40fa:	f1 1f       	adc	r31, r17
    40fc:	10 82       	st	Z, r1
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	1f 91       	pop	r17
    4104:	0f 91       	pop	r16
    4106:	ff 90       	pop	r15
    4108:	ef 90       	pop	r14
    410a:	df 90       	pop	r13
    410c:	cf 90       	pop	r12
    410e:	bf 90       	pop	r11
    4110:	af 90       	pop	r10
    4112:	08 95       	ret
    4114:	ec 01       	movw	r28, r24
    4116:	28 8d       	ldd	r18, Y+24	; 0x18
    4118:	39 8d       	ldd	r19, Y+25	; 0x19
    411a:	2f 3f       	cpi	r18, 0xFF	; 255
    411c:	3f 4f       	sbci	r19, 0xFF	; 255
    411e:	49 f3       	breq	.-46     	; 0x40f2 <get_fileinfo+0x176>
    4120:	ec 01       	movw	r28, r24
    4122:	ae 89       	ldd	r26, Y+22	; 0x16
    4124:	bf 89       	ldd	r27, Y+23	; 0x17
    4126:	7d 01       	movw	r14, r26
    4128:	d2 e0       	ldi	r29, 0x02	; 2
    412a:	ed 0e       	add	r14, r29
    412c:	f1 1c       	adc	r15, r1
    412e:	8d 91       	ld	r24, X+
    4130:	9c 91       	ld	r25, X
    4132:	00 97       	sbiw	r24, 0x00	; 0
    4134:	f1 f2       	breq	.-68     	; 0x40f2 <get_fileinfo+0x176>
    4136:	ef 01       	movw	r28, r30
    4138:	56 01       	movw	r10, r12
    413a:	00 e0       	ldi	r16, 0x00	; 0
    413c:	10 e0       	ldi	r17, 0x00	; 0
    413e:	12 c0       	rjmp	.+36     	; 0x4164 <get_fileinfo+0x1e8>
    4140:	28 8d       	ldd	r18, Y+24	; 0x18
    4142:	39 8d       	ldd	r19, Y+25	; 0x19
    4144:	21 50       	subi	r18, 0x01	; 1
    4146:	31 09       	sbc	r19, r1
    4148:	02 17       	cp	r16, r18
    414a:	13 07       	cpc	r17, r19
    414c:	90 f6       	brcc	.-92     	; 0x40f2 <get_fileinfo+0x176>
    414e:	0f 5f       	subi	r16, 0xFF	; 255
    4150:	1f 4f       	sbci	r17, 0xFF	; 255
    4152:	f5 01       	movw	r30, r10
    4154:	81 93       	st	Z+, r24
    4156:	5f 01       	movw	r10, r30
    4158:	d7 01       	movw	r26, r14
    415a:	8d 91       	ld	r24, X+
    415c:	9d 91       	ld	r25, X+
    415e:	7d 01       	movw	r14, r26
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	49 f2       	breq	.-110    	; 0x40f6 <get_fileinfo+0x17a>
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <ff_convert>
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	41 f7       	brne	.-48     	; 0x4140 <get_fileinfo+0x1c4>
    4170:	c0 cf       	rjmp	.-128    	; 0x40f2 <get_fileinfo+0x176>
    4172:	e8 01       	movw	r28, r16
    4174:	38 81       	ld	r19, Y
    4176:	30 32       	cpi	r19, 0x20	; 32
    4178:	09 f4       	brne	.+2      	; 0x417c <get_fileinfo+0x200>
    417a:	6e cf       	rjmp	.-292    	; 0x4058 <get_fileinfo+0xdc>
    417c:	35 30       	cpi	r19, 0x05	; 5
    417e:	09 f4       	brne	.+2      	; 0x4182 <get_fileinfo+0x206>
    4180:	9e c0       	rjmp	.+316    	; 0x42be <get_fileinfo+0x342>
    4182:	4f eb       	ldi	r20, 0xBF	; 191
    4184:	43 0f       	add	r20, r19
    4186:	4a 31       	cpi	r20, 0x1A	; 26
    4188:	08 f4       	brcc	.+2      	; 0x418c <get_fileinfo+0x210>
    418a:	30 5e       	subi	r19, 0xE0	; 224
    418c:	df 01       	movw	r26, r30
    418e:	1a 96       	adiw	r26, 0x0a	; 10
    4190:	31 87       	std	Z+9, r19	; 0x09
    4192:	e8 01       	movw	r28, r16
    4194:	39 81       	ldd	r19, Y+1	; 0x01
    4196:	30 32       	cpi	r19, 0x20	; 32
    4198:	09 f4       	brne	.+2      	; 0x419c <get_fileinfo+0x220>
    419a:	5e cf       	rjmp	.-324    	; 0x4058 <get_fileinfo+0xdc>
    419c:	35 30       	cpi	r19, 0x05	; 5
    419e:	09 f4       	brne	.+2      	; 0x41a2 <get_fileinfo+0x226>
    41a0:	9a c0       	rjmp	.+308    	; 0x42d6 <get_fileinfo+0x35a>
    41a2:	4f eb       	ldi	r20, 0xBF	; 191
    41a4:	43 0f       	add	r20, r19
    41a6:	4a 31       	cpi	r20, 0x1A	; 26
    41a8:	08 f4       	brcc	.+2      	; 0x41ac <get_fileinfo+0x230>
    41aa:	30 5e       	subi	r19, 0xE0	; 224
    41ac:	df 01       	movw	r26, r30
    41ae:	1b 96       	adiw	r26, 0x0b	; 11
    41b0:	32 87       	std	Z+10, r19	; 0x0a
    41b2:	e8 01       	movw	r28, r16
    41b4:	3a 81       	ldd	r19, Y+2	; 0x02
    41b6:	30 32       	cpi	r19, 0x20	; 32
    41b8:	09 f4       	brne	.+2      	; 0x41bc <get_fileinfo+0x240>
    41ba:	4e cf       	rjmp	.-356    	; 0x4058 <get_fileinfo+0xdc>
    41bc:	35 30       	cpi	r19, 0x05	; 5
    41be:	09 f4       	brne	.+2      	; 0x41c2 <get_fileinfo+0x246>
    41c0:	8c c0       	rjmp	.+280    	; 0x42da <get_fileinfo+0x35e>
    41c2:	4f eb       	ldi	r20, 0xBF	; 191
    41c4:	43 0f       	add	r20, r19
    41c6:	4a 31       	cpi	r20, 0x1A	; 26
    41c8:	08 f4       	brcc	.+2      	; 0x41cc <get_fileinfo+0x250>
    41ca:	30 5e       	subi	r19, 0xE0	; 224
    41cc:	df 01       	movw	r26, r30
    41ce:	1c 96       	adiw	r26, 0x0c	; 12
    41d0:	33 87       	std	Z+11, r19	; 0x0b
    41d2:	e8 01       	movw	r28, r16
    41d4:	3b 81       	ldd	r19, Y+3	; 0x03
    41d6:	30 32       	cpi	r19, 0x20	; 32
    41d8:	09 f4       	brne	.+2      	; 0x41dc <get_fileinfo+0x260>
    41da:	3e cf       	rjmp	.-388    	; 0x4058 <get_fileinfo+0xdc>
    41dc:	35 30       	cpi	r19, 0x05	; 5
    41de:	09 f4       	brne	.+2      	; 0x41e2 <get_fileinfo+0x266>
    41e0:	7e c0       	rjmp	.+252    	; 0x42de <get_fileinfo+0x362>
    41e2:	4f eb       	ldi	r20, 0xBF	; 191
    41e4:	43 0f       	add	r20, r19
    41e6:	4a 31       	cpi	r20, 0x1A	; 26
    41e8:	08 f4       	brcc	.+2      	; 0x41ec <get_fileinfo+0x270>
    41ea:	30 5e       	subi	r19, 0xE0	; 224
    41ec:	df 01       	movw	r26, r30
    41ee:	1d 96       	adiw	r26, 0x0d	; 13
    41f0:	34 87       	std	Z+12, r19	; 0x0c
    41f2:	e8 01       	movw	r28, r16
    41f4:	3c 81       	ldd	r19, Y+4	; 0x04
    41f6:	30 32       	cpi	r19, 0x20	; 32
    41f8:	09 f4       	brne	.+2      	; 0x41fc <get_fileinfo+0x280>
    41fa:	2e cf       	rjmp	.-420    	; 0x4058 <get_fileinfo+0xdc>
    41fc:	35 30       	cpi	r19, 0x05	; 5
    41fe:	09 f4       	brne	.+2      	; 0x4202 <get_fileinfo+0x286>
    4200:	70 c0       	rjmp	.+224    	; 0x42e2 <get_fileinfo+0x366>
    4202:	4f eb       	ldi	r20, 0xBF	; 191
    4204:	43 0f       	add	r20, r19
    4206:	4a 31       	cpi	r20, 0x1A	; 26
    4208:	08 f4       	brcc	.+2      	; 0x420c <get_fileinfo+0x290>
    420a:	30 5e       	subi	r19, 0xE0	; 224
    420c:	df 01       	movw	r26, r30
    420e:	1e 96       	adiw	r26, 0x0e	; 14
    4210:	35 87       	std	Z+13, r19	; 0x0d
    4212:	e8 01       	movw	r28, r16
    4214:	3d 81       	ldd	r19, Y+5	; 0x05
    4216:	30 32       	cpi	r19, 0x20	; 32
    4218:	09 f4       	brne	.+2      	; 0x421c <get_fileinfo+0x2a0>
    421a:	1e cf       	rjmp	.-452    	; 0x4058 <get_fileinfo+0xdc>
    421c:	35 30       	cpi	r19, 0x05	; 5
    421e:	09 f4       	brne	.+2      	; 0x4222 <get_fileinfo+0x2a6>
    4220:	66 c0       	rjmp	.+204    	; 0x42ee <get_fileinfo+0x372>
    4222:	4f eb       	ldi	r20, 0xBF	; 191
    4224:	43 0f       	add	r20, r19
    4226:	4a 31       	cpi	r20, 0x1A	; 26
    4228:	08 f4       	brcc	.+2      	; 0x422c <get_fileinfo+0x2b0>
    422a:	30 5e       	subi	r19, 0xE0	; 224
    422c:	df 01       	movw	r26, r30
    422e:	1f 96       	adiw	r26, 0x0f	; 15
    4230:	36 87       	std	Z+14, r19	; 0x0e
    4232:	e8 01       	movw	r28, r16
    4234:	3e 81       	ldd	r19, Y+6	; 0x06
    4236:	30 32       	cpi	r19, 0x20	; 32
    4238:	09 f4       	brne	.+2      	; 0x423c <get_fileinfo+0x2c0>
    423a:	0e cf       	rjmp	.-484    	; 0x4058 <get_fileinfo+0xdc>
    423c:	35 30       	cpi	r19, 0x05	; 5
    423e:	09 f4       	brne	.+2      	; 0x4242 <get_fileinfo+0x2c6>
    4240:	5a c0       	rjmp	.+180    	; 0x42f6 <get_fileinfo+0x37a>
    4242:	4f eb       	ldi	r20, 0xBF	; 191
    4244:	43 0f       	add	r20, r19
    4246:	4a 31       	cpi	r20, 0x1A	; 26
    4248:	08 f4       	brcc	.+2      	; 0x424c <get_fileinfo+0x2d0>
    424a:	30 5e       	subi	r19, 0xE0	; 224
    424c:	df 01       	movw	r26, r30
    424e:	50 96       	adiw	r26, 0x10	; 16
    4250:	37 87       	std	Z+15, r19	; 0x0f
    4252:	e8 01       	movw	r28, r16
    4254:	3f 81       	ldd	r19, Y+7	; 0x07
    4256:	30 32       	cpi	r19, 0x20	; 32
    4258:	09 f4       	brne	.+2      	; 0x425c <get_fileinfo+0x2e0>
    425a:	fe ce       	rjmp	.-516    	; 0x4058 <get_fileinfo+0xdc>
    425c:	35 30       	cpi	r19, 0x05	; 5
    425e:	c9 f1       	breq	.+114    	; 0x42d2 <get_fileinfo+0x356>
    4260:	4f eb       	ldi	r20, 0xBF	; 191
    4262:	43 0f       	add	r20, r19
    4264:	4a 31       	cpi	r20, 0x1A	; 26
    4266:	08 f0       	brcs	.+2      	; 0x426a <get_fileinfo+0x2ee>
    4268:	f4 ce       	rjmp	.-536    	; 0x4052 <get_fileinfo+0xd6>
    426a:	30 5e       	subi	r19, 0xE0	; 224
    426c:	f2 ce       	rjmp	.-540    	; 0x4052 <get_fileinfo+0xd6>
    426e:	e8 01       	movw	r28, r16
    4270:	28 85       	ldd	r18, Y+8	; 0x08
    4272:	20 32       	cpi	r18, 0x20	; 32
    4274:	09 f4       	brne	.+2      	; 0x4278 <get_fileinfo+0x2fc>
    4276:	45 c0       	rjmp	.+138    	; 0x4302 <get_fileinfo+0x386>
    4278:	3f eb       	ldi	r19, 0xBF	; 191
    427a:	32 0f       	add	r19, r18
    427c:	3a 31       	cpi	r19, 0x1A	; 26
    427e:	e8 f1       	brcs	.+122    	; 0x42fa <get_fileinfo+0x37e>
    4280:	ad 01       	movw	r20, r26
    4282:	4e 5f       	subi	r20, 0xFE	; 254
    4284:	5f 4f       	sbci	r21, 0xFF	; 255
    4286:	11 96       	adiw	r26, 0x01	; 1
    4288:	2c 93       	st	X, r18
    428a:	11 97       	sbiw	r26, 0x01	; 1
    428c:	e8 01       	movw	r28, r16
    428e:	29 85       	ldd	r18, Y+9	; 0x09
    4290:	20 32       	cpi	r18, 0x20	; 32
    4292:	b9 f1       	breq	.+110    	; 0x4302 <get_fileinfo+0x386>
    4294:	3f eb       	ldi	r19, 0xBF	; 191
    4296:	32 0f       	add	r19, r18
    4298:	3a 31       	cpi	r19, 0x1A	; 26
    429a:	88 f1       	brcs	.+98     	; 0x42fe <get_fileinfo+0x382>
    429c:	ad 01       	movw	r20, r26
    429e:	4d 5f       	subi	r20, 0xFD	; 253
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	12 96       	adiw	r26, 0x02	; 2
    42a4:	2c 93       	st	X, r18
    42a6:	12 97       	sbiw	r26, 0x02	; 2
    42a8:	e8 01       	movw	r28, r16
    42aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    42ac:	20 32       	cpi	r18, 0x20	; 32
    42ae:	49 f1       	breq	.+82     	; 0x4302 <get_fileinfo+0x386>
    42b0:	3f eb       	ldi	r19, 0xBF	; 191
    42b2:	32 0f       	add	r19, r18
    42b4:	3a 31       	cpi	r19, 0x1A	; 26
    42b6:	08 f0       	brcs	.+2      	; 0x42ba <get_fileinfo+0x33e>
    42b8:	f0 ce       	rjmp	.-544    	; 0x409a <get_fileinfo+0x11e>
    42ba:	20 5e       	subi	r18, 0xE0	; 224
    42bc:	ee ce       	rjmp	.-548    	; 0x409a <get_fileinfo+0x11e>
    42be:	35 ee       	ldi	r19, 0xE5	; 229
    42c0:	65 cf       	rjmp	.-310    	; 0x418c <get_fileinfo+0x210>
    42c2:	35 ee       	ldi	r19, 0xE5	; 229
    42c4:	7f ce       	rjmp	.-770    	; 0x3fc4 <get_fileinfo+0x48>
    42c6:	35 ee       	ldi	r19, 0xE5	; 229
    42c8:	88 ce       	rjmp	.-752    	; 0x3fda <get_fileinfo+0x5e>
    42ca:	35 ee       	ldi	r19, 0xE5	; 229
    42cc:	90 ce       	rjmp	.-736    	; 0x3fee <get_fileinfo+0x72>
    42ce:	35 ee       	ldi	r19, 0xE5	; 229
    42d0:	98 ce       	rjmp	.-720    	; 0x4002 <get_fileinfo+0x86>
    42d2:	35 ee       	ldi	r19, 0xE5	; 229
    42d4:	be ce       	rjmp	.-644    	; 0x4052 <get_fileinfo+0xd6>
    42d6:	35 ee       	ldi	r19, 0xE5	; 229
    42d8:	69 cf       	rjmp	.-302    	; 0x41ac <get_fileinfo+0x230>
    42da:	35 ee       	ldi	r19, 0xE5	; 229
    42dc:	77 cf       	rjmp	.-274    	; 0x41cc <get_fileinfo+0x250>
    42de:	35 ee       	ldi	r19, 0xE5	; 229
    42e0:	85 cf       	rjmp	.-246    	; 0x41ec <get_fileinfo+0x270>
    42e2:	35 ee       	ldi	r19, 0xE5	; 229
    42e4:	93 cf       	rjmp	.-218    	; 0x420c <get_fileinfo+0x290>
    42e6:	35 ee       	ldi	r19, 0xE5	; 229
    42e8:	96 ce       	rjmp	.-724    	; 0x4016 <get_fileinfo+0x9a>
    42ea:	35 ee       	ldi	r19, 0xE5	; 229
    42ec:	9e ce       	rjmp	.-708    	; 0x402a <get_fileinfo+0xae>
    42ee:	35 ee       	ldi	r19, 0xE5	; 229
    42f0:	9d cf       	rjmp	.-198    	; 0x422c <get_fileinfo+0x2b0>
    42f2:	35 ee       	ldi	r19, 0xE5	; 229
    42f4:	a4 ce       	rjmp	.-696    	; 0x403e <get_fileinfo+0xc2>
    42f6:	35 ee       	ldi	r19, 0xE5	; 229
    42f8:	a9 cf       	rjmp	.-174    	; 0x424c <get_fileinfo+0x2d0>
    42fa:	20 5e       	subi	r18, 0xE0	; 224
    42fc:	c1 cf       	rjmp	.-126    	; 0x4280 <get_fileinfo+0x304>
    42fe:	20 5e       	subi	r18, 0xE0	; 224
    4300:	cd cf       	rjmp	.-102    	; 0x429c <get_fileinfo+0x320>
    4302:	da 01       	movw	r26, r20
    4304:	ce ce       	rjmp	.-612    	; 0x40a2 <get_fileinfo+0x126>

00004306 <move_window>:
    4306:	4f 92       	push	r4
    4308:	5f 92       	push	r5
    430a:	6f 92       	push	r6
    430c:	7f 92       	push	r7
    430e:	af 92       	push	r10
    4310:	bf 92       	push	r11
    4312:	cf 92       	push	r12
    4314:	df 92       	push	r13
    4316:	ef 92       	push	r14
    4318:	ff 92       	push	r15
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	fc 01       	movw	r30, r24
    4324:	c2 a4       	ldd	r12, Z+42	; 0x2a
    4326:	d3 a4       	ldd	r13, Z+43	; 0x2b
    4328:	e4 a4       	ldd	r14, Z+44	; 0x2c
    432a:	f5 a4       	ldd	r15, Z+45	; 0x2d
    432c:	c4 16       	cp	r12, r20
    432e:	d5 06       	cpc	r13, r21
    4330:	e6 06       	cpc	r14, r22
    4332:	f7 06       	cpc	r15, r23
    4334:	59 f0       	breq	.+22     	; 0x434c <move_window+0x46>
    4336:	2a 01       	movw	r4, r20
    4338:	3b 01       	movw	r6, r22
    433a:	ec 01       	movw	r28, r24
    433c:	84 81       	ldd	r24, Z+4	; 0x04
    433e:	81 11       	cpse	r24, r1
    4340:	24 c0       	rjmp	.+72     	; 0x438a <move_window+0x84>
    4342:	41 14       	cp	r4, r1
    4344:	51 04       	cpc	r5, r1
    4346:	61 04       	cpc	r6, r1
    4348:	71 04       	cpc	r7, r1
    434a:	81 f4       	brne	.+32     	; 0x436c <move_window+0x66>
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
    435a:	df 90       	pop	r13
    435c:	cf 90       	pop	r12
    435e:	bf 90       	pop	r11
    4360:	af 90       	pop	r10
    4362:	7f 90       	pop	r7
    4364:	6f 90       	pop	r6
    4366:	5f 90       	pop	r5
    4368:	4f 90       	pop	r4
    436a:	08 95       	ret
    436c:	01 e0       	ldi	r16, 0x01	; 1
    436e:	a3 01       	movw	r20, r6
    4370:	92 01       	movw	r18, r4
    4372:	be 01       	movw	r22, r28
    4374:	62 5d       	subi	r22, 0xD2	; 210
    4376:	7f 4f       	sbci	r23, 0xFF	; 255
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	02 dc       	rcall	.-2044   	; 0x3b80 <disk_read>
    437c:	81 11       	cpse	r24, r1
    437e:	3a c0       	rjmp	.+116    	; 0x43f4 <move_window+0xee>
    4380:	4a a6       	std	Y+42, r4	; 0x2a
    4382:	5b a6       	std	Y+43, r5	; 0x2b
    4384:	6c a6       	std	Y+44, r6	; 0x2c
    4386:	7d a6       	std	Y+45, r7	; 0x2d
    4388:	e2 cf       	rjmp	.-60     	; 0x434e <move_window+0x48>
    438a:	5f 01       	movw	r10, r30
    438c:	fe e2       	ldi	r31, 0x2E	; 46
    438e:	af 0e       	add	r10, r31
    4390:	b1 1c       	adc	r11, r1
    4392:	01 e0       	ldi	r16, 0x01	; 1
    4394:	a7 01       	movw	r20, r14
    4396:	96 01       	movw	r18, r12
    4398:	b5 01       	movw	r22, r10
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	90 dc       	rcall	.-1760   	; 0x3cbe <disk_write>
    439e:	81 11       	cpse	r24, r1
    43a0:	29 c0       	rjmp	.+82     	; 0x43f4 <move_window+0xee>
    43a2:	1c 82       	std	Y+4, r1	; 0x04
    43a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43a8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    43aa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    43ac:	4e 8d       	ldd	r20, Y+30	; 0x1e
    43ae:	5f 8d       	ldd	r21, Y+31	; 0x1f
    43b0:	68 a1       	ldd	r22, Y+32	; 0x20
    43b2:	79 a1       	ldd	r23, Y+33	; 0x21
    43b4:	48 0f       	add	r20, r24
    43b6:	59 1f       	adc	r21, r25
    43b8:	6a 1f       	adc	r22, r26
    43ba:	7b 1f       	adc	r23, r27
    43bc:	c4 16       	cp	r12, r20
    43be:	d5 06       	cpc	r13, r21
    43c0:	e6 06       	cpc	r14, r22
    43c2:	f7 06       	cpc	r15, r23
    43c4:	08 f0       	brcs	.+2      	; 0x43c8 <move_window+0xc2>
    43c6:	bd cf       	rjmp	.-134    	; 0x4342 <move_window+0x3c>
    43c8:	1b 81       	ldd	r17, Y+3	; 0x03
    43ca:	12 30       	cpi	r17, 0x02	; 2
    43cc:	28 f4       	brcc	.+10     	; 0x43d8 <move_window+0xd2>
    43ce:	b9 cf       	rjmp	.-142    	; 0x4342 <move_window+0x3c>
    43d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    43d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    43d8:	c8 0e       	add	r12, r24
    43da:	d9 1e       	adc	r13, r25
    43dc:	ea 1e       	adc	r14, r26
    43de:	fb 1e       	adc	r15, r27
    43e0:	01 e0       	ldi	r16, 0x01	; 1
    43e2:	a7 01       	movw	r20, r14
    43e4:	96 01       	movw	r18, r12
    43e6:	b5 01       	movw	r22, r10
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	69 dc       	rcall	.-1838   	; 0x3cbe <disk_write>
    43ec:	11 50       	subi	r17, 0x01	; 1
    43ee:	11 30       	cpi	r17, 0x01	; 1
    43f0:	79 f7       	brne	.-34     	; 0x43d0 <move_window+0xca>
    43f2:	a7 cf       	rjmp	.-178    	; 0x4342 <move_window+0x3c>
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	ab cf       	rjmp	.-170    	; 0x434e <move_window+0x48>

000043f8 <sync>:
    43f8:	af 92       	push	r10
    43fa:	bf 92       	push	r11
    43fc:	cf 92       	push	r12
    43fe:	df 92       	push	r13
    4400:	ef 92       	push	r14
    4402:	ff 92       	push	r15
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	cf 93       	push	r28
    440a:	df 93       	push	r29
    440c:	ec 01       	movw	r28, r24
    440e:	ca a4       	ldd	r12, Y+42	; 0x2a
    4410:	db a4       	ldd	r13, Y+43	; 0x2b
    4412:	ec a4       	ldd	r14, Y+44	; 0x2c
    4414:	fd a4       	ldd	r15, Y+45	; 0x2d
    4416:	c1 14       	cp	r12, r1
    4418:	d1 04       	cpc	r13, r1
    441a:	e1 04       	cpc	r14, r1
    441c:	f1 04       	cpc	r15, r1
    441e:	19 f0       	breq	.+6      	; 0x4426 <sync+0x2e>
    4420:	8c 81       	ldd	r24, Y+4	; 0x04
    4422:	81 11       	cpse	r24, r1
    4424:	1a c0       	rjmp	.+52     	; 0x445a <sync+0x62>
    4426:	88 81       	ld	r24, Y
    4428:	83 30       	cpi	r24, 0x03	; 3
    442a:	09 f4       	brne	.+2      	; 0x442e <sync+0x36>
    442c:	4c c0       	rjmp	.+152    	; 0x44c6 <sync+0xce>
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	e2 dc       	rcall	.-1596   	; 0x3dfc <disk_ioctl>
    4438:	91 e0       	ldi	r25, 0x01	; 1
    443a:	88 23       	and	r24, r24
    443c:	61 f0       	breq	.+24     	; 0x4456 <sync+0x5e>
    443e:	89 2f       	mov	r24, r25
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	1f 91       	pop	r17
    4446:	0f 91       	pop	r16
    4448:	ff 90       	pop	r15
    444a:	ef 90       	pop	r14
    444c:	df 90       	pop	r13
    444e:	cf 90       	pop	r12
    4450:	bf 90       	pop	r11
    4452:	af 90       	pop	r10
    4454:	08 95       	ret
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	f2 cf       	rjmp	.-28     	; 0x443e <sync+0x46>
    445a:	5e 01       	movw	r10, r28
    445c:	2e e2       	ldi	r18, 0x2E	; 46
    445e:	a2 0e       	add	r10, r18
    4460:	b1 1c       	adc	r11, r1
    4462:	01 e0       	ldi	r16, 0x01	; 1
    4464:	a7 01       	movw	r20, r14
    4466:	96 01       	movw	r18, r12
    4468:	b5 01       	movw	r22, r10
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	28 dc       	rcall	.-1968   	; 0x3cbe <disk_write>
    446e:	81 11       	cpse	r24, r1
    4470:	28 c0       	rjmp	.+80     	; 0x44c2 <sync+0xca>
    4472:	1c 82       	std	Y+4, r1	; 0x04
    4474:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4476:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4478:	ac 8d       	ldd	r26, Y+28	; 0x1c
    447a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    447c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    447e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4480:	68 a1       	ldd	r22, Y+32	; 0x20
    4482:	79 a1       	ldd	r23, Y+33	; 0x21
    4484:	48 0f       	add	r20, r24
    4486:	59 1f       	adc	r21, r25
    4488:	6a 1f       	adc	r22, r26
    448a:	7b 1f       	adc	r23, r27
    448c:	c4 16       	cp	r12, r20
    448e:	d5 06       	cpc	r13, r21
    4490:	e6 06       	cpc	r14, r22
    4492:	f7 06       	cpc	r15, r23
    4494:	40 f6       	brcc	.-112    	; 0x4426 <sync+0x2e>
    4496:	1b 81       	ldd	r17, Y+3	; 0x03
    4498:	12 30       	cpi	r17, 0x02	; 2
    449a:	28 f4       	brcc	.+10     	; 0x44a6 <sync+0xae>
    449c:	c4 cf       	rjmp	.-120    	; 0x4426 <sync+0x2e>
    449e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    44a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    44a2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    44a4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    44a6:	c8 0e       	add	r12, r24
    44a8:	d9 1e       	adc	r13, r25
    44aa:	ea 1e       	adc	r14, r26
    44ac:	fb 1e       	adc	r15, r27
    44ae:	01 e0       	ldi	r16, 0x01	; 1
    44b0:	a7 01       	movw	r20, r14
    44b2:	96 01       	movw	r18, r12
    44b4:	b5 01       	movw	r22, r10
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	02 dc       	rcall	.-2044   	; 0x3cbe <disk_write>
    44ba:	11 50       	subi	r17, 0x01	; 1
    44bc:	11 30       	cpi	r17, 0x01	; 1
    44be:	79 f7       	brne	.-34     	; 0x449e <sync+0xa6>
    44c0:	b2 cf       	rjmp	.-156    	; 0x4426 <sync+0x2e>
    44c2:	91 e0       	ldi	r25, 0x01	; 1
    44c4:	bc cf       	rjmp	.-136    	; 0x443e <sync+0x46>
    44c6:	8d 81       	ldd	r24, Y+5	; 0x05
    44c8:	88 23       	and	r24, r24
    44ca:	09 f4       	brne	.+2      	; 0x44ce <sync+0xd6>
    44cc:	b0 cf       	rjmp	.-160    	; 0x442e <sync+0x36>
    44ce:	1a a6       	std	Y+42, r1	; 0x2a
    44d0:	1b a6       	std	Y+43, r1	; 0x2b
    44d2:	1c a6       	std	Y+44, r1	; 0x2c
    44d4:	1d a6       	std	Y+45, r1	; 0x2d
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	92 e0       	ldi	r25, 0x02	; 2
    44da:	be 01       	movw	r22, r28
    44dc:	62 5d       	subi	r22, 0xD2	; 210
    44de:	7f 4f       	sbci	r23, 0xFF	; 255
    44e0:	fb 01       	movw	r30, r22
    44e2:	9c 01       	movw	r18, r24
    44e4:	11 92       	st	Z+, r1
    44e6:	21 50       	subi	r18, 0x01	; 1
    44e8:	30 40       	sbci	r19, 0x00	; 0
    44ea:	e1 f7       	brne	.-8      	; 0x44e4 <sync+0xec>
    44ec:	85 e5       	ldi	r24, 0x55	; 85
    44ee:	fe 01       	movw	r30, r28
    44f0:	e4 5d       	subi	r30, 0xD4	; 212
    44f2:	fd 4f       	sbci	r31, 0xFD	; 253
    44f4:	80 83       	st	Z, r24
    44f6:	8a ea       	ldi	r24, 0xAA	; 170
    44f8:	31 96       	adiw	r30, 0x01	; 1
    44fa:	80 83       	st	Z, r24
    44fc:	82 e5       	ldi	r24, 0x52	; 82
    44fe:	8e a7       	std	Y+46, r24	; 0x2e
    4500:	8f a7       	std	Y+47, r24	; 0x2f
    4502:	81 e6       	ldi	r24, 0x61	; 97
    4504:	88 ab       	std	Y+48, r24	; 0x30
    4506:	91 e4       	ldi	r25, 0x41	; 65
    4508:	99 ab       	std	Y+49, r25	; 0x31
    450a:	22 e7       	ldi	r18, 0x72	; 114
    450c:	7b 97       	sbiw	r30, 0x1b	; 27
    450e:	20 83       	st	Z, r18
    4510:	31 96       	adiw	r30, 0x01	; 1
    4512:	20 83       	st	Z, r18
    4514:	31 96       	adiw	r30, 0x01	; 1
    4516:	90 83       	st	Z, r25
    4518:	31 96       	adiw	r30, 0x01	; 1
    451a:	80 83       	st	Z, r24
    451c:	3e 85       	ldd	r19, Y+14	; 0x0e
    451e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4520:	98 89       	ldd	r25, Y+16	; 0x10
    4522:	89 89       	ldd	r24, Y+17	; 0x11
    4524:	31 96       	adiw	r30, 0x01	; 1
    4526:	30 83       	st	Z, r19
    4528:	31 96       	adiw	r30, 0x01	; 1
    452a:	20 83       	st	Z, r18
    452c:	31 96       	adiw	r30, 0x01	; 1
    452e:	90 83       	st	Z, r25
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	80 83       	st	Z, r24
    4534:	3a 85       	ldd	r19, Y+10	; 0x0a
    4536:	2b 85       	ldd	r18, Y+11	; 0x0b
    4538:	9c 85       	ldd	r25, Y+12	; 0x0c
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	31 96       	adiw	r30, 0x01	; 1
    453e:	30 83       	st	Z, r19
    4540:	31 96       	adiw	r30, 0x01	; 1
    4542:	20 83       	st	Z, r18
    4544:	31 96       	adiw	r30, 0x01	; 1
    4546:	90 83       	st	Z, r25
    4548:	31 96       	adiw	r30, 0x01	; 1
    454a:	80 83       	st	Z, r24
    454c:	2a 89       	ldd	r18, Y+18	; 0x12
    454e:	3b 89       	ldd	r19, Y+19	; 0x13
    4550:	4c 89       	ldd	r20, Y+20	; 0x14
    4552:	5d 89       	ldd	r21, Y+21	; 0x15
    4554:	01 e0       	ldi	r16, 0x01	; 1
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	b2 db       	rcall	.-2204   	; 0x3cbe <disk_write>
    455a:	1d 82       	std	Y+5, r1	; 0x05
    455c:	68 cf       	rjmp	.-304    	; 0x442e <sync+0x36>

0000455e <get_fat.part.3>:
    455e:	2f 92       	push	r2
    4560:	3f 92       	push	r3
    4562:	4f 92       	push	r4
    4564:	5f 92       	push	r5
    4566:	6f 92       	push	r6
    4568:	7f 92       	push	r7
    456a:	8f 92       	push	r8
    456c:	9f 92       	push	r9
    456e:	af 92       	push	r10
    4570:	bf 92       	push	r11
    4572:	cf 92       	push	r12
    4574:	df 92       	push	r13
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	00 d0       	rcall	.+0      	; 0x4584 <get_fat.part.3+0x26>
    4584:	1f 92       	push	r1
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    458a:	8b 83       	std	Y+3, r24	; 0x03
    458c:	9c 83       	std	Y+4, r25	; 0x04
    458e:	6a 01       	movw	r12, r20
    4590:	7b 01       	movw	r14, r22
    4592:	fc 01       	movw	r30, r24
    4594:	80 81       	ld	r24, Z
    4596:	82 30       	cpi	r24, 0x02	; 2
    4598:	09 f4       	brne	.+2      	; 0x459c <get_fat.part.3+0x3e>
    459a:	e1 c0       	rjmp	.+450    	; 0x475e <get_fat.part.3+0x200>
    459c:	83 30       	cpi	r24, 0x03	; 3
    459e:	09 f4       	brne	.+2      	; 0x45a2 <get_fat.part.3+0x44>
    45a0:	73 c0       	rjmp	.+230    	; 0x4688 <get_fat.part.3+0x12a>
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	c9 f0       	breq	.+50     	; 0x45d8 <get_fat.part.3+0x7a>
    45a6:	6f ef       	ldi	r22, 0xFF	; 255
    45a8:	7f ef       	ldi	r23, 0xFF	; 255
    45aa:	cb 01       	movw	r24, r22
    45ac:	24 96       	adiw	r28, 0x04	; 4
    45ae:	cd bf       	out	0x3d, r28	; 61
    45b0:	de bf       	out	0x3e, r29	; 62
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	bf 90       	pop	r11
    45c4:	af 90       	pop	r10
    45c6:	9f 90       	pop	r9
    45c8:	8f 90       	pop	r8
    45ca:	7f 90       	pop	r7
    45cc:	6f 90       	pop	r6
    45ce:	5f 90       	pop	r5
    45d0:	4f 90       	pop	r4
    45d2:	3f 90       	pop	r3
    45d4:	2f 90       	pop	r2
    45d6:	08 95       	ret
    45d8:	1a 01       	movw	r2, r20
    45da:	36 94       	lsr	r3
    45dc:	27 94       	ror	r2
    45de:	24 0e       	add	r2, r20
    45e0:	35 1e       	adc	r3, r21
    45e2:	46 8d       	ldd	r20, Z+30	; 0x1e
    45e4:	57 8d       	ldd	r21, Z+31	; 0x1f
    45e6:	60 a1       	ldd	r22, Z+32	; 0x20
    45e8:	71 a1       	ldd	r23, Z+33	; 0x21
    45ea:	c1 01       	movw	r24, r2
    45ec:	89 2f       	mov	r24, r25
    45ee:	99 27       	eor	r25, r25
    45f0:	86 95       	lsr	r24
    45f2:	2a 01       	movw	r4, r20
    45f4:	3b 01       	movw	r6, r22
    45f6:	48 0e       	add	r4, r24
    45f8:	59 1e       	adc	r5, r25
    45fa:	61 1c       	adc	r6, r1
    45fc:	71 1c       	adc	r7, r1
    45fe:	82 a4       	ldd	r8, Z+42	; 0x2a
    4600:	93 a4       	ldd	r9, Z+43	; 0x2b
    4602:	a4 a4       	ldd	r10, Z+44	; 0x2c
    4604:	b5 a4       	ldd	r11, Z+45	; 0x2d
    4606:	48 14       	cp	r4, r8
    4608:	59 04       	cpc	r5, r9
    460a:	6a 04       	cpc	r6, r10
    460c:	7b 04       	cpc	r7, r11
    460e:	79 f0       	breq	.+30     	; 0x462e <get_fat.part.3+0xd0>
    4610:	84 81       	ldd	r24, Z+4	; 0x04
    4612:	81 11       	cpse	r24, r1
    4614:	67 c1       	rjmp	.+718    	; 0x48e4 <get_fat.part.3+0x386>
    4616:	41 14       	cp	r4, r1
    4618:	51 04       	cpc	r5, r1
    461a:	61 04       	cpc	r6, r1
    461c:	71 04       	cpc	r7, r1
    461e:	09 f0       	breq	.+2      	; 0x4622 <get_fat.part.3+0xc4>
    4620:	a0 c1       	rjmp	.+832    	; 0x4962 <get_fat.part.3+0x404>
    4622:	eb 81       	ldd	r30, Y+3	; 0x03
    4624:	fc 81       	ldd	r31, Y+4	; 0x04
    4626:	46 8d       	ldd	r20, Z+30	; 0x1e
    4628:	57 8d       	ldd	r21, Z+31	; 0x1f
    462a:	60 a1       	ldd	r22, Z+32	; 0x20
    462c:	71 a1       	ldd	r23, Z+33	; 0x21
    462e:	f1 01       	movw	r30, r2
    4630:	f1 70       	andi	r31, 0x01	; 1
    4632:	2b 81       	ldd	r18, Y+3	; 0x03
    4634:	3c 81       	ldd	r19, Y+4	; 0x04
    4636:	e2 0f       	add	r30, r18
    4638:	f3 1f       	adc	r31, r19
    463a:	16 a5       	ldd	r17, Z+46	; 0x2e
    463c:	3f ef       	ldi	r19, 0xFF	; 255
    463e:	23 1a       	sub	r2, r19
    4640:	33 0a       	sbc	r3, r19
    4642:	c1 01       	movw	r24, r2
    4644:	89 2f       	mov	r24, r25
    4646:	99 27       	eor	r25, r25
    4648:	86 95       	lsr	r24
    464a:	48 0f       	add	r20, r24
    464c:	59 1f       	adc	r21, r25
    464e:	61 1d       	adc	r22, r1
    4650:	71 1d       	adc	r23, r1
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	57 de       	rcall	.-850    	; 0x4306 <move_window>
    4658:	81 11       	cpse	r24, r1
    465a:	a5 cf       	rjmp	.-182    	; 0x45a6 <get_fat.part.3+0x48>
    465c:	f1 e0       	ldi	r31, 0x01	; 1
    465e:	3f 22       	and	r3, r31
    4660:	2b 81       	ldd	r18, Y+3	; 0x03
    4662:	3c 81       	ldd	r19, Y+4	; 0x04
    4664:	22 0d       	add	r18, r2
    4666:	33 1d       	adc	r19, r3
    4668:	f9 01       	movw	r30, r18
    466a:	86 a5       	ldd	r24, Z+46	; 0x2e
    466c:	61 2f       	mov	r22, r17
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	78 2b       	or	r23, r24
    4672:	c0 fe       	sbrs	r12, 0
    4674:	8e c1       	rjmp	.+796    	; 0x4992 <get_fat.part.3+0x434>
    4676:	72 95       	swap	r23
    4678:	62 95       	swap	r22
    467a:	6f 70       	andi	r22, 0x0F	; 15
    467c:	67 27       	eor	r22, r23
    467e:	7f 70       	andi	r23, 0x0F	; 15
    4680:	67 27       	eor	r22, r23
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	92 cf       	rjmp	.-220    	; 0x45ac <get_fat.part.3+0x4e>
    4688:	eb 81       	ldd	r30, Y+3	; 0x03
    468a:	fc 81       	ldd	r31, Y+4	; 0x04
    468c:	86 8c       	ldd	r8, Z+30	; 0x1e
    468e:	97 8c       	ldd	r9, Z+31	; 0x1f
    4690:	a0 a0       	ldd	r10, Z+32	; 0x20
    4692:	b1 a0       	ldd	r11, Z+33	; 0x21
    4694:	db 01       	movw	r26, r22
    4696:	ca 01       	movw	r24, r20
    4698:	17 e0       	ldi	r17, 0x07	; 7
    469a:	b6 95       	lsr	r27
    469c:	a7 95       	ror	r26
    469e:	97 95       	ror	r25
    46a0:	87 95       	ror	r24
    46a2:	1a 95       	dec	r17
    46a4:	d1 f7       	brne	.-12     	; 0x469a <get_fat.part.3+0x13c>
    46a6:	88 0e       	add	r8, r24
    46a8:	99 1e       	adc	r9, r25
    46aa:	aa 1e       	adc	r10, r26
    46ac:	bb 1e       	adc	r11, r27
    46ae:	42 a4       	ldd	r4, Z+42	; 0x2a
    46b0:	53 a4       	ldd	r5, Z+43	; 0x2b
    46b2:	64 a4       	ldd	r6, Z+44	; 0x2c
    46b4:	75 a4       	ldd	r7, Z+45	; 0x2d
    46b6:	84 14       	cp	r8, r4
    46b8:	95 04       	cpc	r9, r5
    46ba:	a6 04       	cpc	r10, r6
    46bc:	b7 04       	cpc	r11, r7
    46be:	d9 f0       	breq	.+54     	; 0x46f6 <get_fat.part.3+0x198>
    46c0:	84 81       	ldd	r24, Z+4	; 0x04
    46c2:	81 11       	cpse	r24, r1
    46c4:	d4 c0       	rjmp	.+424    	; 0x486e <get_fat.part.3+0x310>
    46c6:	81 14       	cp	r8, r1
    46c8:	91 04       	cpc	r9, r1
    46ca:	a1 04       	cpc	r10, r1
    46cc:	b1 04       	cpc	r11, r1
    46ce:	99 f0       	breq	.+38     	; 0x46f6 <get_fat.part.3+0x198>
    46d0:	01 e0       	ldi	r16, 0x01	; 1
    46d2:	a5 01       	movw	r20, r10
    46d4:	94 01       	movw	r18, r8
    46d6:	6b 81       	ldd	r22, Y+3	; 0x03
    46d8:	7c 81       	ldd	r23, Y+4	; 0x04
    46da:	62 5d       	subi	r22, 0xD2	; 210
    46dc:	7f 4f       	sbci	r23, 0xFF	; 255
    46de:	eb 81       	ldd	r30, Y+3	; 0x03
    46e0:	fc 81       	ldd	r31, Y+4	; 0x04
    46e2:	81 81       	ldd	r24, Z+1	; 0x01
    46e4:	4d da       	rcall	.-2918   	; 0x3b80 <disk_read>
    46e6:	81 11       	cpse	r24, r1
    46e8:	5e cf       	rjmp	.-324    	; 0x45a6 <get_fat.part.3+0x48>
    46ea:	eb 81       	ldd	r30, Y+3	; 0x03
    46ec:	fc 81       	ldd	r31, Y+4	; 0x04
    46ee:	82 a6       	std	Z+42, r8	; 0x2a
    46f0:	93 a6       	std	Z+43, r9	; 0x2b
    46f2:	a4 a6       	std	Z+44, r10	; 0x2c
    46f4:	b5 a6       	std	Z+45, r11	; 0x2d
    46f6:	cc 0c       	add	r12, r12
    46f8:	dd 1c       	adc	r13, r13
    46fa:	ee 1c       	adc	r14, r14
    46fc:	ff 1c       	adc	r15, r15
    46fe:	cc 0c       	add	r12, r12
    4700:	dd 1c       	adc	r13, r13
    4702:	ee 1c       	adc	r14, r14
    4704:	ff 1c       	adc	r15, r15
    4706:	fc ef       	ldi	r31, 0xFC	; 252
    4708:	cf 22       	and	r12, r31
    470a:	f1 e0       	ldi	r31, 0x01	; 1
    470c:	df 22       	and	r13, r31
    470e:	ee 24       	eor	r14, r14
    4710:	ff 24       	eor	r15, r15
    4712:	f6 01       	movw	r30, r12
    4714:	be 96       	adiw	r30, 0x2e	; 46
    4716:	2b 81       	ldd	r18, Y+3	; 0x03
    4718:	3c 81       	ldd	r19, Y+4	; 0x04
    471a:	e2 0f       	add	r30, r18
    471c:	f3 1f       	adc	r31, r19
    471e:	23 81       	ldd	r18, Z+3	; 0x03
    4720:	62 81       	ldd	r22, Z+2	; 0x02
    4722:	86 2f       	mov	r24, r22
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	a0 e0       	ldi	r26, 0x00	; 0
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	dc 01       	movw	r26, r24
    472c:	99 27       	eor	r25, r25
    472e:	88 27       	eor	r24, r24
    4730:	ac 01       	movw	r20, r24
    4732:	bd 01       	movw	r22, r26
    4734:	72 2b       	or	r23, r18
    4736:	81 81       	ldd	r24, Z+1	; 0x01
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	98 2f       	mov	r25, r24
    473c:	88 27       	eor	r24, r24
    473e:	a0 e0       	ldi	r26, 0x00	; 0
    4740:	b0 e0       	ldi	r27, 0x00	; 0
    4742:	84 2b       	or	r24, r20
    4744:	95 2b       	or	r25, r21
    4746:	a6 2b       	or	r26, r22
    4748:	b7 2b       	or	r27, r23
    474a:	eb 81       	ldd	r30, Y+3	; 0x03
    474c:	fc 81       	ldd	r31, Y+4	; 0x04
    474e:	ec 0d       	add	r30, r12
    4750:	fd 1d       	adc	r31, r13
    4752:	26 a5       	ldd	r18, Z+46	; 0x2e
    4754:	82 2b       	or	r24, r18
    4756:	bc 01       	movw	r22, r24
    4758:	cd 01       	movw	r24, r26
    475a:	9f 70       	andi	r25, 0x0F	; 15
    475c:	27 cf       	rjmp	.-434    	; 0x45ac <get_fat.part.3+0x4e>
    475e:	85 2e       	mov	r8, r21
    4760:	96 2e       	mov	r9, r22
    4762:	a7 2e       	mov	r10, r23
    4764:	bb 24       	eor	r11, r11
    4766:	eb 81       	ldd	r30, Y+3	; 0x03
    4768:	fc 81       	ldd	r31, Y+4	; 0x04
    476a:	86 8d       	ldd	r24, Z+30	; 0x1e
    476c:	97 8d       	ldd	r25, Z+31	; 0x1f
    476e:	a0 a1       	ldd	r26, Z+32	; 0x20
    4770:	b1 a1       	ldd	r27, Z+33	; 0x21
    4772:	88 0e       	add	r8, r24
    4774:	99 1e       	adc	r9, r25
    4776:	aa 1e       	adc	r10, r26
    4778:	bb 1e       	adc	r11, r27
    477a:	42 a4       	ldd	r4, Z+42	; 0x2a
    477c:	53 a4       	ldd	r5, Z+43	; 0x2b
    477e:	64 a4       	ldd	r6, Z+44	; 0x2c
    4780:	75 a4       	ldd	r7, Z+45	; 0x2d
    4782:	84 14       	cp	r8, r4
    4784:	95 04       	cpc	r9, r5
    4786:	a6 04       	cpc	r10, r6
    4788:	b7 04       	cpc	r11, r7
    478a:	d9 f0       	breq	.+54     	; 0x47c2 <get_fat.part.3+0x264>
    478c:	84 81       	ldd	r24, Z+4	; 0x04
    478e:	81 11       	cpse	r24, r1
    4790:	33 c0       	rjmp	.+102    	; 0x47f8 <get_fat.part.3+0x29a>
    4792:	81 14       	cp	r8, r1
    4794:	91 04       	cpc	r9, r1
    4796:	a1 04       	cpc	r10, r1
    4798:	b1 04       	cpc	r11, r1
    479a:	99 f0       	breq	.+38     	; 0x47c2 <get_fat.part.3+0x264>
    479c:	01 e0       	ldi	r16, 0x01	; 1
    479e:	a5 01       	movw	r20, r10
    47a0:	94 01       	movw	r18, r8
    47a2:	6b 81       	ldd	r22, Y+3	; 0x03
    47a4:	7c 81       	ldd	r23, Y+4	; 0x04
    47a6:	62 5d       	subi	r22, 0xD2	; 210
    47a8:	7f 4f       	sbci	r23, 0xFF	; 255
    47aa:	eb 81       	ldd	r30, Y+3	; 0x03
    47ac:	fc 81       	ldd	r31, Y+4	; 0x04
    47ae:	81 81       	ldd	r24, Z+1	; 0x01
    47b0:	e7 d9       	rcall	.-3122   	; 0x3b80 <disk_read>
    47b2:	81 11       	cpse	r24, r1
    47b4:	f8 ce       	rjmp	.-528    	; 0x45a6 <get_fat.part.3+0x48>
    47b6:	eb 81       	ldd	r30, Y+3	; 0x03
    47b8:	fc 81       	ldd	r31, Y+4	; 0x04
    47ba:	82 a6       	std	Z+42, r8	; 0x2a
    47bc:	93 a6       	std	Z+43, r9	; 0x2b
    47be:	a4 a6       	std	Z+44, r10	; 0x2c
    47c0:	b5 a6       	std	Z+45, r11	; 0x2d
    47c2:	cc 0c       	add	r12, r12
    47c4:	dd 1c       	adc	r13, r13
    47c6:	ee 1c       	adc	r14, r14
    47c8:	ff 1c       	adc	r15, r15
    47ca:	e8 94       	clt
    47cc:	c0 f8       	bld	r12, 0
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	d8 22       	and	r13, r24
    47d2:	ee 24       	eor	r14, r14
    47d4:	ff 24       	eor	r15, r15
    47d6:	eb 81       	ldd	r30, Y+3	; 0x03
    47d8:	fc 81       	ldd	r31, Y+4	; 0x04
    47da:	ec 0d       	add	r30, r12
    47dc:	fd 1d       	adc	r31, r13
    47de:	67 a5       	ldd	r22, Z+47	; 0x2f
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	76 2f       	mov	r23, r22
    47e4:	66 27       	eor	r22, r22
    47e6:	eb 81       	ldd	r30, Y+3	; 0x03
    47e8:	fc 81       	ldd	r31, Y+4	; 0x04
    47ea:	ec 0d       	add	r30, r12
    47ec:	fd 1d       	adc	r31, r13
    47ee:	86 a5       	ldd	r24, Z+46	; 0x2e
    47f0:	68 2b       	or	r22, r24
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	da ce       	rjmp	.-588    	; 0x45ac <get_fat.part.3+0x4e>
    47f8:	1f 01       	movw	r2, r30
    47fa:	fe e2       	ldi	r31, 0x2E	; 46
    47fc:	2f 0e       	add	r2, r31
    47fe:	31 1c       	adc	r3, r1
    4800:	01 e0       	ldi	r16, 0x01	; 1
    4802:	a3 01       	movw	r20, r6
    4804:	92 01       	movw	r18, r4
    4806:	b1 01       	movw	r22, r2
    4808:	eb 81       	ldd	r30, Y+3	; 0x03
    480a:	fc 81       	ldd	r31, Y+4	; 0x04
    480c:	81 81       	ldd	r24, Z+1	; 0x01
    480e:	57 da       	rcall	.-2898   	; 0x3cbe <disk_write>
    4810:	81 11       	cpse	r24, r1
    4812:	c9 ce       	rjmp	.-622    	; 0x45a6 <get_fat.part.3+0x48>
    4814:	eb 81       	ldd	r30, Y+3	; 0x03
    4816:	fc 81       	ldd	r31, Y+4	; 0x04
    4818:	14 82       	std	Z+4, r1	; 0x04
    481a:	82 8d       	ldd	r24, Z+26	; 0x1a
    481c:	93 8d       	ldd	r25, Z+27	; 0x1b
    481e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4820:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4822:	46 8d       	ldd	r20, Z+30	; 0x1e
    4824:	57 8d       	ldd	r21, Z+31	; 0x1f
    4826:	60 a1       	ldd	r22, Z+32	; 0x20
    4828:	71 a1       	ldd	r23, Z+33	; 0x21
    482a:	48 0f       	add	r20, r24
    482c:	59 1f       	adc	r21, r25
    482e:	6a 1f       	adc	r22, r26
    4830:	7b 1f       	adc	r23, r27
    4832:	44 16       	cp	r4, r20
    4834:	55 06       	cpc	r5, r21
    4836:	66 06       	cpc	r6, r22
    4838:	77 06       	cpc	r7, r23
    483a:	08 f0       	brcs	.+2      	; 0x483e <get_fat.part.3+0x2e0>
    483c:	aa cf       	rjmp	.-172    	; 0x4792 <get_fat.part.3+0x234>
    483e:	13 81       	ldd	r17, Z+3	; 0x03
    4840:	12 30       	cpi	r17, 0x02	; 2
    4842:	38 f4       	brcc	.+14     	; 0x4852 <get_fat.part.3+0x2f4>
    4844:	a6 cf       	rjmp	.-180    	; 0x4792 <get_fat.part.3+0x234>
    4846:	eb 81       	ldd	r30, Y+3	; 0x03
    4848:	fc 81       	ldd	r31, Y+4	; 0x04
    484a:	82 8d       	ldd	r24, Z+26	; 0x1a
    484c:	93 8d       	ldd	r25, Z+27	; 0x1b
    484e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4850:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4852:	48 0e       	add	r4, r24
    4854:	59 1e       	adc	r5, r25
    4856:	6a 1e       	adc	r6, r26
    4858:	7b 1e       	adc	r7, r27
    485a:	01 e0       	ldi	r16, 0x01	; 1
    485c:	a3 01       	movw	r20, r6
    485e:	92 01       	movw	r18, r4
    4860:	b1 01       	movw	r22, r2
    4862:	81 81       	ldd	r24, Z+1	; 0x01
    4864:	2c da       	rcall	.-2984   	; 0x3cbe <disk_write>
    4866:	11 50       	subi	r17, 0x01	; 1
    4868:	11 30       	cpi	r17, 0x01	; 1
    486a:	69 f7       	brne	.-38     	; 0x4846 <get_fat.part.3+0x2e8>
    486c:	92 cf       	rjmp	.-220    	; 0x4792 <get_fat.part.3+0x234>
    486e:	1f 01       	movw	r2, r30
    4870:	fe e2       	ldi	r31, 0x2E	; 46
    4872:	2f 0e       	add	r2, r31
    4874:	31 1c       	adc	r3, r1
    4876:	01 e0       	ldi	r16, 0x01	; 1
    4878:	a3 01       	movw	r20, r6
    487a:	92 01       	movw	r18, r4
    487c:	b1 01       	movw	r22, r2
    487e:	eb 81       	ldd	r30, Y+3	; 0x03
    4880:	fc 81       	ldd	r31, Y+4	; 0x04
    4882:	81 81       	ldd	r24, Z+1	; 0x01
    4884:	1c da       	rcall	.-3016   	; 0x3cbe <disk_write>
    4886:	81 11       	cpse	r24, r1
    4888:	8e ce       	rjmp	.-740    	; 0x45a6 <get_fat.part.3+0x48>
    488a:	eb 81       	ldd	r30, Y+3	; 0x03
    488c:	fc 81       	ldd	r31, Y+4	; 0x04
    488e:	14 82       	std	Z+4, r1	; 0x04
    4890:	82 8d       	ldd	r24, Z+26	; 0x1a
    4892:	93 8d       	ldd	r25, Z+27	; 0x1b
    4894:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4896:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4898:	46 8d       	ldd	r20, Z+30	; 0x1e
    489a:	57 8d       	ldd	r21, Z+31	; 0x1f
    489c:	60 a1       	ldd	r22, Z+32	; 0x20
    489e:	71 a1       	ldd	r23, Z+33	; 0x21
    48a0:	48 0f       	add	r20, r24
    48a2:	59 1f       	adc	r21, r25
    48a4:	6a 1f       	adc	r22, r26
    48a6:	7b 1f       	adc	r23, r27
    48a8:	44 16       	cp	r4, r20
    48aa:	55 06       	cpc	r5, r21
    48ac:	66 06       	cpc	r6, r22
    48ae:	77 06       	cpc	r7, r23
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <get_fat.part.3+0x356>
    48b2:	09 cf       	rjmp	.-494    	; 0x46c6 <get_fat.part.3+0x168>
    48b4:	13 81       	ldd	r17, Z+3	; 0x03
    48b6:	12 30       	cpi	r17, 0x02	; 2
    48b8:	38 f4       	brcc	.+14     	; 0x48c8 <get_fat.part.3+0x36a>
    48ba:	05 cf       	rjmp	.-502    	; 0x46c6 <get_fat.part.3+0x168>
    48bc:	eb 81       	ldd	r30, Y+3	; 0x03
    48be:	fc 81       	ldd	r31, Y+4	; 0x04
    48c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    48c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    48c4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    48c6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    48c8:	48 0e       	add	r4, r24
    48ca:	59 1e       	adc	r5, r25
    48cc:	6a 1e       	adc	r6, r26
    48ce:	7b 1e       	adc	r7, r27
    48d0:	01 e0       	ldi	r16, 0x01	; 1
    48d2:	a3 01       	movw	r20, r6
    48d4:	92 01       	movw	r18, r4
    48d6:	b1 01       	movw	r22, r2
    48d8:	81 81       	ldd	r24, Z+1	; 0x01
    48da:	f1 d9       	rcall	.-3102   	; 0x3cbe <disk_write>
    48dc:	11 50       	subi	r17, 0x01	; 1
    48de:	11 30       	cpi	r17, 0x01	; 1
    48e0:	69 f7       	brne	.-38     	; 0x48bc <get_fat.part.3+0x35e>
    48e2:	f1 ce       	rjmp	.-542    	; 0x46c6 <get_fat.part.3+0x168>
    48e4:	2b 81       	ldd	r18, Y+3	; 0x03
    48e6:	3c 81       	ldd	r19, Y+4	; 0x04
    48e8:	22 5d       	subi	r18, 0xD2	; 210
    48ea:	3f 4f       	sbci	r19, 0xFF	; 255
    48ec:	29 83       	std	Y+1, r18	; 0x01
    48ee:	3a 83       	std	Y+2, r19	; 0x02
    48f0:	01 e0       	ldi	r16, 0x01	; 1
    48f2:	a5 01       	movw	r20, r10
    48f4:	94 01       	movw	r18, r8
    48f6:	69 81       	ldd	r22, Y+1	; 0x01
    48f8:	7a 81       	ldd	r23, Y+2	; 0x02
    48fa:	eb 81       	ldd	r30, Y+3	; 0x03
    48fc:	fc 81       	ldd	r31, Y+4	; 0x04
    48fe:	81 81       	ldd	r24, Z+1	; 0x01
    4900:	de d9       	rcall	.-3140   	; 0x3cbe <disk_write>
    4902:	81 11       	cpse	r24, r1
    4904:	50 ce       	rjmp	.-864    	; 0x45a6 <get_fat.part.3+0x48>
    4906:	eb 81       	ldd	r30, Y+3	; 0x03
    4908:	fc 81       	ldd	r31, Y+4	; 0x04
    490a:	14 82       	std	Z+4, r1	; 0x04
    490c:	82 8d       	ldd	r24, Z+26	; 0x1a
    490e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4910:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4912:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4914:	46 8d       	ldd	r20, Z+30	; 0x1e
    4916:	57 8d       	ldd	r21, Z+31	; 0x1f
    4918:	60 a1       	ldd	r22, Z+32	; 0x20
    491a:	71 a1       	ldd	r23, Z+33	; 0x21
    491c:	48 0f       	add	r20, r24
    491e:	59 1f       	adc	r21, r25
    4920:	6a 1f       	adc	r22, r26
    4922:	7b 1f       	adc	r23, r27
    4924:	84 16       	cp	r8, r20
    4926:	95 06       	cpc	r9, r21
    4928:	a6 06       	cpc	r10, r22
    492a:	b7 06       	cpc	r11, r23
    492c:	08 f0       	brcs	.+2      	; 0x4930 <get_fat.part.3+0x3d2>
    492e:	73 ce       	rjmp	.-794    	; 0x4616 <get_fat.part.3+0xb8>
    4930:	13 81       	ldd	r17, Z+3	; 0x03
    4932:	12 30       	cpi	r17, 0x02	; 2
    4934:	38 f4       	brcc	.+14     	; 0x4944 <get_fat.part.3+0x3e6>
    4936:	6f ce       	rjmp	.-802    	; 0x4616 <get_fat.part.3+0xb8>
    4938:	eb 81       	ldd	r30, Y+3	; 0x03
    493a:	fc 81       	ldd	r31, Y+4	; 0x04
    493c:	82 8d       	ldd	r24, Z+26	; 0x1a
    493e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4940:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4942:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4944:	88 0e       	add	r8, r24
    4946:	99 1e       	adc	r9, r25
    4948:	aa 1e       	adc	r10, r26
    494a:	bb 1e       	adc	r11, r27
    494c:	01 e0       	ldi	r16, 0x01	; 1
    494e:	a5 01       	movw	r20, r10
    4950:	94 01       	movw	r18, r8
    4952:	69 81       	ldd	r22, Y+1	; 0x01
    4954:	7a 81       	ldd	r23, Y+2	; 0x02
    4956:	81 81       	ldd	r24, Z+1	; 0x01
    4958:	b2 d9       	rcall	.-3228   	; 0x3cbe <disk_write>
    495a:	11 50       	subi	r17, 0x01	; 1
    495c:	11 30       	cpi	r17, 0x01	; 1
    495e:	61 f7       	brne	.-40     	; 0x4938 <get_fat.part.3+0x3da>
    4960:	5a ce       	rjmp	.-844    	; 0x4616 <get_fat.part.3+0xb8>
    4962:	01 e0       	ldi	r16, 0x01	; 1
    4964:	a3 01       	movw	r20, r6
    4966:	92 01       	movw	r18, r4
    4968:	6b 81       	ldd	r22, Y+3	; 0x03
    496a:	7c 81       	ldd	r23, Y+4	; 0x04
    496c:	62 5d       	subi	r22, 0xD2	; 210
    496e:	7f 4f       	sbci	r23, 0xFF	; 255
    4970:	eb 81       	ldd	r30, Y+3	; 0x03
    4972:	fc 81       	ldd	r31, Y+4	; 0x04
    4974:	81 81       	ldd	r24, Z+1	; 0x01
    4976:	04 d9       	rcall	.-3576   	; 0x3b80 <disk_read>
    4978:	81 11       	cpse	r24, r1
    497a:	15 ce       	rjmp	.-982    	; 0x45a6 <get_fat.part.3+0x48>
    497c:	eb 81       	ldd	r30, Y+3	; 0x03
    497e:	fc 81       	ldd	r31, Y+4	; 0x04
    4980:	42 a6       	std	Z+42, r4	; 0x2a
    4982:	53 a6       	std	Z+43, r5	; 0x2b
    4984:	64 a6       	std	Z+44, r6	; 0x2c
    4986:	75 a6       	std	Z+45, r7	; 0x2d
    4988:	46 8d       	ldd	r20, Z+30	; 0x1e
    498a:	57 8d       	ldd	r21, Z+31	; 0x1f
    498c:	60 a1       	ldd	r22, Z+32	; 0x20
    498e:	71 a1       	ldd	r23, Z+33	; 0x21
    4990:	4e ce       	rjmp	.-868    	; 0x462e <get_fat.part.3+0xd0>
    4992:	7f 70       	andi	r23, 0x0F	; 15
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	09 ce       	rjmp	.-1006   	; 0x45ac <get_fat.part.3+0x4e>

0000499a <dir_sdi>:
    499a:	cf 92       	push	r12
    499c:	df 92       	push	r13
    499e:	ef 92       	push	r14
    49a0:	ff 92       	push	r15
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	8c 01       	movw	r16, r24
    49ac:	eb 01       	movw	r28, r22
    49ae:	dc 01       	movw	r26, r24
    49b0:	14 96       	adiw	r26, 0x04	; 4
    49b2:	6d 93       	st	X+, r22
    49b4:	7c 93       	st	X, r23
    49b6:	15 97       	sbiw	r26, 0x05	; 5
    49b8:	16 96       	adiw	r26, 0x06	; 6
    49ba:	4d 91       	ld	r20, X+
    49bc:	5d 91       	ld	r21, X+
    49be:	6d 91       	ld	r22, X+
    49c0:	7c 91       	ld	r23, X
    49c2:	19 97       	sbiw	r26, 0x09	; 9
    49c4:	41 30       	cpi	r20, 0x01	; 1
    49c6:	51 05       	cpc	r21, r1
    49c8:	61 05       	cpc	r22, r1
    49ca:	71 05       	cpc	r23, r1
    49cc:	61 f0       	breq	.+24     	; 0x49e6 <dir_sdi+0x4c>
    49ce:	dc 01       	movw	r26, r24
    49d0:	ed 91       	ld	r30, X+
    49d2:	fc 91       	ld	r31, X
    49d4:	86 89       	ldd	r24, Z+22	; 0x16
    49d6:	97 89       	ldd	r25, Z+23	; 0x17
    49d8:	a0 8d       	ldd	r26, Z+24	; 0x18
    49da:	b1 8d       	ldd	r27, Z+25	; 0x19
    49dc:	48 17       	cp	r20, r24
    49de:	59 07       	cpc	r21, r25
    49e0:	6a 07       	cpc	r22, r26
    49e2:	7b 07       	cpc	r23, r27
    49e4:	50 f0       	brcs	.+20     	; 0x49fa <dir_sdi+0x60>
    49e6:	82 e0       	ldi	r24, 0x02	; 2
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	ff 90       	pop	r15
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	cf 90       	pop	r12
    49f8:	08 95       	ret
    49fa:	41 15       	cp	r20, r1
    49fc:	51 05       	cpc	r21, r1
    49fe:	61 05       	cpc	r22, r1
    4a00:	71 05       	cpc	r23, r1
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <dir_sdi+0x6c>
    4a04:	45 c0       	rjmp	.+138    	; 0x4a90 <dir_sdi+0xf6>
    4a06:	20 81       	ld	r18, Z
    4a08:	23 30       	cpi	r18, 0x03	; 3
    4a0a:	c1 f1       	breq	.+112    	; 0x4a7c <dir_sdi+0xe2>
    4a0c:	d8 01       	movw	r26, r16
    4a0e:	1a 96       	adiw	r26, 0x0a	; 10
    4a10:	1d 92       	st	X+, r1
    4a12:	1d 92       	st	X+, r1
    4a14:	1d 92       	st	X+, r1
    4a16:	1c 92       	st	X, r1
    4a18:	1d 97       	sbiw	r26, 0x0d	; 13
    4a1a:	80 85       	ldd	r24, Z+8	; 0x08
    4a1c:	91 85       	ldd	r25, Z+9	; 0x09
    4a1e:	c8 17       	cp	r28, r24
    4a20:	d9 07       	cpc	r29, r25
    4a22:	08 f7       	brcc	.-62     	; 0x49e6 <dir_sdi+0x4c>
    4a24:	82 a1       	ldd	r24, Z+34	; 0x22
    4a26:	93 a1       	ldd	r25, Z+35	; 0x23
    4a28:	a4 a1       	ldd	r26, Z+36	; 0x24
    4a2a:	b5 a1       	ldd	r27, Z+37	; 0x25
    4a2c:	9e 01       	movw	r18, r28
    4a2e:	32 95       	swap	r19
    4a30:	22 95       	swap	r18
    4a32:	2f 70       	andi	r18, 0x0F	; 15
    4a34:	23 27       	eor	r18, r19
    4a36:	3f 70       	andi	r19, 0x0F	; 15
    4a38:	23 27       	eor	r18, r19
    4a3a:	ac 01       	movw	r20, r24
    4a3c:	bd 01       	movw	r22, r26
    4a3e:	42 0f       	add	r20, r18
    4a40:	53 1f       	adc	r21, r19
    4a42:	61 1d       	adc	r22, r1
    4a44:	71 1d       	adc	r23, r1
    4a46:	d8 01       	movw	r26, r16
    4a48:	1e 96       	adiw	r26, 0x0e	; 14
    4a4a:	4d 93       	st	X+, r20
    4a4c:	5d 93       	st	X+, r21
    4a4e:	6d 93       	st	X+, r22
    4a50:	7c 93       	st	X, r23
    4a52:	51 97       	sbiw	r26, 0x11	; 17
    4a54:	be 96       	adiw	r30, 0x2e	; 46
    4a56:	cf 70       	andi	r28, 0x0F	; 15
    4a58:	dd 27       	eor	r29, r29
    4a5a:	cc 0f       	add	r28, r28
    4a5c:	dd 1f       	adc	r29, r29
    4a5e:	c2 95       	swap	r28
    4a60:	d2 95       	swap	r29
    4a62:	d0 7f       	andi	r29, 0xF0	; 240
    4a64:	dc 27       	eor	r29, r28
    4a66:	c0 7f       	andi	r28, 0xF0	; 240
    4a68:	dc 27       	eor	r29, r28
    4a6a:	ec 0f       	add	r30, r28
    4a6c:	fd 1f       	adc	r31, r29
    4a6e:	d8 01       	movw	r26, r16
    4a70:	52 96       	adiw	r26, 0x12	; 18
    4a72:	ed 93       	st	X+, r30
    4a74:	fc 93       	st	X, r31
    4a76:	53 97       	sbiw	r26, 0x13	; 19
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	b6 cf       	rjmp	.-148    	; 0x49e8 <dir_sdi+0x4e>
    4a7c:	42 a1       	ldd	r20, Z+34	; 0x22
    4a7e:	53 a1       	ldd	r21, Z+35	; 0x23
    4a80:	64 a1       	ldd	r22, Z+36	; 0x24
    4a82:	75 a1       	ldd	r23, Z+37	; 0x25
    4a84:	41 15       	cp	r20, r1
    4a86:	51 05       	cpc	r21, r1
    4a88:	61 05       	cpc	r22, r1
    4a8a:	71 05       	cpc	r23, r1
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <dir_sdi+0xf6>
    4a8e:	be cf       	rjmp	.-132    	; 0x4a0c <dir_sdi+0x72>
    4a90:	e2 80       	ldd	r14, Z+2	; 0x02
    4a92:	20 e1       	ldi	r18, 0x10	; 16
    4a94:	e2 9e       	mul	r14, r18
    4a96:	70 01       	movw	r14, r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	ce 15       	cp	r28, r14
    4a9c:	df 05       	cpc	r29, r15
    4a9e:	20 f5       	brcc	.+72     	; 0x4ae8 <dir_sdi+0x14e>
    4aa0:	30 c0       	rjmp	.+96     	; 0x4b02 <dir_sdi+0x168>
    4aa2:	cf 01       	movw	r24, r30
    4aa4:	5c dd       	rcall	.-1352   	; 0x455e <get_fat.part.3>
    4aa6:	ab 01       	movw	r20, r22
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	4f 3f       	cpi	r20, 0xFF	; 255
    4aac:	8f ef       	ldi	r24, 0xFF	; 255
    4aae:	58 07       	cpc	r21, r24
    4ab0:	68 07       	cpc	r22, r24
    4ab2:	78 07       	cpc	r23, r24
    4ab4:	09 f4       	brne	.+2      	; 0x4ab8 <dir_sdi+0x11e>
    4ab6:	4d c0       	rjmp	.+154    	; 0x4b52 <dir_sdi+0x1b8>
    4ab8:	42 30       	cpi	r20, 0x02	; 2
    4aba:	51 05       	cpc	r21, r1
    4abc:	61 05       	cpc	r22, r1
    4abe:	71 05       	cpc	r23, r1
    4ac0:	08 f4       	brcc	.+2      	; 0x4ac4 <dir_sdi+0x12a>
    4ac2:	91 cf       	rjmp	.-222    	; 0x49e6 <dir_sdi+0x4c>
    4ac4:	d8 01       	movw	r26, r16
    4ac6:	ed 91       	ld	r30, X+
    4ac8:	fc 91       	ld	r31, X
    4aca:	86 89       	ldd	r24, Z+22	; 0x16
    4acc:	97 89       	ldd	r25, Z+23	; 0x17
    4ace:	a0 8d       	ldd	r26, Z+24	; 0x18
    4ad0:	b1 8d       	ldd	r27, Z+25	; 0x19
    4ad2:	48 17       	cp	r20, r24
    4ad4:	59 07       	cpc	r21, r25
    4ad6:	6a 07       	cpc	r22, r26
    4ad8:	7b 07       	cpc	r23, r27
    4ada:	08 f0       	brcs	.+2      	; 0x4ade <dir_sdi+0x144>
    4adc:	84 cf       	rjmp	.-248    	; 0x49e6 <dir_sdi+0x4c>
    4ade:	ce 19       	sub	r28, r14
    4ae0:	df 09       	sbc	r29, r15
    4ae2:	ce 15       	cp	r28, r14
    4ae4:	df 05       	cpc	r29, r15
    4ae6:	68 f0       	brcs	.+26     	; 0x4b02 <dir_sdi+0x168>
    4ae8:	42 30       	cpi	r20, 0x02	; 2
    4aea:	51 05       	cpc	r21, r1
    4aec:	61 05       	cpc	r22, r1
    4aee:	71 05       	cpc	r23, r1
    4af0:	08 f4       	brcc	.+2      	; 0x4af4 <dir_sdi+0x15a>
    4af2:	79 cf       	rjmp	.-270    	; 0x49e6 <dir_sdi+0x4c>
    4af4:	48 17       	cp	r20, r24
    4af6:	59 07       	cpc	r21, r25
    4af8:	6a 07       	cpc	r22, r26
    4afa:	7b 07       	cpc	r23, r27
    4afc:	08 f0       	brcs	.+2      	; 0x4b00 <dir_sdi+0x166>
    4afe:	73 cf       	rjmp	.-282    	; 0x49e6 <dir_sdi+0x4c>
    4b00:	d0 cf       	rjmp	.-96     	; 0x4aa2 <dir_sdi+0x108>
    4b02:	d8 01       	movw	r26, r16
    4b04:	1a 96       	adiw	r26, 0x0a	; 10
    4b06:	4d 93       	st	X+, r20
    4b08:	5d 93       	st	X+, r21
    4b0a:	6d 93       	st	X+, r22
    4b0c:	7c 93       	st	X, r23
    4b0e:	1d 97       	sbiw	r26, 0x0d	; 13
    4b10:	9a 01       	movw	r18, r20
    4b12:	ab 01       	movw	r20, r22
    4b14:	22 50       	subi	r18, 0x02	; 2
    4b16:	31 09       	sbc	r19, r1
    4b18:	41 09       	sbc	r20, r1
    4b1a:	51 09       	sbc	r21, r1
    4b1c:	86 89       	ldd	r24, Z+22	; 0x16
    4b1e:	97 89       	ldd	r25, Z+23	; 0x17
    4b20:	a0 8d       	ldd	r26, Z+24	; 0x18
    4b22:	b1 8d       	ldd	r27, Z+25	; 0x19
    4b24:	02 97       	sbiw	r24, 0x02	; 2
    4b26:	a1 09       	sbc	r26, r1
    4b28:	b1 09       	sbc	r27, r1
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	4a 07       	cpc	r20, r26
    4b30:	5b 07       	cpc	r21, r27
    4b32:	88 f4       	brcc	.+34     	; 0x4b56 <dir_sdi+0x1bc>
    4b34:	a2 81       	ldd	r26, Z+2	; 0x02
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    4b3c:	c6 a0       	ldd	r12, Z+38	; 0x26
    4b3e:	d7 a0       	ldd	r13, Z+39	; 0x27
    4b40:	e0 a4       	ldd	r14, Z+40	; 0x28
    4b42:	f1 a4       	ldd	r15, Z+41	; 0x29
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	8c 0d       	add	r24, r12
    4b4a:	9d 1d       	adc	r25, r13
    4b4c:	ae 1d       	adc	r26, r14
    4b4e:	bf 1d       	adc	r27, r15
    4b50:	6d cf       	rjmp	.-294    	; 0x4a2c <dir_sdi+0x92>
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	49 cf       	rjmp	.-366    	; 0x49e8 <dir_sdi+0x4e>
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	67 cf       	rjmp	.-306    	; 0x4a2c <dir_sdi+0x92>

00004b5e <dir_find.part.5>:
    4b5e:	2f 92       	push	r2
    4b60:	3f 92       	push	r3
    4b62:	4f 92       	push	r4
    4b64:	5f 92       	push	r5
    4b66:	6f 92       	push	r6
    4b68:	7f 92       	push	r7
    4b6a:	8f 92       	push	r8
    4b6c:	9f 92       	push	r9
    4b6e:	af 92       	push	r10
    4b70:	bf 92       	push	r11
    4b72:	cf 92       	push	r12
    4b74:	df 92       	push	r13
    4b76:	ef 92       	push	r14
    4b78:	ff 92       	push	r15
    4b7a:	0f 93       	push	r16
    4b7c:	1f 93       	push	r17
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	5c 01       	movw	r10, r24
    4b84:	dc 01       	movw	r26, r24
    4b86:	cd 91       	ld	r28, X+
    4b88:	dc 91       	ld	r29, X
    4b8a:	11 97       	sbiw	r26, 0x01	; 1
    4b8c:	1e 96       	adiw	r26, 0x0e	; 14
    4b8e:	4d 90       	ld	r4, X+
    4b90:	5d 90       	ld	r5, X+
    4b92:	6d 90       	ld	r6, X+
    4b94:	7c 90       	ld	r7, X
    4b96:	51 97       	sbiw	r26, 0x11	; 17
    4b98:	22 24       	eor	r2, r2
    4b9a:	2a 94       	dec	r2
    4b9c:	1f ef       	ldi	r17, 0xFF	; 255
    4b9e:	ca a4       	ldd	r12, Y+42	; 0x2a
    4ba0:	db a4       	ldd	r13, Y+43	; 0x2b
    4ba2:	ec a4       	ldd	r14, Y+44	; 0x2c
    4ba4:	fd a4       	ldd	r15, Y+45	; 0x2d
    4ba6:	c4 14       	cp	r12, r4
    4ba8:	d5 04       	cpc	r13, r5
    4baa:	e6 04       	cpc	r14, r6
    4bac:	f7 04       	cpc	r15, r7
    4bae:	49 f0       	breq	.+18     	; 0x4bc2 <dir_find.part.5+0x64>
    4bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	3e c1       	rjmp	.+636    	; 0x4e32 <dir_find.part.5+0x2d4>
    4bb6:	41 14       	cp	r4, r1
    4bb8:	51 04       	cpc	r5, r1
    4bba:	61 04       	cpc	r6, r1
    4bbc:	71 04       	cpc	r7, r1
    4bbe:	09 f0       	breq	.+2      	; 0x4bc2 <dir_find.part.5+0x64>
    4bc0:	28 c1       	rjmp	.+592    	; 0x4e12 <dir_find.part.5+0x2b4>
    4bc2:	f5 01       	movw	r30, r10
    4bc4:	c2 89       	ldd	r28, Z+18	; 0x12
    4bc6:	d3 89       	ldd	r29, Z+19	; 0x13
    4bc8:	88 81       	ld	r24, Y
    4bca:	88 23       	and	r24, r24
    4bcc:	a1 f0       	breq	.+40     	; 0x4bf6 <dir_find.part.5+0x98>
    4bce:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bd0:	29 2f       	mov	r18, r25
    4bd2:	2f 73       	andi	r18, 0x3F	; 63
    4bd4:	85 3e       	cpi	r24, 0xE5	; 229
    4bd6:	29 f0       	breq	.+10     	; 0x4be2 <dir_find.part.5+0x84>
    4bd8:	93 ff       	sbrs	r25, 3
    4bda:	a5 c0       	rjmp	.+330    	; 0x4d26 <dir_find.part.5+0x1c8>
    4bdc:	2f 30       	cpi	r18, 0x0F	; 15
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <dir_find.part.5+0x84>
    4be0:	4a c0       	rjmp	.+148    	; 0x4c76 <dir_find.part.5+0x118>
    4be2:	1f ef       	ldi	r17, 0xFF	; 255
    4be4:	d5 01       	movw	r26, r10
    4be6:	14 96       	adiw	r26, 0x04	; 4
    4be8:	ed 90       	ld	r14, X+
    4bea:	fc 90       	ld	r15, X
    4bec:	15 97       	sbiw	r26, 0x05	; 5
    4bee:	bf ef       	ldi	r27, 0xFF	; 255
    4bf0:	eb 1a       	sub	r14, r27
    4bf2:	fb 0a       	sbc	r15, r27
    4bf4:	a1 f4       	brne	.+40     	; 0x4c1e <dir_find.part.5+0xc0>
    4bf6:	84 e0       	ldi	r24, 0x04	; 4
    4bf8:	df 91       	pop	r29
    4bfa:	cf 91       	pop	r28
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	ff 90       	pop	r15
    4c02:	ef 90       	pop	r14
    4c04:	df 90       	pop	r13
    4c06:	cf 90       	pop	r12
    4c08:	bf 90       	pop	r11
    4c0a:	af 90       	pop	r10
    4c0c:	9f 90       	pop	r9
    4c0e:	8f 90       	pop	r8
    4c10:	7f 90       	pop	r7
    4c12:	6f 90       	pop	r6
    4c14:	5f 90       	pop	r5
    4c16:	4f 90       	pop	r4
    4c18:	3f 90       	pop	r3
    4c1a:	2f 90       	pop	r2
    4c1c:	08 95       	ret
    4c1e:	f5 01       	movw	r30, r10
    4c20:	46 84       	ldd	r4, Z+14	; 0x0e
    4c22:	57 84       	ldd	r5, Z+15	; 0x0f
    4c24:	60 88       	ldd	r6, Z+16	; 0x10
    4c26:	71 88       	ldd	r7, Z+17	; 0x11
    4c28:	41 14       	cp	r4, r1
    4c2a:	51 04       	cpc	r5, r1
    4c2c:	61 04       	cpc	r6, r1
    4c2e:	71 04       	cpc	r7, r1
    4c30:	11 f3       	breq	.-60     	; 0x4bf6 <dir_find.part.5+0x98>
    4c32:	67 01       	movw	r12, r14
    4c34:	ff e0       	ldi	r31, 0x0F	; 15
    4c36:	cf 22       	and	r12, r31
    4c38:	dd 24       	eor	r13, r13
    4c3a:	c1 14       	cp	r12, r1
    4c3c:	d1 04       	cpc	r13, r1
    4c3e:	09 f4       	brne	.+2      	; 0x4c42 <dir_find.part.5+0xe4>
    4c40:	34 c1       	rjmp	.+616    	; 0x4eaa <dir_find.part.5+0x34c>
    4c42:	d5 01       	movw	r26, r10
    4c44:	cd 91       	ld	r28, X+
    4c46:	dc 91       	ld	r29, X
    4c48:	d5 01       	movw	r26, r10
    4c4a:	14 96       	adiw	r26, 0x04	; 4
    4c4c:	ed 92       	st	X+, r14
    4c4e:	fc 92       	st	X, r15
    4c50:	15 97       	sbiw	r26, 0x05	; 5
    4c52:	cc 0c       	add	r12, r12
    4c54:	dd 1c       	adc	r13, r13
    4c56:	c2 94       	swap	r12
    4c58:	d2 94       	swap	r13
    4c5a:	80 ef       	ldi	r24, 0xF0	; 240
    4c5c:	d8 22       	and	r13, r24
    4c5e:	dc 24       	eor	r13, r12
    4c60:	c8 22       	and	r12, r24
    4c62:	dc 24       	eor	r13, r12
    4c64:	ce 01       	movw	r24, r28
    4c66:	8e 96       	adiw	r24, 0x2e	; 46
    4c68:	c8 0e       	add	r12, r24
    4c6a:	d9 1e       	adc	r13, r25
    4c6c:	52 96       	adiw	r26, 0x12	; 18
    4c6e:	cd 92       	st	X+, r12
    4c70:	dc 92       	st	X, r13
    4c72:	53 97       	sbiw	r26, 0x13	; 19
    4c74:	94 cf       	rjmp	.-216    	; 0x4b9e <dir_find.part.5+0x40>
    4c76:	f5 01       	movw	r30, r10
    4c78:	e6 88       	ldd	r14, Z+22	; 0x16
    4c7a:	f7 88       	ldd	r15, Z+23	; 0x17
    4c7c:	e1 14       	cp	r14, r1
    4c7e:	f1 04       	cpc	r15, r1
    4c80:	09 f4       	brne	.+2      	; 0x4c84 <dir_find.part.5+0x126>
    4c82:	b0 cf       	rjmp	.-160    	; 0x4be4 <dir_find.part.5+0x86>
    4c84:	86 ff       	sbrs	r24, 6
    4c86:	0e c1       	rjmp	.+540    	; 0x4ea4 <dir_find.part.5+0x346>
    4c88:	2d 84       	ldd	r2, Y+13	; 0x0d
    4c8a:	18 2f       	mov	r17, r24
    4c8c:	1f 7b       	andi	r17, 0xBF	; 191
    4c8e:	84 81       	ldd	r24, Z+4	; 0x04
    4c90:	95 81       	ldd	r25, Z+5	; 0x05
    4c92:	80 8f       	std	Z+24, r24	; 0x18
    4c94:	91 8f       	std	Z+25, r25	; 0x19
    4c96:	5d 84       	ldd	r5, Y+13	; 0x0d
    4c98:	52 10       	cpse	r5, r2
    4c9a:	a3 cf       	rjmp	.-186    	; 0x4be2 <dir_find.part.5+0x84>
    4c9c:	88 81       	ld	r24, Y
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	8f 7b       	andi	r24, 0xBF	; 191
    4ca2:	01 97       	sbiw	r24, 0x01	; 1
    4ca4:	fd e0       	ldi	r31, 0x0D	; 13
    4ca6:	f8 9f       	mul	r31, r24
    4ca8:	40 01       	movw	r8, r0
    4caa:	f9 9f       	mul	r31, r25
    4cac:	90 0c       	add	r9, r0
    4cae:	11 24       	eor	r1, r1
    4cb0:	87 e0       	ldi	r24, 0x07	; 7
    4cb2:	c8 2e       	mov	r12, r24
    4cb4:	82 e2       	ldi	r24, 0x22	; 34
    4cb6:	d8 2e       	mov	r13, r24
    4cb8:	81 e0       	ldi	r24, 0x01	; 1
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0a c0       	rjmp	.+20     	; 0x4cd2 <dir_find.part.5+0x174>
    4cbe:	2f 3f       	cpi	r18, 0xFF	; 255
    4cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc2:	09 f0       	breq	.+2      	; 0x4cc6 <dir_find.part.5+0x168>
    4cc4:	3d c1       	rjmp	.+634    	; 0x4f40 <dir_find.part.5+0x3e2>
    4cc6:	24 e1       	ldi	r18, 0x14	; 20
    4cc8:	32 e2       	ldi	r19, 0x22	; 34
    4cca:	2c 15       	cp	r18, r12
    4ccc:	3d 05       	cpc	r19, r13
    4cce:	09 f4       	brne	.+2      	; 0x4cd2 <dir_find.part.5+0x174>
    4cd0:	29 c1       	rjmp	.+594    	; 0x4f24 <dir_find.part.5+0x3c6>
    4cd2:	d6 01       	movw	r26, r12
    4cd4:	2d 91       	ld	r18, X+
    4cd6:	6d 01       	movw	r12, r26
    4cd8:	fe 01       	movw	r30, r28
    4cda:	e2 0f       	add	r30, r18
    4cdc:	f1 1d       	adc	r31, r1
    4cde:	21 81       	ldd	r18, Z+1	; 0x01
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	32 2f       	mov	r19, r18
    4ce4:	22 27       	eor	r18, r18
    4ce6:	40 81       	ld	r20, Z
    4ce8:	24 2b       	or	r18, r20
    4cea:	00 97       	sbiw	r24, 0x00	; 0
    4cec:	41 f3       	breq	.-48     	; 0x4cbe <dir_find.part.5+0x160>
    4cee:	c9 01       	movw	r24, r18
    4cf0:	0e 94 c0 4e 	call	0x9d80	; 0x9d80 <ff_wtoupper>
    4cf4:	3c 01       	movw	r6, r24
    4cf6:	bf ef       	ldi	r27, 0xFF	; 255
    4cf8:	8b 16       	cp	r8, r27
    4cfa:	91 04       	cpc	r9, r1
    4cfc:	08 f0       	brcs	.+2      	; 0x4d00 <dir_find.part.5+0x1a2>
    4cfe:	20 c1       	rjmp	.+576    	; 0x4f40 <dir_find.part.5+0x3e2>
    4d00:	14 01       	movw	r2, r8
    4d02:	ef ef       	ldi	r30, 0xFF	; 255
    4d04:	2e 1a       	sub	r2, r30
    4d06:	3e 0a       	sbc	r3, r30
    4d08:	88 0c       	add	r8, r8
    4d0a:	99 1c       	adc	r9, r9
    4d0c:	f7 01       	movw	r30, r14
    4d0e:	e8 0d       	add	r30, r8
    4d10:	f9 1d       	adc	r31, r9
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	0e 94 c0 4e 	call	0x9d80	; 0x9d80 <ff_wtoupper>
    4d1a:	68 16       	cp	r6, r24
    4d1c:	79 06       	cpc	r7, r25
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <dir_find.part.5+0x1c4>
    4d20:	0f c1       	rjmp	.+542    	; 0x4f40 <dir_find.part.5+0x3e2>
    4d22:	41 01       	movw	r8, r2
    4d24:	d0 cf       	rjmp	.-96     	; 0x4cc6 <dir_find.part.5+0x168>
    4d26:	2f 30       	cpi	r18, 0x0F	; 15
    4d28:	09 f4       	brne	.+2      	; 0x4d2c <dir_find.part.5+0x1ce>
    4d2a:	a5 cf       	rjmp	.-182    	; 0x4c76 <dir_find.part.5+0x118>
    4d2c:	11 11       	cpse	r17, r1
    4d2e:	35 c0       	rjmp	.+106    	; 0x4d9a <dir_find.part.5+0x23c>
    4d30:	80 fb       	bst	r24, 0
    4d32:	87 95       	ror	r24
    4d34:	87 f9       	bld	r24, 7
    4d36:	99 81       	ldd	r25, Y+1	; 0x01
    4d38:	89 0f       	add	r24, r25
    4d3a:	80 fb       	bst	r24, 0
    4d3c:	87 95       	ror	r24
    4d3e:	87 f9       	bld	r24, 7
    4d40:	9a 81       	ldd	r25, Y+2	; 0x02
    4d42:	89 0f       	add	r24, r25
    4d44:	80 fb       	bst	r24, 0
    4d46:	87 95       	ror	r24
    4d48:	87 f9       	bld	r24, 7
    4d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4c:	89 0f       	add	r24, r25
    4d4e:	80 fb       	bst	r24, 0
    4d50:	87 95       	ror	r24
    4d52:	87 f9       	bld	r24, 7
    4d54:	9c 81       	ldd	r25, Y+4	; 0x04
    4d56:	89 0f       	add	r24, r25
    4d58:	80 fb       	bst	r24, 0
    4d5a:	87 95       	ror	r24
    4d5c:	87 f9       	bld	r24, 7
    4d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d60:	89 0f       	add	r24, r25
    4d62:	80 fb       	bst	r24, 0
    4d64:	87 95       	ror	r24
    4d66:	87 f9       	bld	r24, 7
    4d68:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6a:	89 0f       	add	r24, r25
    4d6c:	80 fb       	bst	r24, 0
    4d6e:	87 95       	ror	r24
    4d70:	87 f9       	bld	r24, 7
    4d72:	9f 81       	ldd	r25, Y+7	; 0x07
    4d74:	89 0f       	add	r24, r25
    4d76:	80 fb       	bst	r24, 0
    4d78:	87 95       	ror	r24
    4d7a:	87 f9       	bld	r24, 7
    4d7c:	98 85       	ldd	r25, Y+8	; 0x08
    4d7e:	89 0f       	add	r24, r25
    4d80:	80 fb       	bst	r24, 0
    4d82:	87 95       	ror	r24
    4d84:	87 f9       	bld	r24, 7
    4d86:	99 85       	ldd	r25, Y+9	; 0x09
    4d88:	89 0f       	add	r24, r25
    4d8a:	80 fb       	bst	r24, 0
    4d8c:	87 95       	ror	r24
    4d8e:	87 f9       	bld	r24, 7
    4d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d92:	89 0f       	add	r24, r25
    4d94:	82 15       	cp	r24, r2
    4d96:	09 f4       	brne	.+2      	; 0x4d9a <dir_find.part.5+0x23c>
    4d98:	3a c0       	rjmp	.+116    	; 0x4e0e <dir_find.part.5+0x2b0>
    4d9a:	ef ef       	ldi	r30, 0xFF	; 255
    4d9c:	ff ef       	ldi	r31, 0xFF	; 255
    4d9e:	d5 01       	movw	r26, r10
    4da0:	58 96       	adiw	r26, 0x18	; 24
    4da2:	ed 93       	st	X+, r30
    4da4:	fc 93       	st	X, r31
    4da6:	59 97       	sbiw	r26, 0x19	; 25
    4da8:	54 96       	adiw	r26, 0x14	; 20
    4daa:	ed 91       	ld	r30, X+
    4dac:	fc 91       	ld	r31, X
    4dae:	55 97       	sbiw	r26, 0x15	; 21
    4db0:	83 85       	ldd	r24, Z+11	; 0x0b
    4db2:	80 fd       	sbrc	r24, 0
    4db4:	16 cf       	rjmp	.-468    	; 0x4be2 <dir_find.part.5+0x84>
    4db6:	98 81       	ld	r25, Y
    4db8:	80 81       	ld	r24, Z
    4dba:	98 13       	cpse	r25, r24
    4dbc:	12 cf       	rjmp	.-476    	; 0x4be2 <dir_find.part.5+0x84>
    4dbe:	99 81       	ldd	r25, Y+1	; 0x01
    4dc0:	81 81       	ldd	r24, Z+1	; 0x01
    4dc2:	98 13       	cpse	r25, r24
    4dc4:	0e cf       	rjmp	.-484    	; 0x4be2 <dir_find.part.5+0x84>
    4dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc8:	82 81       	ldd	r24, Z+2	; 0x02
    4dca:	98 13       	cpse	r25, r24
    4dcc:	0a cf       	rjmp	.-492    	; 0x4be2 <dir_find.part.5+0x84>
    4dce:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd0:	83 81       	ldd	r24, Z+3	; 0x03
    4dd2:	98 13       	cpse	r25, r24
    4dd4:	06 cf       	rjmp	.-500    	; 0x4be2 <dir_find.part.5+0x84>
    4dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd8:	84 81       	ldd	r24, Z+4	; 0x04
    4dda:	98 13       	cpse	r25, r24
    4ddc:	02 cf       	rjmp	.-508    	; 0x4be2 <dir_find.part.5+0x84>
    4dde:	9d 81       	ldd	r25, Y+5	; 0x05
    4de0:	85 81       	ldd	r24, Z+5	; 0x05
    4de2:	98 13       	cpse	r25, r24
    4de4:	fe ce       	rjmp	.-516    	; 0x4be2 <dir_find.part.5+0x84>
    4de6:	9e 81       	ldd	r25, Y+6	; 0x06
    4de8:	86 81       	ldd	r24, Z+6	; 0x06
    4dea:	98 13       	cpse	r25, r24
    4dec:	fa ce       	rjmp	.-524    	; 0x4be2 <dir_find.part.5+0x84>
    4dee:	9f 81       	ldd	r25, Y+7	; 0x07
    4df0:	87 81       	ldd	r24, Z+7	; 0x07
    4df2:	98 13       	cpse	r25, r24
    4df4:	f6 ce       	rjmp	.-532    	; 0x4be2 <dir_find.part.5+0x84>
    4df6:	98 85       	ldd	r25, Y+8	; 0x08
    4df8:	80 85       	ldd	r24, Z+8	; 0x08
    4dfa:	98 13       	cpse	r25, r24
    4dfc:	f2 ce       	rjmp	.-540    	; 0x4be2 <dir_find.part.5+0x84>
    4dfe:	99 85       	ldd	r25, Y+9	; 0x09
    4e00:	81 85       	ldd	r24, Z+9	; 0x09
    4e02:	98 13       	cpse	r25, r24
    4e04:	ee ce       	rjmp	.-548    	; 0x4be2 <dir_find.part.5+0x84>
    4e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e08:	82 85       	ldd	r24, Z+10	; 0x0a
    4e0a:	98 13       	cpse	r25, r24
    4e0c:	ea ce       	rjmp	.-556    	; 0x4be2 <dir_find.part.5+0x84>
    4e0e:	80 e0       	ldi	r24, 0x00	; 0
    4e10:	f3 ce       	rjmp	.-538    	; 0x4bf8 <dir_find.part.5+0x9a>
    4e12:	01 e0       	ldi	r16, 0x01	; 1
    4e14:	a3 01       	movw	r20, r6
    4e16:	92 01       	movw	r18, r4
    4e18:	be 01       	movw	r22, r28
    4e1a:	62 5d       	subi	r22, 0xD2	; 210
    4e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    4e24:	81 11       	cpse	r24, r1
    4e26:	3c c0       	rjmp	.+120    	; 0x4ea0 <dir_find.part.5+0x342>
    4e28:	4a a6       	std	Y+42, r4	; 0x2a
    4e2a:	5b a6       	std	Y+43, r5	; 0x2b
    4e2c:	6c a6       	std	Y+44, r6	; 0x2c
    4e2e:	7d a6       	std	Y+45, r7	; 0x2d
    4e30:	c8 ce       	rjmp	.-624    	; 0x4bc2 <dir_find.part.5+0x64>
    4e32:	4e 01       	movw	r8, r28
    4e34:	be e2       	ldi	r27, 0x2E	; 46
    4e36:	8b 0e       	add	r8, r27
    4e38:	91 1c       	adc	r9, r1
    4e3a:	01 e0       	ldi	r16, 0x01	; 1
    4e3c:	a7 01       	movw	r20, r14
    4e3e:	96 01       	movw	r18, r12
    4e40:	b4 01       	movw	r22, r8
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    4e48:	81 11       	cpse	r24, r1
    4e4a:	2a c0       	rjmp	.+84     	; 0x4ea0 <dir_find.part.5+0x342>
    4e4c:	1c 82       	std	Y+4, r1	; 0x04
    4e4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4e50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e52:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4e54:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4e56:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4e58:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4e5a:	68 a1       	ldd	r22, Y+32	; 0x20
    4e5c:	79 a1       	ldd	r23, Y+33	; 0x21
    4e5e:	48 0f       	add	r20, r24
    4e60:	59 1f       	adc	r21, r25
    4e62:	6a 1f       	adc	r22, r26
    4e64:	7b 1f       	adc	r23, r27
    4e66:	c4 16       	cp	r12, r20
    4e68:	d5 06       	cpc	r13, r21
    4e6a:	e6 06       	cpc	r14, r22
    4e6c:	f7 06       	cpc	r15, r23
    4e6e:	08 f0       	brcs	.+2      	; 0x4e72 <dir_find.part.5+0x314>
    4e70:	a2 ce       	rjmp	.-700    	; 0x4bb6 <dir_find.part.5+0x58>
    4e72:	3b 80       	ldd	r3, Y+3	; 0x03
    4e74:	03 15       	cp	r16, r3
    4e76:	28 f0       	brcs	.+10     	; 0x4e82 <dir_find.part.5+0x324>
    4e78:	9e ce       	rjmp	.-708    	; 0x4bb6 <dir_find.part.5+0x58>
    4e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4e7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e7e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4e80:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4e82:	c8 0e       	add	r12, r24
    4e84:	d9 1e       	adc	r13, r25
    4e86:	ea 1e       	adc	r14, r26
    4e88:	fb 1e       	adc	r15, r27
    4e8a:	01 e0       	ldi	r16, 0x01	; 1
    4e8c:	a7 01       	movw	r20, r14
    4e8e:	96 01       	movw	r18, r12
    4e90:	b4 01       	movw	r22, r8
    4e92:	89 81       	ldd	r24, Y+1	; 0x01
    4e94:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    4e98:	3a 94       	dec	r3
    4e9a:	30 12       	cpse	r3, r16
    4e9c:	ee cf       	rjmp	.-36     	; 0x4e7a <dir_find.part.5+0x31c>
    4e9e:	8b ce       	rjmp	.-746    	; 0x4bb6 <dir_find.part.5+0x58>
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	aa ce       	rjmp	.-684    	; 0x4bf8 <dir_find.part.5+0x9a>
    4ea4:	81 13       	cpse	r24, r17
    4ea6:	9d ce       	rjmp	.-710    	; 0x4be2 <dir_find.part.5+0x84>
    4ea8:	f6 ce       	rjmp	.-532    	; 0x4c96 <dir_find.part.5+0x138>
    4eaa:	bf ef       	ldi	r27, 0xFF	; 255
    4eac:	4b 1a       	sub	r4, r27
    4eae:	5b 0a       	sbc	r5, r27
    4eb0:	6b 0a       	sbc	r6, r27
    4eb2:	7b 0a       	sbc	r7, r27
    4eb4:	f5 01       	movw	r30, r10
    4eb6:	46 86       	std	Z+14, r4	; 0x0e
    4eb8:	57 86       	std	Z+15, r5	; 0x0f
    4eba:	60 8a       	std	Z+16, r6	; 0x10
    4ebc:	71 8a       	std	Z+17, r7	; 0x11
    4ebe:	42 85       	ldd	r20, Z+10	; 0x0a
    4ec0:	53 85       	ldd	r21, Z+11	; 0x0b
    4ec2:	64 85       	ldd	r22, Z+12	; 0x0c
    4ec4:	75 85       	ldd	r23, Z+13	; 0x0d
    4ec6:	41 15       	cp	r20, r1
    4ec8:	51 05       	cpc	r21, r1
    4eca:	61 05       	cpc	r22, r1
    4ecc:	71 05       	cpc	r23, r1
    4ece:	49 f4       	brne	.+18     	; 0x4ee2 <dir_find.part.5+0x384>
    4ed0:	c0 81       	ld	r28, Z
    4ed2:	d1 81       	ldd	r29, Z+1	; 0x01
    4ed4:	88 85       	ldd	r24, Y+8	; 0x08
    4ed6:	99 85       	ldd	r25, Y+9	; 0x09
    4ed8:	e8 16       	cp	r14, r24
    4eda:	f9 06       	cpc	r15, r25
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <dir_find.part.5+0x382>
    4ede:	8b ce       	rjmp	.-746    	; 0x4bf6 <dir_find.part.5+0x98>
    4ee0:	b3 ce       	rjmp	.-666    	; 0x4c48 <dir_find.part.5+0xea>
    4ee2:	c0 81       	ld	r28, Z
    4ee4:	d1 81       	ldd	r29, Z+1	; 0x01
    4ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	97 01       	movw	r18, r14
    4eee:	32 95       	swap	r19
    4ef0:	22 95       	swap	r18
    4ef2:	2f 70       	andi	r18, 0x0F	; 15
    4ef4:	23 27       	eor	r18, r19
    4ef6:	3f 70       	andi	r19, 0x0F	; 15
    4ef8:	23 27       	eor	r18, r19
    4efa:	82 23       	and	r24, r18
    4efc:	93 23       	and	r25, r19
    4efe:	89 2b       	or	r24, r25
    4f00:	09 f0       	breq	.+2      	; 0x4f04 <dir_find.part.5+0x3a6>
    4f02:	a2 ce       	rjmp	.-700    	; 0x4c48 <dir_find.part.5+0xea>
    4f04:	42 30       	cpi	r20, 0x02	; 2
    4f06:	51 05       	cpc	r21, r1
    4f08:	61 05       	cpc	r22, r1
    4f0a:	71 05       	cpc	r23, r1
    4f0c:	48 f0       	brcs	.+18     	; 0x4f20 <dir_find.part.5+0x3c2>
    4f0e:	8e 89       	ldd	r24, Y+22	; 0x16
    4f10:	9f 89       	ldd	r25, Y+23	; 0x17
    4f12:	a8 8d       	ldd	r26, Y+24	; 0x18
    4f14:	b9 8d       	ldd	r27, Y+25	; 0x19
    4f16:	48 17       	cp	r20, r24
    4f18:	59 07       	cpc	r21, r25
    4f1a:	6a 07       	cpc	r22, r26
    4f1c:	7b 07       	cpc	r23, r27
    4f1e:	b0 f0       	brcs	.+44     	; 0x4f4c <dir_find.part.5+0x3ee>
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	6a ce       	rjmp	.-812    	; 0x4bf8 <dir_find.part.5+0x9a>
    4f24:	28 81       	ld	r18, Y
    4f26:	26 ff       	sbrs	r18, 6
    4f28:	0e c0       	rjmp	.+28     	; 0x4f46 <dir_find.part.5+0x3e8>
    4f2a:	89 2b       	or	r24, r25
    4f2c:	61 f0       	breq	.+24     	; 0x4f46 <dir_find.part.5+0x3e8>
    4f2e:	f4 01       	movw	r30, r8
    4f30:	ee 0f       	add	r30, r30
    4f32:	ff 1f       	adc	r31, r31
    4f34:	ee 0d       	add	r30, r14
    4f36:	ff 1d       	adc	r31, r15
    4f38:	80 81       	ld	r24, Z
    4f3a:	91 81       	ldd	r25, Z+1	; 0x01
    4f3c:	89 2b       	or	r24, r25
    4f3e:	19 f0       	breq	.+6      	; 0x4f46 <dir_find.part.5+0x3e8>
    4f40:	25 2c       	mov	r2, r5
    4f42:	1f ef       	ldi	r17, 0xFF	; 255
    4f44:	4f ce       	rjmp	.-866    	; 0x4be4 <dir_find.part.5+0x86>
    4f46:	11 50       	subi	r17, 0x01	; 1
    4f48:	25 2c       	mov	r2, r5
    4f4a:	4c ce       	rjmp	.-872    	; 0x4be4 <dir_find.part.5+0x86>
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	07 db       	rcall	.-2546   	; 0x455e <get_fat.part.3>
    4f50:	62 30       	cpi	r22, 0x02	; 2
    4f52:	71 05       	cpc	r23, r1
    4f54:	81 05       	cpc	r24, r1
    4f56:	91 05       	cpc	r25, r1
    4f58:	18 f3       	brcs	.-58     	; 0x4f20 <dir_find.part.5+0x3c2>
    4f5a:	6f 3f       	cpi	r22, 0xFF	; 255
    4f5c:	bf ef       	ldi	r27, 0xFF	; 255
    4f5e:	7b 07       	cpc	r23, r27
    4f60:	8b 07       	cpc	r24, r27
    4f62:	9b 07       	cpc	r25, r27
    4f64:	09 f4       	brne	.+2      	; 0x4f68 <dir_find.part.5+0x40a>
    4f66:	9c cf       	rjmp	.-200    	; 0x4ea0 <dir_find.part.5+0x342>
    4f68:	f5 01       	movw	r30, r10
    4f6a:	c0 81       	ld	r28, Z
    4f6c:	d1 81       	ldd	r29, Z+1	; 0x01
    4f6e:	4e 88       	ldd	r4, Y+22	; 0x16
    4f70:	5f 88       	ldd	r5, Y+23	; 0x17
    4f72:	68 8c       	ldd	r6, Y+24	; 0x18
    4f74:	79 8c       	ldd	r7, Y+25	; 0x19
    4f76:	64 15       	cp	r22, r4
    4f78:	75 05       	cpc	r23, r5
    4f7a:	86 05       	cpc	r24, r6
    4f7c:	97 05       	cpc	r25, r7
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <dir_find.part.5+0x424>
    4f80:	3a ce       	rjmp	.-908    	; 0x4bf6 <dir_find.part.5+0x98>
    4f82:	62 87       	std	Z+10, r22	; 0x0a
    4f84:	73 87       	std	Z+11, r23	; 0x0b
    4f86:	84 87       	std	Z+12, r24	; 0x0c
    4f88:	95 87       	std	Z+13, r25	; 0x0d
    4f8a:	9b 01       	movw	r18, r22
    4f8c:	ac 01       	movw	r20, r24
    4f8e:	22 50       	subi	r18, 0x02	; 2
    4f90:	31 09       	sbc	r19, r1
    4f92:	41 09       	sbc	r20, r1
    4f94:	51 09       	sbc	r21, r1
    4f96:	8e 89       	ldd	r24, Y+22	; 0x16
    4f98:	9f 89       	ldd	r25, Y+23	; 0x17
    4f9a:	a8 8d       	ldd	r26, Y+24	; 0x18
    4f9c:	b9 8d       	ldd	r27, Y+25	; 0x19
    4f9e:	02 97       	sbiw	r24, 0x02	; 2
    4fa0:	a1 09       	sbc	r26, r1
    4fa2:	b1 09       	sbc	r27, r1
    4fa4:	28 17       	cp	r18, r24
    4fa6:	39 07       	cpc	r19, r25
    4fa8:	4a 07       	cpc	r20, r26
    4faa:	5b 07       	cpc	r21, r27
    4fac:	90 f4       	brcc	.+36     	; 0x4fd2 <dir_find.part.5+0x474>
    4fae:	aa 81       	ldd	r26, Y+2	; 0x02
    4fb0:	b0 e0       	ldi	r27, 0x00	; 0
    4fb2:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    4fb6:	4e a0       	ldd	r4, Y+38	; 0x26
    4fb8:	5f a0       	ldd	r5, Y+39	; 0x27
    4fba:	68 a4       	ldd	r6, Y+40	; 0x28
    4fbc:	79 a4       	ldd	r7, Y+41	; 0x29
    4fbe:	46 0e       	add	r4, r22
    4fc0:	57 1e       	adc	r5, r23
    4fc2:	68 1e       	adc	r6, r24
    4fc4:	79 1e       	adc	r7, r25
    4fc6:	f5 01       	movw	r30, r10
    4fc8:	46 86       	std	Z+14, r4	; 0x0e
    4fca:	57 86       	std	Z+15, r5	; 0x0f
    4fcc:	60 8a       	std	Z+16, r6	; 0x10
    4fce:	71 8a       	std	Z+17, r7	; 0x11
    4fd0:	3b ce       	rjmp	.-906    	; 0x4c48 <dir_find.part.5+0xea>
    4fd2:	41 2c       	mov	r4, r1
    4fd4:	51 2c       	mov	r5, r1
    4fd6:	32 01       	movw	r6, r4
    4fd8:	f6 cf       	rjmp	.-20     	; 0x4fc6 <dir_find.part.5+0x468>

00004fda <follow_path>:
    4fda:	2f 92       	push	r2
    4fdc:	3f 92       	push	r3
    4fde:	4f 92       	push	r4
    4fe0:	5f 92       	push	r5
    4fe2:	6f 92       	push	r6
    4fe4:	7f 92       	push	r7
    4fe6:	8f 92       	push	r8
    4fe8:	9f 92       	push	r9
    4fea:	af 92       	push	r10
    4fec:	bf 92       	push	r11
    4fee:	cf 92       	push	r12
    4ff0:	df 92       	push	r13
    4ff2:	ef 92       	push	r14
    4ff4:	ff 92       	push	r15
    4ff6:	0f 93       	push	r16
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	6c 01       	movw	r12, r24
    5000:	eb 01       	movw	r28, r22
    5002:	88 81       	ld	r24, Y
    5004:	8f 32       	cpi	r24, 0x2F	; 47
    5006:	09 f4       	brne	.+2      	; 0x500a <follow_path+0x30>
    5008:	c3 c1       	rjmp	.+902    	; 0x5390 <follow_path+0x3b6>
    500a:	8c 35       	cpi	r24, 0x5C	; 92
    500c:	09 f4       	brne	.+2      	; 0x5010 <follow_path+0x36>
    500e:	c0 c1       	rjmp	.+896    	; 0x5390 <follow_path+0x3b6>
    5010:	d6 01       	movw	r26, r12
    5012:	16 96       	adiw	r26, 0x06	; 6
    5014:	1d 92       	st	X+, r1
    5016:	1d 92       	st	X+, r1
    5018:	1d 92       	st	X+, r1
    501a:	1c 92       	st	X, r1
    501c:	19 97       	sbiw	r26, 0x09	; 9
    501e:	88 81       	ld	r24, Y
    5020:	80 32       	cpi	r24, 0x20	; 32
    5022:	08 f4       	brcc	.+2      	; 0x5026 <follow_path+0x4c>
    5024:	dc c1       	rjmp	.+952    	; 0x53de <follow_path+0x404>
    5026:	b0 e2       	ldi	r27, 0x20	; 32
    5028:	5b 2e       	mov	r5, r27
    502a:	15 e0       	ldi	r17, 0x05	; 5
    502c:	21 2e       	mov	r2, r17
    502e:	4e 01       	movw	r8, r28
    5030:	88 81       	ld	r24, Y
    5032:	21 96       	adiw	r28, 0x01	; 1
    5034:	8f 32       	cpi	r24, 0x2F	; 47
    5036:	d9 f3       	breq	.-10     	; 0x502e <follow_path+0x54>
    5038:	8c 35       	cpi	r24, 0x5C	; 92
    503a:	c9 f3       	breq	.-14     	; 0x502e <follow_path+0x54>
    503c:	d6 01       	movw	r26, r12
    503e:	56 96       	adiw	r26, 0x16	; 22
    5040:	ad 90       	ld	r10, X+
    5042:	bc 90       	ld	r11, X
    5044:	57 97       	sbiw	r26, 0x17	; 23
    5046:	08 2e       	mov	r0, r24
    5048:	00 0c       	add	r0, r0
    504a:	99 0b       	sbc	r25, r25
    504c:	80 32       	cpi	r24, 0x20	; 32
    504e:	91 05       	cpc	r25, r1
    5050:	08 f4       	brcc	.+2      	; 0x5054 <follow_path+0x7a>
    5052:	61 c1       	rjmp	.+706    	; 0x5316 <follow_path+0x33c>
    5054:	8f 32       	cpi	r24, 0x2F	; 47
    5056:	91 05       	cpc	r25, r1
    5058:	09 f4       	brne	.+2      	; 0x505c <follow_path+0x82>
    505a:	51 c0       	rjmp	.+162    	; 0x50fe <follow_path+0x124>
    505c:	75 01       	movw	r14, r10
    505e:	01 e0       	ldi	r16, 0x01	; 1
    5060:	10 e0       	ldi	r17, 0x00	; 0
    5062:	61 e0       	ldi	r22, 0x01	; 1
    5064:	70 e0       	ldi	r23, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <ff_convert>
    506c:	00 97       	sbiw	r24, 0x00	; 0
    506e:	99 f1       	breq	.+102    	; 0x50d6 <follow_path+0xfc>
    5070:	80 38       	cpi	r24, 0x80	; 128
    5072:	91 05       	cpc	r25, r1
    5074:	78 f4       	brcc	.+30     	; 0x5094 <follow_path+0xba>
    5076:	82 32       	cpi	r24, 0x22	; 34
    5078:	91 05       	cpc	r25, r1
    507a:	69 f1       	breq	.+90     	; 0x50d6 <follow_path+0xfc>
    507c:	e8 e7       	ldi	r30, 0x78	; 120
    507e:	f1 e2       	ldi	r31, 0x21	; 33
    5080:	06 c0       	rjmp	.+12     	; 0x508e <follow_path+0xb4>
    5082:	02 2e       	mov	r0, r18
    5084:	00 0c       	add	r0, r0
    5086:	33 0b       	sbc	r19, r19
    5088:	82 17       	cp	r24, r18
    508a:	93 07       	cpc	r25, r19
    508c:	21 f1       	breq	.+72     	; 0x50d6 <follow_path+0xfc>
    508e:	21 91       	ld	r18, Z+
    5090:	21 11       	cpse	r18, r1
    5092:	f7 cf       	rjmp	.-18     	; 0x5082 <follow_path+0xa8>
    5094:	f7 01       	movw	r30, r14
    5096:	81 93       	st	Z+, r24
    5098:	91 93       	st	Z+, r25
    509a:	7f 01       	movw	r14, r30
    509c:	98 01       	movw	r18, r16
    509e:	2f 5f       	subi	r18, 0xFF	; 255
    50a0:	3f 4f       	sbci	r19, 0xFF	; 255
    50a2:	89 91       	ld	r24, Y+
    50a4:	08 2e       	mov	r0, r24
    50a6:	00 0c       	add	r0, r0
    50a8:	99 0b       	sbc	r25, r25
    50aa:	80 32       	cpi	r24, 0x20	; 32
    50ac:	91 05       	cpc	r25, r1
    50ae:	08 f4       	brcc	.+2      	; 0x50b2 <follow_path+0xd8>
    50b0:	36 c1       	rjmp	.+620    	; 0x531e <follow_path+0x344>
    50b2:	8f 32       	cpi	r24, 0x2F	; 47
    50b4:	91 05       	cpc	r25, r1
    50b6:	39 f1       	breq	.+78     	; 0x5106 <follow_path+0x12c>
    50b8:	8c 35       	cpi	r24, 0x5C	; 92
    50ba:	91 05       	cpc	r25, r1
    50bc:	21 f1       	breq	.+72     	; 0x5106 <follow_path+0x12c>
    50be:	21 15       	cp	r18, r1
    50c0:	b1 e0       	ldi	r27, 0x01	; 1
    50c2:	3b 07       	cpc	r19, r27
    50c4:	41 f0       	breq	.+16     	; 0x50d6 <follow_path+0xfc>
    50c6:	89 01       	movw	r16, r18
    50c8:	61 e0       	ldi	r22, 0x01	; 1
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <ff_convert>
    50d2:	00 97       	sbiw	r24, 0x00	; 0
    50d4:	69 f6       	brne	.-102    	; 0x5070 <follow_path+0x96>
    50d6:	86 e0       	ldi	r24, 0x06	; 6
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	1f 91       	pop	r17
    50de:	0f 91       	pop	r16
    50e0:	ff 90       	pop	r15
    50e2:	ef 90       	pop	r14
    50e4:	df 90       	pop	r13
    50e6:	cf 90       	pop	r12
    50e8:	bf 90       	pop	r11
    50ea:	af 90       	pop	r10
    50ec:	9f 90       	pop	r9
    50ee:	8f 90       	pop	r8
    50f0:	7f 90       	pop	r7
    50f2:	6f 90       	pop	r6
    50f4:	5f 90       	pop	r5
    50f6:	4f 90       	pop	r4
    50f8:	3f 90       	pop	r3
    50fa:	2f 90       	pop	r2
    50fc:	08 95       	ret
    50fe:	00 e0       	ldi	r16, 0x00	; 0
    5100:	10 e0       	ldi	r17, 0x00	; 0
    5102:	21 e0       	ldi	r18, 0x01	; 1
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	e4 01       	movw	r28, r8
    5108:	c2 0f       	add	r28, r18
    510a:	d3 1f       	adc	r29, r19
    510c:	41 2c       	mov	r4, r1
    510e:	01 15       	cp	r16, r1
    5110:	11 05       	cpc	r17, r1
    5112:	09 f3       	breq	.-62     	; 0x50d6 <follow_path+0xfc>
    5114:	f8 01       	movw	r30, r16
    5116:	ee 0f       	add	r30, r30
    5118:	ff 1f       	adc	r31, r31
    511a:	ea 0d       	add	r30, r10
    511c:	fb 1d       	adc	r31, r11
    511e:	92 91       	ld	r25, -Z
    5120:	82 91       	ld	r24, -Z
    5122:	80 32       	cpi	r24, 0x20	; 32
    5124:	91 05       	cpc	r25, r1
    5126:	11 f0       	breq	.+4      	; 0x512c <follow_path+0x152>
    5128:	8e 97       	sbiw	r24, 0x2e	; 46
    512a:	21 f4       	brne	.+8      	; 0x5134 <follow_path+0x15a>
    512c:	01 50       	subi	r16, 0x01	; 1
    512e:	11 09       	sbc	r17, r1
    5130:	b1 f7       	brne	.-20     	; 0x511e <follow_path+0x144>
    5132:	d1 cf       	rjmp	.-94     	; 0x50d6 <follow_path+0xfc>
    5134:	f8 01       	movw	r30, r16
    5136:	ee 0f       	add	r30, r30
    5138:	ff 1f       	adc	r31, r31
    513a:	a5 01       	movw	r20, r10
    513c:	4e 0f       	add	r20, r30
    513e:	5f 1f       	adc	r21, r31
    5140:	da 01       	movw	r26, r20
    5142:	1d 92       	st	X+, r1
    5144:	1c 92       	st	X, r1
    5146:	d6 01       	movw	r26, r12
    5148:	54 96       	adiw	r26, 0x14	; 20
    514a:	ed 91       	ld	r30, X+
    514c:	fc 91       	ld	r31, X
    514e:	55 97       	sbiw	r26, 0x15	; 21
    5150:	50 82       	st	Z, r5
    5152:	51 82       	std	Z+1, r5	; 0x01
    5154:	52 82       	std	Z+2, r5	; 0x02
    5156:	53 82       	std	Z+3, r5	; 0x03
    5158:	54 82       	std	Z+4, r5	; 0x04
    515a:	55 82       	std	Z+5, r5	; 0x05
    515c:	56 82       	std	Z+6, r5	; 0x06
    515e:	57 82       	std	Z+7, r5	; 0x07
    5160:	50 86       	std	Z+8, r5	; 0x08
    5162:	51 86       	std	Z+9, r5	; 0x09
    5164:	52 86       	std	Z+10, r5	; 0x0a
    5166:	f5 01       	movw	r30, r10
    5168:	e1 2c       	mov	r14, r1
    516a:	f1 2c       	mov	r15, r1
    516c:	03 c0       	rjmp	.+6      	; 0x5174 <follow_path+0x19a>
    516e:	2f ef       	ldi	r18, 0xFF	; 255
    5170:	e2 1a       	sub	r14, r18
    5172:	f2 0a       	sbc	r15, r18
    5174:	81 91       	ld	r24, Z+
    5176:	91 91       	ld	r25, Z+
    5178:	80 32       	cpi	r24, 0x20	; 32
    517a:	91 05       	cpc	r25, r1
    517c:	c1 f3       	breq	.-16     	; 0x516e <follow_path+0x194>
    517e:	8e 32       	cpi	r24, 0x2E	; 46
    5180:	91 05       	cpc	r25, r1
    5182:	a9 f3       	breq	.-22     	; 0x516e <follow_path+0x194>
    5184:	e1 14       	cp	r14, r1
    5186:	f1 04       	cpc	r15, r1
    5188:	19 f0       	breq	.+6      	; 0x5190 <follow_path+0x1b6>
    518a:	a4 2d       	mov	r26, r4
    518c:	a3 60       	ori	r26, 0x03	; 3
    518e:	4a 2e       	mov	r4, r26
    5190:	fa 01       	movw	r30, r20
    5192:	32 91       	ld	r19, -Z
    5194:	22 91       	ld	r18, -Z
    5196:	2e 32       	cpi	r18, 0x2E	; 46
    5198:	31 05       	cpc	r19, r1
    519a:	19 f0       	breq	.+6      	; 0x51a2 <follow_path+0x1c8>
    519c:	01 50       	subi	r16, 0x01	; 1
    519e:	11 09       	sbc	r17, r1
    51a0:	c1 f7       	brne	.-16     	; 0x5192 <follow_path+0x1b8>
    51a2:	78 e0       	ldi	r23, 0x08	; 8
    51a4:	67 2e       	mov	r6, r23
    51a6:	71 2c       	mov	r7, r1
    51a8:	81 2c       	mov	r8, r1
    51aa:	91 2c       	mov	r9, r1
    51ac:	31 2c       	mov	r3, r1
    51ae:	bf ef       	ldi	r27, 0xFF	; 255
    51b0:	eb 1a       	sub	r14, r27
    51b2:	fb 0a       	sbc	r15, r27
    51b4:	00 97       	sbiw	r24, 0x00	; 0
    51b6:	09 f4       	brne	.+2      	; 0x51ba <follow_path+0x1e0>
    51b8:	4f c0       	rjmp	.+158    	; 0x5258 <follow_path+0x27e>
    51ba:	80 32       	cpi	r24, 0x20	; 32
    51bc:	91 05       	cpc	r25, r1
    51be:	69 f1       	breq	.+90     	; 0x521a <follow_path+0x240>
    51c0:	8e 32       	cpi	r24, 0x2E	; 46
    51c2:	91 05       	cpc	r25, r1
    51c4:	39 f1       	breq	.+78     	; 0x5214 <follow_path+0x23a>
    51c6:	86 14       	cp	r8, r6
    51c8:	97 04       	cpc	r9, r7
    51ca:	b0 f5       	brcc	.+108    	; 0x5238 <follow_path+0x25e>
    51cc:	e0 16       	cp	r14, r16
    51ce:	f1 06       	cpc	r15, r17
    51d0:	09 f4       	brne	.+2      	; 0x51d4 <follow_path+0x1fa>
    51d2:	ab c0       	rjmp	.+342    	; 0x532a <follow_path+0x350>
    51d4:	80 38       	cpi	r24, 0x80	; 128
    51d6:	91 05       	cpc	r25, r1
    51d8:	08 f0       	brcs	.+2      	; 0x51dc <follow_path+0x202>
    51da:	b5 c0       	rjmp	.+362    	; 0x5346 <follow_path+0x36c>
    51dc:	8b 32       	cpi	r24, 0x2B	; 43
    51de:	91 05       	cpc	r25, r1
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <follow_path+0x20a>
    51e2:	c2 c0       	rjmp	.+388    	; 0x5368 <follow_path+0x38e>
    51e4:	e1 e8       	ldi	r30, 0x81	; 129
    51e6:	f1 e2       	ldi	r31, 0x21	; 33
    51e8:	07 c0       	rjmp	.+14     	; 0x51f8 <follow_path+0x21e>
    51ea:	02 2e       	mov	r0, r18
    51ec:	00 0c       	add	r0, r0
    51ee:	33 0b       	sbc	r19, r19
    51f0:	28 17       	cp	r18, r24
    51f2:	39 07       	cpc	r19, r25
    51f4:	09 f4       	brne	.+2      	; 0x51f8 <follow_path+0x21e>
    51f6:	b8 c0       	rjmp	.+368    	; 0x5368 <follow_path+0x38e>
    51f8:	21 91       	ld	r18, Z+
    51fa:	21 11       	cpse	r18, r1
    51fc:	f6 cf       	rjmp	.-20     	; 0x51ea <follow_path+0x210>
    51fe:	9c 01       	movw	r18, r24
    5200:	21 54       	subi	r18, 0x41	; 65
    5202:	31 09       	sbc	r19, r1
    5204:	2a 31       	cpi	r18, 0x1A	; 26
    5206:	31 05       	cpc	r19, r1
    5208:	08 f0       	brcs	.+2      	; 0x520c <follow_path+0x232>
    520a:	f1 c0       	rjmp	.+482    	; 0x53ee <follow_path+0x414>
    520c:	23 2d       	mov	r18, r3
    520e:	22 60       	ori	r18, 0x02	; 2
    5210:	32 2e       	mov	r3, r18
    5212:	ae c0       	rjmp	.+348    	; 0x5370 <follow_path+0x396>
    5214:	e0 16       	cp	r14, r16
    5216:	f1 06       	cpc	r15, r17
    5218:	59 f0       	breq	.+22     	; 0x5230 <follow_path+0x256>
    521a:	e4 2d       	mov	r30, r4
    521c:	e3 60       	ori	r30, 0x03	; 3
    521e:	4e 2e       	mov	r4, r30
    5220:	f7 01       	movw	r30, r14
    5222:	ee 0f       	add	r30, r30
    5224:	ff 1f       	adc	r31, r31
    5226:	ea 0d       	add	r30, r10
    5228:	fb 1d       	adc	r31, r11
    522a:	80 81       	ld	r24, Z
    522c:	91 81       	ldd	r25, Z+1	; 0x01
    522e:	bf cf       	rjmp	.-130    	; 0x51ae <follow_path+0x1d4>
    5230:	86 14       	cp	r8, r6
    5232:	97 04       	cpc	r9, r7
    5234:	08 f4       	brcc	.+2      	; 0x5238 <follow_path+0x25e>
    5236:	79 c0       	rjmp	.+242    	; 0x532a <follow_path+0x350>
    5238:	fb e0       	ldi	r31, 0x0B	; 11
    523a:	6f 16       	cp	r6, r31
    523c:	71 04       	cpc	r7, r1
    523e:	09 f4       	brne	.+2      	; 0x5242 <follow_path+0x268>
    5240:	ac c0       	rjmp	.+344    	; 0x539a <follow_path+0x3c0>
    5242:	e0 16       	cp	r14, r16
    5244:	f1 06       	cpc	r15, r17
    5246:	09 f4       	brne	.+2      	; 0x524a <follow_path+0x270>
    5248:	74 c0       	rjmp	.+232    	; 0x5332 <follow_path+0x358>
    524a:	b4 2d       	mov	r27, r4
    524c:	b3 60       	ori	r27, 0x03	; 3
    524e:	4b 2e       	mov	r4, r27
    5250:	0e 15       	cp	r16, r14
    5252:	1f 05       	cpc	r17, r15
    5254:	08 f0       	brcs	.+2      	; 0x5258 <follow_path+0x27e>
    5256:	6d c0       	rjmp	.+218    	; 0x5332 <follow_path+0x358>
    5258:	d6 01       	movw	r26, r12
    525a:	54 96       	adiw	r26, 0x14	; 20
    525c:	ed 91       	ld	r30, X+
    525e:	fc 91       	ld	r31, X
    5260:	55 97       	sbiw	r26, 0x15	; 21
    5262:	80 81       	ld	r24, Z
    5264:	85 3e       	cpi	r24, 0xE5	; 229
    5266:	09 f4       	brne	.+2      	; 0x526a <follow_path+0x290>
    5268:	a7 c0       	rjmp	.+334    	; 0x53b8 <follow_path+0x3de>
    526a:	b8 e0       	ldi	r27, 0x08	; 8
    526c:	6b 16       	cp	r6, r27
    526e:	71 04       	cpc	r7, r1
    5270:	09 f4       	brne	.+2      	; 0x5274 <follow_path+0x29a>
    5272:	90 c0       	rjmp	.+288    	; 0x5394 <follow_path+0x3ba>
    5274:	83 2d       	mov	r24, r3
    5276:	8c 70       	andi	r24, 0x0C	; 12
    5278:	8c 30       	cpi	r24, 0x0C	; 12
    527a:	09 f4       	brne	.+2      	; 0x527e <follow_path+0x2a4>
    527c:	85 c0       	rjmp	.+266    	; 0x5388 <follow_path+0x3ae>
    527e:	93 2d       	mov	r25, r3
    5280:	93 70       	andi	r25, 0x03	; 3
    5282:	93 30       	cpi	r25, 0x03	; 3
    5284:	09 f4       	brne	.+2      	; 0x5288 <follow_path+0x2ae>
    5286:	80 c0       	rjmp	.+256    	; 0x5388 <follow_path+0x3ae>
    5288:	41 fc       	sbrc	r4, 1
    528a:	08 c0       	rjmp	.+16     	; 0x529c <follow_path+0x2c2>
    528c:	93 2d       	mov	r25, r3
    528e:	93 70       	andi	r25, 0x03	; 3
    5290:	91 30       	cpi	r25, 0x01	; 1
    5292:	09 f4       	brne	.+2      	; 0x5296 <follow_path+0x2bc>
    5294:	a0 c0       	rjmp	.+320    	; 0x53d6 <follow_path+0x3fc>
    5296:	84 30       	cpi	r24, 0x04	; 4
    5298:	09 f4       	brne	.+2      	; 0x529c <follow_path+0x2c2>
    529a:	99 c0       	rjmp	.+306    	; 0x53ce <follow_path+0x3f4>
    529c:	43 86       	std	Z+11, r4	; 0x0b
    529e:	60 e0       	ldi	r22, 0x00	; 0
    52a0:	70 e0       	ldi	r23, 0x00	; 0
    52a2:	c6 01       	movw	r24, r12
    52a4:	7a db       	rcall	.-2316   	; 0x499a <dir_sdi>
    52a6:	81 11       	cpse	r24, r1
    52a8:	29 c0       	rjmp	.+82     	; 0x52fc <follow_path+0x322>
    52aa:	c6 01       	movw	r24, r12
    52ac:	58 dc       	rcall	.-1872   	; 0x4b5e <dir_find.part.5>
    52ae:	d6 01       	movw	r26, r12
    52b0:	54 96       	adiw	r26, 0x14	; 20
    52b2:	ed 91       	ld	r30, X+
    52b4:	fc 91       	ld	r31, X
    52b6:	55 97       	sbiw	r26, 0x15	; 21
    52b8:	93 85       	ldd	r25, Z+11	; 0x0b
    52ba:	81 11       	cpse	r24, r1
    52bc:	25 c0       	rjmp	.+74     	; 0x5308 <follow_path+0x32e>
    52be:	92 fd       	sbrc	r25, 2
    52c0:	0b cf       	rjmp	.-490    	; 0x50d8 <follow_path+0xfe>
    52c2:	d6 01       	movw	r26, r12
    52c4:	52 96       	adiw	r26, 0x12	; 18
    52c6:	ed 91       	ld	r30, X+
    52c8:	fc 91       	ld	r31, X
    52ca:	53 97       	sbiw	r26, 0x13	; 19
    52cc:	83 85       	ldd	r24, Z+11	; 0x0b
    52ce:	84 ff       	sbrs	r24, 4
    52d0:	20 c0       	rjmp	.+64     	; 0x5312 <follow_path+0x338>
    52d2:	84 89       	ldd	r24, Z+20	; 0x14
    52d4:	95 89       	ldd	r25, Z+21	; 0x15
    52d6:	a0 e0       	ldi	r26, 0x00	; 0
    52d8:	b0 e0       	ldi	r27, 0x00	; 0
    52da:	dc 01       	movw	r26, r24
    52dc:	99 27       	eor	r25, r25
    52de:	88 27       	eor	r24, r24
    52e0:	42 8d       	ldd	r20, Z+26	; 0x1a
    52e2:	53 8d       	ldd	r21, Z+27	; 0x1b
    52e4:	60 e0       	ldi	r22, 0x00	; 0
    52e6:	70 e0       	ldi	r23, 0x00	; 0
    52e8:	84 2b       	or	r24, r20
    52ea:	95 2b       	or	r25, r21
    52ec:	a6 2b       	or	r26, r22
    52ee:	b7 2b       	or	r27, r23
    52f0:	f6 01       	movw	r30, r12
    52f2:	86 83       	std	Z+6, r24	; 0x06
    52f4:	97 83       	std	Z+7, r25	; 0x07
    52f6:	a0 87       	std	Z+8, r26	; 0x08
    52f8:	b1 87       	std	Z+9, r27	; 0x09
    52fa:	99 ce       	rjmp	.-718    	; 0x502e <follow_path+0x54>
    52fc:	d6 01       	movw	r26, r12
    52fe:	54 96       	adiw	r26, 0x14	; 20
    5300:	ed 91       	ld	r30, X+
    5302:	fc 91       	ld	r31, X
    5304:	55 97       	sbiw	r26, 0x15	; 21
    5306:	93 85       	ldd	r25, Z+11	; 0x0b
    5308:	84 30       	cpi	r24, 0x04	; 4
    530a:	09 f0       	breq	.+2      	; 0x530e <follow_path+0x334>
    530c:	e5 ce       	rjmp	.-566    	; 0x50d8 <follow_path+0xfe>
    530e:	92 fd       	sbrc	r25, 2
    5310:	e3 ce       	rjmp	.-570    	; 0x50d8 <follow_path+0xfe>
    5312:	85 e0       	ldi	r24, 0x05	; 5
    5314:	e1 ce       	rjmp	.-574    	; 0x50d8 <follow_path+0xfe>
    5316:	00 e0       	ldi	r16, 0x00	; 0
    5318:	10 e0       	ldi	r17, 0x00	; 0
    531a:	21 e0       	ldi	r18, 0x01	; 1
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	e4 01       	movw	r28, r8
    5320:	c2 0f       	add	r28, r18
    5322:	d3 1f       	adc	r29, r19
    5324:	94 e0       	ldi	r25, 0x04	; 4
    5326:	49 2e       	mov	r4, r25
    5328:	f2 ce       	rjmp	.-540    	; 0x510e <follow_path+0x134>
    532a:	bb e0       	ldi	r27, 0x0B	; 11
    532c:	6b 16       	cp	r6, r27
    532e:	71 04       	cpc	r7, r1
    5330:	a1 f1       	breq	.+104    	; 0x539a <follow_path+0x3c0>
    5332:	33 0c       	add	r3, r3
    5334:	33 0c       	add	r3, r3
    5336:	78 01       	movw	r14, r16
    5338:	4b e0       	ldi	r20, 0x0B	; 11
    533a:	64 2e       	mov	r6, r20
    533c:	71 2c       	mov	r7, r1
    533e:	58 e0       	ldi	r21, 0x08	; 8
    5340:	85 2e       	mov	r8, r21
    5342:	91 2c       	mov	r9, r1
    5344:	6d cf       	rjmp	.-294    	; 0x5220 <follow_path+0x246>
    5346:	60 e0       	ldi	r22, 0x00	; 0
    5348:	70 e0       	ldi	r23, 0x00	; 0
    534a:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <ff_convert>
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	d1 f1       	breq	.+116    	; 0x53c6 <follow_path+0x3ec>
    5352:	fc 01       	movw	r30, r24
    5354:	e9 5f       	subi	r30, 0xF9	; 249
    5356:	fe 4d       	sbci	r31, 0xDE	; 222
    5358:	80 81       	ld	r24, Z
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	e4 2d       	mov	r30, r4
    535e:	e2 60       	ori	r30, 0x02	; 2
    5360:	4e 2e       	mov	r4, r30
    5362:	00 97       	sbiw	r24, 0x00	; 0
    5364:	09 f0       	breq	.+2      	; 0x5368 <follow_path+0x38e>
    5366:	3a cf       	rjmp	.-396    	; 0x51dc <follow_path+0x202>
    5368:	f4 2d       	mov	r31, r4
    536a:	f3 60       	ori	r31, 0x03	; 3
    536c:	4f 2e       	mov	r4, r31
    536e:	8f e5       	ldi	r24, 0x5F	; 95
    5370:	d6 01       	movw	r26, r12
    5372:	54 96       	adiw	r26, 0x14	; 20
    5374:	ed 91       	ld	r30, X+
    5376:	fc 91       	ld	r31, X
    5378:	55 97       	sbiw	r26, 0x15	; 21
    537a:	e8 0d       	add	r30, r8
    537c:	f9 1d       	adc	r31, r9
    537e:	80 83       	st	Z, r24
    5380:	f4 01       	movw	r30, r8
    5382:	31 96       	adiw	r30, 0x01	; 1
    5384:	4f 01       	movw	r8, r30
    5386:	4c cf       	rjmp	.-360    	; 0x5220 <follow_path+0x246>
    5388:	24 2d       	mov	r18, r4
    538a:	22 60       	ori	r18, 0x02	; 2
    538c:	42 2e       	mov	r4, r18
    538e:	7c cf       	rjmp	.-264    	; 0x5288 <follow_path+0x2ae>
    5390:	21 96       	adiw	r28, 0x01	; 1
    5392:	3e ce       	rjmp	.-900    	; 0x5010 <follow_path+0x36>
    5394:	33 0c       	add	r3, r3
    5396:	33 0c       	add	r3, r3
    5398:	6d cf       	rjmp	.-294    	; 0x5274 <follow_path+0x29a>
    539a:	24 2d       	mov	r18, r4
    539c:	23 60       	ori	r18, 0x03	; 3
    539e:	42 2e       	mov	r4, r18
    53a0:	d6 01       	movw	r26, r12
    53a2:	54 96       	adiw	r26, 0x14	; 20
    53a4:	ed 91       	ld	r30, X+
    53a6:	fc 91       	ld	r31, X
    53a8:	55 97       	sbiw	r26, 0x15	; 21
    53aa:	80 81       	ld	r24, Z
    53ac:	85 3e       	cpi	r24, 0xE5	; 229
    53ae:	09 f0       	breq	.+2      	; 0x53b2 <follow_path+0x3d8>
    53b0:	61 cf       	rjmp	.-318    	; 0x5274 <follow_path+0x29a>
    53b2:	3b e0       	ldi	r19, 0x0B	; 11
    53b4:	63 2e       	mov	r6, r19
    53b6:	71 2c       	mov	r7, r1
    53b8:	20 82       	st	Z, r2
    53ba:	d6 01       	movw	r26, r12
    53bc:	54 96       	adiw	r26, 0x14	; 20
    53be:	ed 91       	ld	r30, X+
    53c0:	fc 91       	ld	r31, X
    53c2:	55 97       	sbiw	r26, 0x15	; 21
    53c4:	52 cf       	rjmp	.-348    	; 0x526a <follow_path+0x290>
    53c6:	e4 2d       	mov	r30, r4
    53c8:	e2 60       	ori	r30, 0x02	; 2
    53ca:	4e 2e       	mov	r4, r30
    53cc:	cd cf       	rjmp	.-102    	; 0x5368 <follow_path+0x38e>
    53ce:	84 2d       	mov	r24, r4
    53d0:	88 60       	ori	r24, 0x08	; 8
    53d2:	48 2e       	mov	r4, r24
    53d4:	63 cf       	rjmp	.-314    	; 0x529c <follow_path+0x2c2>
    53d6:	44 2d       	mov	r20, r4
    53d8:	40 61       	ori	r20, 0x10	; 16
    53da:	44 2e       	mov	r4, r20
    53dc:	5c cf       	rjmp	.-328    	; 0x5296 <follow_path+0x2bc>
    53de:	60 e0       	ldi	r22, 0x00	; 0
    53e0:	70 e0       	ldi	r23, 0x00	; 0
    53e2:	c6 01       	movw	r24, r12
    53e4:	da da       	rcall	.-2636   	; 0x499a <dir_sdi>
    53e6:	f6 01       	movw	r30, r12
    53e8:	12 8a       	std	Z+18, r1	; 0x12
    53ea:	13 8a       	std	Z+19, r1	; 0x13
    53ec:	75 ce       	rjmp	.-790    	; 0x50d8 <follow_path+0xfe>
    53ee:	9c 01       	movw	r18, r24
    53f0:	21 56       	subi	r18, 0x61	; 97
    53f2:	31 09       	sbc	r19, r1
    53f4:	2a 31       	cpi	r18, 0x1A	; 26
    53f6:	31 05       	cpc	r19, r1
    53f8:	08 f0       	brcs	.+2      	; 0x53fc <follow_path+0x422>
    53fa:	ba cf       	rjmp	.-140    	; 0x5370 <follow_path+0x396>
    53fc:	43 2d       	mov	r20, r3
    53fe:	41 60       	ori	r20, 0x01	; 1
    5400:	34 2e       	mov	r3, r20
    5402:	80 52       	subi	r24, 0x20	; 32
    5404:	b5 cf       	rjmp	.-150    	; 0x5370 <follow_path+0x396>

00005406 <dir_read>:
    5406:	2f 92       	push	r2
    5408:	3f 92       	push	r3
    540a:	4f 92       	push	r4
    540c:	5f 92       	push	r5
    540e:	6f 92       	push	r6
    5410:	7f 92       	push	r7
    5412:	8f 92       	push	r8
    5414:	9f 92       	push	r9
    5416:	af 92       	push	r10
    5418:	bf 92       	push	r11
    541a:	cf 92       	push	r12
    541c:	df 92       	push	r13
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	7c 01       	movw	r14, r24
    542c:	dc 01       	movw	r26, r24
    542e:	1e 96       	adiw	r26, 0x0e	; 14
    5430:	8d 90       	ld	r8, X+
    5432:	9d 90       	ld	r9, X+
    5434:	ad 90       	ld	r10, X+
    5436:	bc 90       	ld	r11, X
    5438:	51 97       	sbiw	r26, 0x11	; 17
    543a:	81 14       	cp	r8, r1
    543c:	91 04       	cpc	r9, r1
    543e:	a1 04       	cpc	r10, r1
    5440:	b1 04       	cpc	r11, r1
    5442:	09 f4       	brne	.+2      	; 0x5446 <dir_read+0x40>
    5444:	41 c0       	rjmp	.+130    	; 0x54c8 <dir_read+0xc2>
    5446:	cd 91       	ld	r28, X+
    5448:	dc 91       	ld	r29, X
    544a:	22 24       	eor	r2, r2
    544c:	2a 94       	dec	r2
    544e:	33 24       	eor	r3, r3
    5450:	3a 94       	dec	r3
    5452:	4a a4       	ldd	r4, Y+42	; 0x2a
    5454:	5b a4       	ldd	r5, Y+43	; 0x2b
    5456:	6c a4       	ldd	r6, Y+44	; 0x2c
    5458:	7d a4       	ldd	r7, Y+45	; 0x2d
    545a:	48 14       	cp	r4, r8
    545c:	59 04       	cpc	r5, r9
    545e:	6a 04       	cpc	r6, r10
    5460:	7b 04       	cpc	r7, r11
    5462:	a1 f0       	breq	.+40     	; 0x548c <dir_read+0x86>
    5464:	8c 81       	ldd	r24, Y+4	; 0x04
    5466:	6e 01       	movw	r12, r28
    5468:	81 11       	cpse	r24, r1
    546a:	fa c0       	rjmp	.+500    	; 0x5660 <dir_read+0x25a>
    546c:	be e2       	ldi	r27, 0x2E	; 46
    546e:	cb 0e       	add	r12, r27
    5470:	d1 1c       	adc	r13, r1
    5472:	01 e0       	ldi	r16, 0x01	; 1
    5474:	a5 01       	movw	r20, r10
    5476:	94 01       	movw	r18, r8
    5478:	b6 01       	movw	r22, r12
    547a:	89 81       	ldd	r24, Y+1	; 0x01
    547c:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    5480:	81 11       	cpse	r24, r1
    5482:	ec c0       	rjmp	.+472    	; 0x565c <dir_read+0x256>
    5484:	8a a6       	std	Y+42, r8	; 0x2a
    5486:	9b a6       	std	Y+43, r9	; 0x2b
    5488:	ac a6       	std	Y+44, r10	; 0x2c
    548a:	bd a6       	std	Y+45, r11	; 0x2d
    548c:	d7 01       	movw	r26, r14
    548e:	52 96       	adiw	r26, 0x12	; 18
    5490:	ed 91       	ld	r30, X+
    5492:	fc 91       	ld	r31, X
    5494:	53 97       	sbiw	r26, 0x13	; 19
    5496:	80 81       	ld	r24, Z
    5498:	88 23       	and	r24, r24
    549a:	b1 f0       	breq	.+44     	; 0x54c8 <dir_read+0xc2>
    549c:	85 3e       	cpi	r24, 0xE5	; 229
    549e:	51 f0       	breq	.+20     	; 0x54b4 <dir_read+0xae>
    54a0:	8e 32       	cpi	r24, 0x2E	; 46
    54a2:	41 f0       	breq	.+16     	; 0x54b4 <dir_read+0xae>
    54a4:	93 85       	ldd	r25, Z+11	; 0x0b
    54a6:	29 2f       	mov	r18, r25
    54a8:	2f 73       	andi	r18, 0x3F	; 63
    54aa:	93 ff       	sbrs	r25, 3
    54ac:	50 c0       	rjmp	.+160    	; 0x554e <dir_read+0x148>
    54ae:	2f 30       	cpi	r18, 0x0F	; 15
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <dir_read+0xae>
    54b2:	50 c0       	rjmp	.+160    	; 0x5554 <dir_read+0x14e>
    54b4:	33 24       	eor	r3, r3
    54b6:	3a 94       	dec	r3
    54b8:	d7 01       	movw	r26, r14
    54ba:	14 96       	adiw	r26, 0x04	; 4
    54bc:	0d 91       	ld	r16, X+
    54be:	1c 91       	ld	r17, X
    54c0:	15 97       	sbiw	r26, 0x05	; 5
    54c2:	0f 5f       	subi	r16, 0xFF	; 255
    54c4:	1f 4f       	sbci	r17, 0xFF	; 255
    54c6:	c9 f4       	brne	.+50     	; 0x54fa <dir_read+0xf4>
    54c8:	84 e0       	ldi	r24, 0x04	; 4
    54ca:	f7 01       	movw	r30, r14
    54cc:	16 86       	std	Z+14, r1	; 0x0e
    54ce:	17 86       	std	Z+15, r1	; 0x0f
    54d0:	10 8a       	std	Z+16, r1	; 0x10
    54d2:	11 8a       	std	Z+17, r1	; 0x11
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	1f 91       	pop	r17
    54da:	0f 91       	pop	r16
    54dc:	ff 90       	pop	r15
    54de:	ef 90       	pop	r14
    54e0:	df 90       	pop	r13
    54e2:	cf 90       	pop	r12
    54e4:	bf 90       	pop	r11
    54e6:	af 90       	pop	r10
    54e8:	9f 90       	pop	r9
    54ea:	8f 90       	pop	r8
    54ec:	7f 90       	pop	r7
    54ee:	6f 90       	pop	r6
    54f0:	5f 90       	pop	r5
    54f2:	4f 90       	pop	r4
    54f4:	3f 90       	pop	r3
    54f6:	2f 90       	pop	r2
    54f8:	08 95       	ret
    54fa:	1e 96       	adiw	r26, 0x0e	; 14
    54fc:	8d 90       	ld	r8, X+
    54fe:	9d 90       	ld	r9, X+
    5500:	ad 90       	ld	r10, X+
    5502:	bc 90       	ld	r11, X
    5504:	51 97       	sbiw	r26, 0x11	; 17
    5506:	81 14       	cp	r8, r1
    5508:	91 04       	cpc	r9, r1
    550a:	a1 04       	cpc	r10, r1
    550c:	b1 04       	cpc	r11, r1
    550e:	e1 f2       	breq	.-72     	; 0x54c8 <dir_read+0xc2>
    5510:	c8 01       	movw	r24, r16
    5512:	8f 70       	andi	r24, 0x0F	; 15
    5514:	99 27       	eor	r25, r25
    5516:	00 97       	sbiw	r24, 0x00	; 0
    5518:	09 f4       	brne	.+2      	; 0x551c <dir_read+0x116>
    551a:	db c0       	rjmp	.+438    	; 0x56d2 <dir_read+0x2cc>
    551c:	cd 91       	ld	r28, X+
    551e:	dc 91       	ld	r29, X
    5520:	11 97       	sbiw	r26, 0x01	; 1
    5522:	14 96       	adiw	r26, 0x04	; 4
    5524:	0d 93       	st	X+, r16
    5526:	1c 93       	st	X, r17
    5528:	15 97       	sbiw	r26, 0x05	; 5
    552a:	9e 01       	movw	r18, r28
    552c:	22 5d       	subi	r18, 0xD2	; 210
    552e:	3f 4f       	sbci	r19, 0xFF	; 255
    5530:	88 0f       	add	r24, r24
    5532:	99 1f       	adc	r25, r25
    5534:	82 95       	swap	r24
    5536:	92 95       	swap	r25
    5538:	90 7f       	andi	r25, 0xF0	; 240
    553a:	98 27       	eor	r25, r24
    553c:	80 7f       	andi	r24, 0xF0	; 240
    553e:	98 27       	eor	r25, r24
    5540:	82 0f       	add	r24, r18
    5542:	93 1f       	adc	r25, r19
    5544:	52 96       	adiw	r26, 0x12	; 18
    5546:	8d 93       	st	X+, r24
    5548:	9c 93       	st	X, r25
    554a:	53 97       	sbiw	r26, 0x13	; 19
    554c:	82 cf       	rjmp	.-252    	; 0x5452 <dir_read+0x4c>
    554e:	2f 30       	cpi	r18, 0x0F	; 15
    5550:	09 f0       	breq	.+2      	; 0x5554 <dir_read+0x14e>
    5552:	0e c1       	rjmp	.+540    	; 0x5770 <dir_read+0x36a>
    5554:	86 ff       	sbrs	r24, 6
    5556:	ba c0       	rjmp	.+372    	; 0x56cc <dir_read+0x2c6>
    5558:	25 84       	ldd	r2, Z+13	; 0x0d
    555a:	8f 7b       	andi	r24, 0xBF	; 191
    555c:	38 2e       	mov	r3, r24
    555e:	d7 01       	movw	r26, r14
    5560:	14 96       	adiw	r26, 0x04	; 4
    5562:	8d 91       	ld	r24, X+
    5564:	9c 91       	ld	r25, X
    5566:	15 97       	sbiw	r26, 0x05	; 5
    5568:	58 96       	adiw	r26, 0x18	; 24
    556a:	8d 93       	st	X+, r24
    556c:	9c 93       	st	X, r25
    556e:	59 97       	sbiw	r26, 0x19	; 25
    5570:	85 85       	ldd	r24, Z+13	; 0x0d
    5572:	28 12       	cpse	r2, r24
    5574:	9f cf       	rjmp	.-194    	; 0x54b4 <dir_read+0xae>
    5576:	d7 01       	movw	r26, r14
    5578:	56 96       	adiw	r26, 0x16	; 22
    557a:	4d 91       	ld	r20, X+
    557c:	5c 91       	ld	r21, X
    557e:	57 97       	sbiw	r26, 0x17	; 23
    5580:	80 81       	ld	r24, Z
    5582:	8f 73       	andi	r24, 0x3F	; 63
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	01 97       	sbiw	r24, 0x01	; 1
    5588:	bd e0       	ldi	r27, 0x0D	; 13
    558a:	b8 9f       	mul	r27, r24
    558c:	90 01       	movw	r18, r0
    558e:	b9 9f       	mul	r27, r25
    5590:	30 0d       	add	r19, r0
    5592:	11 24       	eor	r1, r1
    5594:	c1 81       	ldd	r28, Z+1	; 0x01
    5596:	d2 81       	ldd	r29, Z+2	; 0x02
    5598:	2f 3f       	cpi	r18, 0xFF	; 255
    559a:	31 05       	cpc	r19, r1
    559c:	08 f0       	brcs	.+2      	; 0x55a0 <dir_read+0x19a>
    559e:	8a cf       	rjmp	.-236    	; 0x54b4 <dir_read+0xae>
    55a0:	c9 01       	movw	r24, r18
    55a2:	01 96       	adiw	r24, 0x01	; 1
    55a4:	d9 01       	movw	r26, r18
    55a6:	aa 0f       	add	r26, r26
    55a8:	bb 1f       	adc	r27, r27
    55aa:	a4 0f       	add	r26, r20
    55ac:	b5 1f       	adc	r27, r21
    55ae:	cd 93       	st	X+, r28
    55b0:	dc 93       	st	X, r29
    55b2:	63 81       	ldd	r22, Z+3	; 0x03
    55b4:	74 81       	ldd	r23, Z+4	; 0x04
    55b6:	cd 2b       	or	r28, r29
    55b8:	09 f0       	breq	.+2      	; 0x55bc <dir_read+0x1b6>
    55ba:	e4 c0       	rjmp	.+456    	; 0x5784 <dir_read+0x37e>
    55bc:	6f 3f       	cpi	r22, 0xFF	; 255
    55be:	7f 4f       	sbci	r23, 0xFF	; 255
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <dir_read+0x1be>
    55c2:	78 cf       	rjmp	.-272    	; 0x54b4 <dir_read+0xae>
    55c4:	c5 81       	ldd	r28, Z+5	; 0x05
    55c6:	d6 81       	ldd	r29, Z+6	; 0x06
    55c8:	21 96       	adiw	r28, 0x01	; 1
    55ca:	09 f0       	breq	.+2      	; 0x55ce <dir_read+0x1c8>
    55cc:	73 cf       	rjmp	.-282    	; 0x54b4 <dir_read+0xae>
    55ce:	67 81       	ldd	r22, Z+7	; 0x07
    55d0:	70 85       	ldd	r23, Z+8	; 0x08
    55d2:	6f 3f       	cpi	r22, 0xFF	; 255
    55d4:	7f 4f       	sbci	r23, 0xFF	; 255
    55d6:	09 f0       	breq	.+2      	; 0x55da <dir_read+0x1d4>
    55d8:	6d cf       	rjmp	.-294    	; 0x54b4 <dir_read+0xae>
    55da:	c1 85       	ldd	r28, Z+9	; 0x09
    55dc:	d2 85       	ldd	r29, Z+10	; 0x0a
    55de:	21 96       	adiw	r28, 0x01	; 1
    55e0:	09 f0       	breq	.+2      	; 0x55e4 <dir_read+0x1de>
    55e2:	68 cf       	rjmp	.-304    	; 0x54b4 <dir_read+0xae>
    55e4:	66 85       	ldd	r22, Z+14	; 0x0e
    55e6:	77 85       	ldd	r23, Z+15	; 0x0f
    55e8:	6f 3f       	cpi	r22, 0xFF	; 255
    55ea:	7f 4f       	sbci	r23, 0xFF	; 255
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <dir_read+0x1ea>
    55ee:	62 cf       	rjmp	.-316    	; 0x54b4 <dir_read+0xae>
    55f0:	c0 89       	ldd	r28, Z+16	; 0x10
    55f2:	d1 89       	ldd	r29, Z+17	; 0x11
    55f4:	21 96       	adiw	r28, 0x01	; 1
    55f6:	09 f0       	breq	.+2      	; 0x55fa <dir_read+0x1f4>
    55f8:	5d cf       	rjmp	.-326    	; 0x54b4 <dir_read+0xae>
    55fa:	62 89       	ldd	r22, Z+18	; 0x12
    55fc:	73 89       	ldd	r23, Z+19	; 0x13
    55fe:	6f 3f       	cpi	r22, 0xFF	; 255
    5600:	7f 4f       	sbci	r23, 0xFF	; 255
    5602:	09 f0       	breq	.+2      	; 0x5606 <dir_read+0x200>
    5604:	57 cf       	rjmp	.-338    	; 0x54b4 <dir_read+0xae>
    5606:	c4 89       	ldd	r28, Z+20	; 0x14
    5608:	d5 89       	ldd	r29, Z+21	; 0x15
    560a:	21 96       	adiw	r28, 0x01	; 1
    560c:	09 f0       	breq	.+2      	; 0x5610 <dir_read+0x20a>
    560e:	52 cf       	rjmp	.-348    	; 0x54b4 <dir_read+0xae>
    5610:	66 89       	ldd	r22, Z+22	; 0x16
    5612:	77 89       	ldd	r23, Z+23	; 0x17
    5614:	6f 3f       	cpi	r22, 0xFF	; 255
    5616:	7f 4f       	sbci	r23, 0xFF	; 255
    5618:	09 f0       	breq	.+2      	; 0x561c <dir_read+0x216>
    561a:	4c cf       	rjmp	.-360    	; 0x54b4 <dir_read+0xae>
    561c:	c0 8d       	ldd	r28, Z+24	; 0x18
    561e:	d1 8d       	ldd	r29, Z+25	; 0x19
    5620:	21 96       	adiw	r28, 0x01	; 1
    5622:	09 f0       	breq	.+2      	; 0x5626 <dir_read+0x220>
    5624:	47 cf       	rjmp	.-370    	; 0x54b4 <dir_read+0xae>
    5626:	64 8d       	ldd	r22, Z+28	; 0x1c
    5628:	75 8d       	ldd	r23, Z+29	; 0x1d
    562a:	6f 3f       	cpi	r22, 0xFF	; 255
    562c:	7f 4f       	sbci	r23, 0xFF	; 255
    562e:	09 f0       	breq	.+2      	; 0x5632 <dir_read+0x22c>
    5630:	41 cf       	rjmp	.-382    	; 0x54b4 <dir_read+0xae>
    5632:	c6 8d       	ldd	r28, Z+30	; 0x1e
    5634:	d7 8d       	ldd	r29, Z+31	; 0x1f
    5636:	21 96       	adiw	r28, 0x01	; 1
    5638:	09 f0       	breq	.+2      	; 0x563c <dir_read+0x236>
    563a:	3c cf       	rjmp	.-392    	; 0x54b4 <dir_read+0xae>
    563c:	20 81       	ld	r18, Z
    563e:	26 ff       	sbrs	r18, 6
    5640:	0b c0       	rjmp	.+22     	; 0x5658 <dir_read+0x252>
    5642:	8f 3f       	cpi	r24, 0xFF	; 255
    5644:	91 05       	cpc	r25, r1
    5646:	09 f4       	brne	.+2      	; 0x564a <dir_read+0x244>
    5648:	35 cf       	rjmp	.-406    	; 0x54b4 <dir_read+0xae>
    564a:	88 0f       	add	r24, r24
    564c:	99 1f       	adc	r25, r25
    564e:	fa 01       	movw	r30, r20
    5650:	e8 0f       	add	r30, r24
    5652:	f9 1f       	adc	r31, r25
    5654:	10 82       	st	Z, r1
    5656:	11 82       	std	Z+1, r1	; 0x01
    5658:	3a 94       	dec	r3
    565a:	2e cf       	rjmp	.-420    	; 0x54b8 <dir_read+0xb2>
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	35 cf       	rjmp	.-406    	; 0x54ca <dir_read+0xc4>
    5660:	ee e2       	ldi	r30, 0x2E	; 46
    5662:	ce 0e       	add	r12, r30
    5664:	d1 1c       	adc	r13, r1
    5666:	01 e0       	ldi	r16, 0x01	; 1
    5668:	a3 01       	movw	r20, r6
    566a:	92 01       	movw	r18, r4
    566c:	b6 01       	movw	r22, r12
    566e:	89 81       	ldd	r24, Y+1	; 0x01
    5670:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5674:	81 11       	cpse	r24, r1
    5676:	f2 cf       	rjmp	.-28     	; 0x565c <dir_read+0x256>
    5678:	1c 82       	std	Y+4, r1	; 0x04
    567a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    567c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    567e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5680:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5682:	4e 8d       	ldd	r20, Y+30	; 0x1e
    5684:	5f 8d       	ldd	r21, Y+31	; 0x1f
    5686:	68 a1       	ldd	r22, Y+32	; 0x20
    5688:	79 a1       	ldd	r23, Y+33	; 0x21
    568a:	48 0f       	add	r20, r24
    568c:	59 1f       	adc	r21, r25
    568e:	6a 1f       	adc	r22, r26
    5690:	7b 1f       	adc	r23, r27
    5692:	44 16       	cp	r4, r20
    5694:	55 06       	cpc	r5, r21
    5696:	66 06       	cpc	r6, r22
    5698:	77 06       	cpc	r7, r23
    569a:	08 f0       	brcs	.+2      	; 0x569e <dir_read+0x298>
    569c:	ea ce       	rjmp	.-556    	; 0x5472 <dir_read+0x6c>
    569e:	1b 81       	ldd	r17, Y+3	; 0x03
    56a0:	12 30       	cpi	r17, 0x02	; 2
    56a2:	28 f4       	brcc	.+10     	; 0x56ae <dir_read+0x2a8>
    56a4:	e6 ce       	rjmp	.-564    	; 0x5472 <dir_read+0x6c>
    56a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56aa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    56ac:	bd 8d       	ldd	r27, Y+29	; 0x1d
    56ae:	48 0e       	add	r4, r24
    56b0:	59 1e       	adc	r5, r25
    56b2:	6a 1e       	adc	r6, r26
    56b4:	7b 1e       	adc	r7, r27
    56b6:	01 e0       	ldi	r16, 0x01	; 1
    56b8:	a3 01       	movw	r20, r6
    56ba:	92 01       	movw	r18, r4
    56bc:	b6 01       	movw	r22, r12
    56be:	89 81       	ldd	r24, Y+1	; 0x01
    56c0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    56c4:	11 50       	subi	r17, 0x01	; 1
    56c6:	11 30       	cpi	r17, 0x01	; 1
    56c8:	71 f7       	brne	.-36     	; 0x56a6 <dir_read+0x2a0>
    56ca:	d3 ce       	rjmp	.-602    	; 0x5472 <dir_read+0x6c>
    56cc:	83 11       	cpse	r24, r3
    56ce:	f2 ce       	rjmp	.-540    	; 0x54b4 <dir_read+0xae>
    56d0:	4f cf       	rjmp	.-354    	; 0x5570 <dir_read+0x16a>
    56d2:	bf ef       	ldi	r27, 0xFF	; 255
    56d4:	8b 1a       	sub	r8, r27
    56d6:	9b 0a       	sbc	r9, r27
    56d8:	ab 0a       	sbc	r10, r27
    56da:	bb 0a       	sbc	r11, r27
    56dc:	f7 01       	movw	r30, r14
    56de:	86 86       	std	Z+14, r8	; 0x0e
    56e0:	97 86       	std	Z+15, r9	; 0x0f
    56e2:	a0 8a       	std	Z+16, r10	; 0x10
    56e4:	b1 8a       	std	Z+17, r11	; 0x11
    56e6:	42 85       	ldd	r20, Z+10	; 0x0a
    56e8:	53 85       	ldd	r21, Z+11	; 0x0b
    56ea:	64 85       	ldd	r22, Z+12	; 0x0c
    56ec:	75 85       	ldd	r23, Z+13	; 0x0d
    56ee:	41 15       	cp	r20, r1
    56f0:	51 05       	cpc	r21, r1
    56f2:	61 05       	cpc	r22, r1
    56f4:	71 05       	cpc	r23, r1
    56f6:	d9 f4       	brne	.+54     	; 0x572e <dir_read+0x328>
    56f8:	c0 81       	ld	r28, Z
    56fa:	d1 81       	ldd	r29, Z+1	; 0x01
    56fc:	88 85       	ldd	r24, Y+8	; 0x08
    56fe:	99 85       	ldd	r25, Y+9	; 0x09
    5700:	08 17       	cp	r16, r24
    5702:	19 07       	cpc	r17, r25
    5704:	08 f0       	brcs	.+2      	; 0x5708 <dir_read+0x302>
    5706:	e0 ce       	rjmp	.-576    	; 0x54c8 <dir_read+0xc2>
    5708:	d7 01       	movw	r26, r14
    570a:	14 96       	adiw	r26, 0x04	; 4
    570c:	0d 93       	st	X+, r16
    570e:	1c 93       	st	X, r17
    5710:	15 97       	sbiw	r26, 0x05	; 5
    5712:	ce 01       	movw	r24, r28
    5714:	8e 96       	adiw	r24, 0x2e	; 46
    5716:	52 96       	adiw	r26, 0x12	; 18
    5718:	8d 93       	st	X+, r24
    571a:	9c 93       	st	X, r25
    571c:	53 97       	sbiw	r26, 0x13	; 19
    571e:	81 14       	cp	r8, r1
    5720:	91 04       	cpc	r9, r1
    5722:	a1 04       	cpc	r10, r1
    5724:	b1 04       	cpc	r11, r1
    5726:	09 f0       	breq	.+2      	; 0x572a <dir_read+0x324>
    5728:	94 ce       	rjmp	.-728    	; 0x5452 <dir_read+0x4c>
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	d3 ce       	rjmp	.-602    	; 0x54d4 <dir_read+0xce>
    572e:	c0 81       	ld	r28, Z
    5730:	d1 81       	ldd	r29, Z+1	; 0x01
    5732:	8a 81       	ldd	r24, Y+2	; 0x02
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	98 01       	movw	r18, r16
    573a:	32 95       	swap	r19
    573c:	22 95       	swap	r18
    573e:	2f 70       	andi	r18, 0x0F	; 15
    5740:	23 27       	eor	r18, r19
    5742:	3f 70       	andi	r19, 0x0F	; 15
    5744:	23 27       	eor	r18, r19
    5746:	82 23       	and	r24, r18
    5748:	93 23       	and	r25, r19
    574a:	89 2b       	or	r24, r25
    574c:	e9 f6       	brne	.-70     	; 0x5708 <dir_read+0x302>
    574e:	42 30       	cpi	r20, 0x02	; 2
    5750:	51 05       	cpc	r21, r1
    5752:	61 05       	cpc	r22, r1
    5754:	71 05       	cpc	r23, r1
    5756:	50 f0       	brcs	.+20     	; 0x576c <dir_read+0x366>
    5758:	8e 89       	ldd	r24, Y+22	; 0x16
    575a:	9f 89       	ldd	r25, Y+23	; 0x17
    575c:	a8 8d       	ldd	r26, Y+24	; 0x18
    575e:	b9 8d       	ldd	r27, Y+25	; 0x19
    5760:	48 17       	cp	r20, r24
    5762:	59 07       	cpc	r21, r25
    5764:	6a 07       	cpc	r22, r26
    5766:	7b 07       	cpc	r23, r27
    5768:	08 f4       	brcc	.+2      	; 0x576c <dir_read+0x366>
    576a:	f6 c0       	rjmp	.+492    	; 0x5958 <dir_read+0x552>
    576c:	82 e0       	ldi	r24, 0x02	; 2
    576e:	ad ce       	rjmp	.-678    	; 0x54ca <dir_read+0xc4>
    5770:	33 20       	and	r3, r3
    5772:	09 f4       	brne	.+2      	; 0x5776 <dir_read+0x370>
    5774:	bb c0       	rjmp	.+374    	; 0x58ec <dir_read+0x4e6>
    5776:	8f ef       	ldi	r24, 0xFF	; 255
    5778:	9f ef       	ldi	r25, 0xFF	; 255
    577a:	f7 01       	movw	r30, r14
    577c:	80 8f       	std	Z+24, r24	; 0x18
    577e:	91 8f       	std	Z+25, r25	; 0x19
    5780:	80 e0       	ldi	r24, 0x00	; 0
    5782:	a8 ce       	rjmp	.-688    	; 0x54d4 <dir_read+0xce>
    5784:	8f 3f       	cpi	r24, 0xFF	; 255
    5786:	91 05       	cpc	r25, r1
    5788:	09 f4       	brne	.+2      	; 0x578c <dir_read+0x386>
    578a:	94 ce       	rjmp	.-728    	; 0x54b4 <dir_read+0xae>
    578c:	89 01       	movw	r16, r18
    578e:	0e 5f       	subi	r16, 0xFE	; 254
    5790:	1f 4f       	sbci	r17, 0xFF	; 255
    5792:	88 0f       	add	r24, r24
    5794:	99 1f       	adc	r25, r25
    5796:	da 01       	movw	r26, r20
    5798:	a8 0f       	add	r26, r24
    579a:	b9 1f       	adc	r27, r25
    579c:	6d 93       	st	X+, r22
    579e:	7c 93       	st	X, r23
    57a0:	11 97       	sbiw	r26, 0x01	; 1
    57a2:	c5 81       	ldd	r28, Z+5	; 0x05
    57a4:	d6 81       	ldd	r29, Z+6	; 0x06
    57a6:	67 2b       	or	r22, r23
    57a8:	09 f4       	brne	.+2      	; 0x57ac <dir_read+0x3a6>
    57aa:	1f c1       	rjmp	.+574    	; 0x59ea <dir_read+0x5e4>
    57ac:	0f 3f       	cpi	r16, 0xFF	; 255
    57ae:	11 05       	cpc	r17, r1
    57b0:	09 f4       	brne	.+2      	; 0x57b4 <dir_read+0x3ae>
    57b2:	80 ce       	rjmp	.-768    	; 0x54b4 <dir_read+0xae>
    57b4:	c9 01       	movw	r24, r18
    57b6:	03 96       	adiw	r24, 0x03	; 3
    57b8:	12 96       	adiw	r26, 0x02	; 2
    57ba:	cd 93       	st	X+, r28
    57bc:	dc 93       	st	X, r29
    57be:	13 97       	sbiw	r26, 0x03	; 3
    57c0:	67 81       	ldd	r22, Z+7	; 0x07
    57c2:	70 85       	ldd	r23, Z+8	; 0x08
    57c4:	cd 2b       	or	r28, r29
    57c6:	09 f4       	brne	.+2      	; 0x57ca <dir_read+0x3c4>
    57c8:	04 cf       	rjmp	.-504    	; 0x55d2 <dir_read+0x1cc>
    57ca:	8f 3f       	cpi	r24, 0xFF	; 255
    57cc:	91 05       	cpc	r25, r1
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <dir_read+0x3cc>
    57d0:	71 ce       	rjmp	.-798    	; 0x54b4 <dir_read+0xae>
    57d2:	c9 01       	movw	r24, r18
    57d4:	04 96       	adiw	r24, 0x04	; 4
    57d6:	14 96       	adiw	r26, 0x04	; 4
    57d8:	6d 93       	st	X+, r22
    57da:	7c 93       	st	X, r23
    57dc:	15 97       	sbiw	r26, 0x05	; 5
    57de:	c1 85       	ldd	r28, Z+9	; 0x09
    57e0:	d2 85       	ldd	r29, Z+10	; 0x0a
    57e2:	67 2b       	or	r22, r23
    57e4:	09 f4       	brne	.+2      	; 0x57e8 <dir_read+0x3e2>
    57e6:	fb ce       	rjmp	.-522    	; 0x55de <dir_read+0x1d8>
    57e8:	8f 3f       	cpi	r24, 0xFF	; 255
    57ea:	91 05       	cpc	r25, r1
    57ec:	09 f4       	brne	.+2      	; 0x57f0 <dir_read+0x3ea>
    57ee:	62 ce       	rjmp	.-828    	; 0x54b4 <dir_read+0xae>
    57f0:	c9 01       	movw	r24, r18
    57f2:	05 96       	adiw	r24, 0x05	; 5
    57f4:	16 96       	adiw	r26, 0x06	; 6
    57f6:	cd 93       	st	X+, r28
    57f8:	dc 93       	st	X, r29
    57fa:	17 97       	sbiw	r26, 0x07	; 7
    57fc:	66 85       	ldd	r22, Z+14	; 0x0e
    57fe:	77 85       	ldd	r23, Z+15	; 0x0f
    5800:	cd 2b       	or	r28, r29
    5802:	09 f4       	brne	.+2      	; 0x5806 <dir_read+0x400>
    5804:	f1 ce       	rjmp	.-542    	; 0x55e8 <dir_read+0x1e2>
    5806:	8f 3f       	cpi	r24, 0xFF	; 255
    5808:	91 05       	cpc	r25, r1
    580a:	09 f4       	brne	.+2      	; 0x580e <dir_read+0x408>
    580c:	53 ce       	rjmp	.-858    	; 0x54b4 <dir_read+0xae>
    580e:	c9 01       	movw	r24, r18
    5810:	06 96       	adiw	r24, 0x06	; 6
    5812:	18 96       	adiw	r26, 0x08	; 8
    5814:	6d 93       	st	X+, r22
    5816:	7c 93       	st	X, r23
    5818:	19 97       	sbiw	r26, 0x09	; 9
    581a:	c0 89       	ldd	r28, Z+16	; 0x10
    581c:	d1 89       	ldd	r29, Z+17	; 0x11
    581e:	67 2b       	or	r22, r23
    5820:	09 f4       	brne	.+2      	; 0x5824 <dir_read+0x41e>
    5822:	e8 ce       	rjmp	.-560    	; 0x55f4 <dir_read+0x1ee>
    5824:	8f 3f       	cpi	r24, 0xFF	; 255
    5826:	91 05       	cpc	r25, r1
    5828:	09 f4       	brne	.+2      	; 0x582c <dir_read+0x426>
    582a:	44 ce       	rjmp	.-888    	; 0x54b4 <dir_read+0xae>
    582c:	c9 01       	movw	r24, r18
    582e:	07 96       	adiw	r24, 0x07	; 7
    5830:	1a 96       	adiw	r26, 0x0a	; 10
    5832:	cd 93       	st	X+, r28
    5834:	dc 93       	st	X, r29
    5836:	1b 97       	sbiw	r26, 0x0b	; 11
    5838:	62 89       	ldd	r22, Z+18	; 0x12
    583a:	73 89       	ldd	r23, Z+19	; 0x13
    583c:	cd 2b       	or	r28, r29
    583e:	09 f4       	brne	.+2      	; 0x5842 <dir_read+0x43c>
    5840:	de ce       	rjmp	.-580    	; 0x55fe <dir_read+0x1f8>
    5842:	8f 3f       	cpi	r24, 0xFF	; 255
    5844:	91 05       	cpc	r25, r1
    5846:	09 f4       	brne	.+2      	; 0x584a <dir_read+0x444>
    5848:	35 ce       	rjmp	.-918    	; 0x54b4 <dir_read+0xae>
    584a:	c9 01       	movw	r24, r18
    584c:	08 96       	adiw	r24, 0x08	; 8
    584e:	1c 96       	adiw	r26, 0x0c	; 12
    5850:	6d 93       	st	X+, r22
    5852:	7c 93       	st	X, r23
    5854:	1d 97       	sbiw	r26, 0x0d	; 13
    5856:	c4 89       	ldd	r28, Z+20	; 0x14
    5858:	d5 89       	ldd	r29, Z+21	; 0x15
    585a:	67 2b       	or	r22, r23
    585c:	09 f4       	brne	.+2      	; 0x5860 <dir_read+0x45a>
    585e:	d5 ce       	rjmp	.-598    	; 0x560a <dir_read+0x204>
    5860:	8f 3f       	cpi	r24, 0xFF	; 255
    5862:	91 05       	cpc	r25, r1
    5864:	09 f4       	brne	.+2      	; 0x5868 <dir_read+0x462>
    5866:	26 ce       	rjmp	.-948    	; 0x54b4 <dir_read+0xae>
    5868:	c9 01       	movw	r24, r18
    586a:	09 96       	adiw	r24, 0x09	; 9
    586c:	1e 96       	adiw	r26, 0x0e	; 14
    586e:	cd 93       	st	X+, r28
    5870:	dc 93       	st	X, r29
    5872:	1f 97       	sbiw	r26, 0x0f	; 15
    5874:	66 89       	ldd	r22, Z+22	; 0x16
    5876:	77 89       	ldd	r23, Z+23	; 0x17
    5878:	cd 2b       	or	r28, r29
    587a:	09 f4       	brne	.+2      	; 0x587e <dir_read+0x478>
    587c:	cb ce       	rjmp	.-618    	; 0x5614 <dir_read+0x20e>
    587e:	8f 3f       	cpi	r24, 0xFF	; 255
    5880:	91 05       	cpc	r25, r1
    5882:	09 f4       	brne	.+2      	; 0x5886 <dir_read+0x480>
    5884:	17 ce       	rjmp	.-978    	; 0x54b4 <dir_read+0xae>
    5886:	c9 01       	movw	r24, r18
    5888:	0a 96       	adiw	r24, 0x0a	; 10
    588a:	50 96       	adiw	r26, 0x10	; 16
    588c:	6d 93       	st	X+, r22
    588e:	7c 93       	st	X, r23
    5890:	51 97       	sbiw	r26, 0x11	; 17
    5892:	c0 8d       	ldd	r28, Z+24	; 0x18
    5894:	d1 8d       	ldd	r29, Z+25	; 0x19
    5896:	67 2b       	or	r22, r23
    5898:	09 f4       	brne	.+2      	; 0x589c <dir_read+0x496>
    589a:	c2 ce       	rjmp	.-636    	; 0x5620 <dir_read+0x21a>
    589c:	8f 3f       	cpi	r24, 0xFF	; 255
    589e:	91 05       	cpc	r25, r1
    58a0:	09 f4       	brne	.+2      	; 0x58a4 <dir_read+0x49e>
    58a2:	08 ce       	rjmp	.-1008   	; 0x54b4 <dir_read+0xae>
    58a4:	c9 01       	movw	r24, r18
    58a6:	0b 96       	adiw	r24, 0x0b	; 11
    58a8:	52 96       	adiw	r26, 0x12	; 18
    58aa:	cd 93       	st	X+, r28
    58ac:	dc 93       	st	X, r29
    58ae:	53 97       	sbiw	r26, 0x13	; 19
    58b0:	64 8d       	ldd	r22, Z+28	; 0x1c
    58b2:	75 8d       	ldd	r23, Z+29	; 0x1d
    58b4:	cd 2b       	or	r28, r29
    58b6:	09 f4       	brne	.+2      	; 0x58ba <dir_read+0x4b4>
    58b8:	b8 ce       	rjmp	.-656    	; 0x562a <dir_read+0x224>
    58ba:	8f 3f       	cpi	r24, 0xFF	; 255
    58bc:	91 05       	cpc	r25, r1
    58be:	09 f4       	brne	.+2      	; 0x58c2 <dir_read+0x4bc>
    58c0:	f9 cd       	rjmp	.-1038   	; 0x54b4 <dir_read+0xae>
    58c2:	c9 01       	movw	r24, r18
    58c4:	0c 96       	adiw	r24, 0x0c	; 12
    58c6:	54 96       	adiw	r26, 0x14	; 20
    58c8:	6d 93       	st	X+, r22
    58ca:	7c 93       	st	X, r23
    58cc:	55 97       	sbiw	r26, 0x15	; 21
    58ce:	c6 8d       	ldd	r28, Z+30	; 0x1e
    58d0:	d7 8d       	ldd	r29, Z+31	; 0x1f
    58d2:	67 2b       	or	r22, r23
    58d4:	09 f4       	brne	.+2      	; 0x58d8 <dir_read+0x4d2>
    58d6:	af ce       	rjmp	.-674    	; 0x5636 <dir_read+0x230>
    58d8:	8f 3f       	cpi	r24, 0xFF	; 255
    58da:	91 05       	cpc	r25, r1
    58dc:	09 f4       	brne	.+2      	; 0x58e0 <dir_read+0x4da>
    58de:	ea cd       	rjmp	.-1068   	; 0x54b4 <dir_read+0xae>
    58e0:	01 96       	adiw	r24, 0x01	; 1
    58e2:	56 96       	adiw	r26, 0x16	; 22
    58e4:	cd 93       	st	X+, r28
    58e6:	dc 93       	st	X, r29
    58e8:	57 97       	sbiw	r26, 0x17	; 23
    58ea:	a8 ce       	rjmp	.-688    	; 0x563c <dir_read+0x236>
    58ec:	80 fb       	bst	r24, 0
    58ee:	87 95       	ror	r24
    58f0:	87 f9       	bld	r24, 7
    58f2:	91 81       	ldd	r25, Z+1	; 0x01
    58f4:	89 0f       	add	r24, r25
    58f6:	80 fb       	bst	r24, 0
    58f8:	87 95       	ror	r24
    58fa:	87 f9       	bld	r24, 7
    58fc:	92 81       	ldd	r25, Z+2	; 0x02
    58fe:	98 0f       	add	r25, r24
    5900:	90 fb       	bst	r25, 0
    5902:	97 95       	ror	r25
    5904:	97 f9       	bld	r25, 7
    5906:	83 81       	ldd	r24, Z+3	; 0x03
    5908:	98 0f       	add	r25, r24
    590a:	90 fb       	bst	r25, 0
    590c:	97 95       	ror	r25
    590e:	97 f9       	bld	r25, 7
    5910:	84 81       	ldd	r24, Z+4	; 0x04
    5912:	98 0f       	add	r25, r24
    5914:	90 fb       	bst	r25, 0
    5916:	97 95       	ror	r25
    5918:	97 f9       	bld	r25, 7
    591a:	85 81       	ldd	r24, Z+5	; 0x05
    591c:	98 0f       	add	r25, r24
    591e:	90 fb       	bst	r25, 0
    5920:	97 95       	ror	r25
    5922:	97 f9       	bld	r25, 7
    5924:	86 81       	ldd	r24, Z+6	; 0x06
    5926:	98 0f       	add	r25, r24
    5928:	90 fb       	bst	r25, 0
    592a:	97 95       	ror	r25
    592c:	97 f9       	bld	r25, 7
    592e:	87 81       	ldd	r24, Z+7	; 0x07
    5930:	98 0f       	add	r25, r24
    5932:	90 fb       	bst	r25, 0
    5934:	97 95       	ror	r25
    5936:	97 f9       	bld	r25, 7
    5938:	80 85       	ldd	r24, Z+8	; 0x08
    593a:	89 0f       	add	r24, r25
    593c:	98 2f       	mov	r25, r24
    593e:	90 fb       	bst	r25, 0
    5940:	97 95       	ror	r25
    5942:	97 f9       	bld	r25, 7
    5944:	81 85       	ldd	r24, Z+9	; 0x09
    5946:	89 0f       	add	r24, r25
    5948:	80 fb       	bst	r24, 0
    594a:	87 95       	ror	r24
    594c:	87 f9       	bld	r24, 7
    594e:	92 85       	ldd	r25, Z+10	; 0x0a
    5950:	89 0f       	add	r24, r25
    5952:	82 11       	cpse	r24, r2
    5954:	10 cf       	rjmp	.-480    	; 0x5776 <dir_read+0x370>
    5956:	e9 ce       	rjmp	.-558    	; 0x572a <dir_read+0x324>
    5958:	ce 01       	movw	r24, r28
    595a:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
    595e:	62 30       	cpi	r22, 0x02	; 2
    5960:	71 05       	cpc	r23, r1
    5962:	81 05       	cpc	r24, r1
    5964:	91 05       	cpc	r25, r1
    5966:	08 f4       	brcc	.+2      	; 0x596a <dir_read+0x564>
    5968:	01 cf       	rjmp	.-510    	; 0x576c <dir_read+0x366>
    596a:	6f 3f       	cpi	r22, 0xFF	; 255
    596c:	bf ef       	ldi	r27, 0xFF	; 255
    596e:	7b 07       	cpc	r23, r27
    5970:	8b 07       	cpc	r24, r27
    5972:	9b 07       	cpc	r25, r27
    5974:	09 f4       	brne	.+2      	; 0x5978 <dir_read+0x572>
    5976:	72 ce       	rjmp	.-796    	; 0x565c <dir_read+0x256>
    5978:	f7 01       	movw	r30, r14
    597a:	c0 81       	ld	r28, Z
    597c:	d1 81       	ldd	r29, Z+1	; 0x01
    597e:	8e 88       	ldd	r8, Y+22	; 0x16
    5980:	9f 88       	ldd	r9, Y+23	; 0x17
    5982:	a8 8c       	ldd	r10, Y+24	; 0x18
    5984:	b9 8c       	ldd	r11, Y+25	; 0x19
    5986:	68 15       	cp	r22, r8
    5988:	79 05       	cpc	r23, r9
    598a:	8a 05       	cpc	r24, r10
    598c:	9b 05       	cpc	r25, r11
    598e:	08 f0       	brcs	.+2      	; 0x5992 <dir_read+0x58c>
    5990:	9b cd       	rjmp	.-1226   	; 0x54c8 <dir_read+0xc2>
    5992:	62 87       	std	Z+10, r22	; 0x0a
    5994:	73 87       	std	Z+11, r23	; 0x0b
    5996:	84 87       	std	Z+12, r24	; 0x0c
    5998:	95 87       	std	Z+13, r25	; 0x0d
    599a:	9b 01       	movw	r18, r22
    599c:	ac 01       	movw	r20, r24
    599e:	22 50       	subi	r18, 0x02	; 2
    59a0:	31 09       	sbc	r19, r1
    59a2:	41 09       	sbc	r20, r1
    59a4:	51 09       	sbc	r21, r1
    59a6:	8e 89       	ldd	r24, Y+22	; 0x16
    59a8:	9f 89       	ldd	r25, Y+23	; 0x17
    59aa:	a8 8d       	ldd	r26, Y+24	; 0x18
    59ac:	b9 8d       	ldd	r27, Y+25	; 0x19
    59ae:	02 97       	sbiw	r24, 0x02	; 2
    59b0:	a1 09       	sbc	r26, r1
    59b2:	b1 09       	sbc	r27, r1
    59b4:	28 17       	cp	r18, r24
    59b6:	39 07       	cpc	r19, r25
    59b8:	4a 07       	cpc	r20, r26
    59ba:	5b 07       	cpc	r21, r27
    59bc:	90 f4       	brcc	.+36     	; 0x59e2 <dir_read+0x5dc>
    59be:	aa 81       	ldd	r26, Y+2	; 0x02
    59c0:	b0 e0       	ldi	r27, 0x00	; 0
    59c2:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    59c6:	8e a0       	ldd	r8, Y+38	; 0x26
    59c8:	9f a0       	ldd	r9, Y+39	; 0x27
    59ca:	a8 a4       	ldd	r10, Y+40	; 0x28
    59cc:	b9 a4       	ldd	r11, Y+41	; 0x29
    59ce:	86 0e       	add	r8, r22
    59d0:	97 1e       	adc	r9, r23
    59d2:	a8 1e       	adc	r10, r24
    59d4:	b9 1e       	adc	r11, r25
    59d6:	f7 01       	movw	r30, r14
    59d8:	86 86       	std	Z+14, r8	; 0x0e
    59da:	97 86       	std	Z+15, r9	; 0x0f
    59dc:	a0 8a       	std	Z+16, r10	; 0x10
    59de:	b1 8a       	std	Z+17, r11	; 0x11
    59e0:	93 ce       	rjmp	.-730    	; 0x5708 <dir_read+0x302>
    59e2:	81 2c       	mov	r8, r1
    59e4:	91 2c       	mov	r9, r1
    59e6:	54 01       	movw	r10, r8
    59e8:	f6 cf       	rjmp	.-20     	; 0x59d6 <dir_read+0x5d0>
    59ea:	c8 01       	movw	r24, r16
    59ec:	ed cd       	rjmp	.-1062   	; 0x55c8 <dir_read+0x1c2>

000059ee <put_fat.part.4>:
    59ee:	2f 92       	push	r2
    59f0:	3f 92       	push	r3
    59f2:	4f 92       	push	r4
    59f4:	5f 92       	push	r5
    59f6:	6f 92       	push	r6
    59f8:	7f 92       	push	r7
    59fa:	8f 92       	push	r8
    59fc:	9f 92       	push	r9
    59fe:	af 92       	push	r10
    5a00:	bf 92       	push	r11
    5a02:	cf 92       	push	r12
    5a04:	df 92       	push	r13
    5a06:	ef 92       	push	r14
    5a08:	ff 92       	push	r15
    5a0a:	0f 93       	push	r16
    5a0c:	1f 93       	push	r17
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	cd b7       	in	r28, 0x3d	; 61
    5a14:	de b7       	in	r29, 0x3e	; 62
    5a16:	29 97       	sbiw	r28, 0x09	; 9
    5a18:	cd bf       	out	0x3d, r28	; 61
    5a1a:	de bf       	out	0x3e, r29	; 62
    5a1c:	88 87       	std	Y+8, r24	; 0x08
    5a1e:	99 87       	std	Y+9, r25	; 0x09
    5a20:	6a 01       	movw	r12, r20
    5a22:	7b 01       	movw	r14, r22
    5a24:	0a 83       	std	Y+2, r16	; 0x02
    5a26:	1b 83       	std	Y+3, r17	; 0x03
    5a28:	2c 83       	std	Y+4, r18	; 0x04
    5a2a:	3d 83       	std	Y+5, r19	; 0x05
    5a2c:	dc 01       	movw	r26, r24
    5a2e:	8c 91       	ld	r24, X
    5a30:	82 30       	cpi	r24, 0x02	; 2
    5a32:	09 f4       	brne	.+2      	; 0x5a36 <put_fat.part.4+0x48>
    5a34:	5d c1       	rjmp	.+698    	; 0x5cf0 <put_fat.part.4+0x302>
    5a36:	83 30       	cpi	r24, 0x03	; 3
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <put_fat.part.4+0x4e>
    5a3a:	e9 c0       	rjmp	.+466    	; 0x5c0e <put_fat.part.4+0x220>
    5a3c:	81 30       	cpi	r24, 0x01	; 1
    5a3e:	f1 f0       	breq	.+60     	; 0x5a7c <put_fat.part.4+0x8e>
    5a40:	f2 e0       	ldi	r31, 0x02	; 2
    5a42:	f9 83       	std	Y+1, r31	; 0x01
    5a44:	81 e0       	ldi	r24, 0x01	; 1
    5a46:	a8 85       	ldd	r26, Y+8	; 0x08
    5a48:	b9 85       	ldd	r27, Y+9	; 0x09
    5a4a:	14 96       	adiw	r26, 0x04	; 4
    5a4c:	8c 93       	st	X, r24
    5a4e:	89 81       	ldd	r24, Y+1	; 0x01
    5a50:	29 96       	adiw	r28, 0x09	; 9
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	de bf       	out	0x3e, r29	; 62
    5a56:	df 91       	pop	r29
    5a58:	cf 91       	pop	r28
    5a5a:	1f 91       	pop	r17
    5a5c:	0f 91       	pop	r16
    5a5e:	ff 90       	pop	r15
    5a60:	ef 90       	pop	r14
    5a62:	df 90       	pop	r13
    5a64:	cf 90       	pop	r12
    5a66:	bf 90       	pop	r11
    5a68:	af 90       	pop	r10
    5a6a:	9f 90       	pop	r9
    5a6c:	8f 90       	pop	r8
    5a6e:	7f 90       	pop	r7
    5a70:	6f 90       	pop	r6
    5a72:	5f 90       	pop	r5
    5a74:	4f 90       	pop	r4
    5a76:	3f 90       	pop	r3
    5a78:	2f 90       	pop	r2
    5a7a:	08 95       	ret
    5a7c:	5a 01       	movw	r10, r20
    5a7e:	b6 94       	lsr	r11
    5a80:	a7 94       	ror	r10
    5a82:	a4 0e       	add	r10, r20
    5a84:	b5 1e       	adc	r11, r21
    5a86:	c5 01       	movw	r24, r10
    5a88:	89 2f       	mov	r24, r25
    5a8a:	99 27       	eor	r25, r25
    5a8c:	86 95       	lsr	r24
    5a8e:	5e 96       	adiw	r26, 0x1e	; 30
    5a90:	4d 91       	ld	r20, X+
    5a92:	5d 91       	ld	r21, X+
    5a94:	6d 91       	ld	r22, X+
    5a96:	7c 91       	ld	r23, X
    5a98:	91 97       	sbiw	r26, 0x21	; 33
    5a9a:	48 0f       	add	r20, r24
    5a9c:	59 1f       	adc	r21, r25
    5a9e:	61 1d       	adc	r22, r1
    5aa0:	71 1d       	adc	r23, r1
    5aa2:	cd 01       	movw	r24, r26
    5aa4:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    5aa8:	89 83       	std	Y+1, r24	; 0x01
    5aaa:	81 11       	cpse	r24, r1
    5aac:	cb cf       	rjmp	.-106    	; 0x5a44 <put_fat.part.4+0x56>
    5aae:	f5 01       	movw	r30, r10
    5ab0:	f1 70       	andi	r31, 0x01	; 1
    5ab2:	26 01       	movw	r4, r12
    5ab4:	37 01       	movw	r6, r14
    5ab6:	b1 e0       	ldi	r27, 0x01	; 1
    5ab8:	4b 22       	and	r4, r27
    5aba:	55 24       	eor	r5, r5
    5abc:	66 24       	eor	r6, r6
    5abe:	77 24       	eor	r7, r7
    5ac0:	c0 fe       	sbrs	r12, 0
    5ac2:	e5 c1       	rjmp	.+970    	; 0x5e8e <put_fat.part.4+0x4a0>
    5ac4:	28 85       	ldd	r18, Y+8	; 0x08
    5ac6:	39 85       	ldd	r19, Y+9	; 0x09
    5ac8:	e2 0f       	add	r30, r18
    5aca:	f3 1f       	adc	r31, r19
    5acc:	86 a5       	ldd	r24, Z+46	; 0x2e
    5ace:	28 2f       	mov	r18, r24
    5ad0:	2f 70       	andi	r18, 0x0F	; 15
    5ad2:	4a 81       	ldd	r20, Y+2	; 0x02
    5ad4:	30 e1       	ldi	r19, 0x10	; 16
    5ad6:	43 9f       	mul	r20, r19
    5ad8:	c0 01       	movw	r24, r0
    5ada:	11 24       	eor	r1, r1
    5adc:	82 2b       	or	r24, r18
    5ade:	a8 85       	ldd	r26, Y+8	; 0x08
    5ae0:	b9 85       	ldd	r27, Y+9	; 0x09
    5ae2:	86 a7       	std	Z+46, r24	; 0x2e
    5ae4:	15 01       	movw	r2, r10
    5ae6:	7f ef       	ldi	r23, 0xFF	; 255
    5ae8:	27 1a       	sub	r2, r23
    5aea:	37 0a       	sbc	r3, r23
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	14 96       	adiw	r26, 0x04	; 4
    5af0:	8c 93       	st	X, r24
    5af2:	14 97       	sbiw	r26, 0x04	; 4
    5af4:	c1 01       	movw	r24, r2
    5af6:	89 2f       	mov	r24, r25
    5af8:	99 27       	eor	r25, r25
    5afa:	86 95       	lsr	r24
    5afc:	5e 96       	adiw	r26, 0x1e	; 30
    5afe:	cd 90       	ld	r12, X+
    5b00:	dd 90       	ld	r13, X+
    5b02:	ed 90       	ld	r14, X+
    5b04:	fc 90       	ld	r15, X
    5b06:	91 97       	sbiw	r26, 0x21	; 33
    5b08:	c8 0e       	add	r12, r24
    5b0a:	d9 1e       	adc	r13, r25
    5b0c:	e1 1c       	adc	r14, r1
    5b0e:	f1 1c       	adc	r15, r1
    5b10:	9a 96       	adiw	r26, 0x2a	; 42
    5b12:	8d 90       	ld	r8, X+
    5b14:	9d 90       	ld	r9, X+
    5b16:	ad 90       	ld	r10, X+
    5b18:	bc 90       	ld	r11, X
    5b1a:	9d 97       	sbiw	r26, 0x2d	; 45
    5b1c:	c8 14       	cp	r12, r8
    5b1e:	d9 04       	cpc	r13, r9
    5b20:	ea 04       	cpc	r14, r10
    5b22:	fb 04       	cpc	r15, r11
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <put_fat.part.4+0x13a>
    5b26:	5a c0       	rjmp	.+180    	; 0x5bdc <put_fat.part.4+0x1ee>
    5b28:	fd 01       	movw	r30, r26
    5b2a:	9e 96       	adiw	r26, 0x2e	; 46
    5b2c:	ae 83       	std	Y+6, r26	; 0x06
    5b2e:	bf 83       	std	Y+7, r27	; 0x07
    5b30:	01 e0       	ldi	r16, 0x01	; 1
    5b32:	a5 01       	movw	r20, r10
    5b34:	94 01       	movw	r18, r8
    5b36:	bd 01       	movw	r22, r26
    5b38:	81 81       	ldd	r24, Z+1	; 0x01
    5b3a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5b3e:	81 11       	cpse	r24, r1
    5b40:	a3 c1       	rjmp	.+838    	; 0x5e88 <put_fat.part.4+0x49a>
    5b42:	a8 85       	ldd	r26, Y+8	; 0x08
    5b44:	b9 85       	ldd	r27, Y+9	; 0x09
    5b46:	14 96       	adiw	r26, 0x04	; 4
    5b48:	1c 92       	st	X, r1
    5b4a:	14 97       	sbiw	r26, 0x04	; 4
    5b4c:	fd 01       	movw	r30, r26
    5b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5b50:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b52:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5b54:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5b56:	46 8d       	ldd	r20, Z+30	; 0x1e
    5b58:	57 8d       	ldd	r21, Z+31	; 0x1f
    5b5a:	60 a1       	ldd	r22, Z+32	; 0x20
    5b5c:	71 a1       	ldd	r23, Z+33	; 0x21
    5b5e:	48 0f       	add	r20, r24
    5b60:	59 1f       	adc	r21, r25
    5b62:	6a 1f       	adc	r22, r26
    5b64:	7b 1f       	adc	r23, r27
    5b66:	84 16       	cp	r8, r20
    5b68:	95 06       	cpc	r9, r21
    5b6a:	a6 06       	cpc	r10, r22
    5b6c:	b7 06       	cpc	r11, r23
    5b6e:	f0 f4       	brcc	.+60     	; 0x5bac <put_fat.part.4+0x1be>
    5b70:	e8 85       	ldd	r30, Y+8	; 0x08
    5b72:	f9 85       	ldd	r31, Y+9	; 0x09
    5b74:	13 81       	ldd	r17, Z+3	; 0x03
    5b76:	12 30       	cpi	r17, 0x02	; 2
    5b78:	38 f4       	brcc	.+14     	; 0x5b88 <put_fat.part.4+0x19a>
    5b7a:	18 c0       	rjmp	.+48     	; 0x5bac <put_fat.part.4+0x1be>
    5b7c:	e8 85       	ldd	r30, Y+8	; 0x08
    5b7e:	f9 85       	ldd	r31, Y+9	; 0x09
    5b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    5b82:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b84:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5b86:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5b88:	88 0e       	add	r8, r24
    5b8a:	99 1e       	adc	r9, r25
    5b8c:	aa 1e       	adc	r10, r26
    5b8e:	bb 1e       	adc	r11, r27
    5b90:	01 e0       	ldi	r16, 0x01	; 1
    5b92:	a5 01       	movw	r20, r10
    5b94:	94 01       	movw	r18, r8
    5b96:	6e 81       	ldd	r22, Y+6	; 0x06
    5b98:	7f 81       	ldd	r23, Y+7	; 0x07
    5b9a:	a8 85       	ldd	r26, Y+8	; 0x08
    5b9c:	b9 85       	ldd	r27, Y+9	; 0x09
    5b9e:	11 96       	adiw	r26, 0x01	; 1
    5ba0:	8c 91       	ld	r24, X
    5ba2:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5ba6:	11 50       	subi	r17, 0x01	; 1
    5ba8:	11 30       	cpi	r17, 0x01	; 1
    5baa:	41 f7       	brne	.-48     	; 0x5b7c <put_fat.part.4+0x18e>
    5bac:	c1 14       	cp	r12, r1
    5bae:	d1 04       	cpc	r13, r1
    5bb0:	e1 04       	cpc	r14, r1
    5bb2:	f1 04       	cpc	r15, r1
    5bb4:	99 f0       	breq	.+38     	; 0x5bdc <put_fat.part.4+0x1ee>
    5bb6:	01 e0       	ldi	r16, 0x01	; 1
    5bb8:	a7 01       	movw	r20, r14
    5bba:	96 01       	movw	r18, r12
    5bbc:	6e 81       	ldd	r22, Y+6	; 0x06
    5bbe:	7f 81       	ldd	r23, Y+7	; 0x07
    5bc0:	a8 85       	ldd	r26, Y+8	; 0x08
    5bc2:	b9 85       	ldd	r27, Y+9	; 0x09
    5bc4:	11 96       	adiw	r26, 0x01	; 1
    5bc6:	8c 91       	ld	r24, X
    5bc8:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    5bcc:	81 11       	cpse	r24, r1
    5bce:	5c c1       	rjmp	.+696    	; 0x5e88 <put_fat.part.4+0x49a>
    5bd0:	e8 85       	ldd	r30, Y+8	; 0x08
    5bd2:	f9 85       	ldd	r31, Y+9	; 0x09
    5bd4:	c2 a6       	std	Z+42, r12	; 0x2a
    5bd6:	d3 a6       	std	Z+43, r13	; 0x2b
    5bd8:	e4 a6       	std	Z+44, r14	; 0x2c
    5bda:	f5 a6       	std	Z+45, r15	; 0x2d
    5bdc:	51 01       	movw	r10, r2
    5bde:	b1 e0       	ldi	r27, 0x01	; 1
    5be0:	bb 22       	and	r11, r27
    5be2:	45 28       	or	r4, r5
    5be4:	46 28       	or	r4, r6
    5be6:	47 28       	or	r4, r7
    5be8:	09 f4       	brne	.+2      	; 0x5bec <put_fat.part.4+0x1fe>
    5bea:	58 c1       	rjmp	.+688    	; 0x5e9c <put_fat.part.4+0x4ae>
    5bec:	8a 81       	ldd	r24, Y+2	; 0x02
    5bee:	9b 81       	ldd	r25, Y+3	; 0x03
    5bf0:	ac 81       	ldd	r26, Y+4	; 0x04
    5bf2:	bd 81       	ldd	r27, Y+5	; 0x05
    5bf4:	74 e0       	ldi	r23, 0x04	; 4
    5bf6:	b6 95       	lsr	r27
    5bf8:	a7 95       	ror	r26
    5bfa:	97 95       	ror	r25
    5bfc:	87 95       	ror	r24
    5bfe:	7a 95       	dec	r23
    5c00:	d1 f7       	brne	.-12     	; 0x5bf6 <put_fat.part.4+0x208>
    5c02:	e8 85       	ldd	r30, Y+8	; 0x08
    5c04:	f9 85       	ldd	r31, Y+9	; 0x09
    5c06:	ea 0d       	add	r30, r10
    5c08:	fb 1d       	adc	r31, r11
    5c0a:	86 a7       	std	Z+46, r24	; 0x2e
    5c0c:	1b cf       	rjmp	.-458    	; 0x5a44 <put_fat.part.4+0x56>
    5c0e:	a8 85       	ldd	r26, Y+8	; 0x08
    5c10:	b9 85       	ldd	r27, Y+9	; 0x09
    5c12:	5e 96       	adiw	r26, 0x1e	; 30
    5c14:	8d 90       	ld	r8, X+
    5c16:	9d 90       	ld	r9, X+
    5c18:	ad 90       	ld	r10, X+
    5c1a:	bc 90       	ld	r11, X
    5c1c:	91 97       	sbiw	r26, 0x21	; 33
    5c1e:	db 01       	movw	r26, r22
    5c20:	ca 01       	movw	r24, r20
    5c22:	57 e0       	ldi	r21, 0x07	; 7
    5c24:	b6 95       	lsr	r27
    5c26:	a7 95       	ror	r26
    5c28:	97 95       	ror	r25
    5c2a:	87 95       	ror	r24
    5c2c:	5a 95       	dec	r21
    5c2e:	d1 f7       	brne	.-12     	; 0x5c24 <put_fat.part.4+0x236>
    5c30:	88 0e       	add	r8, r24
    5c32:	99 1e       	adc	r9, r25
    5c34:	aa 1e       	adc	r10, r26
    5c36:	bb 1e       	adc	r11, r27
    5c38:	e8 85       	ldd	r30, Y+8	; 0x08
    5c3a:	f9 85       	ldd	r31, Y+9	; 0x09
    5c3c:	42 a4       	ldd	r4, Z+42	; 0x2a
    5c3e:	53 a4       	ldd	r5, Z+43	; 0x2b
    5c40:	64 a4       	ldd	r6, Z+44	; 0x2c
    5c42:	75 a4       	ldd	r7, Z+45	; 0x2d
    5c44:	84 14       	cp	r8, r4
    5c46:	95 04       	cpc	r9, r5
    5c48:	a6 04       	cpc	r10, r6
    5c4a:	b7 04       	cpc	r11, r7
    5c4c:	e9 f0       	breq	.+58     	; 0x5c88 <put_fat.part.4+0x29a>
    5c4e:	84 81       	ldd	r24, Z+4	; 0x04
    5c50:	81 11       	cpse	r24, r1
    5c52:	9a c0       	rjmp	.+308    	; 0x5d88 <put_fat.part.4+0x39a>
    5c54:	81 14       	cp	r8, r1
    5c56:	91 04       	cpc	r9, r1
    5c58:	a1 04       	cpc	r10, r1
    5c5a:	b1 04       	cpc	r11, r1
    5c5c:	a9 f0       	breq	.+42     	; 0x5c88 <put_fat.part.4+0x29a>
    5c5e:	01 e0       	ldi	r16, 0x01	; 1
    5c60:	a5 01       	movw	r20, r10
    5c62:	94 01       	movw	r18, r8
    5c64:	68 85       	ldd	r22, Y+8	; 0x08
    5c66:	79 85       	ldd	r23, Y+9	; 0x09
    5c68:	62 5d       	subi	r22, 0xD2	; 210
    5c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6c:	a8 85       	ldd	r26, Y+8	; 0x08
    5c6e:	b9 85       	ldd	r27, Y+9	; 0x09
    5c70:	11 96       	adiw	r26, 0x01	; 1
    5c72:	8c 91       	ld	r24, X
    5c74:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    5c78:	81 11       	cpse	r24, r1
    5c7a:	06 c1       	rjmp	.+524    	; 0x5e88 <put_fat.part.4+0x49a>
    5c7c:	e8 85       	ldd	r30, Y+8	; 0x08
    5c7e:	f9 85       	ldd	r31, Y+9	; 0x09
    5c80:	82 a6       	std	Z+42, r8	; 0x2a
    5c82:	93 a6       	std	Z+43, r9	; 0x2b
    5c84:	a4 a6       	std	Z+44, r10	; 0x2c
    5c86:	b5 a6       	std	Z+45, r11	; 0x2d
    5c88:	cc 0c       	add	r12, r12
    5c8a:	dd 1c       	adc	r13, r13
    5c8c:	ee 1c       	adc	r14, r14
    5c8e:	ff 1c       	adc	r15, r15
    5c90:	cc 0c       	add	r12, r12
    5c92:	dd 1c       	adc	r13, r13
    5c94:	ee 1c       	adc	r14, r14
    5c96:	ff 1c       	adc	r15, r15
    5c98:	4c ef       	ldi	r20, 0xFC	; 252
    5c9a:	c4 22       	and	r12, r20
    5c9c:	41 e0       	ldi	r20, 0x01	; 1
    5c9e:	d4 22       	and	r13, r20
    5ca0:	ee 24       	eor	r14, r14
    5ca2:	ff 24       	eor	r15, r15
    5ca4:	f6 01       	movw	r30, r12
    5ca6:	be 96       	adiw	r30, 0x2e	; 46
    5ca8:	68 85       	ldd	r22, Y+8	; 0x08
    5caa:	79 85       	ldd	r23, Y+9	; 0x09
    5cac:	e6 0f       	add	r30, r22
    5cae:	f7 1f       	adc	r31, r23
    5cb0:	23 81       	ldd	r18, Z+3	; 0x03
    5cb2:	82 81       	ldd	r24, Z+2	; 0x02
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	a0 e0       	ldi	r26, 0x00	; 0
    5cb8:	b0 e0       	ldi	r27, 0x00	; 0
    5cba:	dc 01       	movw	r26, r24
    5cbc:	99 27       	eor	r25, r25
    5cbe:	88 27       	eor	r24, r24
    5cc0:	b2 2b       	or	r27, r18
    5cc2:	9b 01       	movw	r18, r22
    5cc4:	2c 0d       	add	r18, r12
    5cc6:	3d 1d       	adc	r19, r13
    5cc8:	88 27       	eor	r24, r24
    5cca:	99 27       	eor	r25, r25
    5ccc:	aa 27       	eor	r26, r26
    5cce:	b0 7f       	andi	r27, 0xF0	; 240
    5cd0:	ca 80       	ldd	r12, Y+2	; 0x02
    5cd2:	db 80       	ldd	r13, Y+3	; 0x03
    5cd4:	ec 80       	ldd	r14, Y+4	; 0x04
    5cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    5cd8:	c8 2a       	or	r12, r24
    5cda:	d9 2a       	or	r13, r25
    5cdc:	ea 2a       	or	r14, r26
    5cde:	fb 2a       	or	r15, r27
    5ce0:	d9 01       	movw	r26, r18
    5ce2:	9e 96       	adiw	r26, 0x2e	; 46
    5ce4:	cc 92       	st	X, r12
    5ce6:	d1 82       	std	Z+1, r13	; 0x01
    5ce8:	e2 82       	std	Z+2, r14	; 0x02
    5cea:	f3 82       	std	Z+3, r15	; 0x03
    5cec:	19 82       	std	Y+1, r1	; 0x01
    5cee:	aa ce       	rjmp	.-684    	; 0x5a44 <put_fat.part.4+0x56>
    5cf0:	8d 2c       	mov	r8, r13
    5cf2:	9e 2c       	mov	r9, r14
    5cf4:	af 2c       	mov	r10, r15
    5cf6:	bb 24       	eor	r11, r11
    5cf8:	e8 85       	ldd	r30, Y+8	; 0x08
    5cfa:	f9 85       	ldd	r31, Y+9	; 0x09
    5cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    5cfe:	97 8d       	ldd	r25, Z+31	; 0x1f
    5d00:	a0 a1       	ldd	r26, Z+32	; 0x20
    5d02:	b1 a1       	ldd	r27, Z+33	; 0x21
    5d04:	88 0e       	add	r8, r24
    5d06:	99 1e       	adc	r9, r25
    5d08:	aa 1e       	adc	r10, r26
    5d0a:	bb 1e       	adc	r11, r27
    5d0c:	42 a4       	ldd	r4, Z+42	; 0x2a
    5d0e:	53 a4       	ldd	r5, Z+43	; 0x2b
    5d10:	64 a4       	ldd	r6, Z+44	; 0x2c
    5d12:	75 a4       	ldd	r7, Z+45	; 0x2d
    5d14:	84 14       	cp	r8, r4
    5d16:	95 04       	cpc	r9, r5
    5d18:	a6 04       	cpc	r10, r6
    5d1a:	b7 04       	cpc	r11, r7
    5d1c:	e9 f0       	breq	.+58     	; 0x5d58 <put_fat.part.4+0x36a>
    5d1e:	84 81       	ldd	r24, Z+4	; 0x04
    5d20:	81 11       	cpse	r24, r1
    5d22:	72 c0       	rjmp	.+228    	; 0x5e08 <put_fat.part.4+0x41a>
    5d24:	81 14       	cp	r8, r1
    5d26:	91 04       	cpc	r9, r1
    5d28:	a1 04       	cpc	r10, r1
    5d2a:	b1 04       	cpc	r11, r1
    5d2c:	a9 f0       	breq	.+42     	; 0x5d58 <put_fat.part.4+0x36a>
    5d2e:	01 e0       	ldi	r16, 0x01	; 1
    5d30:	a5 01       	movw	r20, r10
    5d32:	94 01       	movw	r18, r8
    5d34:	68 85       	ldd	r22, Y+8	; 0x08
    5d36:	79 85       	ldd	r23, Y+9	; 0x09
    5d38:	62 5d       	subi	r22, 0xD2	; 210
    5d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3c:	a8 85       	ldd	r26, Y+8	; 0x08
    5d3e:	b9 85       	ldd	r27, Y+9	; 0x09
    5d40:	11 96       	adiw	r26, 0x01	; 1
    5d42:	8c 91       	ld	r24, X
    5d44:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    5d48:	81 11       	cpse	r24, r1
    5d4a:	9e c0       	rjmp	.+316    	; 0x5e88 <put_fat.part.4+0x49a>
    5d4c:	e8 85       	ldd	r30, Y+8	; 0x08
    5d4e:	f9 85       	ldd	r31, Y+9	; 0x09
    5d50:	82 a6       	std	Z+42, r8	; 0x2a
    5d52:	93 a6       	std	Z+43, r9	; 0x2b
    5d54:	a4 a6       	std	Z+44, r10	; 0x2c
    5d56:	b5 a6       	std	Z+45, r11	; 0x2d
    5d58:	cc 0c       	add	r12, r12
    5d5a:	dd 1c       	adc	r13, r13
    5d5c:	ee 1c       	adc	r14, r14
    5d5e:	ff 1c       	adc	r15, r15
    5d60:	e8 94       	clt
    5d62:	c0 f8       	bld	r12, 0
    5d64:	f1 e0       	ldi	r31, 0x01	; 1
    5d66:	df 22       	and	r13, r31
    5d68:	ee 24       	eor	r14, r14
    5d6a:	ff 24       	eor	r15, r15
    5d6c:	e8 85       	ldd	r30, Y+8	; 0x08
    5d6e:	f9 85       	ldd	r31, Y+9	; 0x09
    5d70:	ec 0d       	add	r30, r12
    5d72:	fd 1d       	adc	r31, r13
    5d74:	2a 81       	ldd	r18, Y+2	; 0x02
    5d76:	26 a7       	std	Z+46, r18	; 0x2e
    5d78:	e8 85       	ldd	r30, Y+8	; 0x08
    5d7a:	f9 85       	ldd	r31, Y+9	; 0x09
    5d7c:	ec 0d       	add	r30, r12
    5d7e:	fd 1d       	adc	r31, r13
    5d80:	3b 81       	ldd	r19, Y+3	; 0x03
    5d82:	37 a7       	std	Z+47, r19	; 0x2f
    5d84:	19 82       	std	Y+1, r1	; 0x01
    5d86:	5e ce       	rjmp	.-836    	; 0x5a44 <put_fat.part.4+0x56>
    5d88:	1f 01       	movw	r2, r30
    5d8a:	df 01       	movw	r26, r30
    5d8c:	fe e2       	ldi	r31, 0x2E	; 46
    5d8e:	2f 0e       	add	r2, r31
    5d90:	31 1c       	adc	r3, r1
    5d92:	01 e0       	ldi	r16, 0x01	; 1
    5d94:	a3 01       	movw	r20, r6
    5d96:	92 01       	movw	r18, r4
    5d98:	b1 01       	movw	r22, r2
    5d9a:	11 96       	adiw	r26, 0x01	; 1
    5d9c:	8c 91       	ld	r24, X
    5d9e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5da2:	81 11       	cpse	r24, r1
    5da4:	71 c0       	rjmp	.+226    	; 0x5e88 <put_fat.part.4+0x49a>
    5da6:	e8 85       	ldd	r30, Y+8	; 0x08
    5da8:	f9 85       	ldd	r31, Y+9	; 0x09
    5daa:	14 82       	std	Z+4, r1	; 0x04
    5dac:	82 8d       	ldd	r24, Z+26	; 0x1a
    5dae:	93 8d       	ldd	r25, Z+27	; 0x1b
    5db0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5db2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5db4:	46 8d       	ldd	r20, Z+30	; 0x1e
    5db6:	57 8d       	ldd	r21, Z+31	; 0x1f
    5db8:	60 a1       	ldd	r22, Z+32	; 0x20
    5dba:	71 a1       	ldd	r23, Z+33	; 0x21
    5dbc:	48 0f       	add	r20, r24
    5dbe:	59 1f       	adc	r21, r25
    5dc0:	6a 1f       	adc	r22, r26
    5dc2:	7b 1f       	adc	r23, r27
    5dc4:	44 16       	cp	r4, r20
    5dc6:	55 06       	cpc	r5, r21
    5dc8:	66 06       	cpc	r6, r22
    5dca:	77 06       	cpc	r7, r23
    5dcc:	08 f0       	brcs	.+2      	; 0x5dd0 <put_fat.part.4+0x3e2>
    5dce:	42 cf       	rjmp	.-380    	; 0x5c54 <put_fat.part.4+0x266>
    5dd0:	13 81       	ldd	r17, Z+3	; 0x03
    5dd2:	12 30       	cpi	r17, 0x02	; 2
    5dd4:	38 f4       	brcc	.+14     	; 0x5de4 <put_fat.part.4+0x3f6>
    5dd6:	3e cf       	rjmp	.-388    	; 0x5c54 <put_fat.part.4+0x266>
    5dd8:	e8 85       	ldd	r30, Y+8	; 0x08
    5dda:	f9 85       	ldd	r31, Y+9	; 0x09
    5ddc:	82 8d       	ldd	r24, Z+26	; 0x1a
    5dde:	93 8d       	ldd	r25, Z+27	; 0x1b
    5de0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5de2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5de4:	48 0e       	add	r4, r24
    5de6:	59 1e       	adc	r5, r25
    5de8:	6a 1e       	adc	r6, r26
    5dea:	7b 1e       	adc	r7, r27
    5dec:	01 e0       	ldi	r16, 0x01	; 1
    5dee:	a3 01       	movw	r20, r6
    5df0:	92 01       	movw	r18, r4
    5df2:	b1 01       	movw	r22, r2
    5df4:	a8 85       	ldd	r26, Y+8	; 0x08
    5df6:	b9 85       	ldd	r27, Y+9	; 0x09
    5df8:	11 96       	adiw	r26, 0x01	; 1
    5dfa:	8c 91       	ld	r24, X
    5dfc:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5e00:	11 50       	subi	r17, 0x01	; 1
    5e02:	11 30       	cpi	r17, 0x01	; 1
    5e04:	49 f7       	brne	.-46     	; 0x5dd8 <put_fat.part.4+0x3ea>
    5e06:	26 cf       	rjmp	.-436    	; 0x5c54 <put_fat.part.4+0x266>
    5e08:	1f 01       	movw	r2, r30
    5e0a:	df 01       	movw	r26, r30
    5e0c:	fe e2       	ldi	r31, 0x2E	; 46
    5e0e:	2f 0e       	add	r2, r31
    5e10:	31 1c       	adc	r3, r1
    5e12:	01 e0       	ldi	r16, 0x01	; 1
    5e14:	a3 01       	movw	r20, r6
    5e16:	92 01       	movw	r18, r4
    5e18:	b1 01       	movw	r22, r2
    5e1a:	11 96       	adiw	r26, 0x01	; 1
    5e1c:	8c 91       	ld	r24, X
    5e1e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5e22:	81 11       	cpse	r24, r1
    5e24:	31 c0       	rjmp	.+98     	; 0x5e88 <put_fat.part.4+0x49a>
    5e26:	e8 85       	ldd	r30, Y+8	; 0x08
    5e28:	f9 85       	ldd	r31, Y+9	; 0x09
    5e2a:	14 82       	std	Z+4, r1	; 0x04
    5e2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e2e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5e30:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5e32:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5e34:	46 8d       	ldd	r20, Z+30	; 0x1e
    5e36:	57 8d       	ldd	r21, Z+31	; 0x1f
    5e38:	60 a1       	ldd	r22, Z+32	; 0x20
    5e3a:	71 a1       	ldd	r23, Z+33	; 0x21
    5e3c:	48 0f       	add	r20, r24
    5e3e:	59 1f       	adc	r21, r25
    5e40:	6a 1f       	adc	r22, r26
    5e42:	7b 1f       	adc	r23, r27
    5e44:	44 16       	cp	r4, r20
    5e46:	55 06       	cpc	r5, r21
    5e48:	66 06       	cpc	r6, r22
    5e4a:	77 06       	cpc	r7, r23
    5e4c:	08 f0       	brcs	.+2      	; 0x5e50 <put_fat.part.4+0x462>
    5e4e:	6a cf       	rjmp	.-300    	; 0x5d24 <put_fat.part.4+0x336>
    5e50:	13 81       	ldd	r17, Z+3	; 0x03
    5e52:	12 30       	cpi	r17, 0x02	; 2
    5e54:	38 f4       	brcc	.+14     	; 0x5e64 <put_fat.part.4+0x476>
    5e56:	66 cf       	rjmp	.-308    	; 0x5d24 <put_fat.part.4+0x336>
    5e58:	e8 85       	ldd	r30, Y+8	; 0x08
    5e5a:	f9 85       	ldd	r31, Y+9	; 0x09
    5e5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e5e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5e60:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5e62:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5e64:	48 0e       	add	r4, r24
    5e66:	59 1e       	adc	r5, r25
    5e68:	6a 1e       	adc	r6, r26
    5e6a:	7b 1e       	adc	r7, r27
    5e6c:	01 e0       	ldi	r16, 0x01	; 1
    5e6e:	a3 01       	movw	r20, r6
    5e70:	92 01       	movw	r18, r4
    5e72:	b1 01       	movw	r22, r2
    5e74:	a8 85       	ldd	r26, Y+8	; 0x08
    5e76:	b9 85       	ldd	r27, Y+9	; 0x09
    5e78:	11 96       	adiw	r26, 0x01	; 1
    5e7a:	8c 91       	ld	r24, X
    5e7c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    5e80:	11 50       	subi	r17, 0x01	; 1
    5e82:	11 30       	cpi	r17, 0x01	; 1
    5e84:	49 f7       	brne	.-46     	; 0x5e58 <put_fat.part.4+0x46a>
    5e86:	4e cf       	rjmp	.-356    	; 0x5d24 <put_fat.part.4+0x336>
    5e88:	e1 e0       	ldi	r30, 0x01	; 1
    5e8a:	e9 83       	std	Y+1, r30	; 0x01
    5e8c:	db cd       	rjmp	.-1098   	; 0x5a44 <put_fat.part.4+0x56>
    5e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e90:	68 85       	ldd	r22, Y+8	; 0x08
    5e92:	79 85       	ldd	r23, Y+9	; 0x09
    5e94:	e6 0f       	add	r30, r22
    5e96:	f7 1f       	adc	r31, r23
    5e98:	db 01       	movw	r26, r22
    5e9a:	23 ce       	rjmp	.-954    	; 0x5ae2 <put_fat.part.4+0xf4>
    5e9c:	e8 85       	ldd	r30, Y+8	; 0x08
    5e9e:	f9 85       	ldd	r31, Y+9	; 0x09
    5ea0:	ea 0d       	add	r30, r10
    5ea2:	fb 1d       	adc	r31, r11
    5ea4:	86 a5       	ldd	r24, Z+46	; 0x2e
    5ea6:	80 7f       	andi	r24, 0xF0	; 240
    5ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    5eaa:	9f 70       	andi	r25, 0x0F	; 15
    5eac:	89 2b       	or	r24, r25
    5eae:	86 a7       	std	Z+46, r24	; 0x2e
    5eb0:	c9 cd       	rjmp	.-1134   	; 0x5a44 <put_fat.part.4+0x56>

00005eb2 <create_chain>:
    5eb2:	2f 92       	push	r2
    5eb4:	3f 92       	push	r3
    5eb6:	4f 92       	push	r4
    5eb8:	5f 92       	push	r5
    5eba:	6f 92       	push	r6
    5ebc:	7f 92       	push	r7
    5ebe:	8f 92       	push	r8
    5ec0:	9f 92       	push	r9
    5ec2:	af 92       	push	r10
    5ec4:	bf 92       	push	r11
    5ec6:	cf 92       	push	r12
    5ec8:	df 92       	push	r13
    5eca:	ef 92       	push	r14
    5ecc:	ff 92       	push	r15
    5ece:	0f 93       	push	r16
    5ed0:	1f 93       	push	r17
    5ed2:	cf 93       	push	r28
    5ed4:	df 93       	push	r29
    5ed6:	cd b7       	in	r28, 0x3d	; 61
    5ed8:	de b7       	in	r29, 0x3e	; 62
    5eda:	2c 97       	sbiw	r28, 0x0c	; 12
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	89 83       	std	Y+1, r24	; 0x01
    5ee2:	9a 83       	std	Y+2, r25	; 0x02
    5ee4:	4f 83       	std	Y+7, r20	; 0x07
    5ee6:	58 87       	std	Y+8, r21	; 0x08
    5ee8:	69 87       	std	Y+9, r22	; 0x09
    5eea:	7a 87       	std	Y+10, r23	; 0x0a
    5eec:	45 2b       	or	r20, r21
    5eee:	46 2b       	or	r20, r22
    5ef0:	47 2b       	or	r20, r23
    5ef2:	09 f0       	breq	.+2      	; 0x5ef6 <create_chain+0x44>
    5ef4:	62 c0       	rjmp	.+196    	; 0x5fba <create_chain+0x108>
    5ef6:	dc 01       	movw	r26, r24
    5ef8:	1a 96       	adiw	r26, 0x0a	; 10
    5efa:	4d 90       	ld	r4, X+
    5efc:	5d 90       	ld	r5, X+
    5efe:	6d 90       	ld	r6, X+
    5f00:	7c 90       	ld	r7, X
    5f02:	1d 97       	sbiw	r26, 0x0d	; 13
    5f04:	41 14       	cp	r4, r1
    5f06:	51 04       	cpc	r5, r1
    5f08:	61 04       	cpc	r6, r1
    5f0a:	71 04       	cpc	r7, r1
    5f0c:	09 f0       	breq	.+2      	; 0x5f10 <create_chain+0x5e>
    5f0e:	83 c0       	rjmp	.+262    	; 0x6016 <create_chain+0x164>
    5f10:	56 96       	adiw	r26, 0x16	; 22
    5f12:	8d 90       	ld	r8, X+
    5f14:	9d 90       	ld	r9, X+
    5f16:	ad 90       	ld	r10, X+
    5f18:	bc 90       	ld	r11, X
    5f1a:	59 97       	sbiw	r26, 0x19	; 25
    5f1c:	41 2c       	mov	r4, r1
    5f1e:	51 2c       	mov	r5, r1
    5f20:	32 01       	movw	r6, r4
    5f22:	43 94       	inc	r4
    5f24:	fc 01       	movw	r30, r24
    5f26:	8c 01       	movw	r16, r24
    5f28:	73 01       	movw	r14, r6
    5f2a:	62 01       	movw	r12, r4
    5f2c:	be 96       	adiw	r30, 0x2e	; 46
    5f2e:	ed 83       	std	Y+5, r30	; 0x05
    5f30:	fe 83       	std	Y+6, r31	; 0x06
    5f32:	0b 87       	std	Y+11, r16	; 0x0b
    5f34:	1c 87       	std	Y+12, r17	; 0x0c
    5f36:	1f ef       	ldi	r17, 0xFF	; 255
    5f38:	c1 1a       	sub	r12, r17
    5f3a:	d1 0a       	sbc	r13, r17
    5f3c:	e1 0a       	sbc	r14, r17
    5f3e:	f1 0a       	sbc	r15, r17
    5f40:	c8 14       	cp	r12, r8
    5f42:	d9 04       	cpc	r13, r9
    5f44:	ea 04       	cpc	r14, r10
    5f46:	fb 04       	cpc	r15, r11
    5f48:	08 f4       	brcc	.+2      	; 0x5f4c <create_chain+0x9a>
    5f4a:	75 c0       	rjmp	.+234    	; 0x6036 <create_chain+0x184>
    5f4c:	22 e0       	ldi	r18, 0x02	; 2
    5f4e:	42 16       	cp	r4, r18
    5f50:	51 04       	cpc	r5, r1
    5f52:	61 04       	cpc	r6, r1
    5f54:	71 04       	cpc	r7, r1
    5f56:	08 f4       	brcc	.+2      	; 0x5f5a <create_chain+0xa8>
    5f58:	21 c2       	rjmp	.+1090   	; 0x639c <create_chain+0x4ea>
    5f5a:	43 e0       	ldi	r20, 0x03	; 3
    5f5c:	84 16       	cp	r8, r20
    5f5e:	91 04       	cpc	r9, r1
    5f60:	a1 04       	cpc	r10, r1
    5f62:	b1 04       	cpc	r11, r1
    5f64:	f0 f1       	brcs	.+124    	; 0x5fe2 <create_chain+0x130>
    5f66:	f2 e0       	ldi	r31, 0x02	; 2
    5f68:	cf 2e       	mov	r12, r31
    5f6a:	d1 2c       	mov	r13, r1
    5f6c:	e1 2c       	mov	r14, r1
    5f6e:	f1 2c       	mov	r15, r1
    5f70:	ab 85       	ldd	r26, Y+11	; 0x0b
    5f72:	bc 85       	ldd	r27, Y+12	; 0x0c
    5f74:	8c 91       	ld	r24, X
    5f76:	82 30       	cpi	r24, 0x02	; 2
    5f78:	09 f4       	brne	.+2      	; 0x5f7c <create_chain+0xca>
    5f7a:	69 c0       	rjmp	.+210    	; 0x604e <create_chain+0x19c>
    5f7c:	83 30       	cpi	r24, 0x03	; 3
    5f7e:	09 f0       	breq	.+2      	; 0x5f82 <create_chain+0xd0>
    5f80:	c2 c0       	rjmp	.+388    	; 0x6106 <create_chain+0x254>
    5f82:	fd 01       	movw	r30, r26
    5f84:	86 8d       	ldd	r24, Z+30	; 0x1e
    5f86:	97 8d       	ldd	r25, Z+31	; 0x1f
    5f88:	a0 a1       	ldd	r26, Z+32	; 0x20
    5f8a:	b1 a1       	ldd	r27, Z+33	; 0x21
    5f8c:	b7 01       	movw	r22, r14
    5f8e:	a6 01       	movw	r20, r12
    5f90:	17 e0       	ldi	r17, 0x07	; 7
    5f92:	76 95       	lsr	r23
    5f94:	67 95       	ror	r22
    5f96:	57 95       	ror	r21
    5f98:	47 95       	ror	r20
    5f9a:	1a 95       	dec	r17
    5f9c:	d1 f7       	brne	.-12     	; 0x5f92 <create_chain+0xe0>
    5f9e:	48 0f       	add	r20, r24
    5fa0:	59 1f       	adc	r21, r25
    5fa2:	6a 1f       	adc	r22, r26
    5fa4:	7b 1f       	adc	r23, r27
    5fa6:	cf 01       	movw	r24, r30
    5fa8:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    5fac:	88 23       	and	r24, r24
    5fae:	09 f4       	brne	.+2      	; 0x5fb2 <create_chain+0x100>
    5fb0:	15 c1       	rjmp	.+554    	; 0x61dc <create_chain+0x32a>
    5fb2:	6f ef       	ldi	r22, 0xFF	; 255
    5fb4:	7f ef       	ldi	r23, 0xFF	; 255
    5fb6:	cb 01       	movw	r24, r22
    5fb8:	18 c0       	rjmp	.+48     	; 0x5fea <create_chain+0x138>
    5fba:	0f 81       	ldd	r16, Y+7	; 0x07
    5fbc:	18 85       	ldd	r17, Y+8	; 0x08
    5fbe:	29 85       	ldd	r18, Y+9	; 0x09
    5fc0:	3a 85       	ldd	r19, Y+10	; 0x0a
    5fc2:	02 30       	cpi	r16, 0x02	; 2
    5fc4:	11 05       	cpc	r17, r1
    5fc6:	21 05       	cpc	r18, r1
    5fc8:	31 05       	cpc	r19, r1
    5fca:	58 f0       	brcs	.+22     	; 0x5fe2 <create_chain+0x130>
    5fcc:	fc 01       	movw	r30, r24
    5fce:	86 89       	ldd	r24, Z+22	; 0x16
    5fd0:	97 89       	ldd	r25, Z+23	; 0x17
    5fd2:	a0 8d       	ldd	r26, Z+24	; 0x18
    5fd4:	b1 8d       	ldd	r27, Z+25	; 0x19
    5fd6:	08 17       	cp	r16, r24
    5fd8:	19 07       	cpc	r17, r25
    5fda:	2a 07       	cpc	r18, r26
    5fdc:	3b 07       	cpc	r19, r27
    5fde:	08 f4       	brcc	.+2      	; 0x5fe2 <create_chain+0x130>
    5fe0:	e1 c1       	rjmp	.+962    	; 0x63a4 <create_chain+0x4f2>
    5fe2:	61 e0       	ldi	r22, 0x01	; 1
    5fe4:	70 e0       	ldi	r23, 0x00	; 0
    5fe6:	80 e0       	ldi	r24, 0x00	; 0
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	2c 96       	adiw	r28, 0x0c	; 12
    5fec:	cd bf       	out	0x3d, r28	; 61
    5fee:	de bf       	out	0x3e, r29	; 62
    5ff0:	df 91       	pop	r29
    5ff2:	cf 91       	pop	r28
    5ff4:	1f 91       	pop	r17
    5ff6:	0f 91       	pop	r16
    5ff8:	ff 90       	pop	r15
    5ffa:	ef 90       	pop	r14
    5ffc:	df 90       	pop	r13
    5ffe:	cf 90       	pop	r12
    6000:	bf 90       	pop	r11
    6002:	af 90       	pop	r10
    6004:	9f 90       	pop	r9
    6006:	8f 90       	pop	r8
    6008:	7f 90       	pop	r7
    600a:	6f 90       	pop	r6
    600c:	5f 90       	pop	r5
    600e:	4f 90       	pop	r4
    6010:	3f 90       	pop	r3
    6012:	2f 90       	pop	r2
    6014:	08 95       	ret
    6016:	fc 01       	movw	r30, r24
    6018:	86 88       	ldd	r8, Z+22	; 0x16
    601a:	97 88       	ldd	r9, Z+23	; 0x17
    601c:	a0 8c       	ldd	r10, Z+24	; 0x18
    601e:	b1 8c       	ldd	r11, Z+25	; 0x19
    6020:	48 14       	cp	r4, r8
    6022:	59 04       	cpc	r5, r9
    6024:	6a 04       	cpc	r6, r10
    6026:	7b 04       	cpc	r7, r11
    6028:	20 f0       	brcs	.+8      	; 0x6032 <create_chain+0x180>
    602a:	41 2c       	mov	r4, r1
    602c:	51 2c       	mov	r5, r1
    602e:	32 01       	movw	r6, r4
    6030:	43 94       	inc	r4
    6032:	8f 01       	movw	r16, r30
    6034:	79 cf       	rjmp	.-270    	; 0x5f28 <create_chain+0x76>
    6036:	32 e0       	ldi	r19, 0x02	; 2
    6038:	c3 16       	cp	r12, r19
    603a:	d1 04       	cpc	r13, r1
    603c:	e1 04       	cpc	r14, r1
    603e:	f1 04       	cpc	r15, r1
    6040:	80 f2       	brcs	.-96     	; 0x5fe2 <create_chain+0x130>
    6042:	ab 85       	ldd	r26, Y+11	; 0x0b
    6044:	bc 85       	ldd	r27, Y+12	; 0x0c
    6046:	8c 91       	ld	r24, X
    6048:	82 30       	cpi	r24, 0x02	; 2
    604a:	09 f0       	breq	.+2      	; 0x604e <create_chain+0x19c>
    604c:	97 cf       	rjmp	.-210    	; 0x5f7c <create_chain+0xca>
    604e:	fd 01       	movw	r30, r26
    6050:	bb 27       	eor	r27, r27
    6052:	af 2d       	mov	r26, r15
    6054:	9e 2d       	mov	r25, r14
    6056:	8d 2d       	mov	r24, r13
    6058:	46 8d       	ldd	r20, Z+30	; 0x1e
    605a:	57 8d       	ldd	r21, Z+31	; 0x1f
    605c:	60 a1       	ldd	r22, Z+32	; 0x20
    605e:	71 a1       	ldd	r23, Z+33	; 0x21
    6060:	8c 01       	movw	r16, r24
    6062:	9d 01       	movw	r18, r26
    6064:	04 0f       	add	r16, r20
    6066:	15 1f       	adc	r17, r21
    6068:	26 1f       	adc	r18, r22
    606a:	37 1f       	adc	r19, r23
    606c:	09 83       	std	Y+1, r16	; 0x01
    606e:	1a 83       	std	Y+2, r17	; 0x02
    6070:	2b 83       	std	Y+3, r18	; 0x03
    6072:	3c 83       	std	Y+4, r19	; 0x04
    6074:	82 a4       	ldd	r8, Z+42	; 0x2a
    6076:	93 a4       	ldd	r9, Z+43	; 0x2b
    6078:	a4 a4       	ldd	r10, Z+44	; 0x2c
    607a:	b5 a4       	ldd	r11, Z+45	; 0x2d
    607c:	08 15       	cp	r16, r8
    607e:	19 05       	cpc	r17, r9
    6080:	2a 05       	cpc	r18, r10
    6082:	3b 05       	cpc	r19, r11
    6084:	69 f0       	breq	.+26     	; 0x60a0 <create_chain+0x1ee>
    6086:	84 81       	ldd	r24, Z+4	; 0x04
    6088:	81 11       	cpse	r24, r1
    608a:	4a c1       	rjmp	.+660    	; 0x6320 <create_chain+0x46e>
    608c:	29 81       	ldd	r18, Y+1	; 0x01
    608e:	3a 81       	ldd	r19, Y+2	; 0x02
    6090:	4b 81       	ldd	r20, Y+3	; 0x03
    6092:	5c 81       	ldd	r21, Y+4	; 0x04
    6094:	21 15       	cp	r18, r1
    6096:	31 05       	cpc	r19, r1
    6098:	41 05       	cpc	r20, r1
    609a:	51 05       	cpc	r21, r1
    609c:	09 f0       	breq	.+2      	; 0x60a0 <create_chain+0x1ee>
    609e:	ce c0       	rjmp	.+412    	; 0x623c <create_chain+0x38a>
    60a0:	b7 01       	movw	r22, r14
    60a2:	a6 01       	movw	r20, r12
    60a4:	44 0f       	add	r20, r20
    60a6:	55 1f       	adc	r21, r21
    60a8:	66 1f       	adc	r22, r22
    60aa:	77 1f       	adc	r23, r23
    60ac:	4e 7f       	andi	r20, 0xFE	; 254
    60ae:	51 70       	andi	r21, 0x01	; 1
    60b0:	66 27       	eor	r22, r22
    60b2:	77 27       	eor	r23, r23
    60b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    60b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    60b8:	e4 0f       	add	r30, r20
    60ba:	f5 1f       	adc	r31, r21
    60bc:	87 a5       	ldd	r24, Z+47	; 0x2f
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	98 2f       	mov	r25, r24
    60c2:	88 27       	eor	r24, r24
    60c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    60c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    60c8:	e4 0f       	add	r30, r20
    60ca:	f5 1f       	adc	r31, r21
    60cc:	26 a5       	ldd	r18, Z+46	; 0x2e
    60ce:	82 2b       	or	r24, r18
    60d0:	a0 e0       	ldi	r26, 0x00	; 0
    60d2:	b0 e0       	ldi	r27, 0x00	; 0
    60d4:	00 97       	sbiw	r24, 0x00	; 0
    60d6:	a1 05       	cpc	r26, r1
    60d8:	b1 05       	cpc	r27, r1
    60da:	09 f4       	brne	.+2      	; 0x60de <create_chain+0x22c>
    60dc:	83 c1       	rjmp	.+774    	; 0x63e4 <create_chain+0x532>
    60de:	01 97       	sbiw	r24, 0x01	; 1
    60e0:	a1 05       	cpc	r26, r1
    60e2:	b1 05       	cpc	r27, r1
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <create_chain+0x236>
    60e6:	7d cf       	rjmp	.-262    	; 0x5fe2 <create_chain+0x130>
    60e8:	4c 14       	cp	r4, r12
    60ea:	5d 04       	cpc	r5, r13
    60ec:	6e 04       	cpc	r6, r14
    60ee:	7f 04       	cpc	r7, r15
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <create_chain+0x242>
    60f2:	54 c1       	rjmp	.+680    	; 0x639c <create_chain+0x4ea>
    60f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    60f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    60f8:	56 96       	adiw	r26, 0x16	; 22
    60fa:	8d 90       	ld	r8, X+
    60fc:	9d 90       	ld	r9, X+
    60fe:	ad 90       	ld	r10, X+
    6100:	bc 90       	ld	r11, X
    6102:	59 97       	sbiw	r26, 0x19	; 25
    6104:	18 cf       	rjmp	.-464    	; 0x5f36 <create_chain+0x84>
    6106:	81 30       	cpi	r24, 0x01	; 1
    6108:	09 f0       	breq	.+2      	; 0x610c <create_chain+0x25a>
    610a:	53 cf       	rjmp	.-346    	; 0x5fb2 <create_chain+0x100>
    610c:	16 01       	movw	r2, r12
    610e:	36 94       	lsr	r3
    6110:	27 94       	ror	r2
    6112:	2c 0c       	add	r2, r12
    6114:	3d 1c       	adc	r3, r13
    6116:	5e 96       	adiw	r26, 0x1e	; 30
    6118:	4d 91       	ld	r20, X+
    611a:	5d 91       	ld	r21, X+
    611c:	6d 91       	ld	r22, X+
    611e:	7c 91       	ld	r23, X
    6120:	91 97       	sbiw	r26, 0x21	; 33
    6122:	c1 01       	movw	r24, r2
    6124:	89 2f       	mov	r24, r25
    6126:	99 27       	eor	r25, r25
    6128:	86 95       	lsr	r24
    612a:	8a 01       	movw	r16, r20
    612c:	9b 01       	movw	r18, r22
    612e:	08 0f       	add	r16, r24
    6130:	19 1f       	adc	r17, r25
    6132:	21 1d       	adc	r18, r1
    6134:	31 1d       	adc	r19, r1
    6136:	09 83       	std	Y+1, r16	; 0x01
    6138:	1a 83       	std	Y+2, r17	; 0x02
    613a:	2b 83       	std	Y+3, r18	; 0x03
    613c:	3c 83       	std	Y+4, r19	; 0x04
    613e:	9a 96       	adiw	r26, 0x2a	; 42
    6140:	8d 90       	ld	r8, X+
    6142:	9d 90       	ld	r9, X+
    6144:	ad 90       	ld	r10, X+
    6146:	bc 90       	ld	r11, X
    6148:	9d 97       	sbiw	r26, 0x2d	; 45
    614a:	80 16       	cp	r8, r16
    614c:	91 06       	cpc	r9, r17
    614e:	a2 06       	cpc	r10, r18
    6150:	b3 06       	cpc	r11, r19
    6152:	b9 f0       	breq	.+46     	; 0x6182 <create_chain+0x2d0>
    6154:	14 96       	adiw	r26, 0x04	; 4
    6156:	8c 91       	ld	r24, X
    6158:	14 97       	sbiw	r26, 0x04	; 4
    615a:	81 11       	cpse	r24, r1
    615c:	a4 c0       	rjmp	.+328    	; 0x62a6 <create_chain+0x3f4>
    615e:	29 81       	ldd	r18, Y+1	; 0x01
    6160:	3a 81       	ldd	r19, Y+2	; 0x02
    6162:	4b 81       	ldd	r20, Y+3	; 0x03
    6164:	5c 81       	ldd	r21, Y+4	; 0x04
    6166:	21 15       	cp	r18, r1
    6168:	31 05       	cpc	r19, r1
    616a:	41 05       	cpc	r20, r1
    616c:	51 05       	cpc	r21, r1
    616e:	09 f0       	breq	.+2      	; 0x6172 <create_chain+0x2c0>
    6170:	7d c0       	rjmp	.+250    	; 0x626c <create_chain+0x3ba>
    6172:	ab 85       	ldd	r26, Y+11	; 0x0b
    6174:	bc 85       	ldd	r27, Y+12	; 0x0c
    6176:	5e 96       	adiw	r26, 0x1e	; 30
    6178:	4d 91       	ld	r20, X+
    617a:	5d 91       	ld	r21, X+
    617c:	6d 91       	ld	r22, X+
    617e:	7c 91       	ld	r23, X
    6180:	91 97       	sbiw	r26, 0x21	; 33
    6182:	f1 01       	movw	r30, r2
    6184:	f1 70       	andi	r31, 0x01	; 1
    6186:	0b 85       	ldd	r16, Y+11	; 0x0b
    6188:	1c 85       	ldd	r17, Y+12	; 0x0c
    618a:	e0 0f       	add	r30, r16
    618c:	f1 1f       	adc	r31, r17
    618e:	16 a5       	ldd	r17, Z+46	; 0x2e
    6190:	2f ef       	ldi	r18, 0xFF	; 255
    6192:	22 1a       	sub	r2, r18
    6194:	32 0a       	sbc	r3, r18
    6196:	c1 01       	movw	r24, r2
    6198:	89 2f       	mov	r24, r25
    619a:	99 27       	eor	r25, r25
    619c:	86 95       	lsr	r24
    619e:	48 0f       	add	r20, r24
    61a0:	59 1f       	adc	r21, r25
    61a2:	61 1d       	adc	r22, r1
    61a4:	71 1d       	adc	r23, r1
    61a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    61a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    61aa:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    61ae:	81 11       	cpse	r24, r1
    61b0:	00 cf       	rjmp	.-512    	; 0x5fb2 <create_chain+0x100>
    61b2:	b1 e0       	ldi	r27, 0x01	; 1
    61b4:	3b 22       	and	r3, r27
    61b6:	eb 85       	ldd	r30, Y+11	; 0x0b
    61b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    61ba:	e2 0d       	add	r30, r2
    61bc:	f3 1d       	adc	r31, r3
    61be:	26 a5       	ldd	r18, Z+46	; 0x2e
    61c0:	81 2f       	mov	r24, r17
    61c2:	90 e0       	ldi	r25, 0x00	; 0
    61c4:	92 2b       	or	r25, r18
    61c6:	c0 fe       	sbrs	r12, 0
    61c8:	6a c1       	rjmp	.+724    	; 0x649e <create_chain+0x5ec>
    61ca:	92 95       	swap	r25
    61cc:	82 95       	swap	r24
    61ce:	8f 70       	andi	r24, 0x0F	; 15
    61d0:	89 27       	eor	r24, r25
    61d2:	9f 70       	andi	r25, 0x0F	; 15
    61d4:	89 27       	eor	r24, r25
    61d6:	a0 e0       	ldi	r26, 0x00	; 0
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	7c cf       	rjmp	.-264    	; 0x60d4 <create_chain+0x222>
    61dc:	46 01       	movw	r8, r12
    61de:	57 01       	movw	r10, r14
    61e0:	88 0c       	add	r8, r8
    61e2:	99 1c       	adc	r9, r9
    61e4:	aa 1c       	adc	r10, r10
    61e6:	bb 1c       	adc	r11, r11
    61e8:	88 0c       	add	r8, r8
    61ea:	99 1c       	adc	r9, r9
    61ec:	aa 1c       	adc	r10, r10
    61ee:	bb 1c       	adc	r11, r11
    61f0:	fc ef       	ldi	r31, 0xFC	; 252
    61f2:	8f 22       	and	r8, r31
    61f4:	f1 e0       	ldi	r31, 0x01	; 1
    61f6:	9f 22       	and	r9, r31
    61f8:	aa 24       	eor	r10, r10
    61fa:	bb 24       	eor	r11, r11
    61fc:	f4 01       	movw	r30, r8
    61fe:	be 96       	adiw	r30, 0x2e	; 46
    6200:	0b 85       	ldd	r16, Y+11	; 0x0b
    6202:	1c 85       	ldd	r17, Y+12	; 0x0c
    6204:	e0 0f       	add	r30, r16
    6206:	f1 1f       	adc	r31, r17
    6208:	23 81       	ldd	r18, Z+3	; 0x03
    620a:	82 81       	ldd	r24, Z+2	; 0x02
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	a0 e0       	ldi	r26, 0x00	; 0
    6210:	b0 e0       	ldi	r27, 0x00	; 0
    6212:	dc 01       	movw	r26, r24
    6214:	99 27       	eor	r25, r25
    6216:	88 27       	eor	r24, r24
    6218:	b2 2b       	or	r27, r18
    621a:	41 81       	ldd	r20, Z+1	; 0x01
    621c:	50 e0       	ldi	r21, 0x00	; 0
    621e:	54 2f       	mov	r21, r20
    6220:	44 27       	eor	r20, r20
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	84 2b       	or	r24, r20
    6228:	95 2b       	or	r25, r21
    622a:	a6 2b       	or	r26, r22
    622c:	b7 2b       	or	r27, r23
    622e:	f8 01       	movw	r30, r16
    6230:	e8 0d       	add	r30, r8
    6232:	f9 1d       	adc	r31, r9
    6234:	26 a5       	ldd	r18, Z+46	; 0x2e
    6236:	82 2b       	or	r24, r18
    6238:	bf 70       	andi	r27, 0x0F	; 15
    623a:	4c cf       	rjmp	.-360    	; 0x60d4 <create_chain+0x222>
    623c:	01 e0       	ldi	r16, 0x01	; 1
    623e:	6d 81       	ldd	r22, Y+5	; 0x05
    6240:	7e 81       	ldd	r23, Y+6	; 0x06
    6242:	ab 85       	ldd	r26, Y+11	; 0x0b
    6244:	bc 85       	ldd	r27, Y+12	; 0x0c
    6246:	11 96       	adiw	r26, 0x01	; 1
    6248:	8c 91       	ld	r24, X
    624a:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    624e:	81 11       	cpse	r24, r1
    6250:	b0 ce       	rjmp	.-672    	; 0x5fb2 <create_chain+0x100>
    6252:	09 81       	ldd	r16, Y+1	; 0x01
    6254:	1a 81       	ldd	r17, Y+2	; 0x02
    6256:	2b 81       	ldd	r18, Y+3	; 0x03
    6258:	3c 81       	ldd	r19, Y+4	; 0x04
    625a:	ab 85       	ldd	r26, Y+11	; 0x0b
    625c:	bc 85       	ldd	r27, Y+12	; 0x0c
    625e:	9a 96       	adiw	r26, 0x2a	; 42
    6260:	0d 93       	st	X+, r16
    6262:	1d 93       	st	X+, r17
    6264:	2d 93       	st	X+, r18
    6266:	3c 93       	st	X, r19
    6268:	9d 97       	sbiw	r26, 0x2d	; 45
    626a:	1a cf       	rjmp	.-460    	; 0x60a0 <create_chain+0x1ee>
    626c:	01 e0       	ldi	r16, 0x01	; 1
    626e:	6d 81       	ldd	r22, Y+5	; 0x05
    6270:	7e 81       	ldd	r23, Y+6	; 0x06
    6272:	eb 85       	ldd	r30, Y+11	; 0x0b
    6274:	fc 85       	ldd	r31, Y+12	; 0x0c
    6276:	81 81       	ldd	r24, Z+1	; 0x01
    6278:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    627c:	81 11       	cpse	r24, r1
    627e:	99 ce       	rjmp	.-718    	; 0x5fb2 <create_chain+0x100>
    6280:	09 81       	ldd	r16, Y+1	; 0x01
    6282:	1a 81       	ldd	r17, Y+2	; 0x02
    6284:	2b 81       	ldd	r18, Y+3	; 0x03
    6286:	3c 81       	ldd	r19, Y+4	; 0x04
    6288:	ab 85       	ldd	r26, Y+11	; 0x0b
    628a:	bc 85       	ldd	r27, Y+12	; 0x0c
    628c:	9a 96       	adiw	r26, 0x2a	; 42
    628e:	0d 93       	st	X+, r16
    6290:	1d 93       	st	X+, r17
    6292:	2d 93       	st	X+, r18
    6294:	3c 93       	st	X, r19
    6296:	9d 97       	sbiw	r26, 0x2d	; 45
    6298:	5e 96       	adiw	r26, 0x1e	; 30
    629a:	4d 91       	ld	r20, X+
    629c:	5d 91       	ld	r21, X+
    629e:	6d 91       	ld	r22, X+
    62a0:	7c 91       	ld	r23, X
    62a2:	91 97       	sbiw	r26, 0x21	; 33
    62a4:	6e cf       	rjmp	.-292    	; 0x6182 <create_chain+0x2d0>
    62a6:	01 e0       	ldi	r16, 0x01	; 1
    62a8:	a5 01       	movw	r20, r10
    62aa:	94 01       	movw	r18, r8
    62ac:	6d 81       	ldd	r22, Y+5	; 0x05
    62ae:	7e 81       	ldd	r23, Y+6	; 0x06
    62b0:	11 96       	adiw	r26, 0x01	; 1
    62b2:	8c 91       	ld	r24, X
    62b4:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    62b8:	81 11       	cpse	r24, r1
    62ba:	7b ce       	rjmp	.-778    	; 0x5fb2 <create_chain+0x100>
    62bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    62be:	fc 85       	ldd	r31, Y+12	; 0x0c
    62c0:	14 82       	std	Z+4, r1	; 0x04
    62c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    62c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    62c6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    62c8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    62ca:	46 8d       	ldd	r20, Z+30	; 0x1e
    62cc:	57 8d       	ldd	r21, Z+31	; 0x1f
    62ce:	60 a1       	ldd	r22, Z+32	; 0x20
    62d0:	71 a1       	ldd	r23, Z+33	; 0x21
    62d2:	48 0f       	add	r20, r24
    62d4:	59 1f       	adc	r21, r25
    62d6:	6a 1f       	adc	r22, r26
    62d8:	7b 1f       	adc	r23, r27
    62da:	84 16       	cp	r8, r20
    62dc:	95 06       	cpc	r9, r21
    62de:	a6 06       	cpc	r10, r22
    62e0:	b7 06       	cpc	r11, r23
    62e2:	08 f0       	brcs	.+2      	; 0x62e6 <create_chain+0x434>
    62e4:	3c cf       	rjmp	.-392    	; 0x615e <create_chain+0x2ac>
    62e6:	13 81       	ldd	r17, Z+3	; 0x03
    62e8:	12 30       	cpi	r17, 0x02	; 2
    62ea:	38 f4       	brcc	.+14     	; 0x62fa <create_chain+0x448>
    62ec:	38 cf       	rjmp	.-400    	; 0x615e <create_chain+0x2ac>
    62ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    62f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    62f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    62f4:	93 8d       	ldd	r25, Z+27	; 0x1b
    62f6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    62f8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    62fa:	88 0e       	add	r8, r24
    62fc:	99 1e       	adc	r9, r25
    62fe:	aa 1e       	adc	r10, r26
    6300:	bb 1e       	adc	r11, r27
    6302:	01 e0       	ldi	r16, 0x01	; 1
    6304:	a5 01       	movw	r20, r10
    6306:	94 01       	movw	r18, r8
    6308:	6d 81       	ldd	r22, Y+5	; 0x05
    630a:	7e 81       	ldd	r23, Y+6	; 0x06
    630c:	ab 85       	ldd	r26, Y+11	; 0x0b
    630e:	bc 85       	ldd	r27, Y+12	; 0x0c
    6310:	11 96       	adiw	r26, 0x01	; 1
    6312:	8c 91       	ld	r24, X
    6314:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    6318:	11 50       	subi	r17, 0x01	; 1
    631a:	11 30       	cpi	r17, 0x01	; 1
    631c:	41 f7       	brne	.-48     	; 0x62ee <create_chain+0x43c>
    631e:	1f cf       	rjmp	.-450    	; 0x615e <create_chain+0x2ac>
    6320:	01 e0       	ldi	r16, 0x01	; 1
    6322:	a5 01       	movw	r20, r10
    6324:	94 01       	movw	r18, r8
    6326:	6d 81       	ldd	r22, Y+5	; 0x05
    6328:	7e 81       	ldd	r23, Y+6	; 0x06
    632a:	81 81       	ldd	r24, Z+1	; 0x01
    632c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    6330:	81 11       	cpse	r24, r1
    6332:	3f ce       	rjmp	.-898    	; 0x5fb2 <create_chain+0x100>
    6334:	eb 85       	ldd	r30, Y+11	; 0x0b
    6336:	fc 85       	ldd	r31, Y+12	; 0x0c
    6338:	14 82       	std	Z+4, r1	; 0x04
    633a:	82 8d       	ldd	r24, Z+26	; 0x1a
    633c:	93 8d       	ldd	r25, Z+27	; 0x1b
    633e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6340:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6342:	46 8d       	ldd	r20, Z+30	; 0x1e
    6344:	57 8d       	ldd	r21, Z+31	; 0x1f
    6346:	60 a1       	ldd	r22, Z+32	; 0x20
    6348:	71 a1       	ldd	r23, Z+33	; 0x21
    634a:	48 0f       	add	r20, r24
    634c:	59 1f       	adc	r21, r25
    634e:	6a 1f       	adc	r22, r26
    6350:	7b 1f       	adc	r23, r27
    6352:	84 16       	cp	r8, r20
    6354:	95 06       	cpc	r9, r21
    6356:	a6 06       	cpc	r10, r22
    6358:	b7 06       	cpc	r11, r23
    635a:	08 f0       	brcs	.+2      	; 0x635e <create_chain+0x4ac>
    635c:	97 ce       	rjmp	.-722    	; 0x608c <create_chain+0x1da>
    635e:	13 81       	ldd	r17, Z+3	; 0x03
    6360:	12 30       	cpi	r17, 0x02	; 2
    6362:	08 f4       	brcc	.+2      	; 0x6366 <create_chain+0x4b4>
    6364:	93 ce       	rjmp	.-730    	; 0x608c <create_chain+0x1da>
    6366:	2d 80       	ldd	r2, Y+5	; 0x05
    6368:	3e 80       	ldd	r3, Y+6	; 0x06
    636a:	06 c0       	rjmp	.+12     	; 0x6378 <create_chain+0x4c6>
    636c:	eb 85       	ldd	r30, Y+11	; 0x0b
    636e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6370:	82 8d       	ldd	r24, Z+26	; 0x1a
    6372:	93 8d       	ldd	r25, Z+27	; 0x1b
    6374:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6376:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6378:	88 0e       	add	r8, r24
    637a:	99 1e       	adc	r9, r25
    637c:	aa 1e       	adc	r10, r26
    637e:	bb 1e       	adc	r11, r27
    6380:	01 e0       	ldi	r16, 0x01	; 1
    6382:	a5 01       	movw	r20, r10
    6384:	94 01       	movw	r18, r8
    6386:	b1 01       	movw	r22, r2
    6388:	ab 85       	ldd	r26, Y+11	; 0x0b
    638a:	bc 85       	ldd	r27, Y+12	; 0x0c
    638c:	11 96       	adiw	r26, 0x01	; 1
    638e:	8c 91       	ld	r24, X
    6390:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    6394:	11 50       	subi	r17, 0x01	; 1
    6396:	11 30       	cpi	r17, 0x01	; 1
    6398:	49 f7       	brne	.-46     	; 0x636c <create_chain+0x4ba>
    639a:	78 ce       	rjmp	.-784    	; 0x608c <create_chain+0x1da>
    639c:	60 e0       	ldi	r22, 0x00	; 0
    639e:	70 e0       	ldi	r23, 0x00	; 0
    63a0:	cb 01       	movw	r24, r22
    63a2:	23 ce       	rjmp	.-954    	; 0x5fea <create_chain+0x138>
    63a4:	b9 01       	movw	r22, r18
    63a6:	a8 01       	movw	r20, r16
    63a8:	cf 01       	movw	r24, r30
    63aa:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
    63ae:	62 30       	cpi	r22, 0x02	; 2
    63b0:	71 05       	cpc	r23, r1
    63b2:	81 05       	cpc	r24, r1
    63b4:	91 05       	cpc	r25, r1
    63b6:	08 f4       	brcc	.+2      	; 0x63ba <create_chain+0x508>
    63b8:	14 ce       	rjmp	.-984    	; 0x5fe2 <create_chain+0x130>
    63ba:	a9 81       	ldd	r26, Y+1	; 0x01
    63bc:	ba 81       	ldd	r27, Y+2	; 0x02
    63be:	56 96       	adiw	r26, 0x16	; 22
    63c0:	8d 90       	ld	r8, X+
    63c2:	9d 90       	ld	r9, X+
    63c4:	ad 90       	ld	r10, X+
    63c6:	bc 90       	ld	r11, X
    63c8:	59 97       	sbiw	r26, 0x19	; 25
    63ca:	68 15       	cp	r22, r8
    63cc:	79 05       	cpc	r23, r9
    63ce:	8a 05       	cpc	r24, r10
    63d0:	9b 05       	cpc	r25, r11
    63d2:	08 f4       	brcc	.+2      	; 0x63d6 <create_chain+0x524>
    63d4:	0a ce       	rjmp	.-1004   	; 0x5fea <create_chain+0x138>
    63d6:	4f 80       	ldd	r4, Y+7	; 0x07
    63d8:	58 84       	ldd	r5, Y+8	; 0x08
    63da:	69 84       	ldd	r6, Y+9	; 0x09
    63dc:	7a 84       	ldd	r7, Y+10	; 0x0a
    63de:	fd 01       	movw	r30, r26
    63e0:	8d 01       	movw	r16, r26
    63e2:	a2 cd       	rjmp	.-1212   	; 0x5f28 <create_chain+0x76>
    63e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    63e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    63e8:	49 83       	std	Y+1, r20	; 0x01
    63ea:	5a 83       	std	Y+2, r21	; 0x02
    63ec:	fa 01       	movw	r30, r20
    63ee:	86 89       	ldd	r24, Z+22	; 0x16
    63f0:	97 89       	ldd	r25, Z+23	; 0x17
    63f2:	a0 8d       	ldd	r26, Z+24	; 0x18
    63f4:	b1 8d       	ldd	r27, Z+25	; 0x19
    63f6:	c8 16       	cp	r12, r24
    63f8:	d9 06       	cpc	r13, r25
    63fa:	ea 06       	cpc	r14, r26
    63fc:	fb 06       	cpc	r15, r27
    63fe:	08 f0       	brcs	.+2      	; 0x6402 <create_chain+0x550>
    6400:	f0 cd       	rjmp	.-1056   	; 0x5fe2 <create_chain+0x130>
    6402:	0f ef       	ldi	r16, 0xFF	; 255
    6404:	1f ef       	ldi	r17, 0xFF	; 255
    6406:	2f ef       	ldi	r18, 0xFF	; 255
    6408:	3f e0       	ldi	r19, 0x0F	; 15
    640a:	b7 01       	movw	r22, r14
    640c:	a6 01       	movw	r20, r12
    640e:	cf 01       	movw	r24, r30
    6410:	ee da       	rcall	.-2596   	; 0x59ee <put_fat.part.4>
    6412:	81 11       	cpse	r24, r1
    6414:	48 c0       	rjmp	.+144    	; 0x64a6 <create_chain+0x5f4>
    6416:	0f 81       	ldd	r16, Y+7	; 0x07
    6418:	18 85       	ldd	r17, Y+8	; 0x08
    641a:	29 85       	ldd	r18, Y+9	; 0x09
    641c:	3a 85       	ldd	r19, Y+10	; 0x0a
    641e:	01 15       	cp	r16, r1
    6420:	11 05       	cpc	r17, r1
    6422:	21 05       	cpc	r18, r1
    6424:	31 05       	cpc	r19, r1
    6426:	d1 f0       	breq	.+52     	; 0x645c <create_chain+0x5aa>
    6428:	02 30       	cpi	r16, 0x02	; 2
    642a:	11 05       	cpc	r17, r1
    642c:	21 05       	cpc	r18, r1
    642e:	31 05       	cpc	r19, r1
    6430:	08 f4       	brcc	.+2      	; 0x6434 <create_chain+0x582>
    6432:	d7 cd       	rjmp	.-1106   	; 0x5fe2 <create_chain+0x130>
    6434:	e9 81       	ldd	r30, Y+1	; 0x01
    6436:	fa 81       	ldd	r31, Y+2	; 0x02
    6438:	86 89       	ldd	r24, Z+22	; 0x16
    643a:	97 89       	ldd	r25, Z+23	; 0x17
    643c:	a0 8d       	ldd	r26, Z+24	; 0x18
    643e:	b1 8d       	ldd	r27, Z+25	; 0x19
    6440:	08 17       	cp	r16, r24
    6442:	19 07       	cpc	r17, r25
    6444:	2a 07       	cpc	r18, r26
    6446:	3b 07       	cpc	r19, r27
    6448:	08 f0       	brcs	.+2      	; 0x644c <create_chain+0x59a>
    644a:	cb cd       	rjmp	.-1130   	; 0x5fe2 <create_chain+0x130>
    644c:	b9 01       	movw	r22, r18
    644e:	a8 01       	movw	r20, r16
    6450:	97 01       	movw	r18, r14
    6452:	86 01       	movw	r16, r12
    6454:	cf 01       	movw	r24, r30
    6456:	cb da       	rcall	.-2666   	; 0x59ee <put_fat.part.4>
    6458:	81 11       	cpse	r24, r1
    645a:	25 c0       	rjmp	.+74     	; 0x64a6 <create_chain+0x5f4>
    645c:	a9 81       	ldd	r26, Y+1	; 0x01
    645e:	ba 81       	ldd	r27, Y+2	; 0x02
    6460:	1a 96       	adiw	r26, 0x0a	; 10
    6462:	cd 92       	st	X+, r12
    6464:	dd 92       	st	X+, r13
    6466:	ed 92       	st	X+, r14
    6468:	fc 92       	st	X, r15
    646a:	1d 97       	sbiw	r26, 0x0d	; 13
    646c:	fd 01       	movw	r30, r26
    646e:	86 85       	ldd	r24, Z+14	; 0x0e
    6470:	97 85       	ldd	r25, Z+15	; 0x0f
    6472:	a0 89       	ldd	r26, Z+16	; 0x10
    6474:	b1 89       	ldd	r27, Z+17	; 0x11
    6476:	8f 3f       	cpi	r24, 0xFF	; 255
    6478:	ff ef       	ldi	r31, 0xFF	; 255
    647a:	9f 07       	cpc	r25, r31
    647c:	af 07       	cpc	r26, r31
    647e:	bf 07       	cpc	r27, r31
    6480:	59 f0       	breq	.+22     	; 0x6498 <create_chain+0x5e6>
    6482:	01 97       	sbiw	r24, 0x01	; 1
    6484:	a1 09       	sbc	r26, r1
    6486:	b1 09       	sbc	r27, r1
    6488:	e9 81       	ldd	r30, Y+1	; 0x01
    648a:	fa 81       	ldd	r31, Y+2	; 0x02
    648c:	86 87       	std	Z+14, r24	; 0x0e
    648e:	97 87       	std	Z+15, r25	; 0x0f
    6490:	a0 8b       	std	Z+16, r26	; 0x10
    6492:	b1 8b       	std	Z+17, r27	; 0x11
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	85 83       	std	Z+5, r24	; 0x05
    6498:	c7 01       	movw	r24, r14
    649a:	b6 01       	movw	r22, r12
    649c:	a6 cd       	rjmp	.-1204   	; 0x5fea <create_chain+0x138>
    649e:	9f 70       	andi	r25, 0x0F	; 15
    64a0:	a0 e0       	ldi	r26, 0x00	; 0
    64a2:	b0 e0       	ldi	r27, 0x00	; 0
    64a4:	17 ce       	rjmp	.-978    	; 0x60d4 <create_chain+0x222>
    64a6:	81 30       	cpi	r24, 0x01	; 1
    64a8:	09 f4       	brne	.+2      	; 0x64ac <create_chain+0x5fa>
    64aa:	83 cd       	rjmp	.-1274   	; 0x5fb2 <create_chain+0x100>
    64ac:	9a cd       	rjmp	.-1228   	; 0x5fe2 <create_chain+0x130>

000064ae <dir_next>:
    64ae:	4f 92       	push	r4
    64b0:	5f 92       	push	r5
    64b2:	6f 92       	push	r6
    64b4:	7f 92       	push	r7
    64b6:	8f 92       	push	r8
    64b8:	9f 92       	push	r9
    64ba:	af 92       	push	r10
    64bc:	bf 92       	push	r11
    64be:	cf 92       	push	r12
    64c0:	df 92       	push	r13
    64c2:	ef 92       	push	r14
    64c4:	ff 92       	push	r15
    64c6:	0f 93       	push	r16
    64c8:	1f 93       	push	r17
    64ca:	cf 93       	push	r28
    64cc:	df 93       	push	r29
    64ce:	dc 01       	movw	r26, r24
    64d0:	14 96       	adiw	r26, 0x04	; 4
    64d2:	cd 91       	ld	r28, X+
    64d4:	dc 91       	ld	r29, X
    64d6:	15 97       	sbiw	r26, 0x05	; 5
    64d8:	21 96       	adiw	r28, 0x01	; 1
    64da:	91 f4       	brne	.+36     	; 0x6500 <dir_next+0x52>
    64dc:	84 e0       	ldi	r24, 0x04	; 4
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	ff 90       	pop	r15
    64e8:	ef 90       	pop	r14
    64ea:	df 90       	pop	r13
    64ec:	cf 90       	pop	r12
    64ee:	bf 90       	pop	r11
    64f0:	af 90       	pop	r10
    64f2:	9f 90       	pop	r9
    64f4:	8f 90       	pop	r8
    64f6:	7f 90       	pop	r7
    64f8:	6f 90       	pop	r6
    64fa:	5f 90       	pop	r5
    64fc:	4f 90       	pop	r4
    64fe:	08 95       	ret
    6500:	fc 01       	movw	r30, r24
    6502:	86 84       	ldd	r8, Z+14	; 0x0e
    6504:	97 84       	ldd	r9, Z+15	; 0x0f
    6506:	a0 88       	ldd	r10, Z+16	; 0x10
    6508:	b1 88       	ldd	r11, Z+17	; 0x11
    650a:	81 14       	cp	r8, r1
    650c:	91 04       	cpc	r9, r1
    650e:	a1 04       	cpc	r10, r1
    6510:	b1 04       	cpc	r11, r1
    6512:	21 f3       	breq	.-56     	; 0x64dc <dir_next+0x2e>
    6514:	7b 01       	movw	r14, r22
    6516:	8c 01       	movw	r16, r24
    6518:	6e 01       	movw	r12, r28
    651a:	ff e0       	ldi	r31, 0x0F	; 15
    651c:	cf 22       	and	r12, r31
    651e:	dd 24       	eor	r13, r13
    6520:	c1 14       	cp	r12, r1
    6522:	d1 04       	cpc	r13, r1
    6524:	d1 f0       	breq	.+52     	; 0x655a <dir_next+0xac>
    6526:	dc 01       	movw	r26, r24
    6528:	ed 91       	ld	r30, X+
    652a:	fc 91       	ld	r31, X
    652c:	d8 01       	movw	r26, r16
    652e:	14 96       	adiw	r26, 0x04	; 4
    6530:	cd 93       	st	X+, r28
    6532:	dc 93       	st	X, r29
    6534:	15 97       	sbiw	r26, 0x05	; 5
    6536:	be 96       	adiw	r30, 0x2e	; 46
    6538:	cc 0c       	add	r12, r12
    653a:	dd 1c       	adc	r13, r13
    653c:	c2 94       	swap	r12
    653e:	d2 94       	swap	r13
    6540:	80 ef       	ldi	r24, 0xF0	; 240
    6542:	d8 22       	and	r13, r24
    6544:	dc 24       	eor	r13, r12
    6546:	c8 22       	and	r12, r24
    6548:	dc 24       	eor	r13, r12
    654a:	ce 0e       	add	r12, r30
    654c:	df 1e       	adc	r13, r31
    654e:	52 96       	adiw	r26, 0x12	; 18
    6550:	cd 92       	st	X+, r12
    6552:	dc 92       	st	X, r13
    6554:	53 97       	sbiw	r26, 0x13	; 19
    6556:	80 e0       	ldi	r24, 0x00	; 0
    6558:	c2 cf       	rjmp	.-124    	; 0x64de <dir_next+0x30>
    655a:	bf ef       	ldi	r27, 0xFF	; 255
    655c:	8b 1a       	sub	r8, r27
    655e:	9b 0a       	sbc	r9, r27
    6560:	ab 0a       	sbc	r10, r27
    6562:	bb 0a       	sbc	r11, r27
    6564:	fc 01       	movw	r30, r24
    6566:	86 86       	std	Z+14, r8	; 0x0e
    6568:	97 86       	std	Z+15, r9	; 0x0f
    656a:	a0 8a       	std	Z+16, r10	; 0x10
    656c:	b1 8a       	std	Z+17, r11	; 0x11
    656e:	42 85       	ldd	r20, Z+10	; 0x0a
    6570:	53 85       	ldd	r21, Z+11	; 0x0b
    6572:	64 85       	ldd	r22, Z+12	; 0x0c
    6574:	75 85       	ldd	r23, Z+13	; 0x0d
    6576:	41 15       	cp	r20, r1
    6578:	51 05       	cpc	r21, r1
    657a:	61 05       	cpc	r22, r1
    657c:	71 05       	cpc	r23, r1
    657e:	09 f1       	breq	.+66     	; 0x65c2 <dir_next+0x114>
    6580:	01 90       	ld	r0, Z+
    6582:	f0 81       	ld	r31, Z
    6584:	e0 2d       	mov	r30, r0
    6586:	82 81       	ldd	r24, Z+2	; 0x02
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	01 97       	sbiw	r24, 0x01	; 1
    658c:	9e 01       	movw	r18, r28
    658e:	32 95       	swap	r19
    6590:	22 95       	swap	r18
    6592:	2f 70       	andi	r18, 0x0F	; 15
    6594:	23 27       	eor	r18, r19
    6596:	3f 70       	andi	r19, 0x0F	; 15
    6598:	23 27       	eor	r18, r19
    659a:	82 23       	and	r24, r18
    659c:	93 23       	and	r25, r19
    659e:	89 2b       	or	r24, r25
    65a0:	29 f6       	brne	.-118    	; 0x652c <dir_next+0x7e>
    65a2:	42 30       	cpi	r20, 0x02	; 2
    65a4:	51 05       	cpc	r21, r1
    65a6:	61 05       	cpc	r22, r1
    65a8:	71 05       	cpc	r23, r1
    65aa:	48 f0       	brcs	.+18     	; 0x65be <dir_next+0x110>
    65ac:	86 89       	ldd	r24, Z+22	; 0x16
    65ae:	97 89       	ldd	r25, Z+23	; 0x17
    65b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    65b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    65b4:	48 17       	cp	r20, r24
    65b6:	59 07       	cpc	r21, r25
    65b8:	6a 07       	cpc	r22, r26
    65ba:	7b 07       	cpc	r23, r27
    65bc:	60 f0       	brcs	.+24     	; 0x65d6 <dir_next+0x128>
    65be:	82 e0       	ldi	r24, 0x02	; 2
    65c0:	8e cf       	rjmp	.-228    	; 0x64de <dir_next+0x30>
    65c2:	01 90       	ld	r0, Z+
    65c4:	f0 81       	ld	r31, Z
    65c6:	e0 2d       	mov	r30, r0
    65c8:	80 85       	ldd	r24, Z+8	; 0x08
    65ca:	91 85       	ldd	r25, Z+9	; 0x09
    65cc:	c8 17       	cp	r28, r24
    65ce:	d9 07       	cpc	r29, r25
    65d0:	08 f0       	brcs	.+2      	; 0x65d4 <dir_next+0x126>
    65d2:	84 cf       	rjmp	.-248    	; 0x64dc <dir_next+0x2e>
    65d4:	ab cf       	rjmp	.-170    	; 0x652c <dir_next+0x7e>
    65d6:	cf 01       	movw	r24, r30
    65d8:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
    65dc:	4b 01       	movw	r8, r22
    65de:	5c 01       	movw	r10, r24
    65e0:	62 30       	cpi	r22, 0x02	; 2
    65e2:	71 05       	cpc	r23, r1
    65e4:	81 05       	cpc	r24, r1
    65e6:	91 05       	cpc	r25, r1
    65e8:	50 f3       	brcs	.-44     	; 0x65be <dir_next+0x110>
    65ea:	6f 3f       	cpi	r22, 0xFF	; 255
    65ec:	7f 4f       	sbci	r23, 0xFF	; 255
    65ee:	8f 4f       	sbci	r24, 0xFF	; 255
    65f0:	9f 4f       	sbci	r25, 0xFF	; 255
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <dir_next+0x148>
    65f4:	51 c0       	rjmp	.+162    	; 0x6698 <dir_next+0x1ea>
    65f6:	d8 01       	movw	r26, r16
    65f8:	ed 91       	ld	r30, X+
    65fa:	fc 91       	ld	r31, X
    65fc:	86 89       	ldd	r24, Z+22	; 0x16
    65fe:	97 89       	ldd	r25, Z+23	; 0x17
    6600:	a0 8d       	ldd	r26, Z+24	; 0x18
    6602:	b1 8d       	ldd	r27, Z+25	; 0x19
    6604:	88 16       	cp	r8, r24
    6606:	99 06       	cpc	r9, r25
    6608:	aa 06       	cpc	r10, r26
    660a:	bb 06       	cpc	r11, r27
    660c:	80 f5       	brcc	.+96     	; 0x666e <dir_next+0x1c0>
    660e:	24 01       	movw	r4, r8
    6610:	35 01       	movw	r6, r10
    6612:	b2 e0       	ldi	r27, 0x02	; 2
    6614:	4b 1a       	sub	r4, r27
    6616:	51 08       	sbc	r5, r1
    6618:	61 08       	sbc	r6, r1
    661a:	71 08       	sbc	r7, r1
    661c:	d8 01       	movw	r26, r16
    661e:	1a 96       	adiw	r26, 0x0a	; 10
    6620:	8d 92       	st	X+, r8
    6622:	9d 92       	st	X+, r9
    6624:	ad 92       	st	X+, r10
    6626:	bc 92       	st	X, r11
    6628:	1d 97       	sbiw	r26, 0x0d	; 13
    662a:	86 89       	ldd	r24, Z+22	; 0x16
    662c:	97 89       	ldd	r25, Z+23	; 0x17
    662e:	a0 8d       	ldd	r26, Z+24	; 0x18
    6630:	b1 8d       	ldd	r27, Z+25	; 0x19
    6632:	02 97       	sbiw	r24, 0x02	; 2
    6634:	a1 09       	sbc	r26, r1
    6636:	b1 09       	sbc	r27, r1
    6638:	48 16       	cp	r4, r24
    663a:	59 06       	cpc	r5, r25
    663c:	6a 06       	cpc	r6, r26
    663e:	7b 06       	cpc	r7, r27
    6640:	68 f5       	brcc	.+90     	; 0x669c <dir_next+0x1ee>
    6642:	a2 81       	ldd	r26, Z+2	; 0x02
    6644:	b0 e0       	ldi	r27, 0x00	; 0
    6646:	a3 01       	movw	r20, r6
    6648:	92 01       	movw	r18, r4
    664a:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    664e:	86 a0       	ldd	r8, Z+38	; 0x26
    6650:	97 a0       	ldd	r9, Z+39	; 0x27
    6652:	a0 a4       	ldd	r10, Z+40	; 0x28
    6654:	b1 a4       	ldd	r11, Z+41	; 0x29
    6656:	86 0e       	add	r8, r22
    6658:	97 1e       	adc	r9, r23
    665a:	a8 1e       	adc	r10, r24
    665c:	b9 1e       	adc	r11, r25
    665e:	d8 01       	movw	r26, r16
    6660:	1e 96       	adiw	r26, 0x0e	; 14
    6662:	8d 92       	st	X+, r8
    6664:	9d 92       	st	X+, r9
    6666:	ad 92       	st	X+, r10
    6668:	bc 92       	st	X, r11
    666a:	51 97       	sbiw	r26, 0x11	; 17
    666c:	5f cf       	rjmp	.-322    	; 0x652c <dir_next+0x7e>
    666e:	ef 28       	or	r14, r15
    6670:	09 f4       	brne	.+2      	; 0x6674 <dir_next+0x1c6>
    6672:	34 cf       	rjmp	.-408    	; 0x64dc <dir_next+0x2e>
    6674:	d8 01       	movw	r26, r16
    6676:	1a 96       	adiw	r26, 0x0a	; 10
    6678:	4d 91       	ld	r20, X+
    667a:	5d 91       	ld	r21, X+
    667c:	6d 91       	ld	r22, X+
    667e:	7c 91       	ld	r23, X
    6680:	1d 97       	sbiw	r26, 0x0d	; 13
    6682:	cf 01       	movw	r24, r30
    6684:	16 dc       	rcall	.-2004   	; 0x5eb2 <create_chain>
    6686:	4b 01       	movw	r8, r22
    6688:	5c 01       	movw	r10, r24
    668a:	61 15       	cp	r22, r1
    668c:	71 05       	cpc	r23, r1
    668e:	81 05       	cpc	r24, r1
    6690:	91 05       	cpc	r25, r1
    6692:	41 f4       	brne	.+16     	; 0x66a4 <dir_next+0x1f6>
    6694:	87 e0       	ldi	r24, 0x07	; 7
    6696:	23 cf       	rjmp	.-442    	; 0x64de <dir_next+0x30>
    6698:	81 e0       	ldi	r24, 0x01	; 1
    669a:	21 cf       	rjmp	.-446    	; 0x64de <dir_next+0x30>
    669c:	81 2c       	mov	r8, r1
    669e:	91 2c       	mov	r9, r1
    66a0:	54 01       	movw	r10, r8
    66a2:	dd cf       	rjmp	.-70     	; 0x665e <dir_next+0x1b0>
    66a4:	61 30       	cpi	r22, 0x01	; 1
    66a6:	71 05       	cpc	r23, r1
    66a8:	81 05       	cpc	r24, r1
    66aa:	91 05       	cpc	r25, r1
    66ac:	09 f4       	brne	.+2      	; 0x66b0 <dir_next+0x202>
    66ae:	87 cf       	rjmp	.-242    	; 0x65be <dir_next+0x110>
    66b0:	6f 3f       	cpi	r22, 0xFF	; 255
    66b2:	7f 4f       	sbci	r23, 0xFF	; 255
    66b4:	8f 4f       	sbci	r24, 0xFF	; 255
    66b6:	9f 4f       	sbci	r25, 0xFF	; 255
    66b8:	79 f3       	breq	.-34     	; 0x6698 <dir_next+0x1ea>
    66ba:	40 e0       	ldi	r20, 0x00	; 0
    66bc:	50 e0       	ldi	r21, 0x00	; 0
    66be:	ba 01       	movw	r22, r20
    66c0:	d8 01       	movw	r26, r16
    66c2:	8d 91       	ld	r24, X+
    66c4:	9c 91       	ld	r25, X
    66c6:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    66ca:	81 11       	cpse	r24, r1
    66cc:	e5 cf       	rjmp	.-54     	; 0x6698 <dir_next+0x1ea>
    66ce:	d8 01       	movw	r26, r16
    66d0:	ed 91       	ld	r30, X+
    66d2:	fc 91       	ld	r31, X
    66d4:	be 96       	adiw	r30, 0x2e	; 46
    66d6:	80 e0       	ldi	r24, 0x00	; 0
    66d8:	92 e0       	ldi	r25, 0x02	; 2
    66da:	df 01       	movw	r26, r30
    66dc:	9c 01       	movw	r18, r24
    66de:	1d 92       	st	X+, r1
    66e0:	21 50       	subi	r18, 0x01	; 1
    66e2:	30 40       	sbci	r19, 0x00	; 0
    66e4:	e1 f7       	brne	.-8      	; 0x66de <dir_next+0x230>
    66e6:	d8 01       	movw	r26, r16
    66e8:	ed 91       	ld	r30, X+
    66ea:	fc 91       	ld	r31, X
    66ec:	24 01       	movw	r4, r8
    66ee:	35 01       	movw	r6, r10
    66f0:	b2 e0       	ldi	r27, 0x02	; 2
    66f2:	4b 1a       	sub	r4, r27
    66f4:	51 08       	sbc	r5, r1
    66f6:	61 08       	sbc	r6, r1
    66f8:	71 08       	sbc	r7, r1
    66fa:	86 89       	ldd	r24, Z+22	; 0x16
    66fc:	97 89       	ldd	r25, Z+23	; 0x17
    66fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    6700:	b1 8d       	ldd	r27, Z+25	; 0x19
    6702:	02 97       	sbiw	r24, 0x02	; 2
    6704:	a1 09       	sbc	r26, r1
    6706:	b1 09       	sbc	r27, r1
    6708:	48 16       	cp	r4, r24
    670a:	59 06       	cpc	r5, r25
    670c:	6a 06       	cpc	r6, r26
    670e:	7b 06       	cpc	r7, r27
    6710:	08 f0       	brcs	.+2      	; 0x6714 <dir_next+0x266>
    6712:	48 c0       	rjmp	.+144    	; 0x67a4 <dir_next+0x2f6>
    6714:	a2 81       	ldd	r26, Z+2	; 0x02
    6716:	b0 e0       	ldi	r27, 0x00	; 0
    6718:	a3 01       	movw	r20, r6
    671a:	92 01       	movw	r18, r4
    671c:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    6720:	26 a1       	ldd	r18, Z+38	; 0x26
    6722:	37 a1       	ldd	r19, Z+39	; 0x27
    6724:	40 a5       	ldd	r20, Z+40	; 0x28
    6726:	51 a5       	ldd	r21, Z+41	; 0x29
    6728:	dc 01       	movw	r26, r24
    672a:	cb 01       	movw	r24, r22
    672c:	82 0f       	add	r24, r18
    672e:	93 1f       	adc	r25, r19
    6730:	a4 1f       	adc	r26, r20
    6732:	b5 1f       	adc	r27, r21
    6734:	82 a7       	std	Z+42, r24	; 0x2a
    6736:	93 a7       	std	Z+43, r25	; 0x2b
    6738:	a4 a7       	std	Z+44, r26	; 0x2c
    673a:	b5 a7       	std	Z+45, r27	; 0x2d
    673c:	f1 2c       	mov	r15, r1
    673e:	ee 24       	eor	r14, r14
    6740:	e3 94       	inc	r14
    6742:	1a c0       	rjmp	.+52     	; 0x6778 <dir_next+0x2ca>
    6744:	e4 82       	std	Z+4, r14	; 0x04
    6746:	40 e0       	ldi	r20, 0x00	; 0
    6748:	50 e0       	ldi	r21, 0x00	; 0
    674a:	ba 01       	movw	r22, r20
    674c:	f8 01       	movw	r30, r16
    674e:	80 81       	ld	r24, Z
    6750:	91 81       	ldd	r25, Z+1	; 0x01
    6752:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    6756:	81 11       	cpse	r24, r1
    6758:	9f cf       	rjmp	.-194    	; 0x6698 <dir_next+0x1ea>
    675a:	d8 01       	movw	r26, r16
    675c:	ed 91       	ld	r30, X+
    675e:	fc 91       	ld	r31, X
    6760:	82 a5       	ldd	r24, Z+42	; 0x2a
    6762:	93 a5       	ldd	r25, Z+43	; 0x2b
    6764:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6766:	b5 a5       	ldd	r27, Z+45	; 0x2d
    6768:	01 96       	adiw	r24, 0x01	; 1
    676a:	a1 1d       	adc	r26, r1
    676c:	b1 1d       	adc	r27, r1
    676e:	82 a7       	std	Z+42, r24	; 0x2a
    6770:	93 a7       	std	Z+43, r25	; 0x2b
    6772:	a4 a7       	std	Z+44, r26	; 0x2c
    6774:	b5 a7       	std	Z+45, r27	; 0x2d
    6776:	f3 94       	inc	r15
    6778:	d8 01       	movw	r26, r16
    677a:	ed 91       	ld	r30, X+
    677c:	fc 91       	ld	r31, X
    677e:	82 81       	ldd	r24, Z+2	; 0x02
    6780:	f8 16       	cp	r15, r24
    6782:	00 f3       	brcs	.-64     	; 0x6744 <dir_next+0x296>
    6784:	82 a5       	ldd	r24, Z+42	; 0x2a
    6786:	93 a5       	ldd	r25, Z+43	; 0x2b
    6788:	a4 a5       	ldd	r26, Z+44	; 0x2c
    678a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    678c:	8f 19       	sub	r24, r15
    678e:	91 09       	sbc	r25, r1
    6790:	a1 09       	sbc	r26, r1
    6792:	b1 09       	sbc	r27, r1
    6794:	82 a7       	std	Z+42, r24	; 0x2a
    6796:	93 a7       	std	Z+43, r25	; 0x2b
    6798:	a4 a7       	std	Z+44, r26	; 0x2c
    679a:	b5 a7       	std	Z+45, r27	; 0x2d
    679c:	d8 01       	movw	r26, r16
    679e:	ed 91       	ld	r30, X+
    67a0:	fc 91       	ld	r31, X
    67a2:	3c cf       	rjmp	.-392    	; 0x661c <dir_next+0x16e>
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	dc 01       	movw	r26, r24
    67aa:	c4 cf       	rjmp	.-120    	; 0x6734 <dir_next+0x286>

000067ac <dir_register>:
    67ac:	2f 92       	push	r2
    67ae:	3f 92       	push	r3
    67b0:	4f 92       	push	r4
    67b2:	5f 92       	push	r5
    67b4:	6f 92       	push	r6
    67b6:	7f 92       	push	r7
    67b8:	8f 92       	push	r8
    67ba:	9f 92       	push	r9
    67bc:	af 92       	push	r10
    67be:	bf 92       	push	r11
    67c0:	cf 92       	push	r12
    67c2:	df 92       	push	r13
    67c4:	ef 92       	push	r14
    67c6:	ff 92       	push	r15
    67c8:	0f 93       	push	r16
    67ca:	1f 93       	push	r17
    67cc:	cf 93       	push	r28
    67ce:	df 93       	push	r29
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	a8 97       	sbiw	r28, 0x28	; 40
    67d6:	cd bf       	out	0x3d, r28	; 61
    67d8:	de bf       	out	0x3e, r29	; 62
    67da:	4c 01       	movw	r8, r24
    67dc:	dc 01       	movw	r26, r24
    67de:	54 96       	adiw	r26, 0x14	; 20
    67e0:	0d 91       	ld	r16, X+
    67e2:	1c 91       	ld	r17, X
    67e4:	55 97       	sbiw	r26, 0x15	; 21
    67e6:	56 96       	adiw	r26, 0x16	; 22
    67e8:	ed 91       	ld	r30, X+
    67ea:	fc 91       	ld	r31, X
    67ec:	57 97       	sbiw	r26, 0x17	; 23
    67ee:	ec a3       	std	Y+36, r30	; 0x24
    67f0:	fd a3       	std	Y+37, r31	; 0x25
    67f2:	8c e0       	ldi	r24, 0x0C	; 12
    67f4:	f8 01       	movw	r30, r16
    67f6:	de 01       	movw	r26, r28
    67f8:	11 96       	adiw	r26, 0x01	; 1
    67fa:	01 90       	ld	r0, Z+
    67fc:	0d 92       	st	X+, r0
    67fe:	8a 95       	dec	r24
    6800:	e1 f7       	brne	.-8      	; 0x67fa <dir_register+0x4e>
    6802:	fc 85       	ldd	r31, Y+12	; 0x0c
    6804:	fe a3       	std	Y+38, r31	; 0x26
    6806:	f0 ff       	sbrs	r31, 0
    6808:	d8 c1       	rjmp	.+944    	; 0x6bba <dir_register+0x40e>
    680a:	d8 01       	movw	r26, r16
    680c:	1b 96       	adiw	r26, 0x0b	; 11
    680e:	1c 92       	st	X, r1
    6810:	f4 01       	movw	r30, r8
    6812:	16 8a       	std	Z+22, r1	; 0x16
    6814:	17 8a       	std	Z+23, r1	; 0x17
    6816:	c9 80       	ldd	r12, Y+1	; 0x01
    6818:	aa 80       	ldd	r10, Y+2	; 0x02
    681a:	fb 81       	ldd	r31, Y+3	; 0x03
    681c:	fe 8b       	std	Y+22, r31	; 0x16
    681e:	2c 81       	ldd	r18, Y+4	; 0x04
    6820:	2d 8f       	std	Y+29, r18	; 0x1d
    6822:	4d 81       	ldd	r20, Y+5	; 0x05
    6824:	4e 8f       	std	Y+30, r20	; 0x1e
    6826:	6e 81       	ldd	r22, Y+6	; 0x06
    6828:	6b 8f       	std	Y+27, r22	; 0x1b
    682a:	7f 81       	ldd	r23, Y+7	; 0x07
    682c:	7a 8f       	std	Y+26, r23	; 0x1a
    682e:	88 85       	ldd	r24, Y+8	; 0x08
    6830:	8c 8f       	std	Y+28, r24	; 0x1c
    6832:	99 85       	ldd	r25, Y+9	; 0x09
    6834:	98 8f       	std	Y+24, r25	; 0x18
    6836:	aa 85       	ldd	r26, Y+10	; 0x0a
    6838:	af 8b       	std	Y+23, r26	; 0x17
    683a:	bb 85       	ldd	r27, Y+11	; 0x0b
    683c:	b9 8f       	std	Y+25, r27	; 0x19
    683e:	ee 24       	eor	r14, r14
    6840:	e3 94       	inc	r14
    6842:	f1 2c       	mov	r15, r1
    6844:	fe e7       	ldi	r31, 0x7E	; 126
    6846:	bf 2e       	mov	r11, r31
    6848:	38 01       	movw	r6, r16
    684a:	ef ef       	ldi	r30, 0xFF	; 255
    684c:	6e 1a       	sub	r6, r30
    684e:	7e 0a       	sbc	r7, r30
    6850:	28 01       	movw	r4, r16
    6852:	f2 e0       	ldi	r31, 0x02	; 2
    6854:	4f 0e       	add	r4, r31
    6856:	51 1c       	adc	r5, r1
    6858:	18 01       	movw	r2, r16
    685a:	23 e0       	ldi	r18, 0x03	; 3
    685c:	22 0e       	add	r2, r18
    685e:	31 1c       	adc	r3, r1
    6860:	b8 01       	movw	r22, r16
    6862:	6c 5f       	subi	r22, 0xFC	; 252
    6864:	7f 4f       	sbci	r23, 0xFF	; 255
    6866:	6f 8f       	std	Y+31, r22	; 0x1f
    6868:	78 a3       	std	Y+32, r23	; 0x20
    686a:	c8 01       	movw	r24, r16
    686c:	05 96       	adiw	r24, 0x05	; 5
    686e:	89 a3       	std	Y+33, r24	; 0x21
    6870:	9a a3       	std	Y+34, r25	; 0x22
    6872:	a0 e2       	ldi	r26, 0x20	; 32
    6874:	da 2e       	mov	r13, r26
    6876:	ab a2       	std	Y+35, r10	; 0x23
    6878:	bd 8a       	std	Y+21, r11	; 0x15
    687a:	d8 01       	movw	r26, r16
    687c:	cc 92       	st	X, r12
    687e:	eb a1       	ldd	r30, Y+35	; 0x23
    6880:	11 96       	adiw	r26, 0x01	; 1
    6882:	ec 93       	st	X, r30
    6884:	11 97       	sbiw	r26, 0x01	; 1
    6886:	fe 89       	ldd	r31, Y+22	; 0x16
    6888:	12 96       	adiw	r26, 0x02	; 2
    688a:	fc 93       	st	X, r31
    688c:	12 97       	sbiw	r26, 0x02	; 2
    688e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6890:	13 96       	adiw	r26, 0x03	; 3
    6892:	2c 93       	st	X, r18
    6894:	13 97       	sbiw	r26, 0x03	; 3
    6896:	4e 8d       	ldd	r20, Y+30	; 0x1e
    6898:	14 96       	adiw	r26, 0x04	; 4
    689a:	4c 93       	st	X, r20
    689c:	14 97       	sbiw	r26, 0x04	; 4
    689e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    68a0:	15 96       	adiw	r26, 0x05	; 5
    68a2:	6c 93       	st	X, r22
    68a4:	15 97       	sbiw	r26, 0x05	; 5
    68a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    68a8:	16 96       	adiw	r26, 0x06	; 6
    68aa:	7c 93       	st	X, r23
    68ac:	16 97       	sbiw	r26, 0x06	; 6
    68ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    68b0:	17 96       	adiw	r26, 0x07	; 7
    68b2:	8c 93       	st	X, r24
    68b4:	17 97       	sbiw	r26, 0x07	; 7
    68b6:	98 8d       	ldd	r25, Y+24	; 0x18
    68b8:	18 96       	adiw	r26, 0x08	; 8
    68ba:	9c 93       	st	X, r25
    68bc:	18 97       	sbiw	r26, 0x08	; 8
    68be:	ef 89       	ldd	r30, Y+23	; 0x17
    68c0:	19 96       	adiw	r26, 0x09	; 9
    68c2:	ec 93       	st	X, r30
    68c4:	19 97       	sbiw	r26, 0x09	; 9
    68c6:	f9 8d       	ldd	r31, Y+25	; 0x19
    68c8:	1a 96       	adiw	r26, 0x0a	; 10
    68ca:	fc 93       	st	X, r31
    68cc:	26 e0       	ldi	r18, 0x06	; 6
    68ce:	e2 16       	cp	r14, r18
    68d0:	f1 04       	cpc	r15, r1
    68d2:	08 f4       	brcc	.+2      	; 0x68d6 <dir_register+0x12a>
    68d4:	28 c1       	rjmp	.+592    	; 0x6b26 <dir_register+0x37a>
    68d6:	ec a1       	ldd	r30, Y+36	; 0x24
    68d8:	fd a1       	ldd	r31, Y+37	; 0x25
    68da:	21 91       	ld	r18, Z+
    68dc:	31 91       	ld	r19, Z+
    68de:	c7 01       	movw	r24, r14
    68e0:	80 fb       	bst	r24, 0
    68e2:	97 95       	ror	r25
    68e4:	87 95       	ror	r24
    68e6:	97 f9       	bld	r25, 7
    68e8:	82 0f       	add	r24, r18
    68ea:	93 1f       	adc	r25, r19
    68ec:	21 91       	ld	r18, Z+
    68ee:	31 91       	ld	r19, Z+
    68f0:	21 15       	cp	r18, r1
    68f2:	31 05       	cpc	r19, r1
    68f4:	a9 f7       	brne	.-22     	; 0x68e0 <dir_register+0x134>
    68f6:	38 2f       	mov	r19, r24
    68f8:	3f 70       	andi	r19, 0x0F	; 15
    68fa:	20 e3       	ldi	r18, 0x30	; 48
    68fc:	23 0f       	add	r18, r19
    68fe:	2a 33       	cpi	r18, 0x3A	; 58
    6900:	10 f0       	brcs	.+4      	; 0x6906 <dir_register+0x15a>
    6902:	27 e3       	ldi	r18, 0x37	; 55
    6904:	23 0f       	add	r18, r19
    6906:	2c 8b       	std	Y+20, r18	; 0x14
    6908:	92 95       	swap	r25
    690a:	82 95       	swap	r24
    690c:	8f 70       	andi	r24, 0x0F	; 15
    690e:	89 27       	eor	r24, r25
    6910:	9f 70       	andi	r25, 0x0F	; 15
    6912:	89 27       	eor	r24, r25
    6914:	00 97       	sbiw	r24, 0x00	; 0
    6916:	09 f4       	brne	.+2      	; 0x691a <dir_register+0x16e>
    6918:	3b c1       	rjmp	.+630    	; 0x6b90 <dir_register+0x3e4>
    691a:	38 2f       	mov	r19, r24
    691c:	3f 70       	andi	r19, 0x0F	; 15
    691e:	20 e3       	ldi	r18, 0x30	; 48
    6920:	23 0f       	add	r18, r19
    6922:	2a 33       	cpi	r18, 0x3A	; 58
    6924:	10 f0       	brcs	.+4      	; 0x692a <dir_register+0x17e>
    6926:	27 e3       	ldi	r18, 0x37	; 55
    6928:	23 0f       	add	r18, r19
    692a:	2b 8b       	std	Y+19, r18	; 0x13
    692c:	92 95       	swap	r25
    692e:	82 95       	swap	r24
    6930:	8f 70       	andi	r24, 0x0F	; 15
    6932:	89 27       	eor	r24, r25
    6934:	9f 70       	andi	r25, 0x0F	; 15
    6936:	89 27       	eor	r24, r25
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	09 f4       	brne	.+2      	; 0x693e <dir_register+0x192>
    693c:	23 c1       	rjmp	.+582    	; 0x6b84 <dir_register+0x3d8>
    693e:	38 2f       	mov	r19, r24
    6940:	3f 70       	andi	r19, 0x0F	; 15
    6942:	20 e3       	ldi	r18, 0x30	; 48
    6944:	23 0f       	add	r18, r19
    6946:	2a 33       	cpi	r18, 0x3A	; 58
    6948:	10 f0       	brcs	.+4      	; 0x694e <dir_register+0x1a2>
    694a:	27 e3       	ldi	r18, 0x37	; 55
    694c:	23 0f       	add	r18, r19
    694e:	2a 8b       	std	Y+18, r18	; 0x12
    6950:	92 95       	swap	r25
    6952:	82 95       	swap	r24
    6954:	8f 70       	andi	r24, 0x0F	; 15
    6956:	89 27       	eor	r24, r25
    6958:	9f 70       	andi	r25, 0x0F	; 15
    695a:	89 27       	eor	r24, r25
    695c:	00 97       	sbiw	r24, 0x00	; 0
    695e:	09 f4       	brne	.+2      	; 0x6962 <dir_register+0x1b6>
    6960:	0b c1       	rjmp	.+534    	; 0x6b78 <dir_register+0x3cc>
    6962:	20 e3       	ldi	r18, 0x30	; 48
    6964:	28 0f       	add	r18, r24
    6966:	2a 33       	cpi	r18, 0x3A	; 58
    6968:	10 f0       	brcs	.+4      	; 0x696e <dir_register+0x1c2>
    696a:	27 e3       	ldi	r18, 0x37	; 55
    696c:	28 0f       	add	r18, r24
    696e:	29 8b       	std	Y+17, r18	; 0x11
    6970:	24 e0       	ldi	r18, 0x04	; 4
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	43 e0       	ldi	r20, 0x03	; 3
    6976:	a4 2e       	mov	r10, r20
    6978:	b1 2c       	mov	r11, r1
    697a:	ed e0       	ldi	r30, 0x0D	; 13
    697c:	f0 e0       	ldi	r31, 0x00	; 0
    697e:	ec 0f       	add	r30, r28
    6980:	fd 1f       	adc	r31, r29
    6982:	ea 0d       	add	r30, r10
    6984:	fb 1d       	adc	r31, r11
    6986:	bd 89       	ldd	r27, Y+21	; 0x15
    6988:	b0 83       	st	Z, r27
    698a:	e0 e2       	ldi	r30, 0x20	; 32
    698c:	ce 16       	cp	r12, r30
    698e:	09 f4       	brne	.+2      	; 0x6992 <dir_register+0x1e6>
    6990:	eb c0       	rjmp	.+470    	; 0x6b68 <dir_register+0x3bc>
    6992:	f3 01       	movw	r30, r6
    6994:	d8 01       	movw	r26, r16
    6996:	11 96       	adiw	r26, 0x01	; 1
    6998:	8c 91       	ld	r24, X
    699a:	11 97       	sbiw	r26, 0x01	; 1
    699c:	80 32       	cpi	r24, 0x20	; 32
    699e:	09 f4       	brne	.+2      	; 0x69a2 <dir_register+0x1f6>
    69a0:	c3 c2       	rjmp	.+1414   	; 0x6f28 <dir_register+0x77c>
    69a2:	f2 01       	movw	r30, r4
    69a4:	12 96       	adiw	r26, 0x02	; 2
    69a6:	8c 91       	ld	r24, X
    69a8:	80 32       	cpi	r24, 0x20	; 32
    69aa:	09 f4       	brne	.+2      	; 0x69ae <dir_register+0x202>
    69ac:	ba c2       	rjmp	.+1396   	; 0x6f22 <dir_register+0x776>
    69ae:	b3 e0       	ldi	r27, 0x03	; 3
    69b0:	ab 16       	cp	r10, r27
    69b2:	b1 04       	cpc	r11, r1
    69b4:	09 f4       	brne	.+2      	; 0x69b8 <dir_register+0x20c>
    69b6:	a5 c2       	rjmp	.+1354   	; 0x6f02 <dir_register+0x756>
    69b8:	f1 01       	movw	r30, r2
    69ba:	d8 01       	movw	r26, r16
    69bc:	13 96       	adiw	r26, 0x03	; 3
    69be:	8c 91       	ld	r24, X
    69c0:	80 32       	cpi	r24, 0x20	; 32
    69c2:	09 f4       	brne	.+2      	; 0x69c6 <dir_register+0x21a>
    69c4:	ab c2       	rjmp	.+1366   	; 0x6f1c <dir_register+0x770>
    69c6:	b4 e0       	ldi	r27, 0x04	; 4
    69c8:	ab 16       	cp	r10, r27
    69ca:	b1 04       	cpc	r11, r1
    69cc:	09 f4       	brne	.+2      	; 0x69d0 <dir_register+0x224>
    69ce:	96 c2       	rjmp	.+1324   	; 0x6efc <dir_register+0x750>
    69d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    69d2:	f8 a1       	ldd	r31, Y+32	; 0x20
    69d4:	d8 01       	movw	r26, r16
    69d6:	14 96       	adiw	r26, 0x04	; 4
    69d8:	8c 91       	ld	r24, X
    69da:	80 32       	cpi	r24, 0x20	; 32
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <dir_register+0x234>
    69de:	9b c2       	rjmp	.+1334   	; 0x6f16 <dir_register+0x76a>
    69e0:	b6 e0       	ldi	r27, 0x06	; 6
    69e2:	ab 16       	cp	r10, r27
    69e4:	b1 04       	cpc	r11, r1
    69e6:	09 f0       	breq	.+2      	; 0x69ea <dir_register+0x23e>
    69e8:	86 c2       	rjmp	.+1292   	; 0x6ef6 <dir_register+0x74a>
    69ea:	e9 a1       	ldd	r30, Y+33	; 0x21
    69ec:	fa a1       	ldd	r31, Y+34	; 0x22
    69ee:	d8 01       	movw	r26, r16
    69f0:	15 96       	adiw	r26, 0x05	; 5
    69f2:	8c 91       	ld	r24, X
    69f4:	80 32       	cpi	r24, 0x20	; 32
    69f6:	09 f4       	brne	.+2      	; 0x69fa <dir_register+0x24e>
    69f8:	87 c2       	rjmp	.+1294   	; 0x6f08 <dir_register+0x75c>
    69fa:	86 e0       	ldi	r24, 0x06	; 6
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	dc 01       	movw	r26, r24
    6a00:	11 96       	adiw	r26, 0x01	; 1
    6a02:	f8 01       	movw	r30, r16
    6a04:	e8 0f       	add	r30, r24
    6a06:	f9 1f       	adc	r31, r25
    6a08:	4d 89       	ldd	r20, Y+21	; 0x15
    6a0a:	40 83       	st	Z, r20
    6a0c:	fc 01       	movw	r30, r24
    6a0e:	32 96       	adiw	r30, 0x02	; 2
    6a10:	a5 01       	movw	r20, r10
    6a12:	4e 5f       	subi	r20, 0xFE	; 254
    6a14:	5f 4f       	sbci	r21, 0xFF	; 255
    6a16:	bd 01       	movw	r22, r26
    6a18:	60 0f       	add	r22, r16
    6a1a:	71 1f       	adc	r23, r17
    6a1c:	ad e0       	ldi	r26, 0x0D	; 13
    6a1e:	b0 e0       	ldi	r27, 0x00	; 0
    6a20:	ac 0f       	add	r26, r28
    6a22:	bd 1f       	adc	r27, r29
    6a24:	2a 0f       	add	r18, r26
    6a26:	3b 1f       	adc	r19, r27
    6a28:	d9 01       	movw	r26, r18
    6a2a:	2c 91       	ld	r18, X
    6a2c:	db 01       	movw	r26, r22
    6a2e:	2c 93       	st	X, r18
    6a30:	e8 30       	cpi	r30, 0x08	; 8
    6a32:	f1 05       	cpc	r31, r1
    6a34:	09 f4       	brne	.+2      	; 0x6a38 <dir_register+0x28c>
    6a36:	4c c0       	rjmp	.+152    	; 0x6ad0 <dir_register+0x324>
    6a38:	9c 01       	movw	r18, r24
    6a3a:	2d 5f       	subi	r18, 0xFD	; 253
    6a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a3e:	e0 0f       	add	r30, r16
    6a40:	f1 1f       	adc	r31, r17
    6a42:	48 30       	cpi	r20, 0x08	; 8
    6a44:	51 05       	cpc	r21, r1
    6a46:	09 f4       	brne	.+2      	; 0x6a4a <dir_register+0x29e>
    6a48:	70 c0       	rjmp	.+224    	; 0x6b2a <dir_register+0x37e>
    6a4a:	b5 01       	movw	r22, r10
    6a4c:	6d 5f       	subi	r22, 0xFD	; 253
    6a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a50:	ad e0       	ldi	r26, 0x0D	; 13
    6a52:	b0 e0       	ldi	r27, 0x00	; 0
    6a54:	ac 0f       	add	r26, r28
    6a56:	bd 1f       	adc	r27, r29
    6a58:	a4 0f       	add	r26, r20
    6a5a:	b5 1f       	adc	r27, r21
    6a5c:	4c 91       	ld	r20, X
    6a5e:	40 83       	st	Z, r20
    6a60:	28 30       	cpi	r18, 0x08	; 8
    6a62:	31 05       	cpc	r19, r1
    6a64:	a9 f1       	breq	.+106    	; 0x6ad0 <dir_register+0x324>
    6a66:	ac 01       	movw	r20, r24
    6a68:	4c 5f       	subi	r20, 0xFC	; 252
    6a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a6c:	f8 01       	movw	r30, r16
    6a6e:	e2 0f       	add	r30, r18
    6a70:	f3 1f       	adc	r31, r19
    6a72:	68 30       	cpi	r22, 0x08	; 8
    6a74:	71 05       	cpc	r23, r1
    6a76:	09 f4       	brne	.+2      	; 0x6a7a <dir_register+0x2ce>
    6a78:	62 c0       	rjmp	.+196    	; 0x6b3e <dir_register+0x392>
    6a7a:	ad e0       	ldi	r26, 0x0D	; 13
    6a7c:	b0 e0       	ldi	r27, 0x00	; 0
    6a7e:	ac 0f       	add	r26, r28
    6a80:	bd 1f       	adc	r27, r29
    6a82:	a6 0f       	add	r26, r22
    6a84:	b7 1f       	adc	r27, r23
    6a86:	6c 91       	ld	r22, X
    6a88:	60 83       	st	Z, r22
    6a8a:	48 30       	cpi	r20, 0x08	; 8
    6a8c:	51 05       	cpc	r21, r1
    6a8e:	01 f1       	breq	.+64     	; 0x6ad0 <dir_register+0x324>
    6a90:	2e 5f       	subi	r18, 0xFE	; 254
    6a92:	3f 4f       	sbci	r19, 0xFF	; 255
    6a94:	f8 01       	movw	r30, r16
    6a96:	e4 0f       	add	r30, r20
    6a98:	f5 1f       	adc	r31, r21
    6a9a:	b4 e0       	ldi	r27, 0x04	; 4
    6a9c:	ab 16       	cp	r10, r27
    6a9e:	b1 04       	cpc	r11, r1
    6aa0:	09 f4       	brne	.+2      	; 0x6aa4 <dir_register+0x2f8>
    6aa2:	57 c0       	rjmp	.+174    	; 0x6b52 <dir_register+0x3a6>
    6aa4:	4c 89       	ldd	r20, Y+20	; 0x14
    6aa6:	40 83       	st	Z, r20
    6aa8:	28 30       	cpi	r18, 0x08	; 8
    6aaa:	31 05       	cpc	r19, r1
    6aac:	89 f0       	breq	.+34     	; 0x6ad0 <dir_register+0x324>
    6aae:	06 96       	adiw	r24, 0x06	; 6
    6ab0:	f8 01       	movw	r30, r16
    6ab2:	e2 0f       	add	r30, r18
    6ab4:	f3 1f       	adc	r31, r19
    6ab6:	d0 82       	st	Z, r13
    6ab8:	88 30       	cpi	r24, 0x08	; 8
    6aba:	91 05       	cpc	r25, r1
    6abc:	49 f0       	breq	.+18     	; 0x6ad0 <dir_register+0x324>
    6abe:	f8 01       	movw	r30, r16
    6ac0:	e8 0f       	add	r30, r24
    6ac2:	f9 1f       	adc	r31, r25
    6ac4:	d0 82       	st	Z, r13
    6ac6:	06 97       	sbiw	r24, 0x06	; 6
    6ac8:	19 f4       	brne	.+6      	; 0x6ad0 <dir_register+0x324>
    6aca:	d8 01       	movw	r26, r16
    6acc:	17 96       	adiw	r26, 0x07	; 7
    6ace:	dc 92       	st	X, r13
    6ad0:	60 e0       	ldi	r22, 0x00	; 0
    6ad2:	70 e0       	ldi	r23, 0x00	; 0
    6ad4:	c4 01       	movw	r24, r8
    6ad6:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
    6ada:	81 11       	cpse	r24, r1
    6adc:	5f c0       	rjmp	.+190    	; 0x6b9c <dir_register+0x3f0>
    6ade:	c4 01       	movw	r24, r8
    6ae0:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <dir_find.part.5>
    6ae4:	81 11       	cpse	r24, r1
    6ae6:	5a c0       	rjmp	.+180    	; 0x6b9c <dir_register+0x3f0>
    6ae8:	ef ef       	ldi	r30, 0xFF	; 255
    6aea:	ee 1a       	sub	r14, r30
    6aec:	fe 0a       	sbc	r15, r30
    6aee:	f4 e6       	ldi	r31, 0x64	; 100
    6af0:	ef 16       	cp	r14, r31
    6af2:	f1 04       	cpc	r15, r1
    6af4:	09 f0       	breq	.+2      	; 0x6af8 <dir_register+0x34c>
    6af6:	c1 ce       	rjmp	.-638    	; 0x687a <dir_register+0xce>
    6af8:	87 e0       	ldi	r24, 0x07	; 7
    6afa:	a8 96       	adiw	r28, 0x28	; 40
    6afc:	cd bf       	out	0x3d, r28	; 61
    6afe:	de bf       	out	0x3e, r29	; 62
    6b00:	df 91       	pop	r29
    6b02:	cf 91       	pop	r28
    6b04:	1f 91       	pop	r17
    6b06:	0f 91       	pop	r16
    6b08:	ff 90       	pop	r15
    6b0a:	ef 90       	pop	r14
    6b0c:	df 90       	pop	r13
    6b0e:	cf 90       	pop	r12
    6b10:	bf 90       	pop	r11
    6b12:	af 90       	pop	r10
    6b14:	9f 90       	pop	r9
    6b16:	8f 90       	pop	r8
    6b18:	7f 90       	pop	r7
    6b1a:	6f 90       	pop	r6
    6b1c:	5f 90       	pop	r5
    6b1e:	4f 90       	pop	r4
    6b20:	3f 90       	pop	r3
    6b22:	2f 90       	pop	r2
    6b24:	08 95       	ret
    6b26:	c7 01       	movw	r24, r14
    6b28:	e6 ce       	rjmp	.-564    	; 0x68f6 <dir_register+0x14a>
    6b2a:	d0 82       	st	Z, r13
    6b2c:	28 30       	cpi	r18, 0x08	; 8
    6b2e:	31 05       	cpc	r19, r1
    6b30:	79 f2       	breq	.-98     	; 0x6ad0 <dir_register+0x324>
    6b32:	ac 01       	movw	r20, r24
    6b34:	4c 5f       	subi	r20, 0xFC	; 252
    6b36:	5f 4f       	sbci	r21, 0xFF	; 255
    6b38:	f8 01       	movw	r30, r16
    6b3a:	e2 0f       	add	r30, r18
    6b3c:	f3 1f       	adc	r31, r19
    6b3e:	d0 82       	st	Z, r13
    6b40:	48 30       	cpi	r20, 0x08	; 8
    6b42:	51 05       	cpc	r21, r1
    6b44:	29 f2       	breq	.-118    	; 0x6ad0 <dir_register+0x324>
    6b46:	9a 01       	movw	r18, r20
    6b48:	2f 5f       	subi	r18, 0xFF	; 255
    6b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b4c:	f8 01       	movw	r30, r16
    6b4e:	e4 0f       	add	r30, r20
    6b50:	f5 1f       	adc	r31, r21
    6b52:	d0 82       	st	Z, r13
    6b54:	28 30       	cpi	r18, 0x08	; 8
    6b56:	31 05       	cpc	r19, r1
    6b58:	09 f4       	brne	.+2      	; 0x6b5c <dir_register+0x3b0>
    6b5a:	ba cf       	rjmp	.-140    	; 0x6ad0 <dir_register+0x324>
    6b5c:	ca 01       	movw	r24, r20
    6b5e:	02 96       	adiw	r24, 0x02	; 2
    6b60:	f8 01       	movw	r30, r16
    6b62:	e2 0f       	add	r30, r18
    6b64:	f3 1f       	adc	r31, r19
    6b66:	a7 cf       	rjmp	.-178    	; 0x6ab6 <dir_register+0x30a>
    6b68:	eb 2f       	mov	r30, r27
    6b6a:	d8 01       	movw	r26, r16
    6b6c:	ec 93       	st	X, r30
    6b6e:	80 e0       	ldi	r24, 0x00	; 0
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	a1 e0       	ldi	r26, 0x01	; 1
    6b74:	b0 e0       	ldi	r27, 0x00	; 0
    6b76:	4a cf       	rjmp	.-364    	; 0x6a0c <dir_register+0x260>
    6b78:	25 e0       	ldi	r18, 0x05	; 5
    6b7a:	30 e0       	ldi	r19, 0x00	; 0
    6b7c:	84 e0       	ldi	r24, 0x04	; 4
    6b7e:	a8 2e       	mov	r10, r24
    6b80:	b1 2c       	mov	r11, r1
    6b82:	fb ce       	rjmp	.-522    	; 0x697a <dir_register+0x1ce>
    6b84:	26 e0       	ldi	r18, 0x06	; 6
    6b86:	30 e0       	ldi	r19, 0x00	; 0
    6b88:	95 e0       	ldi	r25, 0x05	; 5
    6b8a:	a9 2e       	mov	r10, r25
    6b8c:	b1 2c       	mov	r11, r1
    6b8e:	f5 ce       	rjmp	.-534    	; 0x697a <dir_register+0x1ce>
    6b90:	27 e0       	ldi	r18, 0x07	; 7
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	46 e0       	ldi	r20, 0x06	; 6
    6b96:	a4 2e       	mov	r10, r20
    6b98:	b1 2c       	mov	r11, r1
    6b9a:	ef ce       	rjmp	.-546    	; 0x697a <dir_register+0x1ce>
    6b9c:	84 30       	cpi	r24, 0x04	; 4
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <dir_register+0x3f6>
    6ba0:	ac cf       	rjmp	.-168    	; 0x6afa <dir_register+0x34e>
    6ba2:	ee a1       	ldd	r30, Y+38	; 0x26
    6ba4:	d8 01       	movw	r26, r16
    6ba6:	1b 96       	adiw	r26, 0x0b	; 11
    6ba8:	ec 93       	st	X, r30
    6baa:	ec a1       	ldd	r30, Y+36	; 0x24
    6bac:	fd a1       	ldd	r31, Y+37	; 0x25
    6bae:	d4 01       	movw	r26, r8
    6bb0:	56 96       	adiw	r26, 0x16	; 22
    6bb2:	ed 93       	st	X+, r30
    6bb4:	fc 93       	st	X, r31
    6bb6:	57 97       	sbiw	r26, 0x17	; 23
    6bb8:	fe a1       	ldd	r31, Y+38	; 0x26
    6bba:	f1 fd       	sbrc	r31, 1
    6bbc:	7b c1       	rjmp	.+758    	; 0x6eb4 <dir_register+0x708>
    6bbe:	01 e0       	ldi	r16, 0x01	; 1
    6bc0:	10 e0       	ldi	r17, 0x00	; 0
    6bc2:	60 e0       	ldi	r22, 0x00	; 0
    6bc4:	70 e0       	ldi	r23, 0x00	; 0
    6bc6:	c4 01       	movw	r24, r8
    6bc8:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
    6bcc:	81 11       	cpse	r24, r1
    6bce:	95 cf       	rjmp	.-214    	; 0x6afa <dir_register+0x34e>
    6bd0:	c1 2c       	mov	r12, r1
    6bd2:	d1 2c       	mov	r13, r1
    6bd4:	e1 2c       	mov	r14, r1
    6bd6:	f1 2c       	mov	r15, r1
    6bd8:	08 c0       	rjmp	.+16     	; 0x6bea <dir_register+0x43e>
    6bda:	e1 2c       	mov	r14, r1
    6bdc:	f1 2c       	mov	r15, r1
    6bde:	61 e0       	ldi	r22, 0x01	; 1
    6be0:	70 e0       	ldi	r23, 0x00	; 0
    6be2:	c4 01       	movw	r24, r8
    6be4:	64 dc       	rcall	.-1848   	; 0x64ae <dir_next>
    6be6:	81 11       	cpse	r24, r1
    6be8:	88 cf       	rjmp	.-240    	; 0x6afa <dir_register+0x34e>
    6bea:	f4 01       	movw	r30, r8
    6bec:	46 85       	ldd	r20, Z+14	; 0x0e
    6bee:	57 85       	ldd	r21, Z+15	; 0x0f
    6bf0:	60 89       	ldd	r22, Z+16	; 0x10
    6bf2:	71 89       	ldd	r23, Z+17	; 0x11
    6bf4:	80 81       	ld	r24, Z
    6bf6:	91 81       	ldd	r25, Z+1	; 0x01
    6bf8:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    6bfc:	81 11       	cpse	r24, r1
    6bfe:	7d cf       	rjmp	.-262    	; 0x6afa <dir_register+0x34e>
    6c00:	d4 01       	movw	r26, r8
    6c02:	52 96       	adiw	r26, 0x12	; 18
    6c04:	ed 91       	ld	r30, X+
    6c06:	fc 91       	ld	r31, X
    6c08:	53 97       	sbiw	r26, 0x13	; 19
    6c0a:	80 81       	ld	r24, Z
    6c0c:	85 3e       	cpi	r24, 0xE5	; 229
    6c0e:	11 f0       	breq	.+4      	; 0x6c14 <dir_register+0x468>
    6c10:	81 11       	cpse	r24, r1
    6c12:	e3 cf       	rjmp	.-58     	; 0x6bda <dir_register+0x42e>
    6c14:	e1 14       	cp	r14, r1
    6c16:	f1 04       	cpc	r15, r1
    6c18:	19 f4       	brne	.+6      	; 0x6c20 <dir_register+0x474>
    6c1a:	f4 01       	movw	r30, r8
    6c1c:	c4 80       	ldd	r12, Z+4	; 0x04
    6c1e:	d5 80       	ldd	r13, Z+5	; 0x05
    6c20:	ff ef       	ldi	r31, 0xFF	; 255
    6c22:	ef 1a       	sub	r14, r31
    6c24:	ff 0a       	sbc	r15, r31
    6c26:	0e 15       	cp	r16, r14
    6c28:	1f 05       	cpc	r17, r15
    6c2a:	c9 f6       	brne	.-78     	; 0x6bde <dir_register+0x432>
    6c2c:	01 30       	cpi	r16, 0x01	; 1
    6c2e:	11 05       	cpc	r17, r1
    6c30:	09 f4       	brne	.+2      	; 0x6c34 <dir_register+0x488>
    6c32:	7d c1       	rjmp	.+762    	; 0x6f2e <dir_register+0x782>
    6c34:	b6 01       	movw	r22, r12
    6c36:	c4 01       	movw	r24, r8
    6c38:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
    6c3c:	81 11       	cpse	r24, r1
    6c3e:	5d cf       	rjmp	.-326    	; 0x6afa <dir_register+0x34e>
    6c40:	d4 01       	movw	r26, r8
    6c42:	54 96       	adiw	r26, 0x14	; 20
    6c44:	ed 91       	ld	r30, X+
    6c46:	fc 91       	ld	r31, X
    6c48:	55 97       	sbiw	r26, 0x15	; 21
    6c4a:	80 81       	ld	r24, Z
    6c4c:	98 2f       	mov	r25, r24
    6c4e:	90 fb       	bst	r25, 0
    6c50:	97 95       	ror	r25
    6c52:	97 f9       	bld	r25, 7
    6c54:	81 81       	ldd	r24, Z+1	; 0x01
    6c56:	89 0f       	add	r24, r25
    6c58:	98 2f       	mov	r25, r24
    6c5a:	90 fb       	bst	r25, 0
    6c5c:	97 95       	ror	r25
    6c5e:	97 f9       	bld	r25, 7
    6c60:	82 81       	ldd	r24, Z+2	; 0x02
    6c62:	89 0f       	add	r24, r25
    6c64:	98 2f       	mov	r25, r24
    6c66:	90 fb       	bst	r25, 0
    6c68:	97 95       	ror	r25
    6c6a:	97 f9       	bld	r25, 7
    6c6c:	83 81       	ldd	r24, Z+3	; 0x03
    6c6e:	89 0f       	add	r24, r25
    6c70:	98 2f       	mov	r25, r24
    6c72:	90 fb       	bst	r25, 0
    6c74:	97 95       	ror	r25
    6c76:	97 f9       	bld	r25, 7
    6c78:	84 81       	ldd	r24, Z+4	; 0x04
    6c7a:	89 0f       	add	r24, r25
    6c7c:	98 2f       	mov	r25, r24
    6c7e:	90 fb       	bst	r25, 0
    6c80:	97 95       	ror	r25
    6c82:	97 f9       	bld	r25, 7
    6c84:	85 81       	ldd	r24, Z+5	; 0x05
    6c86:	89 0f       	add	r24, r25
    6c88:	98 2f       	mov	r25, r24
    6c8a:	90 fb       	bst	r25, 0
    6c8c:	97 95       	ror	r25
    6c8e:	97 f9       	bld	r25, 7
    6c90:	86 81       	ldd	r24, Z+6	; 0x06
    6c92:	89 0f       	add	r24, r25
    6c94:	98 2f       	mov	r25, r24
    6c96:	90 fb       	bst	r25, 0
    6c98:	97 95       	ror	r25
    6c9a:	97 f9       	bld	r25, 7
    6c9c:	87 81       	ldd	r24, Z+7	; 0x07
    6c9e:	89 0f       	add	r24, r25
    6ca0:	98 2f       	mov	r25, r24
    6ca2:	90 fb       	bst	r25, 0
    6ca4:	97 95       	ror	r25
    6ca6:	97 f9       	bld	r25, 7
    6ca8:	80 85       	ldd	r24, Z+8	; 0x08
    6caa:	89 0f       	add	r24, r25
    6cac:	98 2f       	mov	r25, r24
    6cae:	90 fb       	bst	r25, 0
    6cb0:	97 95       	ror	r25
    6cb2:	97 f9       	bld	r25, 7
    6cb4:	81 85       	ldd	r24, Z+9	; 0x09
    6cb6:	89 0f       	add	r24, r25
    6cb8:	80 fb       	bst	r24, 0
    6cba:	87 95       	ror	r24
    6cbc:	87 f9       	bld	r24, 7
    6cbe:	e2 84       	ldd	r14, Z+10	; 0x0a
    6cc0:	e8 0e       	add	r14, r24
    6cc2:	01 50       	subi	r16, 0x01	; 1
    6cc4:	11 09       	sbc	r17, r1
    6cc6:	8f e0       	ldi	r24, 0x0F	; 15
    6cc8:	b8 2e       	mov	r11, r24
    6cca:	9d e0       	ldi	r25, 0x0D	; 13
    6ccc:	c9 2e       	mov	r12, r25
    6cce:	ff 24       	eor	r15, r15
    6cd0:	fa 94       	dec	r15
    6cd2:	dd 24       	eor	r13, r13
    6cd4:	d3 94       	inc	r13
    6cd6:	2a c0       	rjmp	.+84     	; 0x6d2c <dir_register+0x580>
    6cd8:	f3 82       	std	Z+3, r15	; 0x03
    6cda:	f4 82       	std	Z+4, r15	; 0x04
    6cdc:	f5 82       	std	Z+5, r15	; 0x05
    6cde:	f6 82       	std	Z+6, r15	; 0x06
    6ce0:	f7 82       	std	Z+7, r15	; 0x07
    6ce2:	f0 86       	std	Z+8, r15	; 0x08
    6ce4:	f1 86       	std	Z+9, r15	; 0x09
    6ce6:	f2 86       	std	Z+10, r15	; 0x0a
    6ce8:	f6 86       	std	Z+14, r15	; 0x0e
    6cea:	f7 86       	std	Z+15, r15	; 0x0f
    6cec:	f0 8a       	std	Z+16, r15	; 0x10
    6cee:	f1 8a       	std	Z+17, r15	; 0x11
    6cf0:	f2 8a       	std	Z+18, r15	; 0x12
    6cf2:	f3 8a       	std	Z+19, r15	; 0x13
    6cf4:	f4 8a       	std	Z+20, r15	; 0x14
    6cf6:	f5 8a       	std	Z+21, r15	; 0x15
    6cf8:	f6 8a       	std	Z+22, r15	; 0x16
    6cfa:	f7 8a       	std	Z+23, r15	; 0x17
    6cfc:	f0 8e       	std	Z+24, r15	; 0x18
    6cfe:	f1 8e       	std	Z+25, r15	; 0x19
    6d00:	f4 8e       	std	Z+28, r15	; 0x1c
    6d02:	f5 8e       	std	Z+29, r15	; 0x1d
    6d04:	f6 8e       	std	Z+30, r15	; 0x1e
    6d06:	f7 8e       	std	Z+31, r15	; 0x1f
    6d08:	ba 2d       	mov	r27, r10
    6d0a:	b0 64       	ori	r27, 0x40	; 64
    6d0c:	ab 2e       	mov	r10, r27
    6d0e:	a0 82       	st	Z, r10
    6d10:	d4 01       	movw	r26, r8
    6d12:	ed 91       	ld	r30, X+
    6d14:	fc 91       	ld	r31, X
    6d16:	d4 82       	std	Z+4, r13	; 0x04
    6d18:	60 e0       	ldi	r22, 0x00	; 0
    6d1a:	70 e0       	ldi	r23, 0x00	; 0
    6d1c:	c4 01       	movw	r24, r8
    6d1e:	c7 db       	rcall	.-2162   	; 0x64ae <dir_next>
    6d20:	81 11       	cpse	r24, r1
    6d22:	eb ce       	rjmp	.-554    	; 0x6afa <dir_register+0x34e>
    6d24:	01 50       	subi	r16, 0x01	; 1
    6d26:	11 09       	sbc	r17, r1
    6d28:	09 f4       	brne	.+2      	; 0x6d2c <dir_register+0x580>
    6d2a:	01 c1       	rjmp	.+514    	; 0x6f2e <dir_register+0x782>
    6d2c:	f4 01       	movw	r30, r8
    6d2e:	46 85       	ldd	r20, Z+14	; 0x0e
    6d30:	57 85       	ldd	r21, Z+15	; 0x0f
    6d32:	60 89       	ldd	r22, Z+16	; 0x10
    6d34:	71 89       	ldd	r23, Z+17	; 0x11
    6d36:	80 81       	ld	r24, Z
    6d38:	91 81       	ldd	r25, Z+1	; 0x01
    6d3a:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    6d3e:	81 11       	cpse	r24, r1
    6d40:	dc ce       	rjmp	.-584    	; 0x6afa <dir_register+0x34e>
    6d42:	a0 2e       	mov	r10, r16
    6d44:	d4 01       	movw	r26, r8
    6d46:	52 96       	adiw	r26, 0x12	; 18
    6d48:	ed 91       	ld	r30, X+
    6d4a:	fc 91       	ld	r31, X
    6d4c:	53 97       	sbiw	r26, 0x13	; 19
    6d4e:	56 96       	adiw	r26, 0x16	; 22
    6d50:	6d 91       	ld	r22, X+
    6d52:	7c 91       	ld	r23, X
    6d54:	57 97       	sbiw	r26, 0x17	; 23
    6d56:	e5 86       	std	Z+13, r14	; 0x0d
    6d58:	b3 86       	std	Z+11, r11	; 0x0b
    6d5a:	14 86       	std	Z+12, r1	; 0x0c
    6d5c:	12 8e       	std	Z+26, r1	; 0x1a
    6d5e:	13 8e       	std	Z+27, r1	; 0x1b
    6d60:	c8 01       	movw	r24, r16
    6d62:	99 27       	eor	r25, r25
    6d64:	01 97       	sbiw	r24, 0x01	; 1
    6d66:	c8 9e       	mul	r12, r24
    6d68:	90 01       	movw	r18, r0
    6d6a:	c9 9e       	mul	r12, r25
    6d6c:	30 0d       	add	r19, r0
    6d6e:	11 24       	eor	r1, r1
    6d70:	a9 01       	movw	r20, r18
    6d72:	44 0f       	add	r20, r20
    6d74:	55 1f       	adc	r21, r21
    6d76:	46 0f       	add	r20, r22
    6d78:	57 1f       	adc	r21, r23
    6d7a:	da 01       	movw	r26, r20
    6d7c:	8d 91       	ld	r24, X+
    6d7e:	9c 91       	ld	r25, X
    6d80:	81 83       	std	Z+1, r24	; 0x01
    6d82:	92 83       	std	Z+2, r25	; 0x02
    6d84:	01 97       	sbiw	r24, 0x01	; 1
    6d86:	8e 3f       	cpi	r24, 0xFE	; 254
    6d88:	9f 4f       	sbci	r25, 0xFF	; 255
    6d8a:	08 f0       	brcs	.+2      	; 0x6d8e <dir_register+0x5e2>
    6d8c:	a5 cf       	rjmp	.-182    	; 0x6cd8 <dir_register+0x52c>
    6d8e:	2f 5f       	subi	r18, 0xFF	; 255
    6d90:	3f 4f       	sbci	r19, 0xFF	; 255
    6d92:	22 0f       	add	r18, r18
    6d94:	33 1f       	adc	r19, r19
    6d96:	db 01       	movw	r26, r22
    6d98:	a2 0f       	add	r26, r18
    6d9a:	b3 1f       	adc	r27, r19
    6d9c:	8d 91       	ld	r24, X+
    6d9e:	9c 91       	ld	r25, X
    6da0:	11 97       	sbiw	r26, 0x01	; 1
    6da2:	83 83       	std	Z+3, r24	; 0x03
    6da4:	94 83       	std	Z+4, r25	; 0x04
    6da6:	01 97       	sbiw	r24, 0x01	; 1
    6da8:	8e 3f       	cpi	r24, 0xFE	; 254
    6daa:	9f 4f       	sbci	r25, 0xFF	; 255
    6dac:	08 f0       	brcs	.+2      	; 0x6db0 <dir_register+0x604>
    6dae:	96 cf       	rjmp	.-212    	; 0x6cdc <dir_register+0x530>
    6db0:	12 96       	adiw	r26, 0x02	; 2
    6db2:	8d 91       	ld	r24, X+
    6db4:	9c 91       	ld	r25, X
    6db6:	13 97       	sbiw	r26, 0x03	; 3
    6db8:	85 83       	std	Z+5, r24	; 0x05
    6dba:	96 83       	std	Z+6, r25	; 0x06
    6dbc:	01 97       	sbiw	r24, 0x01	; 1
    6dbe:	8e 3f       	cpi	r24, 0xFE	; 254
    6dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    6dc2:	08 f0       	brcs	.+2      	; 0x6dc6 <dir_register+0x61a>
    6dc4:	8d cf       	rjmp	.-230    	; 0x6ce0 <dir_register+0x534>
    6dc6:	14 96       	adiw	r26, 0x04	; 4
    6dc8:	8d 91       	ld	r24, X+
    6dca:	9c 91       	ld	r25, X
    6dcc:	15 97       	sbiw	r26, 0x05	; 5
    6dce:	87 83       	std	Z+7, r24	; 0x07
    6dd0:	90 87       	std	Z+8, r25	; 0x08
    6dd2:	01 97       	sbiw	r24, 0x01	; 1
    6dd4:	8e 3f       	cpi	r24, 0xFE	; 254
    6dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    6dd8:	08 f0       	brcs	.+2      	; 0x6ddc <dir_register+0x630>
    6dda:	84 cf       	rjmp	.-248    	; 0x6ce4 <dir_register+0x538>
    6ddc:	16 96       	adiw	r26, 0x06	; 6
    6dde:	8d 91       	ld	r24, X+
    6de0:	9c 91       	ld	r25, X
    6de2:	17 97       	sbiw	r26, 0x07	; 7
    6de4:	81 87       	std	Z+9, r24	; 0x09
    6de6:	92 87       	std	Z+10, r25	; 0x0a
    6de8:	01 97       	sbiw	r24, 0x01	; 1
    6dea:	8e 3f       	cpi	r24, 0xFE	; 254
    6dec:	9f 4f       	sbci	r25, 0xFF	; 255
    6dee:	08 f0       	brcs	.+2      	; 0x6df2 <dir_register+0x646>
    6df0:	7b cf       	rjmp	.-266    	; 0x6ce8 <dir_register+0x53c>
    6df2:	18 96       	adiw	r26, 0x08	; 8
    6df4:	8d 91       	ld	r24, X+
    6df6:	9c 91       	ld	r25, X
    6df8:	19 97       	sbiw	r26, 0x09	; 9
    6dfa:	86 87       	std	Z+14, r24	; 0x0e
    6dfc:	97 87       	std	Z+15, r25	; 0x0f
    6dfe:	01 97       	sbiw	r24, 0x01	; 1
    6e00:	8e 3f       	cpi	r24, 0xFE	; 254
    6e02:	9f 4f       	sbci	r25, 0xFF	; 255
    6e04:	08 f0       	brcs	.+2      	; 0x6e08 <dir_register+0x65c>
    6e06:	72 cf       	rjmp	.-284    	; 0x6cec <dir_register+0x540>
    6e08:	1a 96       	adiw	r26, 0x0a	; 10
    6e0a:	8d 91       	ld	r24, X+
    6e0c:	9c 91       	ld	r25, X
    6e0e:	1b 97       	sbiw	r26, 0x0b	; 11
    6e10:	80 8b       	std	Z+16, r24	; 0x10
    6e12:	91 8b       	std	Z+17, r25	; 0x11
    6e14:	01 97       	sbiw	r24, 0x01	; 1
    6e16:	8e 3f       	cpi	r24, 0xFE	; 254
    6e18:	9f 4f       	sbci	r25, 0xFF	; 255
    6e1a:	08 f0       	brcs	.+2      	; 0x6e1e <dir_register+0x672>
    6e1c:	69 cf       	rjmp	.-302    	; 0x6cf0 <dir_register+0x544>
    6e1e:	1c 96       	adiw	r26, 0x0c	; 12
    6e20:	8d 91       	ld	r24, X+
    6e22:	9c 91       	ld	r25, X
    6e24:	1d 97       	sbiw	r26, 0x0d	; 13
    6e26:	82 8b       	std	Z+18, r24	; 0x12
    6e28:	93 8b       	std	Z+19, r25	; 0x13
    6e2a:	01 97       	sbiw	r24, 0x01	; 1
    6e2c:	8e 3f       	cpi	r24, 0xFE	; 254
    6e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e30:	08 f0       	brcs	.+2      	; 0x6e34 <dir_register+0x688>
    6e32:	60 cf       	rjmp	.-320    	; 0x6cf4 <dir_register+0x548>
    6e34:	1e 96       	adiw	r26, 0x0e	; 14
    6e36:	8d 91       	ld	r24, X+
    6e38:	9c 91       	ld	r25, X
    6e3a:	1f 97       	sbiw	r26, 0x0f	; 15
    6e3c:	84 8b       	std	Z+20, r24	; 0x14
    6e3e:	95 8b       	std	Z+21, r25	; 0x15
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	8e 3f       	cpi	r24, 0xFE	; 254
    6e44:	9f 4f       	sbci	r25, 0xFF	; 255
    6e46:	08 f0       	brcs	.+2      	; 0x6e4a <dir_register+0x69e>
    6e48:	57 cf       	rjmp	.-338    	; 0x6cf8 <dir_register+0x54c>
    6e4a:	50 96       	adiw	r26, 0x10	; 16
    6e4c:	8d 91       	ld	r24, X+
    6e4e:	9c 91       	ld	r25, X
    6e50:	51 97       	sbiw	r26, 0x11	; 17
    6e52:	86 8b       	std	Z+22, r24	; 0x16
    6e54:	97 8b       	std	Z+23, r25	; 0x17
    6e56:	01 97       	sbiw	r24, 0x01	; 1
    6e58:	8e 3f       	cpi	r24, 0xFE	; 254
    6e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e5c:	08 f0       	brcs	.+2      	; 0x6e60 <dir_register+0x6b4>
    6e5e:	4e cf       	rjmp	.-356    	; 0x6cfc <dir_register+0x550>
    6e60:	52 96       	adiw	r26, 0x12	; 18
    6e62:	8d 91       	ld	r24, X+
    6e64:	9c 91       	ld	r25, X
    6e66:	53 97       	sbiw	r26, 0x13	; 19
    6e68:	80 8f       	std	Z+24, r24	; 0x18
    6e6a:	91 8f       	std	Z+25, r25	; 0x19
    6e6c:	01 97       	sbiw	r24, 0x01	; 1
    6e6e:	8e 3f       	cpi	r24, 0xFE	; 254
    6e70:	9f 4f       	sbci	r25, 0xFF	; 255
    6e72:	08 f0       	brcs	.+2      	; 0x6e76 <dir_register+0x6ca>
    6e74:	45 cf       	rjmp	.-374    	; 0x6d00 <dir_register+0x554>
    6e76:	54 96       	adiw	r26, 0x14	; 20
    6e78:	8d 91       	ld	r24, X+
    6e7a:	9c 91       	ld	r25, X
    6e7c:	55 97       	sbiw	r26, 0x15	; 21
    6e7e:	84 8f       	std	Z+28, r24	; 0x1c
    6e80:	95 8f       	std	Z+29, r25	; 0x1d
    6e82:	01 97       	sbiw	r24, 0x01	; 1
    6e84:	8e 3f       	cpi	r24, 0xFE	; 254
    6e86:	9f 4f       	sbci	r25, 0xFF	; 255
    6e88:	08 f0       	brcs	.+2      	; 0x6e8c <dir_register+0x6e0>
    6e8a:	3c cf       	rjmp	.-392    	; 0x6d04 <dir_register+0x558>
    6e8c:	56 96       	adiw	r26, 0x16	; 22
    6e8e:	8d 91       	ld	r24, X+
    6e90:	9c 91       	ld	r25, X
    6e92:	57 97       	sbiw	r26, 0x17	; 23
    6e94:	86 8f       	std	Z+30, r24	; 0x1e
    6e96:	97 8f       	std	Z+31, r25	; 0x1f
    6e98:	01 97       	sbiw	r24, 0x01	; 1
    6e9a:	8e 3f       	cpi	r24, 0xFE	; 254
    6e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e9e:	08 f0       	brcs	.+2      	; 0x6ea2 <dir_register+0x6f6>
    6ea0:	33 cf       	rjmp	.-410    	; 0x6d08 <dir_register+0x55c>
    6ea2:	da 01       	movw	r26, r20
    6ea4:	5a 96       	adiw	r26, 0x1a	; 26
    6ea6:	8d 91       	ld	r24, X+
    6ea8:	9c 91       	ld	r25, X
    6eaa:	5b 97       	sbiw	r26, 0x1b	; 27
    6eac:	89 2b       	or	r24, r25
    6eae:	09 f4       	brne	.+2      	; 0x6eb2 <dir_register+0x706>
    6eb0:	2b cf       	rjmp	.-426    	; 0x6d08 <dir_register+0x55c>
    6eb2:	2d cf       	rjmp	.-422    	; 0x6d0e <dir_register+0x562>
    6eb4:	ac a1       	ldd	r26, Y+36	; 0x24
    6eb6:	bd a1       	ldd	r27, Y+37	; 0x25
    6eb8:	8d 91       	ld	r24, X+
    6eba:	9c 91       	ld	r25, X
    6ebc:	11 97       	sbiw	r26, 0x01	; 1
    6ebe:	89 2b       	or	r24, r25
    6ec0:	09 f4       	brne	.+2      	; 0x6ec4 <dir_register+0x718>
    6ec2:	7d ce       	rjmp	.-774    	; 0x6bbe <dir_register+0x412>
    6ec4:	fd 01       	movw	r30, r26
    6ec6:	32 96       	adiw	r30, 0x02	; 2
    6ec8:	20 e0       	ldi	r18, 0x00	; 0
    6eca:	30 e0       	ldi	r19, 0x00	; 0
    6ecc:	01 c0       	rjmp	.+2      	; 0x6ed0 <dir_register+0x724>
    6ece:	9a 01       	movw	r18, r20
    6ed0:	a9 01       	movw	r20, r18
    6ed2:	4f 5f       	subi	r20, 0xFF	; 255
    6ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ed6:	81 91       	ld	r24, Z+
    6ed8:	91 91       	ld	r25, Z+
    6eda:	89 2b       	or	r24, r25
    6edc:	c1 f7       	brne	.-16     	; 0x6ece <dir_register+0x722>
    6ede:	26 5e       	subi	r18, 0xE6	; 230
    6ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee2:	a5 ec       	ldi	r26, 0xC5	; 197
    6ee4:	be e4       	ldi	r27, 0x4E	; 78
    6ee6:	0e 94 8b 7f 	call	0xff16	; 0xff16 <__umulhisi3>
    6eea:	8c 01       	movw	r16, r24
    6eec:	16 95       	lsr	r17
    6eee:	07 95       	ror	r16
    6ef0:	16 95       	lsr	r17
    6ef2:	07 95       	ror	r16
    6ef4:	66 ce       	rjmp	.-820    	; 0x6bc2 <dir_register+0x416>
    6ef6:	85 e0       	ldi	r24, 0x05	; 5
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	81 cd       	rjmp	.-1278   	; 0x69fe <dir_register+0x252>
    6efc:	84 e0       	ldi	r24, 0x04	; 4
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	7e cd       	rjmp	.-1284   	; 0x69fe <dir_register+0x252>
    6f02:	83 e0       	ldi	r24, 0x03	; 3
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	7b cd       	rjmp	.-1290   	; 0x69fe <dir_register+0x252>
    6f08:	85 e0       	ldi	r24, 0x05	; 5
    6f0a:	90 e0       	ldi	r25, 0x00	; 0
    6f0c:	dc 01       	movw	r26, r24
    6f0e:	11 96       	adiw	r26, 0x01	; 1
    6f10:	4d 89       	ldd	r20, Y+21	; 0x15
    6f12:	40 83       	st	Z, r20
    6f14:	7b cd       	rjmp	.-1290   	; 0x6a0c <dir_register+0x260>
    6f16:	84 e0       	ldi	r24, 0x04	; 4
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	f8 cf       	rjmp	.-16     	; 0x6f0c <dir_register+0x760>
    6f1c:	83 e0       	ldi	r24, 0x03	; 3
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	f5 cf       	rjmp	.-22     	; 0x6f0c <dir_register+0x760>
    6f22:	82 e0       	ldi	r24, 0x02	; 2
    6f24:	90 e0       	ldi	r25, 0x00	; 0
    6f26:	f2 cf       	rjmp	.-28     	; 0x6f0c <dir_register+0x760>
    6f28:	81 e0       	ldi	r24, 0x01	; 1
    6f2a:	90 e0       	ldi	r25, 0x00	; 0
    6f2c:	ef cf       	rjmp	.-34     	; 0x6f0c <dir_register+0x760>
    6f2e:	f4 01       	movw	r30, r8
    6f30:	46 85       	ldd	r20, Z+14	; 0x0e
    6f32:	57 85       	ldd	r21, Z+15	; 0x0f
    6f34:	60 89       	ldd	r22, Z+16	; 0x10
    6f36:	71 89       	ldd	r23, Z+17	; 0x11
    6f38:	80 81       	ld	r24, Z
    6f3a:	91 81       	ldd	r25, Z+1	; 0x01
    6f3c:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    6f40:	81 11       	cpse	r24, r1
    6f42:	db cd       	rjmp	.-1098   	; 0x6afa <dir_register+0x34e>
    6f44:	d4 01       	movw	r26, r8
    6f46:	52 96       	adiw	r26, 0x12	; 18
    6f48:	ed 91       	ld	r30, X+
    6f4a:	fc 91       	ld	r31, X
    6f4c:	53 97       	sbiw	r26, 0x13	; 19
    6f4e:	80 e2       	ldi	r24, 0x20	; 32
    6f50:	df 01       	movw	r26, r30
    6f52:	1d 92       	st	X+, r1
    6f54:	8a 95       	dec	r24
    6f56:	e9 f7       	brne	.-6      	; 0x6f52 <dir_register+0x7a6>
    6f58:	d4 01       	movw	r26, r8
    6f5a:	54 96       	adiw	r26, 0x14	; 20
    6f5c:	2d 91       	ld	r18, X+
    6f5e:	3c 91       	ld	r19, X
    6f60:	55 97       	sbiw	r26, 0x15	; 21
    6f62:	d9 01       	movw	r26, r18
    6f64:	8c 91       	ld	r24, X
    6f66:	80 83       	st	Z, r24
    6f68:	11 96       	adiw	r26, 0x01	; 1
    6f6a:	8c 91       	ld	r24, X
    6f6c:	11 97       	sbiw	r26, 0x01	; 1
    6f6e:	81 83       	std	Z+1, r24	; 0x01
    6f70:	12 96       	adiw	r26, 0x02	; 2
    6f72:	8c 91       	ld	r24, X
    6f74:	12 97       	sbiw	r26, 0x02	; 2
    6f76:	82 83       	std	Z+2, r24	; 0x02
    6f78:	13 96       	adiw	r26, 0x03	; 3
    6f7a:	8c 91       	ld	r24, X
    6f7c:	13 97       	sbiw	r26, 0x03	; 3
    6f7e:	83 83       	std	Z+3, r24	; 0x03
    6f80:	14 96       	adiw	r26, 0x04	; 4
    6f82:	8c 91       	ld	r24, X
    6f84:	14 97       	sbiw	r26, 0x04	; 4
    6f86:	84 83       	std	Z+4, r24	; 0x04
    6f88:	15 96       	adiw	r26, 0x05	; 5
    6f8a:	8c 91       	ld	r24, X
    6f8c:	15 97       	sbiw	r26, 0x05	; 5
    6f8e:	85 83       	std	Z+5, r24	; 0x05
    6f90:	16 96       	adiw	r26, 0x06	; 6
    6f92:	8c 91       	ld	r24, X
    6f94:	16 97       	sbiw	r26, 0x06	; 6
    6f96:	86 83       	std	Z+6, r24	; 0x06
    6f98:	17 96       	adiw	r26, 0x07	; 7
    6f9a:	8c 91       	ld	r24, X
    6f9c:	17 97       	sbiw	r26, 0x07	; 7
    6f9e:	87 83       	std	Z+7, r24	; 0x07
    6fa0:	18 96       	adiw	r26, 0x08	; 8
    6fa2:	8c 91       	ld	r24, X
    6fa4:	18 97       	sbiw	r26, 0x08	; 8
    6fa6:	80 87       	std	Z+8, r24	; 0x08
    6fa8:	19 96       	adiw	r26, 0x09	; 9
    6faa:	8c 91       	ld	r24, X
    6fac:	19 97       	sbiw	r26, 0x09	; 9
    6fae:	81 87       	std	Z+9, r24	; 0x09
    6fb0:	1a 96       	adiw	r26, 0x0a	; 10
    6fb2:	8c 91       	ld	r24, X
    6fb4:	82 87       	std	Z+10, r24	; 0x0a
    6fb6:	d4 01       	movw	r26, r8
    6fb8:	54 96       	adiw	r26, 0x14	; 20
    6fba:	8d 91       	ld	r24, X+
    6fbc:	9c 91       	ld	r25, X
    6fbe:	55 97       	sbiw	r26, 0x15	; 21
    6fc0:	dc 01       	movw	r26, r24
    6fc2:	1b 96       	adiw	r26, 0x0b	; 11
    6fc4:	8c 91       	ld	r24, X
    6fc6:	88 71       	andi	r24, 0x18	; 24
    6fc8:	84 87       	std	Z+12, r24	; 0x0c
    6fca:	d4 01       	movw	r26, r8
    6fcc:	ed 91       	ld	r30, X+
    6fce:	fc 91       	ld	r31, X
    6fd0:	81 e0       	ldi	r24, 0x01	; 1
    6fd2:	84 83       	std	Z+4, r24	; 0x04
    6fd4:	80 e0       	ldi	r24, 0x00	; 0
    6fd6:	91 cd       	rjmp	.-1246   	; 0x6afa <dir_register+0x34e>

00006fd8 <remove_chain.part.6>:
    6fd8:	7f 92       	push	r7
    6fda:	8f 92       	push	r8
    6fdc:	9f 92       	push	r9
    6fde:	af 92       	push	r10
    6fe0:	bf 92       	push	r11
    6fe2:	cf 92       	push	r12
    6fe4:	df 92       	push	r13
    6fe6:	ef 92       	push	r14
    6fe8:	ff 92       	push	r15
    6fea:	0f 93       	push	r16
    6fec:	1f 93       	push	r17
    6fee:	cf 93       	push	r28
    6ff0:	df 93       	push	r29
    6ff2:	ec 01       	movw	r28, r24
    6ff4:	6a 01       	movw	r12, r20
    6ff6:	7b 01       	movw	r14, r22
    6ff8:	77 24       	eor	r7, r7
    6ffa:	73 94       	inc	r7
    6ffc:	8e 89       	ldd	r24, Y+22	; 0x16
    6ffe:	9f 89       	ldd	r25, Y+23	; 0x17
    7000:	a8 8d       	ldd	r26, Y+24	; 0x18
    7002:	b9 8d       	ldd	r27, Y+25	; 0x19
    7004:	c8 16       	cp	r12, r24
    7006:	d9 06       	cpc	r13, r25
    7008:	ea 06       	cpc	r14, r26
    700a:	fb 06       	cpc	r15, r27
    700c:	08 f0       	brcs	.+2      	; 0x7010 <remove_chain.part.6+0x38>
    700e:	20 c1       	rjmp	.+576    	; 0x7250 <remove_chain.part.6+0x278>
    7010:	22 e0       	ldi	r18, 0x02	; 2
    7012:	c2 16       	cp	r12, r18
    7014:	d1 04       	cpc	r13, r1
    7016:	e1 04       	cpc	r14, r1
    7018:	f1 04       	cpc	r15, r1
    701a:	08 f4       	brcc	.+2      	; 0x701e <remove_chain.part.6+0x46>
    701c:	1b c1       	rjmp	.+566    	; 0x7254 <remove_chain.part.6+0x27c>
    701e:	88 81       	ld	r24, Y
    7020:	82 30       	cpi	r24, 0x02	; 2
    7022:	09 f4       	brne	.+2      	; 0x7026 <remove_chain.part.6+0x4e>
    7024:	e7 c0       	rjmp	.+462    	; 0x71f4 <remove_chain.part.6+0x21c>
    7026:	83 30       	cpi	r24, 0x03	; 3
    7028:	09 f4       	brne	.+2      	; 0x702c <remove_chain.part.6+0x54>
    702a:	95 c0       	rjmp	.+298    	; 0x7156 <remove_chain.part.6+0x17e>
    702c:	81 30       	cpi	r24, 0x01	; 1
    702e:	09 f4       	brne	.+2      	; 0x7032 <remove_chain.part.6+0x5a>
    7030:	4e c0       	rjmp	.+156    	; 0x70ce <remove_chain.part.6+0xf6>
    7032:	88 24       	eor	r8, r8
    7034:	8a 94       	dec	r8
    7036:	98 2c       	mov	r9, r8
    7038:	54 01       	movw	r10, r8
    703a:	81 e0       	ldi	r24, 0x01	; 1
    703c:	88 16       	cp	r8, r24
    703e:	91 04       	cpc	r9, r1
    7040:	a1 04       	cpc	r10, r1
    7042:	b1 04       	cpc	r11, r1
    7044:	b1 f0       	breq	.+44     	; 0x7072 <remove_chain.part.6+0x9a>
    7046:	8f ef       	ldi	r24, 0xFF	; 255
    7048:	88 16       	cp	r8, r24
    704a:	98 06       	cpc	r9, r24
    704c:	a8 06       	cpc	r10, r24
    704e:	b8 06       	cpc	r11, r24
    7050:	09 f4       	brne	.+2      	; 0x7054 <remove_chain.part.6+0x7c>
    7052:	05 c1       	rjmp	.+522    	; 0x725e <remove_chain.part.6+0x286>
    7054:	22 e0       	ldi	r18, 0x02	; 2
    7056:	c2 16       	cp	r12, r18
    7058:	d1 04       	cpc	r13, r1
    705a:	e1 04       	cpc	r14, r1
    705c:	f1 04       	cpc	r15, r1
    705e:	48 f0       	brcs	.+18     	; 0x7072 <remove_chain.part.6+0x9a>
    7060:	8e 89       	ldd	r24, Y+22	; 0x16
    7062:	9f 89       	ldd	r25, Y+23	; 0x17
    7064:	a8 8d       	ldd	r26, Y+24	; 0x18
    7066:	b9 8d       	ldd	r27, Y+25	; 0x19
    7068:	c8 16       	cp	r12, r24
    706a:	d9 06       	cpc	r13, r25
    706c:	ea 06       	cpc	r14, r26
    706e:	fb 06       	cpc	r15, r27
    7070:	78 f0       	brcs	.+30     	; 0x7090 <remove_chain.part.6+0xb8>
    7072:	82 e0       	ldi	r24, 0x02	; 2
    7074:	df 91       	pop	r29
    7076:	cf 91       	pop	r28
    7078:	1f 91       	pop	r17
    707a:	0f 91       	pop	r16
    707c:	ff 90       	pop	r15
    707e:	ef 90       	pop	r14
    7080:	df 90       	pop	r13
    7082:	cf 90       	pop	r12
    7084:	bf 90       	pop	r11
    7086:	af 90       	pop	r10
    7088:	9f 90       	pop	r9
    708a:	8f 90       	pop	r8
    708c:	7f 90       	pop	r7
    708e:	08 95       	ret
    7090:	00 e0       	ldi	r16, 0x00	; 0
    7092:	10 e0       	ldi	r17, 0x00	; 0
    7094:	98 01       	movw	r18, r16
    7096:	b7 01       	movw	r22, r14
    7098:	a6 01       	movw	r20, r12
    709a:	ce 01       	movw	r24, r28
    709c:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <put_fat.part.4>
    70a0:	81 11       	cpse	r24, r1
    70a2:	e8 cf       	rjmp	.-48     	; 0x7074 <remove_chain.part.6+0x9c>
    70a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    70a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    70a8:	a8 89       	ldd	r26, Y+16	; 0x10
    70aa:	b9 89       	ldd	r27, Y+17	; 0x11
    70ac:	8f 3f       	cpi	r24, 0xFF	; 255
    70ae:	2f ef       	ldi	r18, 0xFF	; 255
    70b0:	92 07       	cpc	r25, r18
    70b2:	a2 07       	cpc	r26, r18
    70b4:	b2 07       	cpc	r27, r18
    70b6:	41 f0       	breq	.+16     	; 0x70c8 <remove_chain.part.6+0xf0>
    70b8:	01 96       	adiw	r24, 0x01	; 1
    70ba:	a1 1d       	adc	r26, r1
    70bc:	b1 1d       	adc	r27, r1
    70be:	8e 87       	std	Y+14, r24	; 0x0e
    70c0:	9f 87       	std	Y+15, r25	; 0x0f
    70c2:	a8 8b       	std	Y+16, r26	; 0x10
    70c4:	b9 8b       	std	Y+17, r27	; 0x11
    70c6:	7d 82       	std	Y+5, r7	; 0x05
    70c8:	75 01       	movw	r14, r10
    70ca:	64 01       	movw	r12, r8
    70cc:	97 cf       	rjmp	.-210    	; 0x6ffc <remove_chain.part.6+0x24>
    70ce:	56 01       	movw	r10, r12
    70d0:	b6 94       	lsr	r11
    70d2:	a7 94       	ror	r10
    70d4:	ac 0c       	add	r10, r12
    70d6:	bd 1c       	adc	r11, r13
    70d8:	c5 01       	movw	r24, r10
    70da:	89 2f       	mov	r24, r25
    70dc:	99 27       	eor	r25, r25
    70de:	86 95       	lsr	r24
    70e0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    70e2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    70e4:	68 a1       	ldd	r22, Y+32	; 0x20
    70e6:	79 a1       	ldd	r23, Y+33	; 0x21
    70e8:	48 0f       	add	r20, r24
    70ea:	59 1f       	adc	r21, r25
    70ec:	61 1d       	adc	r22, r1
    70ee:	71 1d       	adc	r23, r1
    70f0:	ce 01       	movw	r24, r28
    70f2:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    70f6:	81 11       	cpse	r24, r1
    70f8:	9c cf       	rjmp	.-200    	; 0x7032 <remove_chain.part.6+0x5a>
    70fa:	f5 01       	movw	r30, r10
    70fc:	f1 70       	andi	r31, 0x01	; 1
    70fe:	ec 0f       	add	r30, r28
    7100:	fd 1f       	adc	r31, r29
    7102:	96 a4       	ldd	r9, Z+46	; 0x2e
    7104:	8f ef       	ldi	r24, 0xFF	; 255
    7106:	a8 1a       	sub	r10, r24
    7108:	b8 0a       	sbc	r11, r24
    710a:	c5 01       	movw	r24, r10
    710c:	89 2f       	mov	r24, r25
    710e:	99 27       	eor	r25, r25
    7110:	86 95       	lsr	r24
    7112:	4e 8d       	ldd	r20, Y+30	; 0x1e
    7114:	5f 8d       	ldd	r21, Y+31	; 0x1f
    7116:	68 a1       	ldd	r22, Y+32	; 0x20
    7118:	79 a1       	ldd	r23, Y+33	; 0x21
    711a:	48 0f       	add	r20, r24
    711c:	59 1f       	adc	r21, r25
    711e:	61 1d       	adc	r22, r1
    7120:	71 1d       	adc	r23, r1
    7122:	ce 01       	movw	r24, r28
    7124:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    7128:	81 11       	cpse	r24, r1
    712a:	83 cf       	rjmp	.-250    	; 0x7032 <remove_chain.part.6+0x5a>
    712c:	21 e0       	ldi	r18, 0x01	; 1
    712e:	b2 22       	and	r11, r18
    7130:	fe 01       	movw	r30, r28
    7132:	ea 0d       	add	r30, r10
    7134:	fb 1d       	adc	r31, r11
    7136:	86 a5       	ldd	r24, Z+46	; 0x2e
    7138:	89 2c       	mov	r8, r9
    713a:	91 2c       	mov	r9, r1
    713c:	98 2a       	or	r9, r24
    713e:	c0 fe       	sbrs	r12, 0
    7140:	90 c0       	rjmp	.+288    	; 0x7262 <remove_chain.part.6+0x28a>
    7142:	92 94       	swap	r9
    7144:	82 94       	swap	r8
    7146:	1f e0       	ldi	r17, 0x0F	; 15
    7148:	81 22       	and	r8, r17
    714a:	89 24       	eor	r8, r9
    714c:	91 22       	and	r9, r17
    714e:	89 24       	eor	r8, r9
    7150:	a1 2c       	mov	r10, r1
    7152:	b1 2c       	mov	r11, r1
    7154:	42 c0       	rjmp	.+132    	; 0x71da <remove_chain.part.6+0x202>
    7156:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7158:	9f 8d       	ldd	r25, Y+31	; 0x1f
    715a:	a8 a1       	ldd	r26, Y+32	; 0x20
    715c:	b9 a1       	ldd	r27, Y+33	; 0x21
    715e:	b7 01       	movw	r22, r14
    7160:	a6 01       	movw	r20, r12
    7162:	e7 e0       	ldi	r30, 0x07	; 7
    7164:	76 95       	lsr	r23
    7166:	67 95       	ror	r22
    7168:	57 95       	ror	r21
    716a:	47 95       	ror	r20
    716c:	ea 95       	dec	r30
    716e:	d1 f7       	brne	.-12     	; 0x7164 <remove_chain.part.6+0x18c>
    7170:	48 0f       	add	r20, r24
    7172:	59 1f       	adc	r21, r25
    7174:	6a 1f       	adc	r22, r26
    7176:	7b 1f       	adc	r23, r27
    7178:	ce 01       	movw	r24, r28
    717a:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    717e:	81 11       	cpse	r24, r1
    7180:	58 cf       	rjmp	.-336    	; 0x7032 <remove_chain.part.6+0x5a>
    7182:	b7 01       	movw	r22, r14
    7184:	a6 01       	movw	r20, r12
    7186:	44 0f       	add	r20, r20
    7188:	55 1f       	adc	r21, r21
    718a:	66 1f       	adc	r22, r22
    718c:	77 1f       	adc	r23, r23
    718e:	44 0f       	add	r20, r20
    7190:	55 1f       	adc	r21, r21
    7192:	66 1f       	adc	r22, r22
    7194:	77 1f       	adc	r23, r23
    7196:	4c 7f       	andi	r20, 0xFC	; 252
    7198:	51 70       	andi	r21, 0x01	; 1
    719a:	66 27       	eor	r22, r22
    719c:	77 27       	eor	r23, r23
    719e:	fa 01       	movw	r30, r20
    71a0:	be 96       	adiw	r30, 0x2e	; 46
    71a2:	ec 0f       	add	r30, r28
    71a4:	fd 1f       	adc	r31, r29
    71a6:	83 81       	ldd	r24, Z+3	; 0x03
    71a8:	82 80       	ldd	r8, Z+2	; 0x02
    71aa:	91 2c       	mov	r9, r1
    71ac:	a1 2c       	mov	r10, r1
    71ae:	b1 2c       	mov	r11, r1
    71b0:	54 01       	movw	r10, r8
    71b2:	99 24       	eor	r9, r9
    71b4:	88 24       	eor	r8, r8
    71b6:	b8 2a       	or	r11, r24
    71b8:	81 81       	ldd	r24, Z+1	; 0x01
    71ba:	90 e0       	ldi	r25, 0x00	; 0
    71bc:	98 2f       	mov	r25, r24
    71be:	88 27       	eor	r24, r24
    71c0:	a0 e0       	ldi	r26, 0x00	; 0
    71c2:	b0 e0       	ldi	r27, 0x00	; 0
    71c4:	88 2a       	or	r8, r24
    71c6:	99 2a       	or	r9, r25
    71c8:	aa 2a       	or	r10, r26
    71ca:	bb 2a       	or	r11, r27
    71cc:	fe 01       	movw	r30, r28
    71ce:	e4 0f       	add	r30, r20
    71d0:	f5 1f       	adc	r31, r21
    71d2:	86 a5       	ldd	r24, Z+46	; 0x2e
    71d4:	88 2a       	or	r8, r24
    71d6:	2f e0       	ldi	r18, 0x0F	; 15
    71d8:	b2 22       	and	r11, r18
    71da:	81 14       	cp	r8, r1
    71dc:	91 04       	cpc	r9, r1
    71de:	a1 04       	cpc	r10, r1
    71e0:	b1 04       	cpc	r11, r1
    71e2:	b1 f1       	breq	.+108    	; 0x7250 <remove_chain.part.6+0x278>
    71e4:	21 e0       	ldi	r18, 0x01	; 1
    71e6:	82 16       	cp	r8, r18
    71e8:	91 04       	cpc	r9, r1
    71ea:	a1 04       	cpc	r10, r1
    71ec:	b1 04       	cpc	r11, r1
    71ee:	09 f0       	breq	.+2      	; 0x71f2 <remove_chain.part.6+0x21a>
    71f0:	31 cf       	rjmp	.-414    	; 0x7054 <remove_chain.part.6+0x7c>
    71f2:	3f cf       	rjmp	.-386    	; 0x7072 <remove_chain.part.6+0x9a>
    71f4:	77 27       	eor	r23, r23
    71f6:	6f 2d       	mov	r22, r15
    71f8:	5e 2d       	mov	r21, r14
    71fa:	4d 2d       	mov	r20, r13
    71fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    71fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7200:	a8 a1       	ldd	r26, Y+32	; 0x20
    7202:	b9 a1       	ldd	r27, Y+33	; 0x21
    7204:	48 0f       	add	r20, r24
    7206:	59 1f       	adc	r21, r25
    7208:	6a 1f       	adc	r22, r26
    720a:	7b 1f       	adc	r23, r27
    720c:	ce 01       	movw	r24, r28
    720e:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    7212:	81 11       	cpse	r24, r1
    7214:	0e cf       	rjmp	.-484    	; 0x7032 <remove_chain.part.6+0x5a>
    7216:	d7 01       	movw	r26, r14
    7218:	c6 01       	movw	r24, r12
    721a:	88 0f       	add	r24, r24
    721c:	99 1f       	adc	r25, r25
    721e:	aa 1f       	adc	r26, r26
    7220:	bb 1f       	adc	r27, r27
    7222:	8e 7f       	andi	r24, 0xFE	; 254
    7224:	91 70       	andi	r25, 0x01	; 1
    7226:	aa 27       	eor	r26, r26
    7228:	bb 27       	eor	r27, r27
    722a:	fe 01       	movw	r30, r28
    722c:	e8 0f       	add	r30, r24
    722e:	f9 1f       	adc	r31, r25
    7230:	87 a4       	ldd	r8, Z+47	; 0x2f
    7232:	91 2c       	mov	r9, r1
    7234:	98 2c       	mov	r9, r8
    7236:	88 24       	eor	r8, r8
    7238:	fe 01       	movw	r30, r28
    723a:	e8 0f       	add	r30, r24
    723c:	f9 1f       	adc	r31, r25
    723e:	86 a5       	ldd	r24, Z+46	; 0x2e
    7240:	88 2a       	or	r8, r24
    7242:	a1 2c       	mov	r10, r1
    7244:	b1 2c       	mov	r11, r1
    7246:	81 14       	cp	r8, r1
    7248:	91 04       	cpc	r9, r1
    724a:	a1 04       	cpc	r10, r1
    724c:	b1 04       	cpc	r11, r1
    724e:	51 f6       	brne	.-108    	; 0x71e4 <remove_chain.part.6+0x20c>
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	10 cf       	rjmp	.-480    	; 0x7074 <remove_chain.part.6+0x9c>
    7254:	81 2c       	mov	r8, r1
    7256:	91 2c       	mov	r9, r1
    7258:	54 01       	movw	r10, r8
    725a:	83 94       	inc	r8
    725c:	ee ce       	rjmp	.-548    	; 0x703a <remove_chain.part.6+0x62>
    725e:	81 e0       	ldi	r24, 0x01	; 1
    7260:	09 cf       	rjmp	.-494    	; 0x7074 <remove_chain.part.6+0x9c>
    7262:	8f e0       	ldi	r24, 0x0F	; 15
    7264:	98 22       	and	r9, r24
    7266:	a1 2c       	mov	r10, r1
    7268:	b1 2c       	mov	r11, r1
    726a:	b7 cf       	rjmp	.-146    	; 0x71da <remove_chain.part.6+0x202>

0000726c <f_mount>:
    726c:	88 23       	and	r24, r24
    726e:	11 f0       	breq	.+4      	; 0x7274 <f_mount+0x8>
    7270:	8b e0       	ldi	r24, 0x0B	; 11
    7272:	08 95       	ret
    7274:	e0 91 ef 29 	lds	r30, 0x29EF	; 0x8029ef <FatFs>
    7278:	f0 91 f0 29 	lds	r31, 0x29F0	; 0x8029f0 <FatFs+0x1>
    727c:	30 97       	sbiw	r30, 0x00	; 0
    727e:	09 f0       	breq	.+2      	; 0x7282 <f_mount+0x16>
    7280:	10 82       	st	Z, r1
    7282:	61 15       	cp	r22, r1
    7284:	71 05       	cpc	r23, r1
    7286:	11 f0       	breq	.+4      	; 0x728c <f_mount+0x20>
    7288:	fb 01       	movw	r30, r22
    728a:	10 82       	st	Z, r1
    728c:	60 93 ef 29 	sts	0x29EF, r22	; 0x8029ef <FatFs>
    7290:	70 93 f0 29 	sts	0x29F0, r23	; 0x8029f0 <FatFs+0x1>
    7294:	80 e0       	ldi	r24, 0x00	; 0
    7296:	08 95       	ret

00007298 <f_open>:
    7298:	2f 92       	push	r2
    729a:	3f 92       	push	r3
    729c:	4f 92       	push	r4
    729e:	5f 92       	push	r5
    72a0:	7f 92       	push	r7
    72a2:	8f 92       	push	r8
    72a4:	9f 92       	push	r9
    72a6:	af 92       	push	r10
    72a8:	bf 92       	push	r11
    72aa:	cf 92       	push	r12
    72ac:	df 92       	push	r13
    72ae:	ef 92       	push	r14
    72b0:	ff 92       	push	r15
    72b2:	0f 93       	push	r16
    72b4:	1f 93       	push	r17
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	cd b7       	in	r28, 0x3d	; 61
    72bc:	de b7       	in	r29, 0x3e	; 62
    72be:	c2 54       	subi	r28, 0x42	; 66
    72c0:	d2 40       	sbci	r29, 0x02	; 2
    72c2:	cd bf       	out	0x3d, r28	; 61
    72c4:	de bf       	out	0x3e, r29	; 62
    72c6:	1c 01       	movw	r2, r24
    72c8:	7b 01       	movw	r14, r22
    72ca:	94 2e       	mov	r9, r20
    72cc:	dc 01       	movw	r26, r24
    72ce:	1d 92       	st	X+, r1
    72d0:	1c 92       	st	X, r1
    72d2:	b4 2f       	mov	r27, r20
    72d4:	bf 71       	andi	r27, 0x1F	; 31
    72d6:	7b 2e       	mov	r7, r27
    72d8:	fb 01       	movw	r30, r22
    72da:	80 81       	ld	r24, Z
    72dc:	08 2e       	mov	r0, r24
    72de:	00 0c       	add	r0, r0
    72e0:	99 0b       	sbc	r25, r25
    72e2:	c0 97       	sbiw	r24, 0x30	; 48
    72e4:	8a 30       	cpi	r24, 0x0A	; 10
    72e6:	91 05       	cpc	r25, r1
    72e8:	18 f1       	brcs	.+70     	; 0x7330 <f_open+0x98>
    72ea:	a0 90 ef 29 	lds	r10, 0x29EF	; 0x8029ef <FatFs>
    72ee:	b0 90 f0 29 	lds	r11, 0x29F0	; 0x8029f0 <FatFs+0x1>
    72f2:	2e 01       	movw	r4, r28
    72f4:	0f ef       	ldi	r16, 0xFF	; 255
    72f6:	40 1a       	sub	r4, r16
    72f8:	0d ef       	ldi	r16, 0xFD	; 253
    72fa:	50 0a       	sbc	r5, r16
    72fc:	d2 01       	movw	r26, r4
    72fe:	ad 92       	st	X+, r10
    7300:	bc 92       	st	X, r11
    7302:	a1 14       	cp	r10, r1
    7304:	b1 04       	cpc	r11, r1
    7306:	09 f4       	brne	.+2      	; 0x730a <f_open+0x72>
    7308:	a5 c0       	rjmp	.+330    	; 0x7454 <f_open+0x1bc>
    730a:	19 2d       	mov	r17, r9
    730c:	1e 71       	andi	r17, 0x1E	; 30
    730e:	f5 01       	movw	r30, r10
    7310:	80 81       	ld	r24, Z
    7312:	88 23       	and	r24, r24
    7314:	09 f4       	brne	.+2      	; 0x7318 <f_open+0x80>
    7316:	93 c0       	rjmp	.+294    	; 0x743e <f_open+0x1a6>
    7318:	81 81       	ldd	r24, Z+1	; 0x01
    731a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    731e:	80 fd       	sbrc	r24, 0
    7320:	8e c0       	rjmp	.+284    	; 0x743e <f_open+0x1a6>
    7322:	11 23       	and	r17, r17
    7324:	09 f4       	brne	.+2      	; 0x7328 <f_open+0x90>
    7326:	63 c2       	rjmp	.+1222   	; 0x77ee <f_open+0x556>
    7328:	82 ff       	sbrs	r24, 2
    732a:	61 c2       	rjmp	.+1218   	; 0x77ee <f_open+0x556>
    732c:	8a e0       	ldi	r24, 0x0A	; 10
    732e:	0b c0       	rjmp	.+22     	; 0x7346 <f_open+0xae>
    7330:	21 81       	ldd	r18, Z+1	; 0x01
    7332:	2a 33       	cpi	r18, 0x3A	; 58
    7334:	d1 f6       	brne	.-76     	; 0x72ea <f_open+0x52>
    7336:	89 2b       	or	r24, r25
    7338:	09 f4       	brne	.+2      	; 0x733c <f_open+0xa4>
    733a:	00 c5       	rjmp	.+2560   	; 0x7d3c <f_open+0xaa4>
    733c:	8b e0       	ldi	r24, 0x0B	; 11
    733e:	8e 01       	movw	r16, r28
    7340:	0f 5f       	subi	r16, 0xFF	; 255
    7342:	1d 4f       	sbci	r17, 0xFD	; 253
    7344:	28 01       	movw	r4, r16
    7346:	9e 01       	movw	r18, r28
    7348:	25 5e       	subi	r18, 0xE5	; 229
    734a:	3d 4f       	sbci	r19, 0xFD	; 253
    734c:	d2 01       	movw	r26, r4
    734e:	54 96       	adiw	r26, 0x14	; 20
    7350:	2d 93       	st	X+, r18
    7352:	3c 93       	st	X, r19
    7354:	55 97       	sbiw	r26, 0x15	; 21
    7356:	2a 51       	subi	r18, 0x1A	; 26
    7358:	32 40       	sbci	r19, 0x02	; 2
    735a:	56 96       	adiw	r26, 0x16	; 22
    735c:	2d 93       	st	X+, r18
    735e:	3c 93       	st	X, r19
    7360:	57 97       	sbiw	r26, 0x17	; 23
    7362:	99 2d       	mov	r25, r9
    7364:	9c 71       	andi	r25, 0x1C	; 28
    7366:	09 f4       	brne	.+2      	; 0x736a <f_open+0xd2>
    7368:	65 c2       	rjmp	.+1226   	; 0x7834 <f_open+0x59c>
    736a:	84 30       	cpi	r24, 0x04	; 4
    736c:	09 f0       	breq	.+2      	; 0x7370 <f_open+0xd8>
    736e:	62 c2       	rjmp	.+1220   	; 0x7834 <f_open+0x59c>
    7370:	c2 01       	movw	r24, r4
    7372:	1c da       	rcall	.-3016   	; 0x67ac <dir_register>
    7374:	d2 01       	movw	r26, r4
    7376:	52 96       	adiw	r26, 0x12	; 18
    7378:	0d 91       	ld	r16, X+
    737a:	1c 91       	ld	r17, X
    737c:	53 97       	sbiw	r26, 0x13	; 19
    737e:	b7 2d       	mov	r27, r7
    7380:	b8 60       	ori	r27, 0x08	; 8
    7382:	7b 2e       	mov	r7, r27
    7384:	81 11       	cpse	r24, r1
    7386:	56 c2       	rjmp	.+1196   	; 0x7834 <f_open+0x59c>
    7388:	73 fc       	sbrc	r7, 3
    738a:	89 c2       	rjmp	.+1298   	; 0x789e <f_open+0x606>
    738c:	68 01       	movw	r12, r16
    738e:	f4 e1       	ldi	r31, 0x14	; 20
    7390:	cf 0e       	add	r12, r31
    7392:	d1 1c       	adc	r13, r1
    7394:	d2 01       	movw	r26, r4
    7396:	ed 91       	ld	r30, X+
    7398:	fc 91       	ld	r31, X
    739a:	78 01       	movw	r14, r16
    739c:	ba e1       	ldi	r27, 0x1A	; 26
    739e:	eb 0e       	add	r14, r27
    73a0:	f1 1c       	adc	r15, r1
    73a2:	42 a5       	ldd	r20, Z+42	; 0x2a
    73a4:	53 a5       	ldd	r21, Z+43	; 0x2b
    73a6:	64 a5       	ldd	r22, Z+44	; 0x2c
    73a8:	75 a5       	ldd	r23, Z+45	; 0x2d
    73aa:	d1 01       	movw	r26, r2
    73ac:	5a 96       	adiw	r26, 0x1a	; 26
    73ae:	4d 93       	st	X+, r20
    73b0:	5d 93       	st	X+, r21
    73b2:	6d 93       	st	X+, r22
    73b4:	7c 93       	st	X, r23
    73b6:	5d 97       	sbiw	r26, 0x1d	; 29
    73b8:	5e 96       	adiw	r26, 0x1e	; 30
    73ba:	0d 93       	st	X+, r16
    73bc:	1c 93       	st	X, r17
    73be:	5f 97       	sbiw	r26, 0x1f	; 31
    73c0:	14 96       	adiw	r26, 0x04	; 4
    73c2:	7c 92       	st	X, r7
    73c4:	d6 01       	movw	r26, r12
    73c6:	4d 91       	ld	r20, X+
    73c8:	5c 91       	ld	r21, X
    73ca:	60 e0       	ldi	r22, 0x00	; 0
    73cc:	70 e0       	ldi	r23, 0x00	; 0
    73ce:	ba 01       	movw	r22, r20
    73d0:	55 27       	eor	r21, r21
    73d2:	44 27       	eor	r20, r20
    73d4:	d7 01       	movw	r26, r14
    73d6:	cd 90       	ld	r12, X+
    73d8:	dc 90       	ld	r13, X
    73da:	e1 2c       	mov	r14, r1
    73dc:	f1 2c       	mov	r15, r1
    73de:	4c 29       	or	r20, r12
    73e0:	5d 29       	or	r21, r13
    73e2:	6e 29       	or	r22, r14
    73e4:	7f 29       	or	r23, r15
    73e6:	d1 01       	movw	r26, r2
    73e8:	1e 96       	adiw	r26, 0x0e	; 14
    73ea:	4d 93       	st	X+, r20
    73ec:	5d 93       	st	X+, r21
    73ee:	6d 93       	st	X+, r22
    73f0:	7c 93       	st	X, r23
    73f2:	51 97       	sbiw	r26, 0x11	; 17
    73f4:	d8 01       	movw	r26, r16
    73f6:	5c 96       	adiw	r26, 0x1c	; 28
    73f8:	4d 91       	ld	r20, X+
    73fa:	5d 91       	ld	r21, X+
    73fc:	6d 91       	ld	r22, X+
    73fe:	7c 91       	ld	r23, X
    7400:	5f 97       	sbiw	r26, 0x1f	; 31
    7402:	d1 01       	movw	r26, r2
    7404:	1a 96       	adiw	r26, 0x0a	; 10
    7406:	4d 93       	st	X+, r20
    7408:	5d 93       	st	X+, r21
    740a:	6d 93       	st	X+, r22
    740c:	7c 93       	st	X, r23
    740e:	1d 97       	sbiw	r26, 0x0d	; 13
    7410:	16 96       	adiw	r26, 0x06	; 6
    7412:	1d 92       	st	X+, r1
    7414:	1d 92       	st	X+, r1
    7416:	1d 92       	st	X+, r1
    7418:	1c 92       	st	X, r1
    741a:	19 97       	sbiw	r26, 0x09	; 9
    741c:	56 96       	adiw	r26, 0x16	; 22
    741e:	1d 92       	st	X+, r1
    7420:	1d 92       	st	X+, r1
    7422:	1d 92       	st	X+, r1
    7424:	1c 92       	st	X, r1
    7426:	59 97       	sbiw	r26, 0x19	; 25
    7428:	ed 93       	st	X+, r30
    742a:	fc 93       	st	X, r31
    742c:	11 97       	sbiw	r26, 0x01	; 1
    742e:	86 81       	ldd	r24, Z+6	; 0x06
    7430:	97 81       	ldd	r25, Z+7	; 0x07
    7432:	12 96       	adiw	r26, 0x02	; 2
    7434:	8d 93       	st	X+, r24
    7436:	9c 93       	st	X, r25
    7438:	13 97       	sbiw	r26, 0x03	; 3
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	fb c1       	rjmp	.+1014   	; 0x7834 <f_open+0x59c>
    743e:	d5 01       	movw	r26, r10
    7440:	1c 92       	st	X, r1
    7442:	11 96       	adiw	r26, 0x01	; 1
    7444:	1c 92       	st	X, r1
    7446:	80 e0       	ldi	r24, 0x00	; 0
    7448:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <disk_initialize>
    744c:	80 ff       	sbrs	r24, 0
    744e:	6d c2       	rjmp	.+1242   	; 0x792a <f_open+0x692>
    7450:	83 e0       	ldi	r24, 0x03	; 3
    7452:	79 cf       	rjmp	.-270    	; 0x7346 <f_open+0xae>
    7454:	8c e0       	ldi	r24, 0x0C	; 12
    7456:	77 cf       	rjmp	.-274    	; 0x7346 <f_open+0xae>
    7458:	c9 5d       	subi	r28, 0xD9	; 217
    745a:	dd 4f       	sbci	r29, 0xFD	; 253
    745c:	e8 81       	ld	r30, Y
    745e:	f9 81       	ldd	r31, Y+1	; 0x01
    7460:	c7 52       	subi	r28, 0x27	; 39
    7462:	d2 40       	sbci	r29, 0x02	; 2
    7464:	80 81       	ld	r24, Z
    7466:	91 81       	ldd	r25, Z+1	; 0x01
    7468:	85 35       	cpi	r24, 0x55	; 85
    746a:	9a 4a       	sbci	r25, 0xAA	; 170
    746c:	09 f0       	breq	.+2      	; 0x7470 <f_open+0x1d8>
    746e:	b0 c2       	rjmp	.+1376   	; 0x79d0 <f_open+0x738>
    7470:	cd 5c       	subi	r28, 0xCD	; 205
    7472:	dd 4f       	sbci	r29, 0xFD	; 253
    7474:	e8 81       	ld	r30, Y
    7476:	f9 81       	ldd	r31, Y+1	; 0x01
    7478:	c3 53       	subi	r28, 0x33	; 51
    747a:	d2 40       	sbci	r29, 0x02	; 2
    747c:	80 81       	ld	r24, Z
    747e:	91 81       	ldd	r25, Z+1	; 0x01
    7480:	a2 81       	ldd	r26, Z+2	; 0x02
    7482:	b3 81       	ldd	r27, Z+3	; 0x03
    7484:	bb 27       	eor	r27, r27
    7486:	86 34       	cpi	r24, 0x46	; 70
    7488:	91 44       	sbci	r25, 0x41	; 65
    748a:	a4 45       	sbci	r26, 0x54	; 84
    748c:	b1 05       	cpc	r27, r1
    748e:	89 f0       	breq	.+34     	; 0x74b2 <f_open+0x21a>
    7490:	c5 5d       	subi	r28, 0xD5	; 213
    7492:	dd 4f       	sbci	r29, 0xFD	; 253
    7494:	e8 81       	ld	r30, Y
    7496:	f9 81       	ldd	r31, Y+1	; 0x01
    7498:	cb 52       	subi	r28, 0x2B	; 43
    749a:	d2 40       	sbci	r29, 0x02	; 2
    749c:	80 81       	ld	r24, Z
    749e:	91 81       	ldd	r25, Z+1	; 0x01
    74a0:	a2 81       	ldd	r26, Z+2	; 0x02
    74a2:	b3 81       	ldd	r27, Z+3	; 0x03
    74a4:	bb 27       	eor	r27, r27
    74a6:	86 34       	cpi	r24, 0x46	; 70
    74a8:	91 44       	sbci	r25, 0x41	; 65
    74aa:	a4 45       	sbci	r26, 0x54	; 84
    74ac:	b1 05       	cpc	r27, r1
    74ae:	09 f0       	breq	.+2      	; 0x74b2 <f_open+0x21a>
    74b0:	8f c2       	rjmp	.+1310   	; 0x79d0 <f_open+0x738>
    74b2:	d5 01       	movw	r26, r10
    74b4:	d9 96       	adiw	r26, 0x39	; 57
    74b6:	8d 91       	ld	r24, X+
    74b8:	9c 91       	ld	r25, X
    74ba:	da 97       	sbiw	r26, 0x3a	; 58
    74bc:	81 15       	cp	r24, r1
    74be:	92 40       	sbci	r25, 0x02	; 2
    74c0:	09 f0       	breq	.+2      	; 0x74c4 <f_open+0x22c>
    74c2:	86 c2       	rjmp	.+1292   	; 0x79d0 <f_open+0x738>
    74c4:	f5 01       	movw	r30, r10
    74c6:	ec 5b       	subi	r30, 0xBC	; 188
    74c8:	ff 4f       	sbci	r31, 0xFF	; 255
    74ca:	80 81       	ld	r24, Z
    74cc:	91 81       	ldd	r25, Z+1	; 0x01
    74ce:	00 97       	sbiw	r24, 0x00	; 0
    74d0:	09 f4       	brne	.+2      	; 0x74d4 <f_open+0x23c>
    74d2:	d0 c2       	rjmp	.+1440   	; 0x7a74 <f_open+0x7dc>
    74d4:	8c 01       	movw	r16, r24
    74d6:	20 e0       	ldi	r18, 0x00	; 0
    74d8:	30 e0       	ldi	r19, 0x00	; 0
    74da:	c5 5d       	subi	r28, 0xD5	; 213
    74dc:	dd 4f       	sbci	r29, 0xFD	; 253
    74de:	08 83       	st	Y, r16
    74e0:	19 83       	std	Y+1, r17	; 0x01
    74e2:	2a 83       	std	Y+2, r18	; 0x02
    74e4:	3b 83       	std	Y+3, r19	; 0x03
    74e6:	cb 52       	subi	r28, 0x2B	; 43
    74e8:	d2 40       	sbci	r29, 0x02	; 2
    74ea:	d5 01       	movw	r26, r10
    74ec:	5a 96       	adiw	r26, 0x1a	; 26
    74ee:	0d 93       	st	X+, r16
    74f0:	1d 93       	st	X+, r17
    74f2:	2d 93       	st	X+, r18
    74f4:	3c 93       	st	X, r19
    74f6:	5d 97       	sbiw	r26, 0x1d	; 29
    74f8:	de 96       	adiw	r26, 0x3e	; 62
    74fa:	6c 91       	ld	r22, X
    74fc:	de 97       	sbiw	r26, 0x3e	; 62
    74fe:	13 96       	adiw	r26, 0x03	; 3
    7500:	6c 93       	st	X, r22
    7502:	13 97       	sbiw	r26, 0x03	; 3
    7504:	8f ef       	ldi	r24, 0xFF	; 255
    7506:	86 0f       	add	r24, r22
    7508:	82 30       	cpi	r24, 0x02	; 2
    750a:	08 f0       	brcs	.+2      	; 0x750e <f_open+0x276>
    750c:	61 c2       	rjmp	.+1218   	; 0x79d0 <f_open+0x738>
    750e:	db 96       	adiw	r26, 0x3b	; 59
    7510:	8c 90       	ld	r8, X
    7512:	db 97       	sbiw	r26, 0x3b	; 59
    7514:	12 96       	adiw	r26, 0x02	; 2
    7516:	8c 92       	st	X, r8
    7518:	88 20       	and	r8, r8
    751a:	09 f4       	brne	.+2      	; 0x751e <f_open+0x286>
    751c:	59 c2       	rjmp	.+1202   	; 0x79d0 <f_open+0x738>
    751e:	88 2d       	mov	r24, r8
    7520:	90 e0       	ldi	r25, 0x00	; 0
    7522:	9c 01       	movw	r18, r24
    7524:	21 50       	subi	r18, 0x01	; 1
    7526:	31 09       	sbc	r19, r1
    7528:	82 23       	and	r24, r18
    752a:	93 23       	and	r25, r19
    752c:	89 2b       	or	r24, r25
    752e:	09 f0       	breq	.+2      	; 0x7532 <f_open+0x29a>
    7530:	4f c2       	rjmp	.+1182   	; 0x79d0 <f_open+0x738>
    7532:	f5 01       	movw	r30, r10
    7534:	ff 96       	adiw	r30, 0x3f	; 63
    7536:	00 81       	ld	r16, Z
    7538:	11 81       	ldd	r17, Z+1	; 0x01
    753a:	f5 01       	movw	r30, r10
    753c:	00 87       	std	Z+8, r16	; 0x08
    753e:	11 87       	std	Z+9, r17	; 0x09
    7540:	c8 01       	movw	r24, r16
    7542:	8f 70       	andi	r24, 0x0F	; 15
    7544:	99 27       	eor	r25, r25
    7546:	89 2b       	or	r24, r25
    7548:	09 f0       	breq	.+2      	; 0x754c <f_open+0x2b4>
    754a:	42 c2       	rjmp	.+1156   	; 0x79d0 <f_open+0x738>
    754c:	ef 5b       	subi	r30, 0xBF	; 191
    754e:	ff 4f       	sbci	r31, 0xFF	; 255
    7550:	80 81       	ld	r24, Z
    7552:	91 81       	ldd	r25, Z+1	; 0x01
    7554:	9c 01       	movw	r18, r24
    7556:	40 e0       	ldi	r20, 0x00	; 0
    7558:	50 e0       	ldi	r21, 0x00	; 0
    755a:	c1 5c       	subi	r28, 0xC1	; 193
    755c:	dd 4f       	sbci	r29, 0xFD	; 253
    755e:	28 83       	st	Y, r18
    7560:	39 83       	std	Y+1, r19	; 0x01
    7562:	4a 83       	std	Y+2, r20	; 0x02
    7564:	5b 83       	std	Y+3, r21	; 0x03
    7566:	cf 53       	subi	r28, 0x3F	; 63
    7568:	d2 40       	sbci	r29, 0x02	; 2
    756a:	89 2b       	or	r24, r25
    756c:	69 f4       	brne	.+26     	; 0x7588 <f_open+0x2f0>
    756e:	3d 96       	adiw	r30, 0x0d	; 13
    7570:	80 81       	ld	r24, Z
    7572:	91 81       	ldd	r25, Z+1	; 0x01
    7574:	a2 81       	ldd	r26, Z+2	; 0x02
    7576:	b3 81       	ldd	r27, Z+3	; 0x03
    7578:	c1 5c       	subi	r28, 0xC1	; 193
    757a:	dd 4f       	sbci	r29, 0xFD	; 253
    757c:	88 83       	st	Y, r24
    757e:	99 83       	std	Y+1, r25	; 0x01
    7580:	aa 83       	std	Y+2, r26	; 0x02
    7582:	bb 83       	std	Y+3, r27	; 0x03
    7584:	cf 53       	subi	r28, 0x3F	; 63
    7586:	d2 40       	sbci	r29, 0x02	; 2
    7588:	d5 01       	movw	r26, r10
    758a:	dc 96       	adiw	r26, 0x3c	; 60
    758c:	ed 91       	ld	r30, X+
    758e:	fc 91       	ld	r31, X
    7590:	dd 97       	sbiw	r26, 0x3d	; 61
    7592:	30 97       	sbiw	r30, 0x00	; 0
    7594:	09 f4       	brne	.+2      	; 0x7598 <f_open+0x300>
    7596:	1c c2       	rjmp	.+1080   	; 0x79d0 <f_open+0x738>
    7598:	a6 2f       	mov	r26, r22
    759a:	b0 e0       	ldi	r27, 0x00	; 0
    759c:	c5 5d       	subi	r28, 0xD5	; 213
    759e:	dd 4f       	sbci	r29, 0xFD	; 253
    75a0:	28 81       	ld	r18, Y
    75a2:	39 81       	ldd	r19, Y+1	; 0x01
    75a4:	4a 81       	ldd	r20, Y+2	; 0x02
    75a6:	5b 81       	ldd	r21, Y+3	; 0x03
    75a8:	cb 52       	subi	r28, 0x2B	; 43
    75aa:	d2 40       	sbci	r29, 0x02	; 2
    75ac:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    75b0:	c5 5c       	subi	r28, 0xC5	; 197
    75b2:	dd 4f       	sbci	r29, 0xFD	; 253
    75b4:	68 83       	st	Y, r22
    75b6:	79 83       	std	Y+1, r23	; 0x01
    75b8:	8a 83       	std	Y+2, r24	; 0x02
    75ba:	9b 83       	std	Y+3, r25	; 0x03
    75bc:	cb 53       	subi	r28, 0x3B	; 59
    75be:	d2 40       	sbci	r29, 0x02	; 2
    75c0:	9f 01       	movw	r18, r30
    75c2:	40 e0       	ldi	r20, 0x00	; 0
    75c4:	50 e0       	ldi	r21, 0x00	; 0
    75c6:	c9 5c       	subi	r28, 0xC9	; 201
    75c8:	dd 4f       	sbci	r29, 0xFD	; 253
    75ca:	28 83       	st	Y, r18
    75cc:	39 83       	std	Y+1, r19	; 0x01
    75ce:	4a 83       	std	Y+2, r20	; 0x02
    75d0:	5b 83       	std	Y+3, r21	; 0x03
    75d2:	c7 53       	subi	r28, 0x37	; 55
    75d4:	d2 40       	sbci	r29, 0x02	; 2
    75d6:	c8 01       	movw	r24, r16
    75d8:	92 95       	swap	r25
    75da:	82 95       	swap	r24
    75dc:	8f 70       	andi	r24, 0x0F	; 15
    75de:	89 27       	eor	r24, r25
    75e0:	9f 70       	andi	r25, 0x0F	; 15
    75e2:	89 27       	eor	r24, r25
    75e4:	28 0f       	add	r18, r24
    75e6:	39 1f       	adc	r19, r25
    75e8:	41 1d       	adc	r20, r1
    75ea:	51 1d       	adc	r21, r1
    75ec:	da 01       	movw	r26, r20
    75ee:	c9 01       	movw	r24, r18
    75f0:	c5 5c       	subi	r28, 0xC5	; 197
    75f2:	dd 4f       	sbci	r29, 0xFD	; 253
    75f4:	28 81       	ld	r18, Y
    75f6:	39 81       	ldd	r19, Y+1	; 0x01
    75f8:	4a 81       	ldd	r20, Y+2	; 0x02
    75fa:	5b 81       	ldd	r21, Y+3	; 0x03
    75fc:	cb 53       	subi	r28, 0x3B	; 59
    75fe:	d2 40       	sbci	r29, 0x02	; 2
    7600:	28 0f       	add	r18, r24
    7602:	39 1f       	adc	r19, r25
    7604:	4a 1f       	adc	r20, r26
    7606:	5b 1f       	adc	r21, r27
    7608:	cd 5c       	subi	r28, 0xCD	; 205
    760a:	dd 4f       	sbci	r29, 0xFD	; 253
    760c:	28 83       	st	Y, r18
    760e:	39 83       	std	Y+1, r19	; 0x01
    7610:	4a 83       	std	Y+2, r20	; 0x02
    7612:	5b 83       	std	Y+3, r21	; 0x03
    7614:	c3 53       	subi	r28, 0x33	; 51
    7616:	d2 40       	sbci	r29, 0x02	; 2
    7618:	c1 5c       	subi	r28, 0xC1	; 193
    761a:	dd 4f       	sbci	r29, 0xFD	; 253
    761c:	88 81       	ld	r24, Y
    761e:	99 81       	ldd	r25, Y+1	; 0x01
    7620:	aa 81       	ldd	r26, Y+2	; 0x02
    7622:	bb 81       	ldd	r27, Y+3	; 0x03
    7624:	cf 53       	subi	r28, 0x3F	; 63
    7626:	d2 40       	sbci	r29, 0x02	; 2
    7628:	82 17       	cp	r24, r18
    762a:	93 07       	cpc	r25, r19
    762c:	a4 07       	cpc	r26, r20
    762e:	b5 07       	cpc	r27, r21
    7630:	08 f4       	brcc	.+2      	; 0x7634 <f_open+0x39c>
    7632:	ce c1       	rjmp	.+924    	; 0x79d0 <f_open+0x738>
    7634:	bc 01       	movw	r22, r24
    7636:	cd 01       	movw	r24, r26
    7638:	62 1b       	sub	r22, r18
    763a:	73 0b       	sbc	r23, r19
    763c:	84 0b       	sbc	r24, r20
    763e:	95 0b       	sbc	r25, r21
    7640:	28 2d       	mov	r18, r8
    7642:	30 e0       	ldi	r19, 0x00	; 0
    7644:	40 e0       	ldi	r20, 0x00	; 0
    7646:	50 e0       	ldi	r21, 0x00	; 0
    7648:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    764c:	21 15       	cp	r18, r1
    764e:	31 05       	cpc	r19, r1
    7650:	41 05       	cpc	r20, r1
    7652:	51 05       	cpc	r21, r1
    7654:	09 f4       	brne	.+2      	; 0x7658 <f_open+0x3c0>
    7656:	bc c1       	rjmp	.+888    	; 0x79d0 <f_open+0x738>
    7658:	26 3f       	cpi	r18, 0xF6	; 246
    765a:	9f e0       	ldi	r25, 0x0F	; 15
    765c:	39 07       	cpc	r19, r25
    765e:	41 05       	cpc	r20, r1
    7660:	51 05       	cpc	r21, r1
    7662:	08 f4       	brcc	.+2      	; 0x7666 <f_open+0x3ce>
    7664:	ab c2       	rjmp	.+1366   	; 0x7bbc <f_open+0x924>
    7666:	26 3f       	cpi	r18, 0xF6	; 246
    7668:	af ef       	ldi	r26, 0xFF	; 255
    766a:	3a 07       	cpc	r19, r26
    766c:	41 05       	cpc	r20, r1
    766e:	51 05       	cpc	r21, r1
    7670:	08 f4       	brcc	.+2      	; 0x7674 <f_open+0x3dc>
    7672:	19 c2       	rjmp	.+1074   	; 0x7aa6 <f_open+0x80e>
    7674:	da 01       	movw	r26, r20
    7676:	c9 01       	movw	r24, r18
    7678:	02 96       	adiw	r24, 0x02	; 2
    767a:	a1 1d       	adc	r26, r1
    767c:	b1 1d       	adc	r27, r1
    767e:	c5 5c       	subi	r28, 0xC5	; 197
    7680:	dd 4f       	sbci	r29, 0xFD	; 253
    7682:	88 83       	st	Y, r24
    7684:	99 83       	std	Y+1, r25	; 0x01
    7686:	aa 83       	std	Y+2, r26	; 0x02
    7688:	bb 83       	std	Y+3, r27	; 0x03
    768a:	cb 53       	subi	r28, 0x3B	; 59
    768c:	d2 40       	sbci	r29, 0x02	; 2
    768e:	f5 01       	movw	r30, r10
    7690:	86 8b       	std	Z+22, r24	; 0x16
    7692:	97 8b       	std	Z+23, r25	; 0x17
    7694:	a0 8f       	std	Z+24, r26	; 0x18
    7696:	b1 8f       	std	Z+25, r27	; 0x19
    7698:	cd 5c       	subi	r28, 0xCD	; 205
    769a:	dd 4f       	sbci	r29, 0xFD	; 253
    769c:	88 81       	ld	r24, Y
    769e:	99 81       	ldd	r25, Y+1	; 0x01
    76a0:	aa 81       	ldd	r26, Y+2	; 0x02
    76a2:	bb 81       	ldd	r27, Y+3	; 0x03
    76a4:	c3 53       	subi	r28, 0x33	; 51
    76a6:	d2 40       	sbci	r29, 0x02	; 2
    76a8:	c1 5d       	subi	r28, 0xD1	; 209
    76aa:	dd 4f       	sbci	r29, 0xFD	; 253
    76ac:	28 81       	ld	r18, Y
    76ae:	39 81       	ldd	r19, Y+1	; 0x01
    76b0:	4a 81       	ldd	r20, Y+2	; 0x02
    76b2:	5b 81       	ldd	r21, Y+3	; 0x03
    76b4:	cf 52       	subi	r28, 0x2F	; 47
    76b6:	d2 40       	sbci	r29, 0x02	; 2
    76b8:	82 0f       	add	r24, r18
    76ba:	93 1f       	adc	r25, r19
    76bc:	a4 1f       	adc	r26, r20
    76be:	b5 1f       	adc	r27, r21
    76c0:	86 a3       	std	Z+38, r24	; 0x26
    76c2:	97 a3       	std	Z+39, r25	; 0x27
    76c4:	a0 a7       	std	Z+40, r26	; 0x28
    76c6:	b1 a7       	std	Z+41, r27	; 0x29
    76c8:	c9 5c       	subi	r28, 0xC9	; 201
    76ca:	dd 4f       	sbci	r29, 0xFD	; 253
    76cc:	88 81       	ld	r24, Y
    76ce:	99 81       	ldd	r25, Y+1	; 0x01
    76d0:	aa 81       	ldd	r26, Y+2	; 0x02
    76d2:	bb 81       	ldd	r27, Y+3	; 0x03
    76d4:	c7 53       	subi	r28, 0x37	; 55
    76d6:	d2 40       	sbci	r29, 0x02	; 2
    76d8:	82 0f       	add	r24, r18
    76da:	93 1f       	adc	r25, r19
    76dc:	a4 1f       	adc	r26, r20
    76de:	b5 1f       	adc	r27, r21
    76e0:	86 8f       	std	Z+30, r24	; 0x1e
    76e2:	97 8f       	std	Z+31, r25	; 0x1f
    76e4:	a0 a3       	std	Z+32, r26	; 0x20
    76e6:	b1 a3       	std	Z+33, r27	; 0x21
    76e8:	01 2b       	or	r16, r17
    76ea:	09 f0       	breq	.+2      	; 0x76ee <f_open+0x456>
    76ec:	71 c1       	rjmp	.+738    	; 0x79d0 <f_open+0x738>
    76ee:	f5 01       	movw	r30, r10
    76f0:	e6 5a       	subi	r30, 0xA6	; 166
    76f2:	ff 4f       	sbci	r31, 0xFF	; 255
    76f4:	80 81       	ld	r24, Z
    76f6:	91 81       	ldd	r25, Z+1	; 0x01
    76f8:	a2 81       	ldd	r26, Z+2	; 0x02
    76fa:	b3 81       	ldd	r27, Z+3	; 0x03
    76fc:	f5 01       	movw	r30, r10
    76fe:	82 a3       	std	Z+34, r24	; 0x22
    7700:	93 a3       	std	Z+35, r25	; 0x23
    7702:	a4 a3       	std	Z+36, r26	; 0x24
    7704:	b5 a3       	std	Z+37, r27	; 0x25
    7706:	c5 5c       	subi	r28, 0xC5	; 197
    7708:	dd 4f       	sbci	r29, 0xFD	; 253
    770a:	88 81       	ld	r24, Y
    770c:	99 81       	ldd	r25, Y+1	; 0x01
    770e:	aa 81       	ldd	r26, Y+2	; 0x02
    7710:	bb 81       	ldd	r27, Y+3	; 0x03
    7712:	cb 53       	subi	r28, 0x3B	; 59
    7714:	d2 40       	sbci	r29, 0x02	; 2
    7716:	88 0f       	add	r24, r24
    7718:	99 1f       	adc	r25, r25
    771a:	aa 1f       	adc	r26, r26
    771c:	bb 1f       	adc	r27, r27
    771e:	88 0f       	add	r24, r24
    7720:	99 1f       	adc	r25, r25
    7722:	aa 1f       	adc	r26, r26
    7724:	bb 1f       	adc	r27, r27
    7726:	81 50       	subi	r24, 0x01	; 1
    7728:	9e 4f       	sbci	r25, 0xFE	; 254
    772a:	af 4f       	sbci	r26, 0xFF	; 255
    772c:	bf 4f       	sbci	r27, 0xFF	; 255
    772e:	09 e0       	ldi	r16, 0x09	; 9
    7730:	b6 95       	lsr	r27
    7732:	a7 95       	ror	r26
    7734:	97 95       	ror	r25
    7736:	87 95       	ror	r24
    7738:	0a 95       	dec	r16
    773a:	d1 f7       	brne	.-12     	; 0x7730 <f_open+0x498>
    773c:	c5 5d       	subi	r28, 0xD5	; 213
    773e:	dd 4f       	sbci	r29, 0xFD	; 253
    7740:	08 81       	ld	r16, Y
    7742:	19 81       	ldd	r17, Y+1	; 0x01
    7744:	2a 81       	ldd	r18, Y+2	; 0x02
    7746:	3b 81       	ldd	r19, Y+3	; 0x03
    7748:	cb 52       	subi	r28, 0x2B	; 43
    774a:	d2 40       	sbci	r29, 0x02	; 2
    774c:	08 17       	cp	r16, r24
    774e:	19 07       	cpc	r17, r25
    7750:	2a 07       	cpc	r18, r26
    7752:	3b 07       	cpc	r19, r27
    7754:	08 f4       	brcc	.+2      	; 0x7758 <f_open+0x4c0>
    7756:	3c c1       	rjmp	.+632    	; 0x79d0 <f_open+0x738>
    7758:	8f ef       	ldi	r24, 0xFF	; 255
    775a:	9f ef       	ldi	r25, 0xFF	; 255
    775c:	dc 01       	movw	r26, r24
    775e:	f5 01       	movw	r30, r10
    7760:	86 87       	std	Z+14, r24	; 0x0e
    7762:	97 87       	std	Z+15, r25	; 0x0f
    7764:	a0 8b       	std	Z+16, r26	; 0x10
    7766:	b1 8b       	std	Z+17, r27	; 0x11
    7768:	12 86       	std	Z+10, r1	; 0x0a
    776a:	13 86       	std	Z+11, r1	; 0x0b
    776c:	14 86       	std	Z+12, r1	; 0x0c
    776e:	15 86       	std	Z+13, r1	; 0x0d
    7770:	15 82       	std	Z+5, r1	; 0x05
    7772:	e2 5a       	subi	r30, 0xA2	; 162
    7774:	ff 4f       	sbci	r31, 0xFF	; 255
    7776:	80 81       	ld	r24, Z
    7778:	91 81       	ldd	r25, Z+1	; 0x01
    777a:	c1 5d       	subi	r28, 0xD1	; 209
    777c:	dd 4f       	sbci	r29, 0xFD	; 253
    777e:	28 81       	ld	r18, Y
    7780:	39 81       	ldd	r19, Y+1	; 0x01
    7782:	4a 81       	ldd	r20, Y+2	; 0x02
    7784:	5b 81       	ldd	r21, Y+3	; 0x03
    7786:	cf 52       	subi	r28, 0x2F	; 47
    7788:	d2 40       	sbci	r29, 0x02	; 2
    778a:	28 0f       	add	r18, r24
    778c:	39 1f       	adc	r19, r25
    778e:	41 1d       	adc	r20, r1
    7790:	51 1d       	adc	r21, r1
    7792:	f5 01       	movw	r30, r10
    7794:	22 8b       	std	Z+18, r18	; 0x12
    7796:	33 8b       	std	Z+19, r19	; 0x13
    7798:	44 8b       	std	Z+20, r20	; 0x14
    779a:	55 8b       	std	Z+21, r21	; 0x15
    779c:	01 e0       	ldi	r16, 0x01	; 1
    779e:	b6 01       	movw	r22, r12
    77a0:	81 81       	ldd	r24, Z+1	; 0x01
    77a2:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    77a6:	81 11       	cpse	r24, r1
    77a8:	0c c0       	rjmp	.+24     	; 0x77c2 <f_open+0x52a>
    77aa:	c9 5d       	subi	r28, 0xD9	; 217
    77ac:	dd 4f       	sbci	r29, 0xFD	; 253
    77ae:	e8 81       	ld	r30, Y
    77b0:	f9 81       	ldd	r31, Y+1	; 0x01
    77b2:	c7 52       	subi	r28, 0x27	; 39
    77b4:	d2 40       	sbci	r29, 0x02	; 2
    77b6:	80 81       	ld	r24, Z
    77b8:	91 81       	ldd	r25, Z+1	; 0x01
    77ba:	85 35       	cpi	r24, 0x55	; 85
    77bc:	9a 4a       	sbci	r25, 0xAA	; 170
    77be:	09 f4       	brne	.+2      	; 0x77c2 <f_open+0x52a>
    77c0:	8e c2       	rjmp	.+1308   	; 0x7cde <f_open+0xa46>
    77c2:	83 e0       	ldi	r24, 0x03	; 3
    77c4:	d5 01       	movw	r26, r10
    77c6:	8c 93       	st	X, r24
    77c8:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <Fsid>
    77cc:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <Fsid+0x1>
    77d0:	01 96       	adiw	r24, 0x01	; 1
    77d2:	80 93 ed 29 	sts	0x29ED, r24	; 0x8029ed <Fsid>
    77d6:	90 93 ee 29 	sts	0x29EE, r25	; 0x8029ee <Fsid+0x1>
    77da:	16 96       	adiw	r26, 0x06	; 6
    77dc:	8d 93       	st	X+, r24
    77de:	9c 93       	st	X, r25
    77e0:	17 97       	sbiw	r26, 0x07	; 7
    77e2:	f5 01       	movw	r30, r10
    77e4:	12 a6       	std	Z+42, r1	; 0x2a
    77e6:	13 a6       	std	Z+43, r1	; 0x2b
    77e8:	14 a6       	std	Z+44, r1	; 0x2c
    77ea:	15 a6       	std	Z+45, r1	; 0x2d
    77ec:	14 82       	std	Z+4, r1	; 0x04
    77ee:	ce 01       	movw	r24, r28
    77f0:	85 5e       	subi	r24, 0xE5	; 229
    77f2:	9d 4f       	sbci	r25, 0xFD	; 253
    77f4:	f2 01       	movw	r30, r4
    77f6:	84 8b       	std	Z+20, r24	; 0x14
    77f8:	95 8b       	std	Z+21, r25	; 0x15
    77fa:	8a 51       	subi	r24, 0x1A	; 26
    77fc:	92 40       	sbci	r25, 0x02	; 2
    77fe:	86 8b       	std	Z+22, r24	; 0x16
    7800:	97 8b       	std	Z+23, r25	; 0x17
    7802:	b7 01       	movw	r22, r14
    7804:	c2 01       	movw	r24, r4
    7806:	0e 94 ed 27 	call	0x4fda	; 0x4fda <follow_path>
    780a:	d2 01       	movw	r26, r4
    780c:	52 96       	adiw	r26, 0x12	; 18
    780e:	0d 91       	ld	r16, X+
    7810:	1c 91       	ld	r17, X
    7812:	53 97       	sbiw	r26, 0x13	; 19
    7814:	81 11       	cpse	r24, r1
    7816:	96 c2       	rjmp	.+1324   	; 0x7d44 <f_open+0xaac>
    7818:	01 15       	cp	r16, r1
    781a:	11 05       	cpc	r17, r1
    781c:	09 f4       	brne	.+2      	; 0x7820 <f_open+0x588>
    781e:	3d c0       	rjmp	.+122    	; 0x789a <f_open+0x602>
    7820:	89 2d       	mov	r24, r9
    7822:	8c 71       	andi	r24, 0x1C	; 28
    7824:	e9 f0       	breq	.+58     	; 0x7860 <f_open+0x5c8>
    7826:	f8 01       	movw	r30, r16
    7828:	83 85       	ldd	r24, Z+11	; 0x0b
    782a:	81 71       	andi	r24, 0x11	; 17
    782c:	19 f5       	brne	.+70     	; 0x7874 <f_open+0x5dc>
    782e:	92 fe       	sbrs	r9, 2
    7830:	ab cd       	rjmp	.-1194   	; 0x7388 <f_open+0xf0>
    7832:	88 e0       	ldi	r24, 0x08	; 8
    7834:	ce 5b       	subi	r28, 0xBE	; 190
    7836:	dd 4f       	sbci	r29, 0xFD	; 253
    7838:	cd bf       	out	0x3d, r28	; 61
    783a:	de bf       	out	0x3e, r29	; 62
    783c:	df 91       	pop	r29
    783e:	cf 91       	pop	r28
    7840:	1f 91       	pop	r17
    7842:	0f 91       	pop	r16
    7844:	ff 90       	pop	r15
    7846:	ef 90       	pop	r14
    7848:	df 90       	pop	r13
    784a:	cf 90       	pop	r12
    784c:	bf 90       	pop	r11
    784e:	af 90       	pop	r10
    7850:	9f 90       	pop	r9
    7852:	8f 90       	pop	r8
    7854:	7f 90       	pop	r7
    7856:	5f 90       	pop	r5
    7858:	4f 90       	pop	r4
    785a:	3f 90       	pop	r3
    785c:	2f 90       	pop	r2
    785e:	08 95       	ret
    7860:	f8 01       	movw	r30, r16
    7862:	83 85       	ldd	r24, Z+11	; 0x0b
    7864:	84 ff       	sbrs	r24, 4
    7866:	02 c0       	rjmp	.+4      	; 0x786c <f_open+0x5d4>
    7868:	84 e0       	ldi	r24, 0x04	; 4
    786a:	e4 cf       	rjmp	.-56     	; 0x7834 <f_open+0x59c>
    786c:	91 fe       	sbrs	r9, 1
    786e:	04 c0       	rjmp	.+8      	; 0x7878 <f_open+0x5e0>
    7870:	80 ff       	sbrs	r24, 0
    7872:	02 c0       	rjmp	.+4      	; 0x7878 <f_open+0x5e0>
    7874:	87 e0       	ldi	r24, 0x07	; 7
    7876:	de cf       	rjmp	.-68     	; 0x7834 <f_open+0x59c>
    7878:	68 01       	movw	r12, r16
    787a:	93 fe       	sbrs	r9, 3
    787c:	88 cd       	rjmp	.-1264   	; 0x738e <f_open+0xf6>
    787e:	e4 e1       	ldi	r30, 0x14	; 20
    7880:	ce 0e       	add	r12, r30
    7882:	d1 1c       	adc	r13, r1
    7884:	d2 01       	movw	r26, r4
    7886:	ed 91       	ld	r30, X+
    7888:	fc 91       	ld	r31, X
    788a:	78 01       	movw	r14, r16
    788c:	ba e1       	ldi	r27, 0x1A	; 26
    788e:	eb 0e       	add	r14, r27
    7890:	f1 1c       	adc	r15, r1
    7892:	27 2d       	mov	r18, r7
    7894:	20 62       	ori	r18, 0x20	; 32
    7896:	72 2e       	mov	r7, r18
    7898:	84 cd       	rjmp	.-1272   	; 0x73a2 <f_open+0x10a>
    789a:	86 e0       	ldi	r24, 0x06	; 6
    789c:	cb cf       	rjmp	.-106    	; 0x7834 <f_open+0x59c>
    789e:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <get_fattime>
    78a2:	f8 01       	movw	r30, r16
    78a4:	66 87       	std	Z+14, r22	; 0x0e
    78a6:	77 87       	std	Z+15, r23	; 0x0f
    78a8:	80 8b       	std	Z+16, r24	; 0x10
    78aa:	91 8b       	std	Z+17, r25	; 0x11
    78ac:	13 86       	std	Z+11, r1	; 0x0b
    78ae:	14 8e       	std	Z+28, r1	; 0x1c
    78b0:	15 8e       	std	Z+29, r1	; 0x1d
    78b2:	16 8e       	std	Z+30, r1	; 0x1e
    78b4:	17 8e       	std	Z+31, r1	; 0x1f
    78b6:	68 01       	movw	r12, r16
    78b8:	f4 e1       	ldi	r31, 0x14	; 20
    78ba:	cf 0e       	add	r12, r31
    78bc:	d1 1c       	adc	r13, r1
    78be:	78 01       	movw	r14, r16
    78c0:	2a e1       	ldi	r18, 0x1A	; 26
    78c2:	e2 0e       	add	r14, r18
    78c4:	f1 1c       	adc	r15, r1
    78c6:	d8 01       	movw	r26, r16
    78c8:	54 96       	adiw	r26, 0x14	; 20
    78ca:	8d 90       	ld	r8, X+
    78cc:	9c 90       	ld	r9, X
    78ce:	55 97       	sbiw	r26, 0x15	; 21
    78d0:	a1 2c       	mov	r10, r1
    78d2:	b1 2c       	mov	r11, r1
    78d4:	d4 01       	movw	r26, r8
    78d6:	99 27       	eor	r25, r25
    78d8:	88 27       	eor	r24, r24
    78da:	f8 01       	movw	r30, r16
    78dc:	82 8c       	ldd	r8, Z+26	; 0x1a
    78de:	93 8c       	ldd	r9, Z+27	; 0x1b
    78e0:	a1 2c       	mov	r10, r1
    78e2:	b1 2c       	mov	r11, r1
    78e4:	88 2a       	or	r8, r24
    78e6:	99 2a       	or	r9, r25
    78e8:	aa 2a       	or	r10, r26
    78ea:	bb 2a       	or	r11, r27
    78ec:	12 8e       	std	Z+26, r1	; 0x1a
    78ee:	13 8e       	std	Z+27, r1	; 0x1b
    78f0:	14 8a       	std	Z+20, r1	; 0x14
    78f2:	15 8a       	std	Z+21, r1	; 0x15
    78f4:	d2 01       	movw	r26, r4
    78f6:	ed 91       	ld	r30, X+
    78f8:	fc 91       	ld	r31, X
    78fa:	81 e0       	ldi	r24, 0x01	; 1
    78fc:	84 83       	std	Z+4, r24	; 0x04
    78fe:	81 14       	cp	r8, r1
    7900:	91 04       	cpc	r9, r1
    7902:	a1 04       	cpc	r10, r1
    7904:	b1 04       	cpc	r11, r1
    7906:	29 f2       	breq	.-118    	; 0x7892 <f_open+0x5fa>
    7908:	b1 e0       	ldi	r27, 0x01	; 1
    790a:	8b 16       	cp	r8, r27
    790c:	91 04       	cpc	r9, r1
    790e:	a1 04       	cpc	r10, r1
    7910:	b1 04       	cpc	r11, r1
    7912:	49 f0       	breq	.+18     	; 0x7926 <f_open+0x68e>
    7914:	86 89       	ldd	r24, Z+22	; 0x16
    7916:	97 89       	ldd	r25, Z+23	; 0x17
    7918:	a0 8d       	ldd	r26, Z+24	; 0x18
    791a:	b1 8d       	ldd	r27, Z+25	; 0x19
    791c:	88 16       	cp	r8, r24
    791e:	99 06       	cpc	r9, r25
    7920:	aa 06       	cpc	r10, r26
    7922:	bb 06       	cpc	r11, r27
    7924:	b8 f0       	brcs	.+46     	; 0x7954 <f_open+0x6bc>
    7926:	82 e0       	ldi	r24, 0x02	; 2
    7928:	85 cf       	rjmp	.-246    	; 0x7834 <f_open+0x59c>
    792a:	11 23       	and	r17, r17
    792c:	11 f0       	breq	.+4      	; 0x7932 <f_open+0x69a>
    792e:	82 fd       	sbrc	r24, 2
    7930:	fd cc       	rjmp	.-1542   	; 0x732c <f_open+0x94>
    7932:	65 01       	movw	r12, r10
    7934:	be e2       	ldi	r27, 0x2E	; 46
    7936:	cb 0e       	add	r12, r27
    7938:	d1 1c       	adc	r13, r1
    793a:	01 e0       	ldi	r16, 0x01	; 1
    793c:	20 e0       	ldi	r18, 0x00	; 0
    793e:	30 e0       	ldi	r19, 0x00	; 0
    7940:	a9 01       	movw	r20, r18
    7942:	b6 01       	movw	r22, r12
    7944:	f5 01       	movw	r30, r10
    7946:	81 81       	ldd	r24, Z+1	; 0x01
    7948:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    794c:	88 23       	and	r24, r24
    794e:	89 f1       	breq	.+98     	; 0x79b2 <f_open+0x71a>
    7950:	81 e0       	ldi	r24, 0x01	; 1
    7952:	f9 cc       	rjmp	.-1550   	; 0x7346 <f_open+0xae>
    7954:	22 a5       	ldd	r18, Z+42	; 0x2a
    7956:	33 a5       	ldd	r19, Z+43	; 0x2b
    7958:	44 a5       	ldd	r20, Z+44	; 0x2c
    795a:	55 a5       	ldd	r21, Z+45	; 0x2d
    795c:	c9 5d       	subi	r28, 0xD9	; 217
    795e:	dd 4f       	sbci	r29, 0xFD	; 253
    7960:	28 83       	st	Y, r18
    7962:	39 83       	std	Y+1, r19	; 0x01
    7964:	4a 83       	std	Y+2, r20	; 0x02
    7966:	5b 83       	std	Y+3, r21	; 0x03
    7968:	c7 52       	subi	r28, 0x27	; 39
    796a:	d2 40       	sbci	r29, 0x02	; 2
    796c:	b5 01       	movw	r22, r10
    796e:	a4 01       	movw	r20, r8
    7970:	cf 01       	movw	r24, r30
    7972:	32 db       	rcall	.-2460   	; 0x6fd8 <remove_chain.part.6>
    7974:	81 11       	cpse	r24, r1
    7976:	5e cf       	rjmp	.-324    	; 0x7834 <f_open+0x59c>
    7978:	d2 01       	movw	r26, r4
    797a:	8d 91       	ld	r24, X+
    797c:	9c 91       	ld	r25, X
    797e:	b1 e0       	ldi	r27, 0x01	; 1
    7980:	8b 1a       	sub	r8, r27
    7982:	91 08       	sbc	r9, r1
    7984:	a1 08       	sbc	r10, r1
    7986:	b1 08       	sbc	r11, r1
    7988:	fc 01       	movw	r30, r24
    798a:	82 86       	std	Z+10, r8	; 0x0a
    798c:	93 86       	std	Z+11, r9	; 0x0b
    798e:	a4 86       	std	Z+12, r10	; 0x0c
    7990:	b5 86       	std	Z+13, r11	; 0x0d
    7992:	c9 5d       	subi	r28, 0xD9	; 217
    7994:	dd 4f       	sbci	r29, 0xFD	; 253
    7996:	48 81       	ld	r20, Y
    7998:	59 81       	ldd	r21, Y+1	; 0x01
    799a:	6a 81       	ldd	r22, Y+2	; 0x02
    799c:	7b 81       	ldd	r23, Y+3	; 0x03
    799e:	c7 52       	subi	r28, 0x27	; 39
    79a0:	d2 40       	sbci	r29, 0x02	; 2
    79a2:	0e 94 83 21 	call	0x4306	; 0x4306 <move_window>
    79a6:	81 11       	cpse	r24, r1
    79a8:	45 cf       	rjmp	.-374    	; 0x7834 <f_open+0x59c>
    79aa:	d2 01       	movw	r26, r4
    79ac:	ed 91       	ld	r30, X+
    79ae:	fc 91       	ld	r31, X
    79b0:	70 cf       	rjmp	.-288    	; 0x7892 <f_open+0x5fa>
    79b2:	85 01       	movw	r16, r10
    79b4:	04 5d       	subi	r16, 0xD4	; 212
    79b6:	1d 4f       	sbci	r17, 0xFD	; 253
    79b8:	c9 5d       	subi	r28, 0xD9	; 217
    79ba:	dd 4f       	sbci	r29, 0xFD	; 253
    79bc:	08 83       	st	Y, r16
    79be:	19 83       	std	Y+1, r17	; 0x01
    79c0:	c7 52       	subi	r28, 0x27	; 39
    79c2:	d2 40       	sbci	r29, 0x02	; 2
    79c4:	d8 01       	movw	r26, r16
    79c6:	8d 91       	ld	r24, X+
    79c8:	9c 91       	ld	r25, X
    79ca:	85 35       	cpi	r24, 0x55	; 85
    79cc:	9a 4a       	sbci	r25, 0xAA	; 170
    79ce:	11 f0       	breq	.+4      	; 0x79d4 <f_open+0x73c>
    79d0:	8d e0       	ldi	r24, 0x0D	; 13
    79d2:	b9 cc       	rjmp	.-1678   	; 0x7346 <f_open+0xae>
    79d4:	f5 01       	movw	r30, r10
    79d6:	ec 59       	subi	r30, 0x9C	; 156
    79d8:	ff 4f       	sbci	r31, 0xFF	; 255
    79da:	cd 5c       	subi	r28, 0xCD	; 205
    79dc:	dd 4f       	sbci	r29, 0xFD	; 253
    79de:	e8 83       	st	Y, r30
    79e0:	f9 83       	std	Y+1, r31	; 0x01
    79e2:	c3 53       	subi	r28, 0x33	; 51
    79e4:	d2 40       	sbci	r29, 0x02	; 2
    79e6:	80 81       	ld	r24, Z
    79e8:	91 81       	ldd	r25, Z+1	; 0x01
    79ea:	a2 81       	ldd	r26, Z+2	; 0x02
    79ec:	b3 81       	ldd	r27, Z+3	; 0x03
    79ee:	bb 27       	eor	r27, r27
    79f0:	86 34       	cpi	r24, 0x46	; 70
    79f2:	91 44       	sbci	r25, 0x41	; 65
    79f4:	a4 45       	sbci	r26, 0x54	; 84
    79f6:	b1 05       	cpc	r27, r1
    79f8:	09 f4       	brne	.+2      	; 0x79fc <f_open+0x764>
    79fa:	4c c0       	rjmp	.+152    	; 0x7a94 <f_open+0x7fc>
    79fc:	0c 5a       	subi	r16, 0xAC	; 172
    79fe:	11 40       	sbci	r17, 0x01	; 1
    7a00:	c5 5d       	subi	r28, 0xD5	; 213
    7a02:	dd 4f       	sbci	r29, 0xFD	; 253
    7a04:	08 83       	st	Y, r16
    7a06:	19 83       	std	Y+1, r17	; 0x01
    7a08:	cb 52       	subi	r28, 0x2B	; 43
    7a0a:	d2 40       	sbci	r29, 0x02	; 2
    7a0c:	f8 01       	movw	r30, r16
    7a0e:	80 81       	ld	r24, Z
    7a10:	91 81       	ldd	r25, Z+1	; 0x01
    7a12:	a2 81       	ldd	r26, Z+2	; 0x02
    7a14:	b3 81       	ldd	r27, Z+3	; 0x03
    7a16:	bb 27       	eor	r27, r27
    7a18:	86 34       	cpi	r24, 0x46	; 70
    7a1a:	91 44       	sbci	r25, 0x41	; 65
    7a1c:	a4 45       	sbci	r26, 0x54	; 84
    7a1e:	b1 05       	cpc	r27, r1
    7a20:	c9 f1       	breq	.+114    	; 0x7a94 <f_open+0x7fc>
    7a22:	f5 01       	movw	r30, r10
    7a24:	e0 51       	subi	r30, 0x10	; 16
    7a26:	fe 4f       	sbci	r31, 0xFE	; 254
    7a28:	80 81       	ld	r24, Z
    7a2a:	88 23       	and	r24, r24
    7a2c:	89 f2       	breq	.-94     	; 0x79d0 <f_open+0x738>
    7a2e:	f5 01       	movw	r30, r10
    7a30:	ec 50       	subi	r30, 0x0C	; 12
    7a32:	fe 4f       	sbci	r31, 0xFE	; 254
    7a34:	00 81       	ld	r16, Z
    7a36:	11 81       	ldd	r17, Z+1	; 0x01
    7a38:	22 81       	ldd	r18, Z+2	; 0x02
    7a3a:	33 81       	ldd	r19, Z+3	; 0x03
    7a3c:	c1 5d       	subi	r28, 0xD1	; 209
    7a3e:	dd 4f       	sbci	r29, 0xFD	; 253
    7a40:	08 83       	st	Y, r16
    7a42:	19 83       	std	Y+1, r17	; 0x01
    7a44:	2a 83       	std	Y+2, r18	; 0x02
    7a46:	3b 83       	std	Y+3, r19	; 0x03
    7a48:	cf 52       	subi	r28, 0x2F	; 47
    7a4a:	d2 40       	sbci	r29, 0x02	; 2
    7a4c:	01 e0       	ldi	r16, 0x01	; 1
    7a4e:	c1 5d       	subi	r28, 0xD1	; 209
    7a50:	dd 4f       	sbci	r29, 0xFD	; 253
    7a52:	28 81       	ld	r18, Y
    7a54:	39 81       	ldd	r19, Y+1	; 0x01
    7a56:	4a 81       	ldd	r20, Y+2	; 0x02
    7a58:	5b 81       	ldd	r21, Y+3	; 0x03
    7a5a:	cf 52       	subi	r28, 0x2F	; 47
    7a5c:	d2 40       	sbci	r29, 0x02	; 2
    7a5e:	b6 01       	movw	r22, r12
    7a60:	d5 01       	movw	r26, r10
    7a62:	11 96       	adiw	r26, 0x01	; 1
    7a64:	8c 91       	ld	r24, X
    7a66:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    7a6a:	88 23       	and	r24, r24
    7a6c:	09 f4       	brne	.+2      	; 0x7a70 <f_open+0x7d8>
    7a6e:	f4 cc       	rjmp	.-1560   	; 0x7458 <f_open+0x1c0>
    7a70:	81 e0       	ldi	r24, 0x01	; 1
    7a72:	e0 ce       	rjmp	.-576    	; 0x7834 <f_open+0x59c>
    7a74:	f5 01       	movw	r30, r10
    7a76:	ee 5a       	subi	r30, 0xAE	; 174
    7a78:	ff 4f       	sbci	r31, 0xFF	; 255
    7a7a:	00 81       	ld	r16, Z
    7a7c:	11 81       	ldd	r17, Z+1	; 0x01
    7a7e:	22 81       	ldd	r18, Z+2	; 0x02
    7a80:	33 81       	ldd	r19, Z+3	; 0x03
    7a82:	c5 5d       	subi	r28, 0xD5	; 213
    7a84:	dd 4f       	sbci	r29, 0xFD	; 253
    7a86:	08 83       	st	Y, r16
    7a88:	19 83       	std	Y+1, r17	; 0x01
    7a8a:	2a 83       	std	Y+2, r18	; 0x02
    7a8c:	3b 83       	std	Y+3, r19	; 0x03
    7a8e:	cb 52       	subi	r28, 0x2B	; 43
    7a90:	d2 40       	sbci	r29, 0x02	; 2
    7a92:	2b cd       	rjmp	.-1450   	; 0x74ea <f_open+0x252>
    7a94:	c1 5d       	subi	r28, 0xD1	; 209
    7a96:	dd 4f       	sbci	r29, 0xFD	; 253
    7a98:	18 82       	st	Y, r1
    7a9a:	19 82       	std	Y+1, r1	; 0x01
    7a9c:	1a 82       	std	Y+2, r1	; 0x02
    7a9e:	1b 82       	std	Y+3, r1	; 0x03
    7aa0:	cf 52       	subi	r28, 0x2F	; 47
    7aa2:	d2 40       	sbci	r29, 0x02	; 2
    7aa4:	06 cd       	rjmp	.-1524   	; 0x74b2 <f_open+0x21a>
    7aa6:	da 01       	movw	r26, r20
    7aa8:	c9 01       	movw	r24, r18
    7aaa:	02 96       	adiw	r24, 0x02	; 2
    7aac:	a1 1d       	adc	r26, r1
    7aae:	b1 1d       	adc	r27, r1
    7ab0:	c9 5d       	subi	r28, 0xD9	; 217
    7ab2:	dd 4f       	sbci	r29, 0xFD	; 253
    7ab4:	88 83       	st	Y, r24
    7ab6:	99 83       	std	Y+1, r25	; 0x01
    7ab8:	aa 83       	std	Y+2, r26	; 0x02
    7aba:	bb 83       	std	Y+3, r27	; 0x03
    7abc:	c7 52       	subi	r28, 0x27	; 39
    7abe:	d2 40       	sbci	r29, 0x02	; 2
    7ac0:	f5 01       	movw	r30, r10
    7ac2:	86 8b       	std	Z+22, r24	; 0x16
    7ac4:	97 8b       	std	Z+23, r25	; 0x17
    7ac6:	a0 8f       	std	Z+24, r26	; 0x18
    7ac8:	b1 8f       	std	Z+25, r27	; 0x19
    7aca:	cd 5c       	subi	r28, 0xCD	; 205
    7acc:	dd 4f       	sbci	r29, 0xFD	; 253
    7ace:	48 81       	ld	r20, Y
    7ad0:	59 81       	ldd	r21, Y+1	; 0x01
    7ad2:	6a 81       	ldd	r22, Y+2	; 0x02
    7ad4:	7b 81       	ldd	r23, Y+3	; 0x03
    7ad6:	c3 53       	subi	r28, 0x33	; 51
    7ad8:	d2 40       	sbci	r29, 0x02	; 2
    7ada:	c1 5d       	subi	r28, 0xD1	; 209
    7adc:	dd 4f       	sbci	r29, 0xFD	; 253
    7ade:	88 81       	ld	r24, Y
    7ae0:	99 81       	ldd	r25, Y+1	; 0x01
    7ae2:	aa 81       	ldd	r26, Y+2	; 0x02
    7ae4:	bb 81       	ldd	r27, Y+3	; 0x03
    7ae6:	cf 52       	subi	r28, 0x2F	; 47
    7ae8:	d2 40       	sbci	r29, 0x02	; 2
    7aea:	48 0f       	add	r20, r24
    7aec:	59 1f       	adc	r21, r25
    7aee:	6a 1f       	adc	r22, r26
    7af0:	7b 1f       	adc	r23, r27
    7af2:	46 a3       	std	Z+38, r20	; 0x26
    7af4:	57 a3       	std	Z+39, r21	; 0x27
    7af6:	60 a7       	std	Z+40, r22	; 0x28
    7af8:	71 a7       	std	Z+41, r23	; 0x29
    7afa:	c9 5c       	subi	r28, 0xC9	; 201
    7afc:	dd 4f       	sbci	r29, 0xFD	; 253
    7afe:	48 81       	ld	r20, Y
    7b00:	59 81       	ldd	r21, Y+1	; 0x01
    7b02:	6a 81       	ldd	r22, Y+2	; 0x02
    7b04:	7b 81       	ldd	r23, Y+3	; 0x03
    7b06:	c7 53       	subi	r28, 0x37	; 55
    7b08:	d2 40       	sbci	r29, 0x02	; 2
    7b0a:	c1 5d       	subi	r28, 0xD1	; 209
    7b0c:	dd 4f       	sbci	r29, 0xFD	; 253
    7b0e:	88 81       	ld	r24, Y
    7b10:	99 81       	ldd	r25, Y+1	; 0x01
    7b12:	aa 81       	ldd	r26, Y+2	; 0x02
    7b14:	bb 81       	ldd	r27, Y+3	; 0x03
    7b16:	cf 52       	subi	r28, 0x2F	; 47
    7b18:	d2 40       	sbci	r29, 0x02	; 2
    7b1a:	48 0f       	add	r20, r24
    7b1c:	59 1f       	adc	r21, r25
    7b1e:	6a 1f       	adc	r22, r26
    7b20:	7b 1f       	adc	r23, r27
    7b22:	46 8f       	std	Z+30, r20	; 0x1e
    7b24:	57 8f       	std	Z+31, r21	; 0x1f
    7b26:	60 a3       	std	Z+32, r22	; 0x20
    7b28:	71 a3       	std	Z+33, r23	; 0x21
    7b2a:	01 2b       	or	r16, r17
    7b2c:	09 f4       	brne	.+2      	; 0x7b30 <f_open+0x898>
    7b2e:	50 cf       	rjmp	.-352    	; 0x79d0 <f_open+0x738>
    7b30:	c5 5c       	subi	r28, 0xC5	; 197
    7b32:	dd 4f       	sbci	r29, 0xFD	; 253
    7b34:	08 81       	ld	r16, Y
    7b36:	19 81       	ldd	r17, Y+1	; 0x01
    7b38:	2a 81       	ldd	r18, Y+2	; 0x02
    7b3a:	3b 81       	ldd	r19, Y+3	; 0x03
    7b3c:	cb 53       	subi	r28, 0x3B	; 59
    7b3e:	d2 40       	sbci	r29, 0x02	; 2
    7b40:	40 0f       	add	r20, r16
    7b42:	51 1f       	adc	r21, r17
    7b44:	62 1f       	adc	r22, r18
    7b46:	73 1f       	adc	r23, r19
    7b48:	d5 01       	movw	r26, r10
    7b4a:	92 96       	adiw	r26, 0x22	; 34
    7b4c:	4d 93       	st	X+, r20
    7b4e:	5d 93       	st	X+, r21
    7b50:	6d 93       	st	X+, r22
    7b52:	7c 93       	st	X, r23
    7b54:	95 97       	sbiw	r26, 0x25	; 37
    7b56:	c9 5d       	subi	r28, 0xD9	; 217
    7b58:	dd 4f       	sbci	r29, 0xFD	; 253
    7b5a:	88 81       	ld	r24, Y
    7b5c:	99 81       	ldd	r25, Y+1	; 0x01
    7b5e:	aa 81       	ldd	r26, Y+2	; 0x02
    7b60:	bb 81       	ldd	r27, Y+3	; 0x03
    7b62:	c7 52       	subi	r28, 0x27	; 39
    7b64:	d2 40       	sbci	r29, 0x02	; 2
    7b66:	88 0f       	add	r24, r24
    7b68:	99 1f       	adc	r25, r25
    7b6a:	aa 1f       	adc	r26, r26
    7b6c:	bb 1f       	adc	r27, r27
    7b6e:	81 50       	subi	r24, 0x01	; 1
    7b70:	9e 4f       	sbci	r25, 0xFE	; 254
    7b72:	af 4f       	sbci	r26, 0xFF	; 255
    7b74:	bf 4f       	sbci	r27, 0xFF	; 255
    7b76:	f9 e0       	ldi	r31, 0x09	; 9
    7b78:	b6 95       	lsr	r27
    7b7a:	a7 95       	ror	r26
    7b7c:	97 95       	ror	r25
    7b7e:	87 95       	ror	r24
    7b80:	fa 95       	dec	r31
    7b82:	d1 f7       	brne	.-12     	; 0x7b78 <f_open+0x8e0>
    7b84:	c5 5d       	subi	r28, 0xD5	; 213
    7b86:	dd 4f       	sbci	r29, 0xFD	; 253
    7b88:	08 81       	ld	r16, Y
    7b8a:	19 81       	ldd	r17, Y+1	; 0x01
    7b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    7b8e:	3b 81       	ldd	r19, Y+3	; 0x03
    7b90:	cb 52       	subi	r28, 0x2B	; 43
    7b92:	d2 40       	sbci	r29, 0x02	; 2
    7b94:	08 17       	cp	r16, r24
    7b96:	19 07       	cpc	r17, r25
    7b98:	2a 07       	cpc	r18, r26
    7b9a:	3b 07       	cpc	r19, r27
    7b9c:	08 f4       	brcc	.+2      	; 0x7ba0 <f_open+0x908>
    7b9e:	18 cf       	rjmp	.-464    	; 0x79d0 <f_open+0x738>
    7ba0:	8f ef       	ldi	r24, 0xFF	; 255
    7ba2:	9f ef       	ldi	r25, 0xFF	; 255
    7ba4:	dc 01       	movw	r26, r24
    7ba6:	f5 01       	movw	r30, r10
    7ba8:	86 87       	std	Z+14, r24	; 0x0e
    7baa:	97 87       	std	Z+15, r25	; 0x0f
    7bac:	a0 8b       	std	Z+16, r26	; 0x10
    7bae:	b1 8b       	std	Z+17, r27	; 0x11
    7bb0:	12 86       	std	Z+10, r1	; 0x0a
    7bb2:	13 86       	std	Z+11, r1	; 0x0b
    7bb4:	14 86       	std	Z+12, r1	; 0x0c
    7bb6:	15 86       	std	Z+13, r1	; 0x0d
    7bb8:	82 e0       	ldi	r24, 0x02	; 2
    7bba:	04 ce       	rjmp	.-1016   	; 0x77c4 <f_open+0x52c>
    7bbc:	da 01       	movw	r26, r20
    7bbe:	c9 01       	movw	r24, r18
    7bc0:	02 96       	adiw	r24, 0x02	; 2
    7bc2:	a1 1d       	adc	r26, r1
    7bc4:	b1 1d       	adc	r27, r1
    7bc6:	c9 5d       	subi	r28, 0xD9	; 217
    7bc8:	dd 4f       	sbci	r29, 0xFD	; 253
    7bca:	88 83       	st	Y, r24
    7bcc:	99 83       	std	Y+1, r25	; 0x01
    7bce:	aa 83       	std	Y+2, r26	; 0x02
    7bd0:	bb 83       	std	Y+3, r27	; 0x03
    7bd2:	c7 52       	subi	r28, 0x27	; 39
    7bd4:	d2 40       	sbci	r29, 0x02	; 2
    7bd6:	f5 01       	movw	r30, r10
    7bd8:	86 8b       	std	Z+22, r24	; 0x16
    7bda:	97 8b       	std	Z+23, r25	; 0x17
    7bdc:	a0 8f       	std	Z+24, r26	; 0x18
    7bde:	b1 8f       	std	Z+25, r27	; 0x19
    7be0:	cd 5c       	subi	r28, 0xCD	; 205
    7be2:	dd 4f       	sbci	r29, 0xFD	; 253
    7be4:	88 81       	ld	r24, Y
    7be6:	99 81       	ldd	r25, Y+1	; 0x01
    7be8:	aa 81       	ldd	r26, Y+2	; 0x02
    7bea:	bb 81       	ldd	r27, Y+3	; 0x03
    7bec:	c3 53       	subi	r28, 0x33	; 51
    7bee:	d2 40       	sbci	r29, 0x02	; 2
    7bf0:	c1 5d       	subi	r28, 0xD1	; 209
    7bf2:	dd 4f       	sbci	r29, 0xFD	; 253
    7bf4:	28 81       	ld	r18, Y
    7bf6:	39 81       	ldd	r19, Y+1	; 0x01
    7bf8:	4a 81       	ldd	r20, Y+2	; 0x02
    7bfa:	5b 81       	ldd	r21, Y+3	; 0x03
    7bfc:	cf 52       	subi	r28, 0x2F	; 47
    7bfe:	d2 40       	sbci	r29, 0x02	; 2
    7c00:	82 0f       	add	r24, r18
    7c02:	93 1f       	adc	r25, r19
    7c04:	a4 1f       	adc	r26, r20
    7c06:	b5 1f       	adc	r27, r21
    7c08:	86 a3       	std	Z+38, r24	; 0x26
    7c0a:	97 a3       	std	Z+39, r25	; 0x27
    7c0c:	a0 a7       	std	Z+40, r26	; 0x28
    7c0e:	b1 a7       	std	Z+41, r27	; 0x29
    7c10:	c9 5c       	subi	r28, 0xC9	; 201
    7c12:	dd 4f       	sbci	r29, 0xFD	; 253
    7c14:	88 81       	ld	r24, Y
    7c16:	99 81       	ldd	r25, Y+1	; 0x01
    7c18:	aa 81       	ldd	r26, Y+2	; 0x02
    7c1a:	bb 81       	ldd	r27, Y+3	; 0x03
    7c1c:	c7 53       	subi	r28, 0x37	; 55
    7c1e:	d2 40       	sbci	r29, 0x02	; 2
    7c20:	82 0f       	add	r24, r18
    7c22:	93 1f       	adc	r25, r19
    7c24:	a4 1f       	adc	r26, r20
    7c26:	b5 1f       	adc	r27, r21
    7c28:	86 8f       	std	Z+30, r24	; 0x1e
    7c2a:	97 8f       	std	Z+31, r25	; 0x1f
    7c2c:	a0 a3       	std	Z+32, r26	; 0x20
    7c2e:	b1 a3       	std	Z+33, r27	; 0x21
    7c30:	01 2b       	or	r16, r17
    7c32:	09 f4       	brne	.+2      	; 0x7c36 <f_open+0x99e>
    7c34:	cd ce       	rjmp	.-614    	; 0x79d0 <f_open+0x738>
    7c36:	c5 5c       	subi	r28, 0xC5	; 197
    7c38:	dd 4f       	sbci	r29, 0xFD	; 253
    7c3a:	08 81       	ld	r16, Y
    7c3c:	19 81       	ldd	r17, Y+1	; 0x01
    7c3e:	2a 81       	ldd	r18, Y+2	; 0x02
    7c40:	3b 81       	ldd	r19, Y+3	; 0x03
    7c42:	cb 53       	subi	r28, 0x3B	; 59
    7c44:	d2 40       	sbci	r29, 0x02	; 2
    7c46:	80 0f       	add	r24, r16
    7c48:	91 1f       	adc	r25, r17
    7c4a:	a2 1f       	adc	r26, r18
    7c4c:	b3 1f       	adc	r27, r19
    7c4e:	f5 01       	movw	r30, r10
    7c50:	82 a3       	std	Z+34, r24	; 0x22
    7c52:	93 a3       	std	Z+35, r25	; 0x23
    7c54:	a4 a3       	std	Z+36, r26	; 0x24
    7c56:	b5 a3       	std	Z+37, r27	; 0x25
    7c58:	a3 e0       	ldi	r26, 0x03	; 3
    7c5a:	b0 e0       	ldi	r27, 0x00	; 0
    7c5c:	c9 5d       	subi	r28, 0xD9	; 217
    7c5e:	dd 4f       	sbci	r29, 0xFD	; 253
    7c60:	28 81       	ld	r18, Y
    7c62:	39 81       	ldd	r19, Y+1	; 0x01
    7c64:	4a 81       	ldd	r20, Y+2	; 0x02
    7c66:	5b 81       	ldd	r21, Y+3	; 0x03
    7c68:	c7 52       	subi	r28, 0x27	; 39
    7c6a:	d2 40       	sbci	r29, 0x02	; 2
    7c6c:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    7c70:	dc 01       	movw	r26, r24
    7c72:	cb 01       	movw	r24, r22
    7c74:	b6 95       	lsr	r27
    7c76:	a7 95       	ror	r26
    7c78:	97 95       	ror	r25
    7c7a:	87 95       	ror	r24
    7c7c:	ba 01       	movw	r22, r20
    7c7e:	a9 01       	movw	r20, r18
    7c80:	41 70       	andi	r20, 0x01	; 1
    7c82:	55 27       	eor	r21, r21
    7c84:	66 27       	eor	r22, r22
    7c86:	77 27       	eor	r23, r23
    7c88:	41 50       	subi	r20, 0x01	; 1
    7c8a:	5e 4f       	sbci	r21, 0xFE	; 254
    7c8c:	6f 4f       	sbci	r22, 0xFF	; 255
    7c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c90:	84 0f       	add	r24, r20
    7c92:	95 1f       	adc	r25, r21
    7c94:	a6 1f       	adc	r26, r22
    7c96:	b7 1f       	adc	r27, r23
    7c98:	79 e0       	ldi	r23, 0x09	; 9
    7c9a:	b6 95       	lsr	r27
    7c9c:	a7 95       	ror	r26
    7c9e:	97 95       	ror	r25
    7ca0:	87 95       	ror	r24
    7ca2:	7a 95       	dec	r23
    7ca4:	d1 f7       	brne	.-12     	; 0x7c9a <f_open+0xa02>
    7ca6:	c5 5d       	subi	r28, 0xD5	; 213
    7ca8:	dd 4f       	sbci	r29, 0xFD	; 253
    7caa:	08 81       	ld	r16, Y
    7cac:	19 81       	ldd	r17, Y+1	; 0x01
    7cae:	2a 81       	ldd	r18, Y+2	; 0x02
    7cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    7cb2:	cb 52       	subi	r28, 0x2B	; 43
    7cb4:	d2 40       	sbci	r29, 0x02	; 2
    7cb6:	08 17       	cp	r16, r24
    7cb8:	19 07       	cpc	r17, r25
    7cba:	2a 07       	cpc	r18, r26
    7cbc:	3b 07       	cpc	r19, r27
    7cbe:	08 f4       	brcc	.+2      	; 0x7cc2 <f_open+0xa2a>
    7cc0:	87 ce       	rjmp	.-754    	; 0x79d0 <f_open+0x738>
    7cc2:	8f ef       	ldi	r24, 0xFF	; 255
    7cc4:	9f ef       	ldi	r25, 0xFF	; 255
    7cc6:	dc 01       	movw	r26, r24
    7cc8:	f5 01       	movw	r30, r10
    7cca:	86 87       	std	Z+14, r24	; 0x0e
    7ccc:	97 87       	std	Z+15, r25	; 0x0f
    7cce:	a0 8b       	std	Z+16, r26	; 0x10
    7cd0:	b1 8b       	std	Z+17, r27	; 0x11
    7cd2:	12 86       	std	Z+10, r1	; 0x0a
    7cd4:	13 86       	std	Z+11, r1	; 0x0b
    7cd6:	14 86       	std	Z+12, r1	; 0x0c
    7cd8:	15 86       	std	Z+13, r1	; 0x0d
    7cda:	81 e0       	ldi	r24, 0x01	; 1
    7cdc:	73 cd       	rjmp	.-1306   	; 0x77c4 <f_open+0x52c>
    7cde:	f5 01       	movw	r30, r10
    7ce0:	86 a5       	ldd	r24, Z+46	; 0x2e
    7ce2:	97 a5       	ldd	r25, Z+47	; 0x2f
    7ce4:	a0 a9       	ldd	r26, Z+48	; 0x30
    7ce6:	b1 a9       	ldd	r27, Z+49	; 0x31
    7ce8:	82 35       	cpi	r24, 0x52	; 82
    7cea:	92 45       	sbci	r25, 0x52	; 82
    7cec:	a1 46       	sbci	r26, 0x61	; 97
    7cee:	b1 44       	sbci	r27, 0x41	; 65
    7cf0:	09 f0       	breq	.+2      	; 0x7cf4 <f_open+0xa5c>
    7cf2:	67 cd       	rjmp	.-1330   	; 0x77c2 <f_open+0x52a>
    7cf4:	f5 01       	movw	r30, r10
    7cf6:	ee 5e       	subi	r30, 0xEE	; 238
    7cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    7cfa:	80 81       	ld	r24, Z
    7cfc:	91 81       	ldd	r25, Z+1	; 0x01
    7cfe:	a2 81       	ldd	r26, Z+2	; 0x02
    7d00:	b3 81       	ldd	r27, Z+3	; 0x03
    7d02:	82 37       	cpi	r24, 0x72	; 114
    7d04:	92 47       	sbci	r25, 0x72	; 114
    7d06:	a1 44       	sbci	r26, 0x41	; 65
    7d08:	b1 46       	sbci	r27, 0x61	; 97
    7d0a:	09 f0       	breq	.+2      	; 0x7d0e <f_open+0xa76>
    7d0c:	5a cd       	rjmp	.-1356   	; 0x77c2 <f_open+0x52a>
    7d0e:	38 96       	adiw	r30, 0x08	; 8
    7d10:	80 81       	ld	r24, Z
    7d12:	91 81       	ldd	r25, Z+1	; 0x01
    7d14:	a2 81       	ldd	r26, Z+2	; 0x02
    7d16:	b3 81       	ldd	r27, Z+3	; 0x03
    7d18:	f5 01       	movw	r30, r10
    7d1a:	82 87       	std	Z+10, r24	; 0x0a
    7d1c:	93 87       	std	Z+11, r25	; 0x0b
    7d1e:	a4 87       	std	Z+12, r26	; 0x0c
    7d20:	b5 87       	std	Z+13, r27	; 0x0d
    7d22:	ea 5e       	subi	r30, 0xEA	; 234
    7d24:	fd 4f       	sbci	r31, 0xFD	; 253
    7d26:	80 81       	ld	r24, Z
    7d28:	91 81       	ldd	r25, Z+1	; 0x01
    7d2a:	a2 81       	ldd	r26, Z+2	; 0x02
    7d2c:	b3 81       	ldd	r27, Z+3	; 0x03
    7d2e:	f5 01       	movw	r30, r10
    7d30:	86 87       	std	Z+14, r24	; 0x0e
    7d32:	97 87       	std	Z+15, r25	; 0x0f
    7d34:	a0 8b       	std	Z+16, r26	; 0x10
    7d36:	b1 8b       	std	Z+17, r27	; 0x11
    7d38:	83 e0       	ldi	r24, 0x03	; 3
    7d3a:	44 cd       	rjmp	.-1400   	; 0x77c4 <f_open+0x52c>
    7d3c:	f2 e0       	ldi	r31, 0x02	; 2
    7d3e:	ef 0e       	add	r14, r31
    7d40:	f1 1c       	adc	r15, r1
    7d42:	d3 ca       	rjmp	.-2650   	; 0x72ea <f_open+0x52>
    7d44:	99 2d       	mov	r25, r9
    7d46:	9c 71       	andi	r25, 0x1C	; 28
    7d48:	09 f4       	brne	.+2      	; 0x7d4c <f_open+0xab4>
    7d4a:	74 cd       	rjmp	.-1304   	; 0x7834 <f_open+0x59c>
    7d4c:	0e cb       	rjmp	.-2532   	; 0x736a <f_open+0xd2>

00007d4e <f_read>:
    7d4e:	2f 92       	push	r2
    7d50:	3f 92       	push	r3
    7d52:	4f 92       	push	r4
    7d54:	5f 92       	push	r5
    7d56:	6f 92       	push	r6
    7d58:	7f 92       	push	r7
    7d5a:	8f 92       	push	r8
    7d5c:	9f 92       	push	r9
    7d5e:	af 92       	push	r10
    7d60:	bf 92       	push	r11
    7d62:	cf 92       	push	r12
    7d64:	df 92       	push	r13
    7d66:	ef 92       	push	r14
    7d68:	ff 92       	push	r15
    7d6a:	0f 93       	push	r16
    7d6c:	1f 93       	push	r17
    7d6e:	cf 93       	push	r28
    7d70:	df 93       	push	r29
    7d72:	00 d0       	rcall	.+0      	; 0x7d74 <f_read+0x26>
    7d74:	00 d0       	rcall	.+0      	; 0x7d76 <f_read+0x28>
    7d76:	cd b7       	in	r28, 0x3d	; 61
    7d78:	de b7       	in	r29, 0x3e	; 62
    7d7a:	7c 01       	movw	r14, r24
    7d7c:	6b 83       	std	Y+3, r22	; 0x03
    7d7e:	7c 83       	std	Y+4, r23	; 0x04
    7d80:	6a 01       	movw	r12, r20
    7d82:	59 01       	movw	r10, r18
    7d84:	d9 01       	movw	r26, r18
    7d86:	1d 92       	st	X+, r1
    7d88:	1c 92       	st	X, r1
    7d8a:	dc 01       	movw	r26, r24
    7d8c:	ed 91       	ld	r30, X+
    7d8e:	fc 91       	ld	r31, X
    7d90:	11 97       	sbiw	r26, 0x01	; 1
    7d92:	30 97       	sbiw	r30, 0x00	; 0
    7d94:	19 f0       	breq	.+6      	; 0x7d9c <f_read+0x4e>
    7d96:	80 81       	ld	r24, Z
    7d98:	81 11       	cpse	r24, r1
    7d9a:	17 c0       	rjmp	.+46     	; 0x7dca <f_read+0x7c>
    7d9c:	89 e0       	ldi	r24, 0x09	; 9
    7d9e:	26 96       	adiw	r28, 0x06	; 6
    7da0:	cd bf       	out	0x3d, r28	; 61
    7da2:	de bf       	out	0x3e, r29	; 62
    7da4:	df 91       	pop	r29
    7da6:	cf 91       	pop	r28
    7da8:	1f 91       	pop	r17
    7daa:	0f 91       	pop	r16
    7dac:	ff 90       	pop	r15
    7dae:	ef 90       	pop	r14
    7db0:	df 90       	pop	r13
    7db2:	cf 90       	pop	r12
    7db4:	bf 90       	pop	r11
    7db6:	af 90       	pop	r10
    7db8:	9f 90       	pop	r9
    7dba:	8f 90       	pop	r8
    7dbc:	7f 90       	pop	r7
    7dbe:	6f 90       	pop	r6
    7dc0:	5f 90       	pop	r5
    7dc2:	4f 90       	pop	r4
    7dc4:	3f 90       	pop	r3
    7dc6:	2f 90       	pop	r2
    7dc8:	08 95       	ret
    7dca:	12 96       	adiw	r26, 0x02	; 2
    7dcc:	2d 91       	ld	r18, X+
    7dce:	3c 91       	ld	r19, X
    7dd0:	13 97       	sbiw	r26, 0x03	; 3
    7dd2:	86 81       	ldd	r24, Z+6	; 0x06
    7dd4:	97 81       	ldd	r25, Z+7	; 0x07
    7dd6:	28 17       	cp	r18, r24
    7dd8:	39 07       	cpc	r19, r25
    7dda:	01 f7       	brne	.-64     	; 0x7d9c <f_read+0x4e>
    7ddc:	81 81       	ldd	r24, Z+1	; 0x01
    7dde:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    7de2:	80 ff       	sbrs	r24, 0
    7de4:	02 c0       	rjmp	.+4      	; 0x7dea <f_read+0x9c>
    7de6:	83 e0       	ldi	r24, 0x03	; 3
    7de8:	da cf       	rjmp	.-76     	; 0x7d9e <f_read+0x50>
    7dea:	f7 01       	movw	r30, r14
    7dec:	84 81       	ldd	r24, Z+4	; 0x04
    7dee:	87 fd       	sbrc	r24, 7
    7df0:	04 c0       	rjmp	.+8      	; 0x7dfa <f_read+0xac>
    7df2:	80 fd       	sbrc	r24, 0
    7df4:	04 c0       	rjmp	.+8      	; 0x7dfe <f_read+0xb0>
    7df6:	87 e0       	ldi	r24, 0x07	; 7
    7df8:	d2 cf       	rjmp	.-92     	; 0x7d9e <f_read+0x50>
    7dfa:	82 e0       	ldi	r24, 0x02	; 2
    7dfc:	d0 cf       	rjmp	.-96     	; 0x7d9e <f_read+0x50>
    7dfe:	f7 01       	movw	r30, r14
    7e00:	86 81       	ldd	r24, Z+6	; 0x06
    7e02:	97 81       	ldd	r25, Z+7	; 0x07
    7e04:	a0 85       	ldd	r26, Z+8	; 0x08
    7e06:	b1 85       	ldd	r27, Z+9	; 0x09
    7e08:	42 85       	ldd	r20, Z+10	; 0x0a
    7e0a:	53 85       	ldd	r21, Z+11	; 0x0b
    7e0c:	64 85       	ldd	r22, Z+12	; 0x0c
    7e0e:	75 85       	ldd	r23, Z+13	; 0x0d
    7e10:	48 1b       	sub	r20, r24
    7e12:	59 0b       	sbc	r21, r25
    7e14:	6a 0b       	sbc	r22, r26
    7e16:	7b 0b       	sbc	r23, r27
    7e18:	86 01       	movw	r16, r12
    7e1a:	20 e0       	ldi	r18, 0x00	; 0
    7e1c:	30 e0       	ldi	r19, 0x00	; 0
    7e1e:	40 17       	cp	r20, r16
    7e20:	51 07       	cpc	r21, r17
    7e22:	62 07       	cpc	r22, r18
    7e24:	73 07       	cpc	r23, r19
    7e26:	08 f4       	brcc	.+2      	; 0x7e2a <f_read+0xdc>
    7e28:	6a 01       	movw	r12, r20
    7e2a:	c1 14       	cp	r12, r1
    7e2c:	d1 04       	cpc	r13, r1
    7e2e:	09 f4       	brne	.+2      	; 0x7e32 <f_read+0xe4>
    7e30:	78 c1       	rjmp	.+752    	; 0x8122 <f_read+0x3d4>
    7e32:	81 2c       	mov	r8, r1
    7e34:	42 e0       	ldi	r20, 0x02	; 2
    7e36:	94 2e       	mov	r9, r20
    7e38:	97 01       	movw	r18, r14
    7e3a:	20 5e       	subi	r18, 0xE0	; 224
    7e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3e:	29 83       	std	Y+1, r18	; 0x01
    7e40:	3a 83       	std	Y+2, r19	; 0x02
    7e42:	ac 01       	movw	r20, r24
    7e44:	bd 01       	movw	r22, r26
    7e46:	51 70       	andi	r21, 0x01	; 1
    7e48:	66 27       	eor	r22, r22
    7e4a:	77 27       	eor	r23, r23
    7e4c:	41 15       	cp	r20, r1
    7e4e:	51 05       	cpc	r21, r1
    7e50:	61 05       	cpc	r22, r1
    7e52:	71 05       	cpc	r23, r1
    7e54:	09 f0       	breq	.+2      	; 0x7e58 <f_read+0x10a>
    7e56:	e0 c0       	rjmp	.+448    	; 0x8018 <f_read+0x2ca>
    7e58:	f7 01       	movw	r30, r14
    7e5a:	01 90       	ld	r0, Z+
    7e5c:	f0 81       	ld	r31, Z
    7e5e:	e0 2d       	mov	r30, r0
    7e60:	ed 83       	std	Y+5, r30	; 0x05
    7e62:	fe 83       	std	Y+6, r31	; 0x06
    7e64:	12 81       	ldd	r17, Z+2	; 0x02
    7e66:	11 50       	subi	r17, 0x01	; 1
    7e68:	ac 01       	movw	r20, r24
    7e6a:	bd 01       	movw	r22, r26
    7e6c:	39 e0       	ldi	r19, 0x09	; 9
    7e6e:	76 95       	lsr	r23
    7e70:	67 95       	ror	r22
    7e72:	57 95       	ror	r21
    7e74:	47 95       	ror	r20
    7e76:	3a 95       	dec	r19
    7e78:	d1 f7       	brne	.-12     	; 0x7e6e <f_read+0x120>
    7e7a:	14 23       	and	r17, r20
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <f_read+0x132>
    7e7e:	f1 c0       	rjmp	.+482    	; 0x8062 <f_read+0x314>
    7e80:	f7 01       	movw	r30, r14
    7e82:	82 89       	ldd	r24, Z+18	; 0x12
    7e84:	93 89       	ldd	r25, Z+19	; 0x13
    7e86:	a4 89       	ldd	r26, Z+20	; 0x14
    7e88:	b5 89       	ldd	r27, Z+21	; 0x15
    7e8a:	ed 81       	ldd	r30, Y+5	; 0x05
    7e8c:	fe 81       	ldd	r31, Y+6	; 0x06
    7e8e:	9c 01       	movw	r18, r24
    7e90:	ad 01       	movw	r20, r26
    7e92:	22 50       	subi	r18, 0x02	; 2
    7e94:	31 09       	sbc	r19, r1
    7e96:	41 09       	sbc	r20, r1
    7e98:	51 09       	sbc	r21, r1
    7e9a:	86 89       	ldd	r24, Z+22	; 0x16
    7e9c:	97 89       	ldd	r25, Z+23	; 0x17
    7e9e:	a0 8d       	ldd	r26, Z+24	; 0x18
    7ea0:	b1 8d       	ldd	r27, Z+25	; 0x19
    7ea2:	02 97       	sbiw	r24, 0x02	; 2
    7ea4:	a1 09       	sbc	r26, r1
    7ea6:	b1 09       	sbc	r27, r1
    7ea8:	28 17       	cp	r18, r24
    7eaa:	39 07       	cpc	r19, r25
    7eac:	4a 07       	cpc	r20, r26
    7eae:	5b 07       	cpc	r21, r27
    7eb0:	08 f0       	brcs	.+2      	; 0x7eb4 <f_read+0x166>
    7eb2:	0f c1       	rjmp	.+542    	; 0x80d2 <f_read+0x384>
    7eb4:	02 81       	ldd	r16, Z+2	; 0x02
    7eb6:	a0 2f       	mov	r26, r16
    7eb8:	b0 e0       	ldi	r27, 0x00	; 0
    7eba:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    7ebe:	46 a0       	ldd	r4, Z+38	; 0x26
    7ec0:	57 a0       	ldd	r5, Z+39	; 0x27
    7ec2:	60 a4       	ldd	r6, Z+40	; 0x28
    7ec4:	71 a4       	ldd	r7, Z+41	; 0x29
    7ec6:	46 0e       	add	r4, r22
    7ec8:	57 1e       	adc	r5, r23
    7eca:	68 1e       	adc	r6, r24
    7ecc:	79 1e       	adc	r7, r25
    7ece:	41 14       	cp	r4, r1
    7ed0:	51 04       	cpc	r5, r1
    7ed2:	61 04       	cpc	r6, r1
    7ed4:	71 04       	cpc	r7, r1
    7ed6:	09 f4       	brne	.+2      	; 0x7eda <f_read+0x18c>
    7ed8:	fc c0       	rjmp	.+504    	; 0x80d2 <f_read+0x384>
    7eda:	41 0e       	add	r4, r17
    7edc:	51 1c       	adc	r5, r1
    7ede:	61 1c       	adc	r6, r1
    7ee0:	71 1c       	adc	r7, r1
    7ee2:	16 01       	movw	r2, r12
    7ee4:	23 2c       	mov	r2, r3
    7ee6:	33 24       	eor	r3, r3
    7ee8:	26 94       	lsr	r2
    7eea:	21 14       	cp	r2, r1
    7eec:	31 04       	cpc	r3, r1
    7eee:	09 f4       	brne	.+2      	; 0x7ef2 <f_read+0x1a4>
    7ef0:	5a c0       	rjmp	.+180    	; 0x7fa6 <f_read+0x258>
    7ef2:	21 2f       	mov	r18, r17
    7ef4:	30 e0       	ldi	r19, 0x00	; 0
    7ef6:	a9 01       	movw	r20, r18
    7ef8:	42 0d       	add	r20, r2
    7efa:	53 1d       	adc	r21, r3
    7efc:	80 2f       	mov	r24, r16
    7efe:	90 e0       	ldi	r25, 0x00	; 0
    7f00:	84 17       	cp	r24, r20
    7f02:	95 07       	cpc	r25, r21
    7f04:	18 f4       	brcc	.+6      	; 0x7f0c <f_read+0x1be>
    7f06:	1c 01       	movw	r2, r24
    7f08:	22 1a       	sub	r2, r18
    7f0a:	33 0a       	sbc	r3, r19
    7f0c:	02 2d       	mov	r16, r2
    7f0e:	a3 01       	movw	r20, r6
    7f10:	92 01       	movw	r18, r4
    7f12:	6b 81       	ldd	r22, Y+3	; 0x03
    7f14:	7c 81       	ldd	r23, Y+4	; 0x04
    7f16:	81 81       	ldd	r24, Z+1	; 0x01
    7f18:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    7f1c:	81 11       	cpse	r24, r1
    7f1e:	e2 c0       	rjmp	.+452    	; 0x80e4 <f_read+0x396>
    7f20:	f7 01       	movw	r30, r14
    7f22:	84 81       	ldd	r24, Z+4	; 0x04
    7f24:	86 ff       	sbrs	r24, 6
    7f26:	12 c0       	rjmp	.+36     	; 0x7f4c <f_read+0x1fe>
    7f28:	f7 01       	movw	r30, r14
    7f2a:	86 89       	ldd	r24, Z+22	; 0x16
    7f2c:	97 89       	ldd	r25, Z+23	; 0x17
    7f2e:	a0 8d       	ldd	r26, Z+24	; 0x18
    7f30:	b1 8d       	ldd	r27, Z+25	; 0x19
    7f32:	84 19       	sub	r24, r4
    7f34:	95 09       	sbc	r25, r5
    7f36:	a6 09       	sbc	r26, r6
    7f38:	b7 09       	sbc	r27, r7
    7f3a:	a1 01       	movw	r20, r2
    7f3c:	60 e0       	ldi	r22, 0x00	; 0
    7f3e:	70 e0       	ldi	r23, 0x00	; 0
    7f40:	84 17       	cp	r24, r20
    7f42:	95 07       	cpc	r25, r21
    7f44:	a6 07       	cpc	r26, r22
    7f46:	b7 07       	cpc	r27, r23
    7f48:	08 f4       	brcc	.+2      	; 0x7f4c <f_read+0x1fe>
    7f4a:	d5 c0       	rjmp	.+426    	; 0x80f6 <f_read+0x3a8>
    7f4c:	32 2c       	mov	r3, r2
    7f4e:	22 24       	eor	r2, r2
    7f50:	33 0c       	add	r3, r3
    7f52:	d7 01       	movw	r26, r14
    7f54:	16 96       	adiw	r26, 0x06	; 6
    7f56:	4d 91       	ld	r20, X+
    7f58:	5d 91       	ld	r21, X+
    7f5a:	6d 91       	ld	r22, X+
    7f5c:	7c 91       	ld	r23, X
    7f5e:	19 97       	sbiw	r26, 0x09	; 9
    7f60:	c1 01       	movw	r24, r2
    7f62:	a0 e0       	ldi	r26, 0x00	; 0
    7f64:	b0 e0       	ldi	r27, 0x00	; 0
    7f66:	eb 81       	ldd	r30, Y+3	; 0x03
    7f68:	fc 81       	ldd	r31, Y+4	; 0x04
    7f6a:	e2 0d       	add	r30, r2
    7f6c:	f3 1d       	adc	r31, r3
    7f6e:	eb 83       	std	Y+3, r30	; 0x03
    7f70:	fc 83       	std	Y+4, r31	; 0x04
    7f72:	84 0f       	add	r24, r20
    7f74:	95 1f       	adc	r25, r21
    7f76:	a6 1f       	adc	r26, r22
    7f78:	b7 1f       	adc	r27, r23
    7f7a:	f7 01       	movw	r30, r14
    7f7c:	86 83       	std	Z+6, r24	; 0x06
    7f7e:	97 83       	std	Z+7, r25	; 0x07
    7f80:	a0 87       	std	Z+8, r26	; 0x08
    7f82:	b1 87       	std	Z+9, r27	; 0x09
    7f84:	d5 01       	movw	r26, r10
    7f86:	8d 91       	ld	r24, X+
    7f88:	9c 91       	ld	r25, X
    7f8a:	11 97       	sbiw	r26, 0x01	; 1
    7f8c:	82 0d       	add	r24, r2
    7f8e:	93 1d       	adc	r25, r3
    7f90:	8d 93       	st	X+, r24
    7f92:	9c 93       	st	X, r25
    7f94:	c2 18       	sub	r12, r2
    7f96:	d3 08       	sbc	r13, r3
    7f98:	09 f4       	brne	.+2      	; 0x7f9c <f_read+0x24e>
    7f9a:	c3 c0       	rjmp	.+390    	; 0x8122 <f_read+0x3d4>
    7f9c:	86 81       	ldd	r24, Z+6	; 0x06
    7f9e:	97 81       	ldd	r25, Z+7	; 0x07
    7fa0:	a0 85       	ldd	r26, Z+8	; 0x08
    7fa2:	b1 85       	ldd	r27, Z+9	; 0x09
    7fa4:	4e cf       	rjmp	.-356    	; 0x7e42 <f_read+0xf4>
    7fa6:	d7 01       	movw	r26, r14
    7fa8:	56 96       	adiw	r26, 0x16	; 22
    7faa:	2d 91       	ld	r18, X+
    7fac:	3d 91       	ld	r19, X+
    7fae:	4d 91       	ld	r20, X+
    7fb0:	5c 91       	ld	r21, X
    7fb2:	59 97       	sbiw	r26, 0x19	; 25
    7fb4:	42 16       	cp	r4, r18
    7fb6:	53 06       	cpc	r5, r19
    7fb8:	64 06       	cpc	r6, r20
    7fba:	75 06       	cpc	r7, r21
    7fbc:	f9 f0       	breq	.+62     	; 0x7ffc <f_read+0x2ae>
    7fbe:	14 96       	adiw	r26, 0x04	; 4
    7fc0:	8c 91       	ld	r24, X
    7fc2:	86 ff       	sbrs	r24, 6
    7fc4:	11 c0       	rjmp	.+34     	; 0x7fe8 <f_read+0x29a>
    7fc6:	01 e0       	ldi	r16, 0x01	; 1
    7fc8:	69 81       	ldd	r22, Y+1	; 0x01
    7fca:	7a 81       	ldd	r23, Y+2	; 0x02
    7fcc:	81 81       	ldd	r24, Z+1	; 0x01
    7fce:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    7fd2:	81 11       	cpse	r24, r1
    7fd4:	87 c0       	rjmp	.+270    	; 0x80e4 <f_read+0x396>
    7fd6:	f7 01       	movw	r30, r14
    7fd8:	84 81       	ldd	r24, Z+4	; 0x04
    7fda:	8f 7b       	andi	r24, 0xBF	; 191
    7fdc:	84 83       	std	Z+4, r24	; 0x04
    7fde:	01 90       	ld	r0, Z+
    7fe0:	f0 81       	ld	r31, Z
    7fe2:	e0 2d       	mov	r30, r0
    7fe4:	ed 83       	std	Y+5, r30	; 0x05
    7fe6:	fe 83       	std	Y+6, r31	; 0x06
    7fe8:	01 e0       	ldi	r16, 0x01	; 1
    7fea:	a3 01       	movw	r20, r6
    7fec:	92 01       	movw	r18, r4
    7fee:	69 81       	ldd	r22, Y+1	; 0x01
    7ff0:	7a 81       	ldd	r23, Y+2	; 0x02
    7ff2:	81 81       	ldd	r24, Z+1	; 0x01
    7ff4:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    7ff8:	81 11       	cpse	r24, r1
    7ffa:	74 c0       	rjmp	.+232    	; 0x80e4 <f_read+0x396>
    7ffc:	f7 01       	movw	r30, r14
    7ffe:	46 8a       	std	Z+22, r4	; 0x16
    8000:	57 8a       	std	Z+23, r5	; 0x17
    8002:	60 8e       	std	Z+24, r6	; 0x18
    8004:	71 8e       	std	Z+25, r7	; 0x19
    8006:	86 81       	ldd	r24, Z+6	; 0x06
    8008:	97 81       	ldd	r25, Z+7	; 0x07
    800a:	a0 85       	ldd	r26, Z+8	; 0x08
    800c:	b1 85       	ldd	r27, Z+9	; 0x09
    800e:	ac 01       	movw	r20, r24
    8010:	bd 01       	movw	r22, r26
    8012:	51 70       	andi	r21, 0x01	; 1
    8014:	66 27       	eor	r22, r22
    8016:	77 27       	eor	r23, r23
    8018:	91 70       	andi	r25, 0x01	; 1
    801a:	14 01       	movw	r2, r8
    801c:	28 1a       	sub	r2, r24
    801e:	39 0a       	sbc	r3, r25
    8020:	c2 14       	cp	r12, r2
    8022:	d3 04       	cpc	r13, r3
    8024:	08 f4       	brcc	.+2      	; 0x8028 <f_read+0x2da>
    8026:	16 01       	movw	r2, r12
    8028:	da 01       	movw	r26, r20
    802a:	90 96       	adiw	r26, 0x20	; 32
    802c:	ae 0d       	add	r26, r14
    802e:	bf 1d       	adc	r27, r15
    8030:	eb 81       	ldd	r30, Y+3	; 0x03
    8032:	fc 81       	ldd	r31, Y+4	; 0x04
    8034:	9f 01       	movw	r18, r30
    8036:	22 0d       	add	r18, r2
    8038:	33 1d       	adc	r19, r3
    803a:	2b 83       	std	Y+3, r18	; 0x03
    803c:	3c 83       	std	Y+4, r19	; 0x04
    803e:	8d 91       	ld	r24, X+
    8040:	81 93       	st	Z+, r24
    8042:	8b 81       	ldd	r24, Y+3	; 0x03
    8044:	9c 81       	ldd	r25, Y+4	; 0x04
    8046:	e8 17       	cp	r30, r24
    8048:	f9 07       	cpc	r31, r25
    804a:	c9 f7       	brne	.-14     	; 0x803e <f_read+0x2f0>
    804c:	d7 01       	movw	r26, r14
    804e:	16 96       	adiw	r26, 0x06	; 6
    8050:	4d 91       	ld	r20, X+
    8052:	5d 91       	ld	r21, X+
    8054:	6d 91       	ld	r22, X+
    8056:	7c 91       	ld	r23, X
    8058:	19 97       	sbiw	r26, 0x09	; 9
    805a:	c1 01       	movw	r24, r2
    805c:	a0 e0       	ldi	r26, 0x00	; 0
    805e:	b0 e0       	ldi	r27, 0x00	; 0
    8060:	88 cf       	rjmp	.-240    	; 0x7f72 <f_read+0x224>
    8062:	89 2b       	or	r24, r25
    8064:	8a 2b       	or	r24, r26
    8066:	8b 2b       	or	r24, r27
    8068:	f9 f4       	brne	.+62     	; 0x80a8 <f_read+0x35a>
    806a:	d7 01       	movw	r26, r14
    806c:	1e 96       	adiw	r26, 0x0e	; 14
    806e:	6d 91       	ld	r22, X+
    8070:	7d 91       	ld	r23, X+
    8072:	8d 91       	ld	r24, X+
    8074:	9c 91       	ld	r25, X
    8076:	51 97       	sbiw	r26, 0x11	; 17
    8078:	62 30       	cpi	r22, 0x02	; 2
    807a:	71 05       	cpc	r23, r1
    807c:	81 05       	cpc	r24, r1
    807e:	91 05       	cpc	r25, r1
    8080:	40 f1       	brcs	.+80     	; 0x80d2 <f_read+0x384>
    8082:	6f 3f       	cpi	r22, 0xFF	; 255
    8084:	ff ef       	ldi	r31, 0xFF	; 255
    8086:	7f 07       	cpc	r23, r31
    8088:	8f 07       	cpc	r24, r31
    808a:	9f 07       	cpc	r25, r31
    808c:	59 f1       	breq	.+86     	; 0x80e4 <f_read+0x396>
    808e:	f7 01       	movw	r30, r14
    8090:	62 8b       	std	Z+18, r22	; 0x12
    8092:	73 8b       	std	Z+19, r23	; 0x13
    8094:	84 8b       	std	Z+20, r24	; 0x14
    8096:	95 8b       	std	Z+21, r25	; 0x15
    8098:	01 90       	ld	r0, Z+
    809a:	f0 81       	ld	r31, Z
    809c:	e0 2d       	mov	r30, r0
    809e:	ed 83       	std	Y+5, r30	; 0x05
    80a0:	fe 83       	std	Y+6, r31	; 0x06
    80a2:	dc 01       	movw	r26, r24
    80a4:	cb 01       	movw	r24, r22
    80a6:	f3 ce       	rjmp	.-538    	; 0x7e8e <f_read+0x140>
    80a8:	f7 01       	movw	r30, r14
    80aa:	42 89       	ldd	r20, Z+18	; 0x12
    80ac:	53 89       	ldd	r21, Z+19	; 0x13
    80ae:	64 89       	ldd	r22, Z+20	; 0x14
    80b0:	75 89       	ldd	r23, Z+21	; 0x15
    80b2:	42 30       	cpi	r20, 0x02	; 2
    80b4:	51 05       	cpc	r21, r1
    80b6:	61 05       	cpc	r22, r1
    80b8:	71 05       	cpc	r23, r1
    80ba:	58 f0       	brcs	.+22     	; 0x80d2 <f_read+0x384>
    80bc:	ed 81       	ldd	r30, Y+5	; 0x05
    80be:	fe 81       	ldd	r31, Y+6	; 0x06
    80c0:	86 89       	ldd	r24, Z+22	; 0x16
    80c2:	97 89       	ldd	r25, Z+23	; 0x17
    80c4:	a0 8d       	ldd	r26, Z+24	; 0x18
    80c6:	b1 8d       	ldd	r27, Z+25	; 0x19
    80c8:	48 17       	cp	r20, r24
    80ca:	59 07       	cpc	r21, r25
    80cc:	6a 07       	cpc	r22, r26
    80ce:	7b 07       	cpc	r23, r27
    80d0:	20 f1       	brcs	.+72     	; 0x811a <f_read+0x3cc>
    80d2:	d7 01       	movw	r26, r14
    80d4:	14 96       	adiw	r26, 0x04	; 4
    80d6:	8c 91       	ld	r24, X
    80d8:	14 97       	sbiw	r26, 0x04	; 4
    80da:	80 68       	ori	r24, 0x80	; 128
    80dc:	14 96       	adiw	r26, 0x04	; 4
    80de:	8c 93       	st	X, r24
    80e0:	82 e0       	ldi	r24, 0x02	; 2
    80e2:	5d ce       	rjmp	.-838    	; 0x7d9e <f_read+0x50>
    80e4:	d7 01       	movw	r26, r14
    80e6:	14 96       	adiw	r26, 0x04	; 4
    80e8:	8c 91       	ld	r24, X
    80ea:	14 97       	sbiw	r26, 0x04	; 4
    80ec:	80 68       	ori	r24, 0x80	; 128
    80ee:	14 96       	adiw	r26, 0x04	; 4
    80f0:	8c 93       	st	X, r24
    80f2:	81 e0       	ldi	r24, 0x01	; 1
    80f4:	54 ce       	rjmp	.-856    	; 0x7d9e <f_read+0x50>
    80f6:	fc 01       	movw	r30, r24
    80f8:	fe 2f       	mov	r31, r30
    80fa:	ee 27       	eor	r30, r30
    80fc:	ff 0f       	add	r31, r31
    80fe:	d7 01       	movw	r26, r14
    8100:	90 96       	adiw	r26, 0x20	; 32
    8102:	2b 81       	ldd	r18, Y+3	; 0x03
    8104:	3c 81       	ldd	r19, Y+4	; 0x04
    8106:	e2 0f       	add	r30, r18
    8108:	f3 1f       	adc	r31, r19
    810a:	cf 01       	movw	r24, r30
    810c:	9e 5f       	subi	r25, 0xFE	; 254
    810e:	2d 91       	ld	r18, X+
    8110:	21 93       	st	Z+, r18
    8112:	8e 17       	cp	r24, r30
    8114:	9f 07       	cpc	r25, r31
    8116:	d9 f7       	brne	.-10     	; 0x810e <f_read+0x3c0>
    8118:	19 cf       	rjmp	.-462    	; 0x7f4c <f_read+0x1fe>
    811a:	cf 01       	movw	r24, r30
    811c:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
    8120:	ab cf       	rjmp	.-170    	; 0x8078 <f_read+0x32a>
    8122:	80 e0       	ldi	r24, 0x00	; 0
    8124:	3c ce       	rjmp	.-904    	; 0x7d9e <f_read+0x50>

00008126 <f_write>:
    8126:	2f 92       	push	r2
    8128:	3f 92       	push	r3
    812a:	4f 92       	push	r4
    812c:	5f 92       	push	r5
    812e:	6f 92       	push	r6
    8130:	7f 92       	push	r7
    8132:	8f 92       	push	r8
    8134:	9f 92       	push	r9
    8136:	af 92       	push	r10
    8138:	bf 92       	push	r11
    813a:	cf 92       	push	r12
    813c:	df 92       	push	r13
    813e:	ef 92       	push	r14
    8140:	ff 92       	push	r15
    8142:	0f 93       	push	r16
    8144:	1f 93       	push	r17
    8146:	cf 93       	push	r28
    8148:	df 93       	push	r29
    814a:	cd b7       	in	r28, 0x3d	; 61
    814c:	de b7       	in	r29, 0x3e	; 62
    814e:	28 97       	sbiw	r28, 0x08	; 8
    8150:	cd bf       	out	0x3d, r28	; 61
    8152:	de bf       	out	0x3e, r29	; 62
    8154:	8d 83       	std	Y+5, r24	; 0x05
    8156:	9e 83       	std	Y+6, r25	; 0x06
    8158:	4b 01       	movw	r8, r22
    815a:	6a 01       	movw	r12, r20
    815c:	59 01       	movw	r10, r18
    815e:	d9 01       	movw	r26, r18
    8160:	1d 92       	st	X+, r1
    8162:	1c 92       	st	X, r1
    8164:	dc 01       	movw	r26, r24
    8166:	ed 91       	ld	r30, X+
    8168:	fc 91       	ld	r31, X
    816a:	11 97       	sbiw	r26, 0x01	; 1
    816c:	30 97       	sbiw	r30, 0x00	; 0
    816e:	19 f0       	breq	.+6      	; 0x8176 <f_write+0x50>
    8170:	80 81       	ld	r24, Z
    8172:	81 11       	cpse	r24, r1
    8174:	17 c0       	rjmp	.+46     	; 0x81a4 <f_write+0x7e>
    8176:	89 e0       	ldi	r24, 0x09	; 9
    8178:	28 96       	adiw	r28, 0x08	; 8
    817a:	cd bf       	out	0x3d, r28	; 61
    817c:	de bf       	out	0x3e, r29	; 62
    817e:	df 91       	pop	r29
    8180:	cf 91       	pop	r28
    8182:	1f 91       	pop	r17
    8184:	0f 91       	pop	r16
    8186:	ff 90       	pop	r15
    8188:	ef 90       	pop	r14
    818a:	df 90       	pop	r13
    818c:	cf 90       	pop	r12
    818e:	bf 90       	pop	r11
    8190:	af 90       	pop	r10
    8192:	9f 90       	pop	r9
    8194:	8f 90       	pop	r8
    8196:	7f 90       	pop	r7
    8198:	6f 90       	pop	r6
    819a:	5f 90       	pop	r5
    819c:	4f 90       	pop	r4
    819e:	3f 90       	pop	r3
    81a0:	2f 90       	pop	r2
    81a2:	08 95       	ret
    81a4:	12 96       	adiw	r26, 0x02	; 2
    81a6:	2d 91       	ld	r18, X+
    81a8:	3c 91       	ld	r19, X
    81aa:	13 97       	sbiw	r26, 0x03	; 3
    81ac:	86 81       	ldd	r24, Z+6	; 0x06
    81ae:	97 81       	ldd	r25, Z+7	; 0x07
    81b0:	28 17       	cp	r18, r24
    81b2:	39 07       	cpc	r19, r25
    81b4:	01 f7       	brne	.-64     	; 0x8176 <f_write+0x50>
    81b6:	81 81       	ldd	r24, Z+1	; 0x01
    81b8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    81bc:	80 ff       	sbrs	r24, 0
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <f_write+0x9e>
    81c0:	83 e0       	ldi	r24, 0x03	; 3
    81c2:	da cf       	rjmp	.-76     	; 0x8178 <f_write+0x52>
    81c4:	ad 81       	ldd	r26, Y+5	; 0x05
    81c6:	be 81       	ldd	r27, Y+6	; 0x06
    81c8:	14 96       	adiw	r26, 0x04	; 4
    81ca:	8c 91       	ld	r24, X
    81cc:	14 97       	sbiw	r26, 0x04	; 4
    81ce:	87 fd       	sbrc	r24, 7
    81d0:	04 c0       	rjmp	.+8      	; 0x81da <f_write+0xb4>
    81d2:	81 fd       	sbrc	r24, 1
    81d4:	04 c0       	rjmp	.+8      	; 0x81de <f_write+0xb8>
    81d6:	87 e0       	ldi	r24, 0x07	; 7
    81d8:	cf cf       	rjmp	.-98     	; 0x8178 <f_write+0x52>
    81da:	82 e0       	ldi	r24, 0x02	; 2
    81dc:	cd cf       	rjmp	.-102    	; 0x8178 <f_write+0x52>
    81de:	fd 01       	movw	r30, r26
    81e0:	42 85       	ldd	r20, Z+10	; 0x0a
    81e2:	53 85       	ldd	r21, Z+11	; 0x0b
    81e4:	64 85       	ldd	r22, Z+12	; 0x0c
    81e6:	75 85       	ldd	r23, Z+13	; 0x0d
    81e8:	8a 01       	movw	r16, r20
    81ea:	9b 01       	movw	r18, r22
    81ec:	0c 0d       	add	r16, r12
    81ee:	1d 1d       	adc	r17, r13
    81f0:	21 1d       	adc	r18, r1
    81f2:	31 1d       	adc	r19, r1
    81f4:	04 17       	cp	r16, r20
    81f6:	15 07       	cpc	r17, r21
    81f8:	26 07       	cpc	r18, r22
    81fa:	37 07       	cpc	r19, r23
    81fc:	88 f4       	brcc	.+34     	; 0x8220 <f_write+0xfa>
    81fe:	06 81       	ldd	r16, Z+6	; 0x06
    8200:	17 81       	ldd	r17, Z+7	; 0x07
    8202:	20 85       	ldd	r18, Z+8	; 0x08
    8204:	31 85       	ldd	r19, Z+9	; 0x09
    8206:	40 17       	cp	r20, r16
    8208:	51 07       	cpc	r21, r17
    820a:	62 07       	cpc	r22, r18
    820c:	73 07       	cpc	r23, r19
    820e:	20 f4       	brcc	.+8      	; 0x8218 <f_write+0xf2>
    8210:	02 87       	std	Z+10, r16	; 0x0a
    8212:	13 87       	std	Z+11, r17	; 0x0b
    8214:	24 87       	std	Z+12, r18	; 0x0c
    8216:	35 87       	std	Z+13, r19	; 0x0d
    8218:	80 62       	ori	r24, 0x20	; 32
    821a:	84 83       	std	Z+4, r24	; 0x04
    821c:	80 e0       	ldi	r24, 0x00	; 0
    821e:	ac cf       	rjmp	.-168    	; 0x8178 <f_write+0x52>
    8220:	c1 14       	cp	r12, r1
    8222:	d1 04       	cpc	r13, r1
    8224:	61 f3       	breq	.-40     	; 0x81fe <f_write+0xd8>
    8226:	7d 01       	movw	r14, r26
    8228:	21 2c       	mov	r2, r1
    822a:	82 e0       	ldi	r24, 0x02	; 2
    822c:	38 2e       	mov	r3, r24
    822e:	b0 96       	adiw	r30, 0x20	; 32
    8230:	eb 83       	std	Y+3, r30	; 0x03
    8232:	fc 83       	std	Y+4, r31	; 0x04
    8234:	f0 ee       	ldi	r31, 0xE0	; 224
    8236:	ef 1a       	sub	r14, r31
    8238:	fd ef       	ldi	r31, 0xFD	; 253
    823a:	ff 0a       	sbc	r15, r31
    823c:	fd 01       	movw	r30, r26
    823e:	86 81       	ldd	r24, Z+6	; 0x06
    8240:	97 81       	ldd	r25, Z+7	; 0x07
    8242:	a0 85       	ldd	r26, Z+8	; 0x08
    8244:	b1 85       	ldd	r27, Z+9	; 0x09
    8246:	ac 01       	movw	r20, r24
    8248:	bd 01       	movw	r22, r26
    824a:	51 70       	andi	r21, 0x01	; 1
    824c:	66 27       	eor	r22, r22
    824e:	77 27       	eor	r23, r23
    8250:	41 15       	cp	r20, r1
    8252:	51 05       	cpc	r21, r1
    8254:	61 05       	cpc	r22, r1
    8256:	71 05       	cpc	r23, r1
    8258:	09 f0       	breq	.+2      	; 0x825c <f_write+0x136>
    825a:	0f c1       	rjmp	.+542    	; 0x847a <f_write+0x354>
    825c:	01 90       	ld	r0, Z+
    825e:	f0 81       	ld	r31, Z
    8260:	e0 2d       	mov	r30, r0
    8262:	ef 83       	std	Y+7, r30	; 0x07
    8264:	f8 87       	std	Y+8, r31	; 0x08
    8266:	12 81       	ldd	r17, Z+2	; 0x02
    8268:	11 50       	subi	r17, 0x01	; 1
    826a:	ac 01       	movw	r20, r24
    826c:	bd 01       	movw	r22, r26
    826e:	09 e0       	ldi	r16, 0x09	; 9
    8270:	76 95       	lsr	r23
    8272:	67 95       	ror	r22
    8274:	57 95       	ror	r21
    8276:	47 95       	ror	r20
    8278:	0a 95       	dec	r16
    827a:	d1 f7       	brne	.-12     	; 0x8270 <f_write+0x14a>
    827c:	14 23       	and	r17, r20
    827e:	61 f5       	brne	.+88     	; 0x82d8 <f_write+0x1b2>
    8280:	89 2b       	or	r24, r25
    8282:	8a 2b       	or	r24, r26
    8284:	8b 2b       	or	r24, r27
    8286:	09 f0       	breq	.+2      	; 0x828a <f_write+0x164>
    8288:	47 c1       	rjmp	.+654    	; 0x8518 <f_write+0x3f2>
    828a:	ad 81       	ldd	r26, Y+5	; 0x05
    828c:	be 81       	ldd	r27, Y+6	; 0x06
    828e:	1e 96       	adiw	r26, 0x0e	; 14
    8290:	6d 91       	ld	r22, X+
    8292:	7d 91       	ld	r23, X+
    8294:	8d 91       	ld	r24, X+
    8296:	9c 91       	ld	r25, X
    8298:	51 97       	sbiw	r26, 0x11	; 17
    829a:	61 15       	cp	r22, r1
    829c:	71 05       	cpc	r23, r1
    829e:	81 05       	cpc	r24, r1
    82a0:	91 05       	cpc	r25, r1
    82a2:	09 f4       	brne	.+2      	; 0x82a6 <f_write+0x180>
    82a4:	57 c1       	rjmp	.+686    	; 0x8554 <f_write+0x42e>
    82a6:	61 30       	cpi	r22, 0x01	; 1
    82a8:	71 05       	cpc	r23, r1
    82aa:	81 05       	cpc	r24, r1
    82ac:	91 05       	cpc	r25, r1
    82ae:	09 f4       	brne	.+2      	; 0x82b2 <f_write+0x18c>
    82b0:	80 c1       	rjmp	.+768    	; 0x85b2 <f_write+0x48c>
    82b2:	6f 3f       	cpi	r22, 0xFF	; 255
    82b4:	bf ef       	ldi	r27, 0xFF	; 255
    82b6:	7b 07       	cpc	r23, r27
    82b8:	8b 07       	cpc	r24, r27
    82ba:	9b 07       	cpc	r25, r27
    82bc:	09 f4       	brne	.+2      	; 0x82c0 <f_write+0x19a>
    82be:	72 c1       	rjmp	.+740    	; 0x85a4 <f_write+0x47e>
    82c0:	ad 81       	ldd	r26, Y+5	; 0x05
    82c2:	be 81       	ldd	r27, Y+6	; 0x06
    82c4:	52 96       	adiw	r26, 0x12	; 18
    82c6:	6d 93       	st	X+, r22
    82c8:	7d 93       	st	X+, r23
    82ca:	8d 93       	st	X+, r24
    82cc:	9c 93       	st	X, r25
    82ce:	55 97       	sbiw	r26, 0x15	; 21
    82d0:	ed 91       	ld	r30, X+
    82d2:	fc 91       	ld	r31, X
    82d4:	ef 83       	std	Y+7, r30	; 0x07
    82d6:	f8 87       	std	Y+8, r31	; 0x08
    82d8:	ad 81       	ldd	r26, Y+5	; 0x05
    82da:	be 81       	ldd	r27, Y+6	; 0x06
    82dc:	14 96       	adiw	r26, 0x04	; 4
    82de:	7c 90       	ld	r7, X
    82e0:	14 97       	sbiw	r26, 0x04	; 4
    82e2:	76 fc       	sbrc	r7, 6
    82e4:	f3 c0       	rjmp	.+486    	; 0x84cc <f_write+0x3a6>
    82e6:	ed 81       	ldd	r30, Y+5	; 0x05
    82e8:	fe 81       	ldd	r31, Y+6	; 0x06
    82ea:	82 89       	ldd	r24, Z+18	; 0x12
    82ec:	93 89       	ldd	r25, Z+19	; 0x13
    82ee:	a4 89       	ldd	r26, Z+20	; 0x14
    82f0:	b5 89       	ldd	r27, Z+21	; 0x15
    82f2:	9c 01       	movw	r18, r24
    82f4:	ad 01       	movw	r20, r26
    82f6:	22 50       	subi	r18, 0x02	; 2
    82f8:	31 09       	sbc	r19, r1
    82fa:	41 09       	sbc	r20, r1
    82fc:	51 09       	sbc	r21, r1
    82fe:	ef 81       	ldd	r30, Y+7	; 0x07
    8300:	f8 85       	ldd	r31, Y+8	; 0x08
    8302:	86 89       	ldd	r24, Z+22	; 0x16
    8304:	97 89       	ldd	r25, Z+23	; 0x17
    8306:	a0 8d       	ldd	r26, Z+24	; 0x18
    8308:	b1 8d       	ldd	r27, Z+25	; 0x19
    830a:	02 97       	sbiw	r24, 0x02	; 2
    830c:	a1 09       	sbc	r26, r1
    830e:	b1 09       	sbc	r27, r1
    8310:	28 17       	cp	r18, r24
    8312:	39 07       	cpc	r19, r25
    8314:	4a 07       	cpc	r20, r26
    8316:	5b 07       	cpc	r21, r27
    8318:	08 f0       	brcs	.+2      	; 0x831c <f_write+0x1f6>
    831a:	3c c1       	rjmp	.+632    	; 0x8594 <f_write+0x46e>
    831c:	02 81       	ldd	r16, Z+2	; 0x02
    831e:	a0 2f       	mov	r26, r16
    8320:	b0 e0       	ldi	r27, 0x00	; 0
    8322:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    8326:	26 a1       	ldd	r18, Z+38	; 0x26
    8328:	37 a1       	ldd	r19, Z+39	; 0x27
    832a:	40 a5       	ldd	r20, Z+40	; 0x28
    832c:	51 a5       	ldd	r21, Z+41	; 0x29
    832e:	dc 01       	movw	r26, r24
    8330:	cb 01       	movw	r24, r22
    8332:	82 0f       	add	r24, r18
    8334:	93 1f       	adc	r25, r19
    8336:	a4 1f       	adc	r26, r20
    8338:	b5 1f       	adc	r27, r21
    833a:	00 97       	sbiw	r24, 0x00	; 0
    833c:	a1 05       	cpc	r26, r1
    833e:	b1 05       	cpc	r27, r1
    8340:	09 f4       	brne	.+2      	; 0x8344 <f_write+0x21e>
    8342:	28 c1       	rjmp	.+592    	; 0x8594 <f_write+0x46e>
    8344:	2c 01       	movw	r4, r24
    8346:	3d 01       	movw	r6, r26
    8348:	41 0e       	add	r4, r17
    834a:	51 1c       	adc	r5, r1
    834c:	61 1c       	adc	r6, r1
    834e:	71 1c       	adc	r7, r1
    8350:	f6 01       	movw	r30, r12
    8352:	ef 2f       	mov	r30, r31
    8354:	ff 27       	eor	r31, r31
    8356:	e6 95       	lsr	r30
    8358:	e9 83       	std	Y+1, r30	; 0x01
    835a:	fa 83       	std	Y+2, r31	; 0x02
    835c:	30 97       	sbiw	r30, 0x00	; 0
    835e:	09 f4       	brne	.+2      	; 0x8362 <f_write+0x23c>
    8360:	69 c0       	rjmp	.+210    	; 0x8434 <f_write+0x30e>
    8362:	21 2f       	mov	r18, r17
    8364:	30 e0       	ldi	r19, 0x00	; 0
    8366:	af 01       	movw	r20, r30
    8368:	42 0f       	add	r20, r18
    836a:	53 1f       	adc	r21, r19
    836c:	80 2f       	mov	r24, r16
    836e:	90 e0       	ldi	r25, 0x00	; 0
    8370:	84 17       	cp	r24, r20
    8372:	95 07       	cpc	r25, r21
    8374:	28 f4       	brcc	.+10     	; 0x8380 <f_write+0x25a>
    8376:	ac 01       	movw	r20, r24
    8378:	42 1b       	sub	r20, r18
    837a:	53 0b       	sbc	r21, r19
    837c:	49 83       	std	Y+1, r20	; 0x01
    837e:	5a 83       	std	Y+2, r21	; 0x02
    8380:	09 81       	ldd	r16, Y+1	; 0x01
    8382:	a3 01       	movw	r20, r6
    8384:	92 01       	movw	r18, r4
    8386:	b4 01       	movw	r22, r8
    8388:	ef 81       	ldd	r30, Y+7	; 0x07
    838a:	f8 85       	ldd	r31, Y+8	; 0x08
    838c:	81 81       	ldd	r24, Z+1	; 0x01
    838e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    8392:	81 11       	cpse	r24, r1
    8394:	b7 c0       	rjmp	.+366    	; 0x8504 <f_write+0x3de>
    8396:	ed 81       	ldd	r30, Y+5	; 0x05
    8398:	fe 81       	ldd	r31, Y+6	; 0x06
    839a:	86 89       	ldd	r24, Z+22	; 0x16
    839c:	97 89       	ldd	r25, Z+23	; 0x17
    839e:	a0 8d       	ldd	r26, Z+24	; 0x18
    83a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    83a2:	84 19       	sub	r24, r4
    83a4:	95 09       	sbc	r25, r5
    83a6:	a6 09       	sbc	r26, r6
    83a8:	b7 09       	sbc	r27, r7
    83aa:	29 81       	ldd	r18, Y+1	; 0x01
    83ac:	3a 81       	ldd	r19, Y+2	; 0x02
    83ae:	a9 01       	movw	r20, r18
    83b0:	60 e0       	ldi	r22, 0x00	; 0
    83b2:	70 e0       	ldi	r23, 0x00	; 0
    83b4:	84 17       	cp	r24, r20
    83b6:	95 07       	cpc	r25, r21
    83b8:	a6 07       	cpc	r26, r22
    83ba:	b7 07       	cpc	r27, r23
    83bc:	b0 f4       	brcc	.+44     	; 0x83ea <f_write+0x2c4>
    83be:	dc 01       	movw	r26, r24
    83c0:	ba 2f       	mov	r27, r26
    83c2:	aa 27       	eor	r26, r26
    83c4:	bb 0f       	add	r27, r27
    83c6:	a8 0d       	add	r26, r8
    83c8:	b9 1d       	adc	r27, r9
    83ca:	b0 96       	adiw	r30, 0x20	; 32
    83cc:	8d 91       	ld	r24, X+
    83ce:	81 93       	st	Z+, r24
    83d0:	ee 16       	cp	r14, r30
    83d2:	ff 06       	cpc	r15, r31
    83d4:	d9 f7       	brne	.-10     	; 0x83cc <f_write+0x2a6>
    83d6:	ad 81       	ldd	r26, Y+5	; 0x05
    83d8:	be 81       	ldd	r27, Y+6	; 0x06
    83da:	14 96       	adiw	r26, 0x04	; 4
    83dc:	8c 91       	ld	r24, X
    83de:	14 97       	sbiw	r26, 0x04	; 4
    83e0:	8f 7b       	andi	r24, 0xBF	; 191
    83e2:	14 96       	adiw	r26, 0x04	; 4
    83e4:	8c 93       	st	X, r24
    83e6:	14 97       	sbiw	r26, 0x04	; 4
    83e8:	fd 01       	movw	r30, r26
    83ea:	89 81       	ldd	r24, Y+1	; 0x01
    83ec:	9a 81       	ldd	r25, Y+2	; 0x02
    83ee:	98 2f       	mov	r25, r24
    83f0:	88 27       	eor	r24, r24
    83f2:	99 0f       	add	r25, r25
    83f4:	46 81       	ldd	r20, Z+6	; 0x06
    83f6:	57 81       	ldd	r21, Z+7	; 0x07
    83f8:	60 85       	ldd	r22, Z+8	; 0x08
    83fa:	71 85       	ldd	r23, Z+9	; 0x09
    83fc:	88 0e       	add	r8, r24
    83fe:	99 1e       	adc	r9, r25
    8400:	48 0f       	add	r20, r24
    8402:	59 1f       	adc	r21, r25
    8404:	61 1d       	adc	r22, r1
    8406:	71 1d       	adc	r23, r1
    8408:	46 83       	std	Z+6, r20	; 0x06
    840a:	57 83       	std	Z+7, r21	; 0x07
    840c:	60 87       	std	Z+8, r22	; 0x08
    840e:	71 87       	std	Z+9, r23	; 0x09
    8410:	d5 01       	movw	r26, r10
    8412:	2d 91       	ld	r18, X+
    8414:	3c 91       	ld	r19, X
    8416:	11 97       	sbiw	r26, 0x01	; 1
    8418:	28 0f       	add	r18, r24
    841a:	39 1f       	adc	r19, r25
    841c:	2d 93       	st	X+, r18
    841e:	3c 93       	st	X, r19
    8420:	c8 1a       	sub	r12, r24
    8422:	d9 0a       	sbc	r13, r25
    8424:	09 f0       	breq	.+2      	; 0x8428 <f_write+0x302>
    8426:	0b cf       	rjmp	.-490    	; 0x823e <f_write+0x118>
    8428:	42 85       	ldd	r20, Z+10	; 0x0a
    842a:	53 85       	ldd	r21, Z+11	; 0x0b
    842c:	64 85       	ldd	r22, Z+12	; 0x0c
    842e:	75 85       	ldd	r23, Z+13	; 0x0d
    8430:	84 81       	ldd	r24, Z+4	; 0x04
    8432:	e5 ce       	rjmp	.-566    	; 0x81fe <f_write+0xd8>
    8434:	ed 81       	ldd	r30, Y+5	; 0x05
    8436:	fe 81       	ldd	r31, Y+6	; 0x06
    8438:	86 89       	ldd	r24, Z+22	; 0x16
    843a:	97 89       	ldd	r25, Z+23	; 0x17
    843c:	a0 8d       	ldd	r26, Z+24	; 0x18
    843e:	b1 8d       	ldd	r27, Z+25	; 0x19
    8440:	48 16       	cp	r4, r24
    8442:	59 06       	cpc	r5, r25
    8444:	6a 06       	cpc	r6, r26
    8446:	7b 06       	cpc	r7, r27
    8448:	09 f4       	brne	.+2      	; 0x844c <f_write+0x326>
    844a:	7f c0       	rjmp	.+254    	; 0x854a <f_write+0x424>
    844c:	86 81       	ldd	r24, Z+6	; 0x06
    844e:	97 81       	ldd	r25, Z+7	; 0x07
    8450:	a0 85       	ldd	r26, Z+8	; 0x08
    8452:	b1 85       	ldd	r27, Z+9	; 0x09
    8454:	42 85       	ldd	r20, Z+10	; 0x0a
    8456:	53 85       	ldd	r21, Z+11	; 0x0b
    8458:	64 85       	ldd	r22, Z+12	; 0x0c
    845a:	75 85       	ldd	r23, Z+13	; 0x0d
    845c:	84 17       	cp	r24, r20
    845e:	95 07       	cpc	r25, r21
    8460:	a6 07       	cpc	r26, r22
    8462:	b7 07       	cpc	r27, r23
    8464:	08 f4       	brcc	.+2      	; 0x8468 <f_write+0x342>
    8466:	83 c0       	rjmp	.+262    	; 0x856e <f_write+0x448>
    8468:	46 8a       	std	Z+22, r4	; 0x16
    846a:	57 8a       	std	Z+23, r5	; 0x17
    846c:	60 8e       	std	Z+24, r6	; 0x18
    846e:	71 8e       	std	Z+25, r7	; 0x19
    8470:	ac 01       	movw	r20, r24
    8472:	bd 01       	movw	r22, r26
    8474:	51 70       	andi	r21, 0x01	; 1
    8476:	66 27       	eor	r22, r22
    8478:	77 27       	eor	r23, r23
    847a:	91 70       	andi	r25, 0x01	; 1
    847c:	91 01       	movw	r18, r2
    847e:	28 1b       	sub	r18, r24
    8480:	39 0b       	sbc	r19, r25
    8482:	c9 01       	movw	r24, r18
    8484:	c2 16       	cp	r12, r18
    8486:	d3 06       	cpc	r13, r19
    8488:	08 f4       	brcc	.+2      	; 0x848c <f_write+0x366>
    848a:	c6 01       	movw	r24, r12
    848c:	fa 01       	movw	r30, r20
    848e:	b0 96       	adiw	r30, 0x20	; 32
    8490:	d4 01       	movw	r26, r8
    8492:	4d 81       	ldd	r20, Y+5	; 0x05
    8494:	5e 81       	ldd	r21, Y+6	; 0x06
    8496:	e4 0f       	add	r30, r20
    8498:	f5 1f       	adc	r31, r21
    849a:	9f 01       	movw	r18, r30
    849c:	28 0f       	add	r18, r24
    849e:	39 1f       	adc	r19, r25
    84a0:	4d 91       	ld	r20, X+
    84a2:	41 93       	st	Z+, r20
    84a4:	e2 17       	cp	r30, r18
    84a6:	f3 07       	cpc	r31, r19
    84a8:	d9 f7       	brne	.-10     	; 0x84a0 <f_write+0x37a>
    84aa:	ad 81       	ldd	r26, Y+5	; 0x05
    84ac:	be 81       	ldd	r27, Y+6	; 0x06
    84ae:	16 96       	adiw	r26, 0x06	; 6
    84b0:	4d 91       	ld	r20, X+
    84b2:	5d 91       	ld	r21, X+
    84b4:	6d 91       	ld	r22, X+
    84b6:	7c 91       	ld	r23, X
    84b8:	19 97       	sbiw	r26, 0x09	; 9
    84ba:	14 96       	adiw	r26, 0x04	; 4
    84bc:	2c 91       	ld	r18, X
    84be:	14 97       	sbiw	r26, 0x04	; 4
    84c0:	20 64       	ori	r18, 0x40	; 64
    84c2:	14 96       	adiw	r26, 0x04	; 4
    84c4:	2c 93       	st	X, r18
    84c6:	14 97       	sbiw	r26, 0x04	; 4
    84c8:	fd 01       	movw	r30, r26
    84ca:	98 cf       	rjmp	.-208    	; 0x83fc <f_write+0x2d6>
    84cc:	56 96       	adiw	r26, 0x16	; 22
    84ce:	2d 91       	ld	r18, X+
    84d0:	3d 91       	ld	r19, X+
    84d2:	4d 91       	ld	r20, X+
    84d4:	5c 91       	ld	r21, X
    84d6:	59 97       	sbiw	r26, 0x19	; 25
    84d8:	01 e0       	ldi	r16, 0x01	; 1
    84da:	6b 81       	ldd	r22, Y+3	; 0x03
    84dc:	7c 81       	ldd	r23, Y+4	; 0x04
    84de:	ef 81       	ldd	r30, Y+7	; 0x07
    84e0:	f8 85       	ldd	r31, Y+8	; 0x08
    84e2:	81 81       	ldd	r24, Z+1	; 0x01
    84e4:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    84e8:	81 11       	cpse	r24, r1
    84ea:	0c c0       	rjmp	.+24     	; 0x8504 <f_write+0x3de>
    84ec:	ed 81       	ldd	r30, Y+5	; 0x05
    84ee:	fe 81       	ldd	r31, Y+6	; 0x06
    84f0:	84 81       	ldd	r24, Z+4	; 0x04
    84f2:	8f 7b       	andi	r24, 0xBF	; 191
    84f4:	78 2e       	mov	r7, r24
    84f6:	84 83       	std	Z+4, r24	; 0x04
    84f8:	01 90       	ld	r0, Z+
    84fa:	f0 81       	ld	r31, Z
    84fc:	e0 2d       	mov	r30, r0
    84fe:	ef 83       	std	Y+7, r30	; 0x07
    8500:	f8 87       	std	Y+8, r31	; 0x08
    8502:	f1 ce       	rjmp	.-542    	; 0x82e6 <f_write+0x1c0>
    8504:	ad 81       	ldd	r26, Y+5	; 0x05
    8506:	be 81       	ldd	r27, Y+6	; 0x06
    8508:	14 96       	adiw	r26, 0x04	; 4
    850a:	8c 91       	ld	r24, X
    850c:	14 97       	sbiw	r26, 0x04	; 4
    850e:	80 68       	ori	r24, 0x80	; 128
    8510:	14 96       	adiw	r26, 0x04	; 4
    8512:	8c 93       	st	X, r24
    8514:	81 e0       	ldi	r24, 0x01	; 1
    8516:	30 ce       	rjmp	.-928    	; 0x8178 <f_write+0x52>
    8518:	cf 01       	movw	r24, r30
    851a:	ad 81       	ldd	r26, Y+5	; 0x05
    851c:	be 81       	ldd	r27, Y+6	; 0x06
    851e:	52 96       	adiw	r26, 0x12	; 18
    8520:	4d 91       	ld	r20, X+
    8522:	5d 91       	ld	r21, X+
    8524:	6d 91       	ld	r22, X+
    8526:	7c 91       	ld	r23, X
    8528:	55 97       	sbiw	r26, 0x15	; 21
    852a:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <create_chain>
    852e:	61 15       	cp	r22, r1
    8530:	71 05       	cpc	r23, r1
    8532:	81 05       	cpc	r24, r1
    8534:	91 05       	cpc	r25, r1
    8536:	09 f0       	breq	.+2      	; 0x853a <f_write+0x414>
    8538:	b6 ce       	rjmp	.-660    	; 0x82a6 <f_write+0x180>
    853a:	ed 81       	ldd	r30, Y+5	; 0x05
    853c:	fe 81       	ldd	r31, Y+6	; 0x06
    853e:	42 85       	ldd	r20, Z+10	; 0x0a
    8540:	53 85       	ldd	r21, Z+11	; 0x0b
    8542:	64 85       	ldd	r22, Z+12	; 0x0c
    8544:	75 85       	ldd	r23, Z+13	; 0x0d
    8546:	84 81       	ldd	r24, Z+4	; 0x04
    8548:	5a ce       	rjmp	.-844    	; 0x81fe <f_write+0xd8>
    854a:	86 81       	ldd	r24, Z+6	; 0x06
    854c:	97 81       	ldd	r25, Z+7	; 0x07
    854e:	a0 85       	ldd	r26, Z+8	; 0x08
    8550:	b1 85       	ldd	r27, Z+9	; 0x09
    8552:	8a cf       	rjmp	.-236    	; 0x8468 <f_write+0x342>
    8554:	40 e0       	ldi	r20, 0x00	; 0
    8556:	50 e0       	ldi	r21, 0x00	; 0
    8558:	ba 01       	movw	r22, r20
    855a:	cf 01       	movw	r24, r30
    855c:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <create_chain>
    8560:	ed 81       	ldd	r30, Y+5	; 0x05
    8562:	fe 81       	ldd	r31, Y+6	; 0x06
    8564:	66 87       	std	Z+14, r22	; 0x0e
    8566:	77 87       	std	Z+15, r23	; 0x0f
    8568:	80 8b       	std	Z+16, r24	; 0x10
    856a:	91 8b       	std	Z+17, r25	; 0x11
    856c:	e0 cf       	rjmp	.-64     	; 0x852e <f_write+0x408>
    856e:	01 e0       	ldi	r16, 0x01	; 1
    8570:	a3 01       	movw	r20, r6
    8572:	92 01       	movw	r18, r4
    8574:	6b 81       	ldd	r22, Y+3	; 0x03
    8576:	7c 81       	ldd	r23, Y+4	; 0x04
    8578:	ef 81       	ldd	r30, Y+7	; 0x07
    857a:	f8 85       	ldd	r31, Y+8	; 0x08
    857c:	81 81       	ldd	r24, Z+1	; 0x01
    857e:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    8582:	81 11       	cpse	r24, r1
    8584:	bf cf       	rjmp	.-130    	; 0x8504 <f_write+0x3de>
    8586:	ed 81       	ldd	r30, Y+5	; 0x05
    8588:	fe 81       	ldd	r31, Y+6	; 0x06
    858a:	86 81       	ldd	r24, Z+6	; 0x06
    858c:	97 81       	ldd	r25, Z+7	; 0x07
    858e:	a0 85       	ldd	r26, Z+8	; 0x08
    8590:	b1 85       	ldd	r27, Z+9	; 0x09
    8592:	6a cf       	rjmp	.-300    	; 0x8468 <f_write+0x342>
    8594:	87 2d       	mov	r24, r7
    8596:	80 68       	ori	r24, 0x80	; 128
    8598:	ad 81       	ldd	r26, Y+5	; 0x05
    859a:	be 81       	ldd	r27, Y+6	; 0x06
    859c:	14 96       	adiw	r26, 0x04	; 4
    859e:	8c 93       	st	X, r24
    85a0:	82 e0       	ldi	r24, 0x02	; 2
    85a2:	ea cd       	rjmp	.-1068   	; 0x8178 <f_write+0x52>
    85a4:	ed 81       	ldd	r30, Y+5	; 0x05
    85a6:	fe 81       	ldd	r31, Y+6	; 0x06
    85a8:	84 81       	ldd	r24, Z+4	; 0x04
    85aa:	80 68       	ori	r24, 0x80	; 128
    85ac:	84 83       	std	Z+4, r24	; 0x04
    85ae:	81 e0       	ldi	r24, 0x01	; 1
    85b0:	e3 cd       	rjmp	.-1082   	; 0x8178 <f_write+0x52>
    85b2:	ad 81       	ldd	r26, Y+5	; 0x05
    85b4:	be 81       	ldd	r27, Y+6	; 0x06
    85b6:	14 96       	adiw	r26, 0x04	; 4
    85b8:	8c 91       	ld	r24, X
    85ba:	14 97       	sbiw	r26, 0x04	; 4
    85bc:	80 68       	ori	r24, 0x80	; 128
    85be:	14 96       	adiw	r26, 0x04	; 4
    85c0:	8c 93       	st	X, r24
    85c2:	82 e0       	ldi	r24, 0x02	; 2
    85c4:	d9 cd       	rjmp	.-1102   	; 0x8178 <f_write+0x52>

000085c6 <f_close>:
    85c6:	4f 92       	push	r4
    85c8:	5f 92       	push	r5
    85ca:	6f 92       	push	r6
    85cc:	7f 92       	push	r7
    85ce:	8f 92       	push	r8
    85d0:	9f 92       	push	r9
    85d2:	af 92       	push	r10
    85d4:	bf 92       	push	r11
    85d6:	cf 92       	push	r12
    85d8:	df 92       	push	r13
    85da:	ef 92       	push	r14
    85dc:	ff 92       	push	r15
    85de:	0f 93       	push	r16
    85e0:	1f 93       	push	r17
    85e2:	cf 93       	push	r28
    85e4:	df 93       	push	r29
    85e6:	dc 01       	movw	r26, r24
    85e8:	ed 91       	ld	r30, X+
    85ea:	fc 91       	ld	r31, X
    85ec:	11 97       	sbiw	r26, 0x01	; 1
    85ee:	30 97       	sbiw	r30, 0x00	; 0
    85f0:	19 f0       	breq	.+6      	; 0x85f8 <f_close+0x32>
    85f2:	20 81       	ld	r18, Z
    85f4:	21 11       	cpse	r18, r1
    85f6:	12 c0       	rjmp	.+36     	; 0x861c <f_close+0x56>
    85f8:	89 e0       	ldi	r24, 0x09	; 9
    85fa:	df 91       	pop	r29
    85fc:	cf 91       	pop	r28
    85fe:	1f 91       	pop	r17
    8600:	0f 91       	pop	r16
    8602:	ff 90       	pop	r15
    8604:	ef 90       	pop	r14
    8606:	df 90       	pop	r13
    8608:	cf 90       	pop	r12
    860a:	bf 90       	pop	r11
    860c:	af 90       	pop	r10
    860e:	9f 90       	pop	r9
    8610:	8f 90       	pop	r8
    8612:	7f 90       	pop	r7
    8614:	6f 90       	pop	r6
    8616:	5f 90       	pop	r5
    8618:	4f 90       	pop	r4
    861a:	08 95       	ret
    861c:	12 96       	adiw	r26, 0x02	; 2
    861e:	4d 91       	ld	r20, X+
    8620:	5c 91       	ld	r21, X
    8622:	13 97       	sbiw	r26, 0x03	; 3
    8624:	26 81       	ldd	r18, Z+6	; 0x06
    8626:	37 81       	ldd	r19, Z+7	; 0x07
    8628:	42 17       	cp	r20, r18
    862a:	53 07       	cpc	r21, r19
    862c:	29 f7       	brne	.-54     	; 0x85f8 <f_close+0x32>
    862e:	ec 01       	movw	r28, r24
    8630:	81 81       	ldd	r24, Z+1	; 0x01
    8632:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    8636:	80 ff       	sbrs	r24, 0
    8638:	02 c0       	rjmp	.+4      	; 0x863e <f_close+0x78>
    863a:	83 e0       	ldi	r24, 0x03	; 3
    863c:	de cf       	rjmp	.-68     	; 0x85fa <f_close+0x34>
    863e:	8c 81       	ldd	r24, Y+4	; 0x04
    8640:	85 ff       	sbrs	r24, 5
    8642:	6a c0       	rjmp	.+212    	; 0x8718 <f_close+0x152>
    8644:	86 ff       	sbrs	r24, 6
    8646:	12 c0       	rjmp	.+36     	; 0x866c <f_close+0xa6>
    8648:	2e 89       	ldd	r18, Y+22	; 0x16
    864a:	3f 89       	ldd	r19, Y+23	; 0x17
    864c:	48 8d       	ldd	r20, Y+24	; 0x18
    864e:	59 8d       	ldd	r21, Y+25	; 0x19
    8650:	e8 81       	ld	r30, Y
    8652:	f9 81       	ldd	r31, Y+1	; 0x01
    8654:	01 e0       	ldi	r16, 0x01	; 1
    8656:	be 01       	movw	r22, r28
    8658:	60 5e       	subi	r22, 0xE0	; 224
    865a:	7f 4f       	sbci	r23, 0xFF	; 255
    865c:	81 81       	ldd	r24, Z+1	; 0x01
    865e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    8662:	81 11       	cpse	r24, r1
    8664:	6c c0       	rjmp	.+216    	; 0x873e <f_close+0x178>
    8666:	8c 81       	ldd	r24, Y+4	; 0x04
    8668:	8f 7b       	andi	r24, 0xBF	; 191
    866a:	8c 83       	std	Y+4, r24	; 0x04
    866c:	4a 8c       	ldd	r4, Y+26	; 0x1a
    866e:	5b 8c       	ldd	r5, Y+27	; 0x1b
    8670:	6c 8c       	ldd	r6, Y+28	; 0x1c
    8672:	7d 8c       	ldd	r7, Y+29	; 0x1d
    8674:	e8 80       	ld	r14, Y
    8676:	f9 80       	ldd	r15, Y+1	; 0x01
    8678:	f7 01       	movw	r30, r14
    867a:	82 a4       	ldd	r8, Z+42	; 0x2a
    867c:	93 a4       	ldd	r9, Z+43	; 0x2b
    867e:	a4 a4       	ldd	r10, Z+44	; 0x2c
    8680:	b5 a4       	ldd	r11, Z+45	; 0x2d
    8682:	48 14       	cp	r4, r8
    8684:	59 04       	cpc	r5, r9
    8686:	6a 04       	cpc	r6, r10
    8688:	7b 04       	cpc	r7, r11
    868a:	49 f0       	breq	.+18     	; 0x869e <f_close+0xd8>
    868c:	84 81       	ldd	r24, Z+4	; 0x04
    868e:	81 11       	cpse	r24, r1
    8690:	47 c0       	rjmp	.+142    	; 0x8720 <f_close+0x15a>
    8692:	41 14       	cp	r4, r1
    8694:	51 04       	cpc	r5, r1
    8696:	61 04       	cpc	r6, r1
    8698:	71 04       	cpc	r7, r1
    869a:	09 f0       	breq	.+2      	; 0x869e <f_close+0xd8>
    869c:	52 c0       	rjmp	.+164    	; 0x8742 <f_close+0x17c>
    869e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    86a0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    86a2:	d8 01       	movw	r26, r16
    86a4:	1b 96       	adiw	r26, 0x0b	; 11
    86a6:	8c 91       	ld	r24, X
    86a8:	1b 97       	sbiw	r26, 0x0b	; 11
    86aa:	80 62       	ori	r24, 0x20	; 32
    86ac:	1b 96       	adiw	r26, 0x0b	; 11
    86ae:	8c 93       	st	X, r24
    86b0:	1b 97       	sbiw	r26, 0x0b	; 11
    86b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    86b4:	5c 96       	adiw	r26, 0x1c	; 28
    86b6:	8c 93       	st	X, r24
    86b8:	5c 97       	sbiw	r26, 0x1c	; 28
    86ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    86bc:	5d 96       	adiw	r26, 0x1d	; 29
    86be:	8c 93       	st	X, r24
    86c0:	5d 97       	sbiw	r26, 0x1d	; 29
    86c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    86c4:	5e 96       	adiw	r26, 0x1e	; 30
    86c6:	8c 93       	st	X, r24
    86c8:	5e 97       	sbiw	r26, 0x1e	; 30
    86ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    86cc:	5f 96       	adiw	r26, 0x1f	; 31
    86ce:	8c 93       	st	X, r24
    86d0:	5f 97       	sbiw	r26, 0x1f	; 31
    86d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    86d4:	5a 96       	adiw	r26, 0x1a	; 26
    86d6:	8c 93       	st	X, r24
    86d8:	5a 97       	sbiw	r26, 0x1a	; 26
    86da:	8f 85       	ldd	r24, Y+15	; 0x0f
    86dc:	5b 96       	adiw	r26, 0x1b	; 27
    86de:	8c 93       	st	X, r24
    86e0:	5b 97       	sbiw	r26, 0x1b	; 27
    86e2:	88 89       	ldd	r24, Y+16	; 0x10
    86e4:	54 96       	adiw	r26, 0x14	; 20
    86e6:	8c 93       	st	X, r24
    86e8:	54 97       	sbiw	r26, 0x14	; 20
    86ea:	89 89       	ldd	r24, Y+17	; 0x11
    86ec:	55 96       	adiw	r26, 0x15	; 21
    86ee:	8c 93       	st	X, r24
    86f0:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <get_fattime>
    86f4:	f8 01       	movw	r30, r16
    86f6:	66 8b       	std	Z+22, r22	; 0x16
    86f8:	77 8b       	std	Z+23, r23	; 0x17
    86fa:	80 8f       	std	Z+24, r24	; 0x18
    86fc:	91 8f       	std	Z+25, r25	; 0x19
    86fe:	8c 81       	ldd	r24, Y+4	; 0x04
    8700:	8f 7d       	andi	r24, 0xDF	; 223
    8702:	8c 83       	std	Y+4, r24	; 0x04
    8704:	e8 81       	ld	r30, Y
    8706:	f9 81       	ldd	r31, Y+1	; 0x01
    8708:	81 e0       	ldi	r24, 0x01	; 1
    870a:	84 83       	std	Z+4, r24	; 0x04
    870c:	88 81       	ld	r24, Y
    870e:	99 81       	ldd	r25, Y+1	; 0x01
    8710:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <sync>
    8714:	81 11       	cpse	r24, r1
    8716:	71 cf       	rjmp	.-286    	; 0x85fa <f_close+0x34>
    8718:	18 82       	st	Y, r1
    871a:	19 82       	std	Y+1, r1	; 0x01
    871c:	80 e0       	ldi	r24, 0x00	; 0
    871e:	6d cf       	rjmp	.-294    	; 0x85fa <f_close+0x34>
    8720:	67 01       	movw	r12, r14
    8722:	fe e2       	ldi	r31, 0x2E	; 46
    8724:	cf 0e       	add	r12, r31
    8726:	d1 1c       	adc	r13, r1
    8728:	01 e0       	ldi	r16, 0x01	; 1
    872a:	a5 01       	movw	r20, r10
    872c:	94 01       	movw	r18, r8
    872e:	b6 01       	movw	r22, r12
    8730:	d7 01       	movw	r26, r14
    8732:	11 96       	adiw	r26, 0x01	; 1
    8734:	8c 91       	ld	r24, X
    8736:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    873a:	88 23       	and	r24, r24
    873c:	a9 f0       	breq	.+42     	; 0x8768 <f_close+0x1a2>
    873e:	81 e0       	ldi	r24, 0x01	; 1
    8740:	5c cf       	rjmp	.-328    	; 0x85fa <f_close+0x34>
    8742:	01 e0       	ldi	r16, 0x01	; 1
    8744:	a3 01       	movw	r20, r6
    8746:	92 01       	movw	r18, r4
    8748:	b7 01       	movw	r22, r14
    874a:	62 5d       	subi	r22, 0xD2	; 210
    874c:	7f 4f       	sbci	r23, 0xFF	; 255
    874e:	d7 01       	movw	r26, r14
    8750:	11 96       	adiw	r26, 0x01	; 1
    8752:	8c 91       	ld	r24, X
    8754:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    8758:	81 11       	cpse	r24, r1
    875a:	f1 cf       	rjmp	.-30     	; 0x873e <f_close+0x178>
    875c:	f7 01       	movw	r30, r14
    875e:	42 a6       	std	Z+42, r4	; 0x2a
    8760:	53 a6       	std	Z+43, r5	; 0x2b
    8762:	64 a6       	std	Z+44, r6	; 0x2c
    8764:	75 a6       	std	Z+45, r7	; 0x2d
    8766:	9b cf       	rjmp	.-202    	; 0x869e <f_close+0xd8>
    8768:	f7 01       	movw	r30, r14
    876a:	14 82       	std	Z+4, r1	; 0x04
    876c:	82 8d       	ldd	r24, Z+26	; 0x1a
    876e:	93 8d       	ldd	r25, Z+27	; 0x1b
    8770:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8772:	b5 8d       	ldd	r27, Z+29	; 0x1d
    8774:	46 8d       	ldd	r20, Z+30	; 0x1e
    8776:	57 8d       	ldd	r21, Z+31	; 0x1f
    8778:	60 a1       	ldd	r22, Z+32	; 0x20
    877a:	71 a1       	ldd	r23, Z+33	; 0x21
    877c:	48 0f       	add	r20, r24
    877e:	59 1f       	adc	r21, r25
    8780:	6a 1f       	adc	r22, r26
    8782:	7b 1f       	adc	r23, r27
    8784:	84 16       	cp	r8, r20
    8786:	95 06       	cpc	r9, r21
    8788:	a6 06       	cpc	r10, r22
    878a:	b7 06       	cpc	r11, r23
    878c:	08 f0       	brcs	.+2      	; 0x8790 <f_close+0x1ca>
    878e:	81 cf       	rjmp	.-254    	; 0x8692 <f_close+0xcc>
    8790:	13 81       	ldd	r17, Z+3	; 0x03
    8792:	12 30       	cpi	r17, 0x02	; 2
    8794:	30 f4       	brcc	.+12     	; 0x87a2 <f_close+0x1dc>
    8796:	7d cf       	rjmp	.-262    	; 0x8692 <f_close+0xcc>
    8798:	f7 01       	movw	r30, r14
    879a:	82 8d       	ldd	r24, Z+26	; 0x1a
    879c:	93 8d       	ldd	r25, Z+27	; 0x1b
    879e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    87a0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    87a2:	88 0e       	add	r8, r24
    87a4:	99 1e       	adc	r9, r25
    87a6:	aa 1e       	adc	r10, r26
    87a8:	bb 1e       	adc	r11, r27
    87aa:	01 e0       	ldi	r16, 0x01	; 1
    87ac:	a5 01       	movw	r20, r10
    87ae:	94 01       	movw	r18, r8
    87b0:	b6 01       	movw	r22, r12
    87b2:	d7 01       	movw	r26, r14
    87b4:	11 96       	adiw	r26, 0x01	; 1
    87b6:	8c 91       	ld	r24, X
    87b8:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    87bc:	11 50       	subi	r17, 0x01	; 1
    87be:	11 30       	cpi	r17, 0x01	; 1
    87c0:	59 f7       	brne	.-42     	; 0x8798 <f_close+0x1d2>
    87c2:	67 cf       	rjmp	.-306    	; 0x8692 <f_close+0xcc>

000087c4 <f_opendir>:
    87c4:	2f 92       	push	r2
    87c6:	3f 92       	push	r3
    87c8:	4f 92       	push	r4
    87ca:	5f 92       	push	r5
    87cc:	6f 92       	push	r6
    87ce:	7f 92       	push	r7
    87d0:	8f 92       	push	r8
    87d2:	9f 92       	push	r9
    87d4:	af 92       	push	r10
    87d6:	bf 92       	push	r11
    87d8:	cf 92       	push	r12
    87da:	df 92       	push	r13
    87dc:	ef 92       	push	r14
    87de:	ff 92       	push	r15
    87e0:	0f 93       	push	r16
    87e2:	1f 93       	push	r17
    87e4:	cf 93       	push	r28
    87e6:	df 93       	push	r29
    87e8:	cd b7       	in	r28, 0x3d	; 61
    87ea:	de b7       	in	r29, 0x3e	; 62
    87ec:	c1 52       	subi	r28, 0x21	; 33
    87ee:	d2 40       	sbci	r29, 0x02	; 2
    87f0:	cd bf       	out	0x3d, r28	; 61
    87f2:	de bf       	out	0x3e, r29	; 62
    87f4:	7c 01       	movw	r14, r24
    87f6:	6b 01       	movw	r12, r22
    87f8:	db 01       	movw	r26, r22
    87fa:	8c 91       	ld	r24, X
    87fc:	08 2e       	mov	r0, r24
    87fe:	00 0c       	add	r0, r0
    8800:	99 0b       	sbc	r25, r25
    8802:	c0 97       	sbiw	r24, 0x30	; 48
    8804:	8a 30       	cpi	r24, 0x0A	; 10
    8806:	91 05       	cpc	r25, r1
    8808:	08 f4       	brcc	.+2      	; 0x880c <f_opendir+0x48>
    880a:	5b c0       	rjmp	.+182    	; 0x88c2 <f_opendir+0xfe>
    880c:	a0 90 ef 29 	lds	r10, 0x29EF	; 0x8029ef <FatFs>
    8810:	b0 90 f0 29 	lds	r11, 0x29F0	; 0x8029f0 <FatFs+0x1>
    8814:	f7 01       	movw	r30, r14
    8816:	a0 82       	st	Z, r10
    8818:	b1 82       	std	Z+1, r11	; 0x01
    881a:	a1 14       	cp	r10, r1
    881c:	b1 04       	cpc	r11, r1
    881e:	09 f4       	brne	.+2      	; 0x8822 <f_opendir+0x5e>
    8820:	7a c0       	rjmp	.+244    	; 0x8916 <f_opendir+0x152>
    8822:	d5 01       	movw	r26, r10
    8824:	8c 91       	ld	r24, X
    8826:	88 23       	and	r24, r24
    8828:	09 f4       	brne	.+2      	; 0x882c <f_opendir+0x68>
    882a:	6b c0       	rjmp	.+214    	; 0x8902 <f_opendir+0x13e>
    882c:	d5 01       	movw	r26, r10
    882e:	11 96       	adiw	r26, 0x01	; 1
    8830:	8c 91       	ld	r24, X
    8832:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    8836:	80 fd       	sbrc	r24, 0
    8838:	64 c0       	rjmp	.+200    	; 0x8902 <f_opendir+0x13e>
    883a:	ce 01       	movw	r24, r28
    883c:	8f 5f       	subi	r24, 0xFF	; 255
    883e:	9d 4f       	sbci	r25, 0xFD	; 253
    8840:	d7 01       	movw	r26, r14
    8842:	54 96       	adiw	r26, 0x14	; 20
    8844:	8d 93       	st	X+, r24
    8846:	9c 93       	st	X, r25
    8848:	55 97       	sbiw	r26, 0x15	; 21
    884a:	92 50       	subi	r25, 0x02	; 2
    884c:	56 96       	adiw	r26, 0x16	; 22
    884e:	8d 93       	st	X+, r24
    8850:	9c 93       	st	X, r25
    8852:	57 97       	sbiw	r26, 0x17	; 23
    8854:	b6 01       	movw	r22, r12
    8856:	c7 01       	movw	r24, r14
    8858:	0e 94 ed 27 	call	0x4fda	; 0x4fda <follow_path>
    885c:	81 11       	cpse	r24, r1
    885e:	2d c0       	rjmp	.+90     	; 0x88ba <f_opendir+0xf6>
    8860:	d7 01       	movw	r26, r14
    8862:	52 96       	adiw	r26, 0x12	; 18
    8864:	ed 91       	ld	r30, X+
    8866:	fc 91       	ld	r31, X
    8868:	53 97       	sbiw	r26, 0x13	; 19
    886a:	30 97       	sbiw	r30, 0x00	; 0
    886c:	b9 f0       	breq	.+46     	; 0x889c <f_opendir+0xd8>
    886e:	83 85       	ldd	r24, Z+11	; 0x0b
    8870:	84 ff       	sbrs	r24, 4
    8872:	25 c0       	rjmp	.+74     	; 0x88be <f_opendir+0xfa>
    8874:	84 89       	ldd	r24, Z+20	; 0x14
    8876:	95 89       	ldd	r25, Z+21	; 0x15
    8878:	a0 e0       	ldi	r26, 0x00	; 0
    887a:	b0 e0       	ldi	r27, 0x00	; 0
    887c:	dc 01       	movw	r26, r24
    887e:	99 27       	eor	r25, r25
    8880:	88 27       	eor	r24, r24
    8882:	42 8d       	ldd	r20, Z+26	; 0x1a
    8884:	53 8d       	ldd	r21, Z+27	; 0x1b
    8886:	60 e0       	ldi	r22, 0x00	; 0
    8888:	70 e0       	ldi	r23, 0x00	; 0
    888a:	84 2b       	or	r24, r20
    888c:	95 2b       	or	r25, r21
    888e:	a6 2b       	or	r26, r22
    8890:	b7 2b       	or	r27, r23
    8892:	f7 01       	movw	r30, r14
    8894:	86 83       	std	Z+6, r24	; 0x06
    8896:	97 83       	std	Z+7, r25	; 0x07
    8898:	a0 87       	std	Z+8, r26	; 0x08
    889a:	b1 87       	std	Z+9, r27	; 0x09
    889c:	d7 01       	movw	r26, r14
    889e:	ed 91       	ld	r30, X+
    88a0:	fc 91       	ld	r31, X
    88a2:	11 97       	sbiw	r26, 0x01	; 1
    88a4:	86 81       	ldd	r24, Z+6	; 0x06
    88a6:	97 81       	ldd	r25, Z+7	; 0x07
    88a8:	12 96       	adiw	r26, 0x02	; 2
    88aa:	8d 93       	st	X+, r24
    88ac:	9c 93       	st	X, r25
    88ae:	13 97       	sbiw	r26, 0x03	; 3
    88b0:	60 e0       	ldi	r22, 0x00	; 0
    88b2:	70 e0       	ldi	r23, 0x00	; 0
    88b4:	c7 01       	movw	r24, r14
    88b6:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
    88ba:	84 30       	cpi	r24, 0x04	; 4
    88bc:	59 f4       	brne	.+22     	; 0x88d4 <f_opendir+0x110>
    88be:	85 e0       	ldi	r24, 0x05	; 5
    88c0:	09 c0       	rjmp	.+18     	; 0x88d4 <f_opendir+0x110>
    88c2:	11 96       	adiw	r26, 0x01	; 1
    88c4:	2c 91       	ld	r18, X
    88c6:	2a 33       	cpi	r18, 0x3A	; 58
    88c8:	09 f0       	breq	.+2      	; 0x88cc <f_opendir+0x108>
    88ca:	a0 cf       	rjmp	.-192    	; 0x880c <f_opendir+0x48>
    88cc:	89 2b       	or	r24, r25
    88ce:	09 f4       	brne	.+2      	; 0x88d2 <f_opendir+0x10e>
    88d0:	60 c2       	rjmp	.+1216   	; 0x8d92 <f_opendir+0x5ce>
    88d2:	8b e0       	ldi	r24, 0x0B	; 11
    88d4:	cf 5d       	subi	r28, 0xDF	; 223
    88d6:	dd 4f       	sbci	r29, 0xFD	; 253
    88d8:	cd bf       	out	0x3d, r28	; 61
    88da:	de bf       	out	0x3e, r29	; 62
    88dc:	df 91       	pop	r29
    88de:	cf 91       	pop	r28
    88e0:	1f 91       	pop	r17
    88e2:	0f 91       	pop	r16
    88e4:	ff 90       	pop	r15
    88e6:	ef 90       	pop	r14
    88e8:	df 90       	pop	r13
    88ea:	cf 90       	pop	r12
    88ec:	bf 90       	pop	r11
    88ee:	af 90       	pop	r10
    88f0:	9f 90       	pop	r9
    88f2:	8f 90       	pop	r8
    88f4:	7f 90       	pop	r7
    88f6:	6f 90       	pop	r6
    88f8:	5f 90       	pop	r5
    88fa:	4f 90       	pop	r4
    88fc:	3f 90       	pop	r3
    88fe:	2f 90       	pop	r2
    8900:	08 95       	ret
    8902:	f5 01       	movw	r30, r10
    8904:	10 82       	st	Z, r1
    8906:	11 82       	std	Z+1, r1	; 0x01
    8908:	80 e0       	ldi	r24, 0x00	; 0
    890a:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <disk_initialize>
    890e:	80 ff       	sbrs	r24, 0
    8910:	04 c0       	rjmp	.+8      	; 0x891a <f_opendir+0x156>
    8912:	83 e0       	ldi	r24, 0x03	; 3
    8914:	df cf       	rjmp	.-66     	; 0x88d4 <f_opendir+0x110>
    8916:	8c e0       	ldi	r24, 0x0C	; 12
    8918:	dd cf       	rjmp	.-70     	; 0x88d4 <f_opendir+0x110>
    891a:	25 01       	movw	r4, r10
    891c:	be e2       	ldi	r27, 0x2E	; 46
    891e:	4b 0e       	add	r4, r27
    8920:	51 1c       	adc	r5, r1
    8922:	01 e0       	ldi	r16, 0x01	; 1
    8924:	20 e0       	ldi	r18, 0x00	; 0
    8926:	30 e0       	ldi	r19, 0x00	; 0
    8928:	a9 01       	movw	r20, r18
    892a:	b2 01       	movw	r22, r4
    892c:	f5 01       	movw	r30, r10
    892e:	81 81       	ldd	r24, Z+1	; 0x01
    8930:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    8934:	88 23       	and	r24, r24
    8936:	11 f0       	breq	.+4      	; 0x893c <f_opendir+0x178>
    8938:	81 e0       	ldi	r24, 0x01	; 1
    893a:	cc cf       	rjmp	.-104    	; 0x88d4 <f_opendir+0x110>
    893c:	15 01       	movw	r2, r10
    893e:	f4 ed       	ldi	r31, 0xD4	; 212
    8940:	2f 1a       	sub	r2, r31
    8942:	fd ef       	ldi	r31, 0xFD	; 253
    8944:	3f 0a       	sbc	r3, r31
    8946:	d1 01       	movw	r26, r2
    8948:	8d 91       	ld	r24, X+
    894a:	9c 91       	ld	r25, X
    894c:	85 35       	cpi	r24, 0x55	; 85
    894e:	9a 4a       	sbci	r25, 0xAA	; 170
    8950:	11 f0       	breq	.+4      	; 0x8956 <f_opendir+0x192>
    8952:	8d e0       	ldi	r24, 0x0D	; 13
    8954:	bf cf       	rjmp	.-130    	; 0x88d4 <f_opendir+0x110>
    8956:	35 01       	movw	r6, r10
    8958:	e4 e6       	ldi	r30, 0x64	; 100
    895a:	6e 0e       	add	r6, r30
    895c:	71 1c       	adc	r7, r1
    895e:	f3 01       	movw	r30, r6
    8960:	80 81       	ld	r24, Z
    8962:	91 81       	ldd	r25, Z+1	; 0x01
    8964:	a2 81       	ldd	r26, Z+2	; 0x02
    8966:	b3 81       	ldd	r27, Z+3	; 0x03
    8968:	bb 27       	eor	r27, r27
    896a:	86 34       	cpi	r24, 0x46	; 70
    896c:	91 44       	sbci	r25, 0x41	; 65
    896e:	a4 45       	sbci	r26, 0x54	; 84
    8970:	b1 05       	cpc	r27, r1
    8972:	09 f4       	brne	.+2      	; 0x8976 <f_opendir+0x1b2>
    8974:	d7 c1       	rjmp	.+942    	; 0x8d24 <f_opendir+0x560>
    8976:	45 01       	movw	r8, r10
    8978:	20 e8       	ldi	r18, 0x80	; 128
    897a:	82 0e       	add	r8, r18
    897c:	91 1c       	adc	r9, r1
    897e:	f4 01       	movw	r30, r8
    8980:	80 81       	ld	r24, Z
    8982:	91 81       	ldd	r25, Z+1	; 0x01
    8984:	a2 81       	ldd	r26, Z+2	; 0x02
    8986:	b3 81       	ldd	r27, Z+3	; 0x03
    8988:	bb 27       	eor	r27, r27
    898a:	86 34       	cpi	r24, 0x46	; 70
    898c:	91 44       	sbci	r25, 0x41	; 65
    898e:	a4 45       	sbci	r26, 0x54	; 84
    8990:	b1 05       	cpc	r27, r1
    8992:	09 f4       	brne	.+2      	; 0x8996 <f_opendir+0x1d2>
    8994:	c7 c1       	rjmp	.+910    	; 0x8d24 <f_opendir+0x560>
    8996:	f5 01       	movw	r30, r10
    8998:	e0 51       	subi	r30, 0x10	; 16
    899a:	fe 4f       	sbci	r31, 0xFE	; 254
    899c:	80 81       	ld	r24, Z
    899e:	88 23       	and	r24, r24
    89a0:	c1 f2       	breq	.-80     	; 0x8952 <f_opendir+0x18e>
    89a2:	f5 01       	movw	r30, r10
    89a4:	ec 50       	subi	r30, 0x0C	; 12
    89a6:	fe 4f       	sbci	r31, 0xFE	; 254
    89a8:	20 81       	ld	r18, Z
    89aa:	31 81       	ldd	r19, Z+1	; 0x01
    89ac:	42 81       	ldd	r20, Z+2	; 0x02
    89ae:	53 81       	ldd	r21, Z+3	; 0x03
    89b0:	c3 5f       	subi	r28, 0xF3	; 243
    89b2:	dd 4f       	sbci	r29, 0xFD	; 253
    89b4:	28 83       	st	Y, r18
    89b6:	39 83       	std	Y+1, r19	; 0x01
    89b8:	4a 83       	std	Y+2, r20	; 0x02
    89ba:	5b 83       	std	Y+3, r21	; 0x03
    89bc:	cd 50       	subi	r28, 0x0D	; 13
    89be:	d2 40       	sbci	r29, 0x02	; 2
    89c0:	01 e0       	ldi	r16, 0x01	; 1
    89c2:	b2 01       	movw	r22, r4
    89c4:	d5 01       	movw	r26, r10
    89c6:	11 96       	adiw	r26, 0x01	; 1
    89c8:	8c 91       	ld	r24, X
    89ca:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    89ce:	81 11       	cpse	r24, r1
    89d0:	b3 cf       	rjmp	.-154    	; 0x8938 <f_opendir+0x174>
    89d2:	f1 01       	movw	r30, r2
    89d4:	80 81       	ld	r24, Z
    89d6:	91 81       	ldd	r25, Z+1	; 0x01
    89d8:	85 35       	cpi	r24, 0x55	; 85
    89da:	9a 4a       	sbci	r25, 0xAA	; 170
    89dc:	09 f0       	breq	.+2      	; 0x89e0 <f_opendir+0x21c>
    89de:	b9 cf       	rjmp	.-142    	; 0x8952 <f_opendir+0x18e>
    89e0:	f3 01       	movw	r30, r6
    89e2:	80 81       	ld	r24, Z
    89e4:	91 81       	ldd	r25, Z+1	; 0x01
    89e6:	a2 81       	ldd	r26, Z+2	; 0x02
    89e8:	b3 81       	ldd	r27, Z+3	; 0x03
    89ea:	bb 27       	eor	r27, r27
    89ec:	86 34       	cpi	r24, 0x46	; 70
    89ee:	91 44       	sbci	r25, 0x41	; 65
    89f0:	a4 45       	sbci	r26, 0x54	; 84
    89f2:	b1 05       	cpc	r27, r1
    89f4:	61 f0       	breq	.+24     	; 0x8a0e <f_opendir+0x24a>
    89f6:	f4 01       	movw	r30, r8
    89f8:	80 81       	ld	r24, Z
    89fa:	91 81       	ldd	r25, Z+1	; 0x01
    89fc:	a2 81       	ldd	r26, Z+2	; 0x02
    89fe:	b3 81       	ldd	r27, Z+3	; 0x03
    8a00:	bb 27       	eor	r27, r27
    8a02:	86 34       	cpi	r24, 0x46	; 70
    8a04:	91 44       	sbci	r25, 0x41	; 65
    8a06:	a4 45       	sbci	r26, 0x54	; 84
    8a08:	b1 05       	cpc	r27, r1
    8a0a:	09 f0       	breq	.+2      	; 0x8a0e <f_opendir+0x24a>
    8a0c:	a2 cf       	rjmp	.-188    	; 0x8952 <f_opendir+0x18e>
    8a0e:	d5 01       	movw	r26, r10
    8a10:	d9 96       	adiw	r26, 0x39	; 57
    8a12:	8d 91       	ld	r24, X+
    8a14:	9c 91       	ld	r25, X
    8a16:	da 97       	sbiw	r26, 0x3a	; 58
    8a18:	81 15       	cp	r24, r1
    8a1a:	92 40       	sbci	r25, 0x02	; 2
    8a1c:	09 f0       	breq	.+2      	; 0x8a20 <f_opendir+0x25c>
    8a1e:	99 cf       	rjmp	.-206    	; 0x8952 <f_opendir+0x18e>
    8a20:	f5 01       	movw	r30, r10
    8a22:	ec 5b       	subi	r30, 0xBC	; 188
    8a24:	ff 4f       	sbci	r31, 0xFF	; 255
    8a26:	80 81       	ld	r24, Z
    8a28:	91 81       	ldd	r25, Z+1	; 0x01
    8a2a:	00 97       	sbiw	r24, 0x00	; 0
    8a2c:	09 f4       	brne	.+2      	; 0x8a30 <f_opendir+0x26c>
    8a2e:	6a c1       	rjmp	.+724    	; 0x8d04 <f_opendir+0x540>
    8a30:	3c 01       	movw	r6, r24
    8a32:	81 2c       	mov	r8, r1
    8a34:	91 2c       	mov	r9, r1
    8a36:	cf 5e       	subi	r28, 0xEF	; 239
    8a38:	dd 4f       	sbci	r29, 0xFD	; 253
    8a3a:	68 82       	st	Y, r6
    8a3c:	79 82       	std	Y+1, r7	; 0x01
    8a3e:	8a 82       	std	Y+2, r8	; 0x02
    8a40:	9b 82       	std	Y+3, r9	; 0x03
    8a42:	c1 51       	subi	r28, 0x11	; 17
    8a44:	d2 40       	sbci	r29, 0x02	; 2
    8a46:	d5 01       	movw	r26, r10
    8a48:	5a 96       	adiw	r26, 0x1a	; 26
    8a4a:	6d 92       	st	X+, r6
    8a4c:	7d 92       	st	X+, r7
    8a4e:	8d 92       	st	X+, r8
    8a50:	9c 92       	st	X, r9
    8a52:	5d 97       	sbiw	r26, 0x1d	; 29
    8a54:	de 96       	adiw	r26, 0x3e	; 62
    8a56:	ac 91       	ld	r26, X
    8a58:	f5 01       	movw	r30, r10
    8a5a:	a3 83       	std	Z+3, r26	; 0x03
    8a5c:	8f ef       	ldi	r24, 0xFF	; 255
    8a5e:	8a 0f       	add	r24, r26
    8a60:	82 30       	cpi	r24, 0x02	; 2
    8a62:	08 f0       	brcs	.+2      	; 0x8a66 <f_opendir+0x2a2>
    8a64:	76 cf       	rjmp	.-276    	; 0x8952 <f_opendir+0x18e>
    8a66:	f3 ad       	ldd	r31, Z+59	; 0x3b
    8a68:	c7 5e       	subi	r28, 0xE7	; 231
    8a6a:	dd 4f       	sbci	r29, 0xFD	; 253
    8a6c:	f8 83       	st	Y, r31
    8a6e:	c9 51       	subi	r28, 0x19	; 25
    8a70:	d2 40       	sbci	r29, 0x02	; 2
    8a72:	6f 2e       	mov	r6, r31
    8a74:	f5 01       	movw	r30, r10
    8a76:	62 82       	std	Z+2, r6	; 0x02
    8a78:	66 20       	and	r6, r6
    8a7a:	09 f4       	brne	.+2      	; 0x8a7e <f_opendir+0x2ba>
    8a7c:	6a cf       	rjmp	.-300    	; 0x8952 <f_opendir+0x18e>
    8a7e:	86 2d       	mov	r24, r6
    8a80:	90 e0       	ldi	r25, 0x00	; 0
    8a82:	9c 01       	movw	r18, r24
    8a84:	21 50       	subi	r18, 0x01	; 1
    8a86:	31 09       	sbc	r19, r1
    8a88:	82 23       	and	r24, r18
    8a8a:	93 23       	and	r25, r19
    8a8c:	89 2b       	or	r24, r25
    8a8e:	09 f0       	breq	.+2      	; 0x8a92 <f_opendir+0x2ce>
    8a90:	60 cf       	rjmp	.-320    	; 0x8952 <f_opendir+0x18e>
    8a92:	ff 96       	adiw	r30, 0x3f	; 63
    8a94:	00 81       	ld	r16, Z
    8a96:	11 81       	ldd	r17, Z+1	; 0x01
    8a98:	f5 01       	movw	r30, r10
    8a9a:	00 87       	std	Z+8, r16	; 0x08
    8a9c:	11 87       	std	Z+9, r17	; 0x09
    8a9e:	c8 01       	movw	r24, r16
    8aa0:	8f 70       	andi	r24, 0x0F	; 15
    8aa2:	99 27       	eor	r25, r25
    8aa4:	89 2b       	or	r24, r25
    8aa6:	09 f0       	breq	.+2      	; 0x8aaa <f_opendir+0x2e6>
    8aa8:	54 cf       	rjmp	.-344    	; 0x8952 <f_opendir+0x18e>
    8aaa:	ef 5b       	subi	r30, 0xBF	; 191
    8aac:	ff 4f       	sbci	r31, 0xFF	; 255
    8aae:	80 81       	ld	r24, Z
    8ab0:	91 81       	ldd	r25, Z+1	; 0x01
    8ab2:	3c 01       	movw	r6, r24
    8ab4:	81 2c       	mov	r8, r1
    8ab6:	91 2c       	mov	r9, r1
    8ab8:	89 2b       	or	r24, r25
    8aba:	29 f4       	brne	.+10     	; 0x8ac6 <f_opendir+0x302>
    8abc:	3d 96       	adiw	r30, 0x0d	; 13
    8abe:	60 80       	ld	r6, Z
    8ac0:	71 80       	ldd	r7, Z+1	; 0x01
    8ac2:	82 80       	ldd	r8, Z+2	; 0x02
    8ac4:	93 80       	ldd	r9, Z+3	; 0x03
    8ac6:	f5 01       	movw	r30, r10
    8ac8:	04 ac       	ldd	r0, Z+60	; 0x3c
    8aca:	f5 ad       	ldd	r31, Z+61	; 0x3d
    8acc:	e0 2d       	mov	r30, r0
    8ace:	30 97       	sbiw	r30, 0x00	; 0
    8ad0:	09 f4       	brne	.+2      	; 0x8ad4 <f_opendir+0x310>
    8ad2:	3f cf       	rjmp	.-386    	; 0x8952 <f_opendir+0x18e>
    8ad4:	b0 e0       	ldi	r27, 0x00	; 0
    8ad6:	cf 5e       	subi	r28, 0xEF	; 239
    8ad8:	dd 4f       	sbci	r29, 0xFD	; 253
    8ada:	28 81       	ld	r18, Y
    8adc:	39 81       	ldd	r19, Y+1	; 0x01
    8ade:	4a 81       	ldd	r20, Y+2	; 0x02
    8ae0:	5b 81       	ldd	r21, Y+3	; 0x03
    8ae2:	c1 51       	subi	r28, 0x11	; 17
    8ae4:	d2 40       	sbci	r29, 0x02	; 2
    8ae6:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    8aea:	c2 5e       	subi	r28, 0xE2	; 226
    8aec:	dd 4f       	sbci	r29, 0xFD	; 253
    8aee:	68 83       	st	Y, r22
    8af0:	79 83       	std	Y+1, r23	; 0x01
    8af2:	8a 83       	std	Y+2, r24	; 0x02
    8af4:	9b 83       	std	Y+3, r25	; 0x03
    8af6:	ce 51       	subi	r28, 0x1E	; 30
    8af8:	d2 40       	sbci	r29, 0x02	; 2
    8afa:	9f 01       	movw	r18, r30
    8afc:	40 e0       	ldi	r20, 0x00	; 0
    8afe:	50 e0       	ldi	r21, 0x00	; 0
    8b00:	c6 5e       	subi	r28, 0xE6	; 230
    8b02:	dd 4f       	sbci	r29, 0xFD	; 253
    8b04:	28 83       	st	Y, r18
    8b06:	39 83       	std	Y+1, r19	; 0x01
    8b08:	4a 83       	std	Y+2, r20	; 0x02
    8b0a:	5b 83       	std	Y+3, r21	; 0x03
    8b0c:	ca 51       	subi	r28, 0x1A	; 26
    8b0e:	d2 40       	sbci	r29, 0x02	; 2
    8b10:	c8 01       	movw	r24, r16
    8b12:	92 95       	swap	r25
    8b14:	82 95       	swap	r24
    8b16:	8f 70       	andi	r24, 0x0F	; 15
    8b18:	89 27       	eor	r24, r25
    8b1a:	9f 70       	andi	r25, 0x0F	; 15
    8b1c:	89 27       	eor	r24, r25
    8b1e:	28 0f       	add	r18, r24
    8b20:	39 1f       	adc	r19, r25
    8b22:	41 1d       	adc	r20, r1
    8b24:	51 1d       	adc	r21, r1
    8b26:	da 01       	movw	r26, r20
    8b28:	c9 01       	movw	r24, r18
    8b2a:	c2 5e       	subi	r28, 0xE2	; 226
    8b2c:	dd 4f       	sbci	r29, 0xFD	; 253
    8b2e:	28 81       	ld	r18, Y
    8b30:	39 81       	ldd	r19, Y+1	; 0x01
    8b32:	4a 81       	ldd	r20, Y+2	; 0x02
    8b34:	5b 81       	ldd	r21, Y+3	; 0x03
    8b36:	ce 51       	subi	r28, 0x1E	; 30
    8b38:	d2 40       	sbci	r29, 0x02	; 2
    8b3a:	28 0f       	add	r18, r24
    8b3c:	39 1f       	adc	r19, r25
    8b3e:	4a 1f       	adc	r20, r26
    8b40:	5b 1f       	adc	r21, r27
    8b42:	cb 5e       	subi	r28, 0xEB	; 235
    8b44:	dd 4f       	sbci	r29, 0xFD	; 253
    8b46:	28 83       	st	Y, r18
    8b48:	39 83       	std	Y+1, r19	; 0x01
    8b4a:	4a 83       	std	Y+2, r20	; 0x02
    8b4c:	5b 83       	std	Y+3, r21	; 0x03
    8b4e:	c5 51       	subi	r28, 0x15	; 21
    8b50:	d2 40       	sbci	r29, 0x02	; 2
    8b52:	62 16       	cp	r6, r18
    8b54:	73 06       	cpc	r7, r19
    8b56:	84 06       	cpc	r8, r20
    8b58:	95 06       	cpc	r9, r21
    8b5a:	08 f4       	brcc	.+2      	; 0x8b5e <f_opendir+0x39a>
    8b5c:	fa ce       	rjmp	.-524    	; 0x8952 <f_opendir+0x18e>
    8b5e:	c4 01       	movw	r24, r8
    8b60:	b3 01       	movw	r22, r6
    8b62:	62 1b       	sub	r22, r18
    8b64:	73 0b       	sbc	r23, r19
    8b66:	84 0b       	sbc	r24, r20
    8b68:	95 0b       	sbc	r25, r21
    8b6a:	c7 5e       	subi	r28, 0xE7	; 231
    8b6c:	dd 4f       	sbci	r29, 0xFD	; 253
    8b6e:	e8 81       	ld	r30, Y
    8b70:	c9 51       	subi	r28, 0x19	; 25
    8b72:	d2 40       	sbci	r29, 0x02	; 2
    8b74:	2e 2f       	mov	r18, r30
    8b76:	30 e0       	ldi	r19, 0x00	; 0
    8b78:	40 e0       	ldi	r20, 0x00	; 0
    8b7a:	50 e0       	ldi	r21, 0x00	; 0
    8b7c:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    8b80:	21 15       	cp	r18, r1
    8b82:	31 05       	cpc	r19, r1
    8b84:	41 05       	cpc	r20, r1
    8b86:	51 05       	cpc	r21, r1
    8b88:	09 f4       	brne	.+2      	; 0x8b8c <f_opendir+0x3c8>
    8b8a:	e3 ce       	rjmp	.-570    	; 0x8952 <f_opendir+0x18e>
    8b8c:	26 3f       	cpi	r18, 0xF6	; 246
    8b8e:	ff e0       	ldi	r31, 0x0F	; 15
    8b90:	3f 07       	cpc	r19, r31
    8b92:	41 05       	cpc	r20, r1
    8b94:	51 05       	cpc	r21, r1
    8b96:	08 f4       	brcc	.+2      	; 0x8b9a <f_opendir+0x3d6>
    8b98:	78 c1       	rjmp	.+752    	; 0x8e8a <f_opendir+0x6c6>
    8b9a:	26 3f       	cpi	r18, 0xF6	; 246
    8b9c:	8f ef       	ldi	r24, 0xFF	; 255
    8b9e:	38 07       	cpc	r19, r24
    8ba0:	41 05       	cpc	r20, r1
    8ba2:	51 05       	cpc	r21, r1
    8ba4:	08 f4       	brcc	.+2      	; 0x8ba8 <f_opendir+0x3e4>
    8ba6:	f9 c0       	rjmp	.+498    	; 0x8d9a <f_opendir+0x5d6>
    8ba8:	ba 01       	movw	r22, r20
    8baa:	a9 01       	movw	r20, r18
    8bac:	4e 5f       	subi	r20, 0xFE	; 254
    8bae:	5f 4f       	sbci	r21, 0xFF	; 255
    8bb0:	6f 4f       	sbci	r22, 0xFF	; 255
    8bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb4:	d5 01       	movw	r26, r10
    8bb6:	56 96       	adiw	r26, 0x16	; 22
    8bb8:	4d 93       	st	X+, r20
    8bba:	5d 93       	st	X+, r21
    8bbc:	6d 93       	st	X+, r22
    8bbe:	7c 93       	st	X, r23
    8bc0:	59 97       	sbiw	r26, 0x19	; 25
    8bc2:	cb 5e       	subi	r28, 0xEB	; 235
    8bc4:	dd 4f       	sbci	r29, 0xFD	; 253
    8bc6:	88 81       	ld	r24, Y
    8bc8:	99 81       	ldd	r25, Y+1	; 0x01
    8bca:	aa 81       	ldd	r26, Y+2	; 0x02
    8bcc:	bb 81       	ldd	r27, Y+3	; 0x03
    8bce:	c5 51       	subi	r28, 0x15	; 21
    8bd0:	d2 40       	sbci	r29, 0x02	; 2
    8bd2:	c3 5f       	subi	r28, 0xF3	; 243
    8bd4:	dd 4f       	sbci	r29, 0xFD	; 253
    8bd6:	68 80       	ld	r6, Y
    8bd8:	79 80       	ldd	r7, Y+1	; 0x01
    8bda:	8a 80       	ldd	r8, Y+2	; 0x02
    8bdc:	9b 80       	ldd	r9, Y+3	; 0x03
    8bde:	cd 50       	subi	r28, 0x0D	; 13
    8be0:	d2 40       	sbci	r29, 0x02	; 2
    8be2:	86 0d       	add	r24, r6
    8be4:	97 1d       	adc	r25, r7
    8be6:	a8 1d       	adc	r26, r8
    8be8:	b9 1d       	adc	r27, r9
    8bea:	f5 01       	movw	r30, r10
    8bec:	86 a3       	std	Z+38, r24	; 0x26
    8bee:	97 a3       	std	Z+39, r25	; 0x27
    8bf0:	a0 a7       	std	Z+40, r26	; 0x28
    8bf2:	b1 a7       	std	Z+41, r27	; 0x29
    8bf4:	c6 5e       	subi	r28, 0xE6	; 230
    8bf6:	dd 4f       	sbci	r29, 0xFD	; 253
    8bf8:	88 81       	ld	r24, Y
    8bfa:	99 81       	ldd	r25, Y+1	; 0x01
    8bfc:	aa 81       	ldd	r26, Y+2	; 0x02
    8bfe:	bb 81       	ldd	r27, Y+3	; 0x03
    8c00:	ca 51       	subi	r28, 0x1A	; 26
    8c02:	d2 40       	sbci	r29, 0x02	; 2
    8c04:	86 0d       	add	r24, r6
    8c06:	97 1d       	adc	r25, r7
    8c08:	a8 1d       	adc	r26, r8
    8c0a:	b9 1d       	adc	r27, r9
    8c0c:	86 8f       	std	Z+30, r24	; 0x1e
    8c0e:	97 8f       	std	Z+31, r25	; 0x1f
    8c10:	a0 a3       	std	Z+32, r26	; 0x20
    8c12:	b1 a3       	std	Z+33, r27	; 0x21
    8c14:	01 2b       	or	r16, r17
    8c16:	09 f0       	breq	.+2      	; 0x8c1a <f_opendir+0x456>
    8c18:	9c ce       	rjmp	.-712    	; 0x8952 <f_opendir+0x18e>
    8c1a:	f5 01       	movw	r30, r10
    8c1c:	e6 5a       	subi	r30, 0xA6	; 166
    8c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    8c20:	80 81       	ld	r24, Z
    8c22:	91 81       	ldd	r25, Z+1	; 0x01
    8c24:	a2 81       	ldd	r26, Z+2	; 0x02
    8c26:	b3 81       	ldd	r27, Z+3	; 0x03
    8c28:	f5 01       	movw	r30, r10
    8c2a:	82 a3       	std	Z+34, r24	; 0x22
    8c2c:	93 a3       	std	Z+35, r25	; 0x23
    8c2e:	a4 a3       	std	Z+36, r26	; 0x24
    8c30:	b5 a3       	std	Z+37, r27	; 0x25
    8c32:	db 01       	movw	r26, r22
    8c34:	ca 01       	movw	r24, r20
    8c36:	88 0f       	add	r24, r24
    8c38:	99 1f       	adc	r25, r25
    8c3a:	aa 1f       	adc	r26, r26
    8c3c:	bb 1f       	adc	r27, r27
    8c3e:	88 0f       	add	r24, r24
    8c40:	99 1f       	adc	r25, r25
    8c42:	aa 1f       	adc	r26, r26
    8c44:	bb 1f       	adc	r27, r27
    8c46:	81 50       	subi	r24, 0x01	; 1
    8c48:	9e 4f       	sbci	r25, 0xFE	; 254
    8c4a:	af 4f       	sbci	r26, 0xFF	; 255
    8c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    8c4e:	69 e0       	ldi	r22, 0x09	; 9
    8c50:	b6 95       	lsr	r27
    8c52:	a7 95       	ror	r26
    8c54:	97 95       	ror	r25
    8c56:	87 95       	ror	r24
    8c58:	6a 95       	dec	r22
    8c5a:	d1 f7       	brne	.-12     	; 0x8c50 <f_opendir+0x48c>
    8c5c:	cf 5e       	subi	r28, 0xEF	; 239
    8c5e:	dd 4f       	sbci	r29, 0xFD	; 253
    8c60:	68 80       	ld	r6, Y
    8c62:	79 80       	ldd	r7, Y+1	; 0x01
    8c64:	8a 80       	ldd	r8, Y+2	; 0x02
    8c66:	9b 80       	ldd	r9, Y+3	; 0x03
    8c68:	c1 51       	subi	r28, 0x11	; 17
    8c6a:	d2 40       	sbci	r29, 0x02	; 2
    8c6c:	68 16       	cp	r6, r24
    8c6e:	79 06       	cpc	r7, r25
    8c70:	8a 06       	cpc	r8, r26
    8c72:	9b 06       	cpc	r9, r27
    8c74:	08 f4       	brcc	.+2      	; 0x8c78 <f_opendir+0x4b4>
    8c76:	6d ce       	rjmp	.-806    	; 0x8952 <f_opendir+0x18e>
    8c78:	8f ef       	ldi	r24, 0xFF	; 255
    8c7a:	9f ef       	ldi	r25, 0xFF	; 255
    8c7c:	dc 01       	movw	r26, r24
    8c7e:	f5 01       	movw	r30, r10
    8c80:	86 87       	std	Z+14, r24	; 0x0e
    8c82:	97 87       	std	Z+15, r25	; 0x0f
    8c84:	a0 8b       	std	Z+16, r26	; 0x10
    8c86:	b1 8b       	std	Z+17, r27	; 0x11
    8c88:	12 86       	std	Z+10, r1	; 0x0a
    8c8a:	13 86       	std	Z+11, r1	; 0x0b
    8c8c:	14 86       	std	Z+12, r1	; 0x0c
    8c8e:	15 86       	std	Z+13, r1	; 0x0d
    8c90:	15 82       	std	Z+5, r1	; 0x05
    8c92:	e2 5a       	subi	r30, 0xA2	; 162
    8c94:	ff 4f       	sbci	r31, 0xFF	; 255
    8c96:	80 81       	ld	r24, Z
    8c98:	91 81       	ldd	r25, Z+1	; 0x01
    8c9a:	c3 5f       	subi	r28, 0xF3	; 243
    8c9c:	dd 4f       	sbci	r29, 0xFD	; 253
    8c9e:	28 81       	ld	r18, Y
    8ca0:	39 81       	ldd	r19, Y+1	; 0x01
    8ca2:	4a 81       	ldd	r20, Y+2	; 0x02
    8ca4:	5b 81       	ldd	r21, Y+3	; 0x03
    8ca6:	cd 50       	subi	r28, 0x0D	; 13
    8ca8:	d2 40       	sbci	r29, 0x02	; 2
    8caa:	28 0f       	add	r18, r24
    8cac:	39 1f       	adc	r19, r25
    8cae:	41 1d       	adc	r20, r1
    8cb0:	51 1d       	adc	r21, r1
    8cb2:	f5 01       	movw	r30, r10
    8cb4:	22 8b       	std	Z+18, r18	; 0x12
    8cb6:	33 8b       	std	Z+19, r19	; 0x13
    8cb8:	44 8b       	std	Z+20, r20	; 0x14
    8cba:	55 8b       	std	Z+21, r21	; 0x15
    8cbc:	01 e0       	ldi	r16, 0x01	; 1
    8cbe:	b2 01       	movw	r22, r4
    8cc0:	81 81       	ldd	r24, Z+1	; 0x01
    8cc2:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    8cc6:	81 11       	cpse	r24, r1
    8cc8:	06 c0       	rjmp	.+12     	; 0x8cd6 <f_opendir+0x512>
    8cca:	f1 01       	movw	r30, r2
    8ccc:	80 81       	ld	r24, Z
    8cce:	91 81       	ldd	r25, Z+1	; 0x01
    8cd0:	85 35       	cpi	r24, 0x55	; 85
    8cd2:	9a 4a       	sbci	r25, 0xAA	; 170
    8cd4:	81 f1       	breq	.+96     	; 0x8d36 <f_opendir+0x572>
    8cd6:	83 e0       	ldi	r24, 0x03	; 3
    8cd8:	d5 01       	movw	r26, r10
    8cda:	8c 93       	st	X, r24
    8cdc:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <Fsid>
    8ce0:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <Fsid+0x1>
    8ce4:	01 96       	adiw	r24, 0x01	; 1
    8ce6:	80 93 ed 29 	sts	0x29ED, r24	; 0x8029ed <Fsid>
    8cea:	90 93 ee 29 	sts	0x29EE, r25	; 0x8029ee <Fsid+0x1>
    8cee:	16 96       	adiw	r26, 0x06	; 6
    8cf0:	8d 93       	st	X+, r24
    8cf2:	9c 93       	st	X, r25
    8cf4:	17 97       	sbiw	r26, 0x07	; 7
    8cf6:	f5 01       	movw	r30, r10
    8cf8:	12 a6       	std	Z+42, r1	; 0x2a
    8cfa:	13 a6       	std	Z+43, r1	; 0x2b
    8cfc:	14 a6       	std	Z+44, r1	; 0x2c
    8cfe:	15 a6       	std	Z+45, r1	; 0x2d
    8d00:	14 82       	std	Z+4, r1	; 0x04
    8d02:	9b cd       	rjmp	.-1226   	; 0x883a <f_opendir+0x76>
    8d04:	f5 01       	movw	r30, r10
    8d06:	ee 5a       	subi	r30, 0xAE	; 174
    8d08:	ff 4f       	sbci	r31, 0xFF	; 255
    8d0a:	60 80       	ld	r6, Z
    8d0c:	71 80       	ldd	r7, Z+1	; 0x01
    8d0e:	82 80       	ldd	r8, Z+2	; 0x02
    8d10:	93 80       	ldd	r9, Z+3	; 0x03
    8d12:	cf 5e       	subi	r28, 0xEF	; 239
    8d14:	dd 4f       	sbci	r29, 0xFD	; 253
    8d16:	68 82       	st	Y, r6
    8d18:	79 82       	std	Y+1, r7	; 0x01
    8d1a:	8a 82       	std	Y+2, r8	; 0x02
    8d1c:	9b 82       	std	Y+3, r9	; 0x03
    8d1e:	c1 51       	subi	r28, 0x11	; 17
    8d20:	d2 40       	sbci	r29, 0x02	; 2
    8d22:	91 ce       	rjmp	.-734    	; 0x8a46 <f_opendir+0x282>
    8d24:	c3 5f       	subi	r28, 0xF3	; 243
    8d26:	dd 4f       	sbci	r29, 0xFD	; 253
    8d28:	18 82       	st	Y, r1
    8d2a:	19 82       	std	Y+1, r1	; 0x01
    8d2c:	1a 82       	std	Y+2, r1	; 0x02
    8d2e:	1b 82       	std	Y+3, r1	; 0x03
    8d30:	cd 50       	subi	r28, 0x0D	; 13
    8d32:	d2 40       	sbci	r29, 0x02	; 2
    8d34:	6c ce       	rjmp	.-808    	; 0x8a0e <f_opendir+0x24a>
    8d36:	f5 01       	movw	r30, r10
    8d38:	86 a5       	ldd	r24, Z+46	; 0x2e
    8d3a:	97 a5       	ldd	r25, Z+47	; 0x2f
    8d3c:	a0 a9       	ldd	r26, Z+48	; 0x30
    8d3e:	b1 a9       	ldd	r27, Z+49	; 0x31
    8d40:	82 35       	cpi	r24, 0x52	; 82
    8d42:	92 45       	sbci	r25, 0x52	; 82
    8d44:	a1 46       	sbci	r26, 0x61	; 97
    8d46:	b1 44       	sbci	r27, 0x41	; 65
    8d48:	31 f6       	brne	.-116    	; 0x8cd6 <f_opendir+0x512>
    8d4a:	f5 01       	movw	r30, r10
    8d4c:	ee 5e       	subi	r30, 0xEE	; 238
    8d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    8d50:	80 81       	ld	r24, Z
    8d52:	91 81       	ldd	r25, Z+1	; 0x01
    8d54:	a2 81       	ldd	r26, Z+2	; 0x02
    8d56:	b3 81       	ldd	r27, Z+3	; 0x03
    8d58:	82 37       	cpi	r24, 0x72	; 114
    8d5a:	92 47       	sbci	r25, 0x72	; 114
    8d5c:	a1 44       	sbci	r26, 0x41	; 65
    8d5e:	b1 46       	sbci	r27, 0x61	; 97
    8d60:	09 f0       	breq	.+2      	; 0x8d64 <f_opendir+0x5a0>
    8d62:	b9 cf       	rjmp	.-142    	; 0x8cd6 <f_opendir+0x512>
    8d64:	38 96       	adiw	r30, 0x08	; 8
    8d66:	80 81       	ld	r24, Z
    8d68:	91 81       	ldd	r25, Z+1	; 0x01
    8d6a:	a2 81       	ldd	r26, Z+2	; 0x02
    8d6c:	b3 81       	ldd	r27, Z+3	; 0x03
    8d6e:	f5 01       	movw	r30, r10
    8d70:	82 87       	std	Z+10, r24	; 0x0a
    8d72:	93 87       	std	Z+11, r25	; 0x0b
    8d74:	a4 87       	std	Z+12, r26	; 0x0c
    8d76:	b5 87       	std	Z+13, r27	; 0x0d
    8d78:	ea 5e       	subi	r30, 0xEA	; 234
    8d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    8d7c:	80 81       	ld	r24, Z
    8d7e:	91 81       	ldd	r25, Z+1	; 0x01
    8d80:	a2 81       	ldd	r26, Z+2	; 0x02
    8d82:	b3 81       	ldd	r27, Z+3	; 0x03
    8d84:	f5 01       	movw	r30, r10
    8d86:	86 87       	std	Z+14, r24	; 0x0e
    8d88:	97 87       	std	Z+15, r25	; 0x0f
    8d8a:	a0 8b       	std	Z+16, r26	; 0x10
    8d8c:	b1 8b       	std	Z+17, r27	; 0x11
    8d8e:	83 e0       	ldi	r24, 0x03	; 3
    8d90:	a3 cf       	rjmp	.-186    	; 0x8cd8 <f_opendir+0x514>
    8d92:	b2 e0       	ldi	r27, 0x02	; 2
    8d94:	cb 0e       	add	r12, r27
    8d96:	d1 1c       	adc	r13, r1
    8d98:	39 cd       	rjmp	.-1422   	; 0x880c <f_opendir+0x48>
    8d9a:	29 01       	movw	r4, r18
    8d9c:	3a 01       	movw	r6, r20
    8d9e:	82 e0       	ldi	r24, 0x02	; 2
    8da0:	48 0e       	add	r4, r24
    8da2:	51 1c       	adc	r5, r1
    8da4:	61 1c       	adc	r6, r1
    8da6:	71 1c       	adc	r7, r1
    8da8:	d5 01       	movw	r26, r10
    8daa:	56 96       	adiw	r26, 0x16	; 22
    8dac:	4d 92       	st	X+, r4
    8dae:	5d 92       	st	X+, r5
    8db0:	6d 92       	st	X+, r6
    8db2:	7c 92       	st	X, r7
    8db4:	59 97       	sbiw	r26, 0x19	; 25
    8db6:	cb 5e       	subi	r28, 0xEB	; 235
    8db8:	dd 4f       	sbci	r29, 0xFD	; 253
    8dba:	88 81       	ld	r24, Y
    8dbc:	99 81       	ldd	r25, Y+1	; 0x01
    8dbe:	aa 81       	ldd	r26, Y+2	; 0x02
    8dc0:	bb 81       	ldd	r27, Y+3	; 0x03
    8dc2:	c5 51       	subi	r28, 0x15	; 21
    8dc4:	d2 40       	sbci	r29, 0x02	; 2
    8dc6:	c3 5f       	subi	r28, 0xF3	; 243
    8dc8:	dd 4f       	sbci	r29, 0xFD	; 253
    8dca:	28 81       	ld	r18, Y
    8dcc:	39 81       	ldd	r19, Y+1	; 0x01
    8dce:	4a 81       	ldd	r20, Y+2	; 0x02
    8dd0:	5b 81       	ldd	r21, Y+3	; 0x03
    8dd2:	cd 50       	subi	r28, 0x0D	; 13
    8dd4:	d2 40       	sbci	r29, 0x02	; 2
    8dd6:	82 0f       	add	r24, r18
    8dd8:	93 1f       	adc	r25, r19
    8dda:	a4 1f       	adc	r26, r20
    8ddc:	b5 1f       	adc	r27, r21
    8dde:	f5 01       	movw	r30, r10
    8de0:	86 a3       	std	Z+38, r24	; 0x26
    8de2:	97 a3       	std	Z+39, r25	; 0x27
    8de4:	a0 a7       	std	Z+40, r26	; 0x28
    8de6:	b1 a7       	std	Z+41, r27	; 0x29
    8de8:	c6 5e       	subi	r28, 0xE6	; 230
    8dea:	dd 4f       	sbci	r29, 0xFD	; 253
    8dec:	88 81       	ld	r24, Y
    8dee:	99 81       	ldd	r25, Y+1	; 0x01
    8df0:	aa 81       	ldd	r26, Y+2	; 0x02
    8df2:	bb 81       	ldd	r27, Y+3	; 0x03
    8df4:	ca 51       	subi	r28, 0x1A	; 26
    8df6:	d2 40       	sbci	r29, 0x02	; 2
    8df8:	82 0f       	add	r24, r18
    8dfa:	93 1f       	adc	r25, r19
    8dfc:	a4 1f       	adc	r26, r20
    8dfe:	b5 1f       	adc	r27, r21
    8e00:	86 8f       	std	Z+30, r24	; 0x1e
    8e02:	97 8f       	std	Z+31, r25	; 0x1f
    8e04:	a0 a3       	std	Z+32, r26	; 0x20
    8e06:	b1 a3       	std	Z+33, r27	; 0x21
    8e08:	01 2b       	or	r16, r17
    8e0a:	09 f4       	brne	.+2      	; 0x8e0e <f_opendir+0x64a>
    8e0c:	a2 cd       	rjmp	.-1212   	; 0x8952 <f_opendir+0x18e>
    8e0e:	c2 5e       	subi	r28, 0xE2	; 226
    8e10:	dd 4f       	sbci	r29, 0xFD	; 253
    8e12:	28 81       	ld	r18, Y
    8e14:	39 81       	ldd	r19, Y+1	; 0x01
    8e16:	4a 81       	ldd	r20, Y+2	; 0x02
    8e18:	5b 81       	ldd	r21, Y+3	; 0x03
    8e1a:	ce 51       	subi	r28, 0x1E	; 30
    8e1c:	d2 40       	sbci	r29, 0x02	; 2
    8e1e:	82 0f       	add	r24, r18
    8e20:	93 1f       	adc	r25, r19
    8e22:	a4 1f       	adc	r26, r20
    8e24:	b5 1f       	adc	r27, r21
    8e26:	f5 01       	movw	r30, r10
    8e28:	82 a3       	std	Z+34, r24	; 0x22
    8e2a:	93 a3       	std	Z+35, r25	; 0x23
    8e2c:	a4 a3       	std	Z+36, r26	; 0x24
    8e2e:	b5 a3       	std	Z+37, r27	; 0x25
    8e30:	44 0c       	add	r4, r4
    8e32:	55 1c       	adc	r5, r5
    8e34:	66 1c       	adc	r6, r6
    8e36:	77 1c       	adc	r7, r7
    8e38:	ff ef       	ldi	r31, 0xFF	; 255
    8e3a:	4f 0e       	add	r4, r31
    8e3c:	f1 e0       	ldi	r31, 0x01	; 1
    8e3e:	5f 1e       	adc	r5, r31
    8e40:	61 1c       	adc	r6, r1
    8e42:	71 1c       	adc	r7, r1
    8e44:	99 e0       	ldi	r25, 0x09	; 9
    8e46:	76 94       	lsr	r7
    8e48:	67 94       	ror	r6
    8e4a:	57 94       	ror	r5
    8e4c:	47 94       	ror	r4
    8e4e:	9a 95       	dec	r25
    8e50:	d1 f7       	brne	.-12     	; 0x8e46 <f_opendir+0x682>
    8e52:	cf 5e       	subi	r28, 0xEF	; 239
    8e54:	dd 4f       	sbci	r29, 0xFD	; 253
    8e56:	28 81       	ld	r18, Y
    8e58:	39 81       	ldd	r19, Y+1	; 0x01
    8e5a:	4a 81       	ldd	r20, Y+2	; 0x02
    8e5c:	5b 81       	ldd	r21, Y+3	; 0x03
    8e5e:	c1 51       	subi	r28, 0x11	; 17
    8e60:	d2 40       	sbci	r29, 0x02	; 2
    8e62:	24 15       	cp	r18, r4
    8e64:	35 05       	cpc	r19, r5
    8e66:	46 05       	cpc	r20, r6
    8e68:	57 05       	cpc	r21, r7
    8e6a:	08 f4       	brcc	.+2      	; 0x8e6e <f_opendir+0x6aa>
    8e6c:	72 cd       	rjmp	.-1308   	; 0x8952 <f_opendir+0x18e>
    8e6e:	8f ef       	ldi	r24, 0xFF	; 255
    8e70:	9f ef       	ldi	r25, 0xFF	; 255
    8e72:	dc 01       	movw	r26, r24
    8e74:	f5 01       	movw	r30, r10
    8e76:	86 87       	std	Z+14, r24	; 0x0e
    8e78:	97 87       	std	Z+15, r25	; 0x0f
    8e7a:	a0 8b       	std	Z+16, r26	; 0x10
    8e7c:	b1 8b       	std	Z+17, r27	; 0x11
    8e7e:	12 86       	std	Z+10, r1	; 0x0a
    8e80:	13 86       	std	Z+11, r1	; 0x0b
    8e82:	14 86       	std	Z+12, r1	; 0x0c
    8e84:	15 86       	std	Z+13, r1	; 0x0d
    8e86:	82 e0       	ldi	r24, 0x02	; 2
    8e88:	27 cf       	rjmp	.-434    	; 0x8cd8 <f_opendir+0x514>
    8e8a:	29 01       	movw	r4, r18
    8e8c:	3a 01       	movw	r6, r20
    8e8e:	82 e0       	ldi	r24, 0x02	; 2
    8e90:	48 0e       	add	r4, r24
    8e92:	51 1c       	adc	r5, r1
    8e94:	61 1c       	adc	r6, r1
    8e96:	71 1c       	adc	r7, r1
    8e98:	d5 01       	movw	r26, r10
    8e9a:	56 96       	adiw	r26, 0x16	; 22
    8e9c:	4d 92       	st	X+, r4
    8e9e:	5d 92       	st	X+, r5
    8ea0:	6d 92       	st	X+, r6
    8ea2:	7c 92       	st	X, r7
    8ea4:	59 97       	sbiw	r26, 0x19	; 25
    8ea6:	cb 5e       	subi	r28, 0xEB	; 235
    8ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    8eaa:	88 81       	ld	r24, Y
    8eac:	99 81       	ldd	r25, Y+1	; 0x01
    8eae:	aa 81       	ldd	r26, Y+2	; 0x02
    8eb0:	bb 81       	ldd	r27, Y+3	; 0x03
    8eb2:	c5 51       	subi	r28, 0x15	; 21
    8eb4:	d2 40       	sbci	r29, 0x02	; 2
    8eb6:	c3 5f       	subi	r28, 0xF3	; 243
    8eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    8eba:	28 81       	ld	r18, Y
    8ebc:	39 81       	ldd	r19, Y+1	; 0x01
    8ebe:	4a 81       	ldd	r20, Y+2	; 0x02
    8ec0:	5b 81       	ldd	r21, Y+3	; 0x03
    8ec2:	cd 50       	subi	r28, 0x0D	; 13
    8ec4:	d2 40       	sbci	r29, 0x02	; 2
    8ec6:	82 0f       	add	r24, r18
    8ec8:	93 1f       	adc	r25, r19
    8eca:	a4 1f       	adc	r26, r20
    8ecc:	b5 1f       	adc	r27, r21
    8ece:	f5 01       	movw	r30, r10
    8ed0:	86 a3       	std	Z+38, r24	; 0x26
    8ed2:	97 a3       	std	Z+39, r25	; 0x27
    8ed4:	a0 a7       	std	Z+40, r26	; 0x28
    8ed6:	b1 a7       	std	Z+41, r27	; 0x29
    8ed8:	c6 5e       	subi	r28, 0xE6	; 230
    8eda:	dd 4f       	sbci	r29, 0xFD	; 253
    8edc:	88 81       	ld	r24, Y
    8ede:	99 81       	ldd	r25, Y+1	; 0x01
    8ee0:	aa 81       	ldd	r26, Y+2	; 0x02
    8ee2:	bb 81       	ldd	r27, Y+3	; 0x03
    8ee4:	ca 51       	subi	r28, 0x1A	; 26
    8ee6:	d2 40       	sbci	r29, 0x02	; 2
    8ee8:	82 0f       	add	r24, r18
    8eea:	93 1f       	adc	r25, r19
    8eec:	a4 1f       	adc	r26, r20
    8eee:	b5 1f       	adc	r27, r21
    8ef0:	86 8f       	std	Z+30, r24	; 0x1e
    8ef2:	97 8f       	std	Z+31, r25	; 0x1f
    8ef4:	a0 a3       	std	Z+32, r26	; 0x20
    8ef6:	b1 a3       	std	Z+33, r27	; 0x21
    8ef8:	01 2b       	or	r16, r17
    8efa:	09 f4       	brne	.+2      	; 0x8efe <f_opendir+0x73a>
    8efc:	2a cd       	rjmp	.-1452   	; 0x8952 <f_opendir+0x18e>
    8efe:	c2 5e       	subi	r28, 0xE2	; 226
    8f00:	dd 4f       	sbci	r29, 0xFD	; 253
    8f02:	28 81       	ld	r18, Y
    8f04:	39 81       	ldd	r19, Y+1	; 0x01
    8f06:	4a 81       	ldd	r20, Y+2	; 0x02
    8f08:	5b 81       	ldd	r21, Y+3	; 0x03
    8f0a:	ce 51       	subi	r28, 0x1E	; 30
    8f0c:	d2 40       	sbci	r29, 0x02	; 2
    8f0e:	82 0f       	add	r24, r18
    8f10:	93 1f       	adc	r25, r19
    8f12:	a4 1f       	adc	r26, r20
    8f14:	b5 1f       	adc	r27, r21
    8f16:	f5 01       	movw	r30, r10
    8f18:	82 a3       	std	Z+34, r24	; 0x22
    8f1a:	93 a3       	std	Z+35, r25	; 0x23
    8f1c:	a4 a3       	std	Z+36, r26	; 0x24
    8f1e:	b5 a3       	std	Z+37, r27	; 0x25
    8f20:	a3 e0       	ldi	r26, 0x03	; 3
    8f22:	b0 e0       	ldi	r27, 0x00	; 0
    8f24:	a3 01       	movw	r20, r6
    8f26:	92 01       	movw	r18, r4
    8f28:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    8f2c:	dc 01       	movw	r26, r24
    8f2e:	cb 01       	movw	r24, r22
    8f30:	b6 95       	lsr	r27
    8f32:	a7 95       	ror	r26
    8f34:	97 95       	ror	r25
    8f36:	87 95       	ror	r24
    8f38:	f1 e0       	ldi	r31, 0x01	; 1
    8f3a:	4f 22       	and	r4, r31
    8f3c:	55 24       	eor	r5, r5
    8f3e:	66 24       	eor	r6, r6
    8f40:	77 24       	eor	r7, r7
    8f42:	2f ef       	ldi	r18, 0xFF	; 255
    8f44:	42 0e       	add	r4, r18
    8f46:	21 e0       	ldi	r18, 0x01	; 1
    8f48:	52 1e       	adc	r5, r18
    8f4a:	61 1c       	adc	r6, r1
    8f4c:	71 1c       	adc	r7, r1
    8f4e:	84 0d       	add	r24, r4
    8f50:	95 1d       	adc	r25, r5
    8f52:	a6 1d       	adc	r26, r6
    8f54:	b7 1d       	adc	r27, r7
    8f56:	39 e0       	ldi	r19, 0x09	; 9
    8f58:	b6 95       	lsr	r27
    8f5a:	a7 95       	ror	r26
    8f5c:	97 95       	ror	r25
    8f5e:	87 95       	ror	r24
    8f60:	3a 95       	dec	r19
    8f62:	d1 f7       	brne	.-12     	; 0x8f58 <f_opendir+0x794>
    8f64:	cf 5e       	subi	r28, 0xEF	; 239
    8f66:	dd 4f       	sbci	r29, 0xFD	; 253
    8f68:	68 80       	ld	r6, Y
    8f6a:	79 80       	ldd	r7, Y+1	; 0x01
    8f6c:	8a 80       	ldd	r8, Y+2	; 0x02
    8f6e:	9b 80       	ldd	r9, Y+3	; 0x03
    8f70:	c1 51       	subi	r28, 0x11	; 17
    8f72:	d2 40       	sbci	r29, 0x02	; 2
    8f74:	68 16       	cp	r6, r24
    8f76:	79 06       	cpc	r7, r25
    8f78:	8a 06       	cpc	r8, r26
    8f7a:	9b 06       	cpc	r9, r27
    8f7c:	08 f4       	brcc	.+2      	; 0x8f80 <f_opendir+0x7bc>
    8f7e:	e9 cc       	rjmp	.-1582   	; 0x8952 <f_opendir+0x18e>
    8f80:	8f ef       	ldi	r24, 0xFF	; 255
    8f82:	9f ef       	ldi	r25, 0xFF	; 255
    8f84:	dc 01       	movw	r26, r24
    8f86:	f5 01       	movw	r30, r10
    8f88:	86 87       	std	Z+14, r24	; 0x0e
    8f8a:	97 87       	std	Z+15, r25	; 0x0f
    8f8c:	a0 8b       	std	Z+16, r26	; 0x10
    8f8e:	b1 8b       	std	Z+17, r27	; 0x11
    8f90:	12 86       	std	Z+10, r1	; 0x0a
    8f92:	13 86       	std	Z+11, r1	; 0x0b
    8f94:	14 86       	std	Z+12, r1	; 0x0c
    8f96:	15 86       	std	Z+13, r1	; 0x0d
    8f98:	81 e0       	ldi	r24, 0x01	; 1
    8f9a:	9e ce       	rjmp	.-708    	; 0x8cd8 <f_opendir+0x514>

00008f9c <f_readdir>:
    8f9c:	8f 92       	push	r8
    8f9e:	9f 92       	push	r9
    8fa0:	af 92       	push	r10
    8fa2:	bf 92       	push	r11
    8fa4:	cf 92       	push	r12
    8fa6:	df 92       	push	r13
    8fa8:	ef 92       	push	r14
    8faa:	ff 92       	push	r15
    8fac:	0f 93       	push	r16
    8fae:	1f 93       	push	r17
    8fb0:	cf 93       	push	r28
    8fb2:	df 93       	push	r29
    8fb4:	cd b7       	in	r28, 0x3d	; 61
    8fb6:	de b7       	in	r29, 0x3e	; 62
    8fb8:	cc 50       	subi	r28, 0x0C	; 12
    8fba:	d2 40       	sbci	r29, 0x02	; 2
    8fbc:	cd bf       	out	0x3d, r28	; 61
    8fbe:	de bf       	out	0x3e, r29	; 62
    8fc0:	dc 01       	movw	r26, r24
    8fc2:	ed 91       	ld	r30, X+
    8fc4:	fc 91       	ld	r31, X
    8fc6:	11 97       	sbiw	r26, 0x01	; 1
    8fc8:	30 97       	sbiw	r30, 0x00	; 0
    8fca:	19 f0       	breq	.+6      	; 0x8fd2 <f_readdir+0x36>
    8fcc:	20 81       	ld	r18, Z
    8fce:	21 11       	cpse	r18, r1
    8fd0:	12 c0       	rjmp	.+36     	; 0x8ff6 <f_readdir+0x5a>
    8fd2:	89 e0       	ldi	r24, 0x09	; 9
    8fd4:	c4 5f       	subi	r28, 0xF4	; 244
    8fd6:	dd 4f       	sbci	r29, 0xFD	; 253
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	de bf       	out	0x3e, r29	; 62
    8fdc:	df 91       	pop	r29
    8fde:	cf 91       	pop	r28
    8fe0:	1f 91       	pop	r17
    8fe2:	0f 91       	pop	r16
    8fe4:	ff 90       	pop	r15
    8fe6:	ef 90       	pop	r14
    8fe8:	df 90       	pop	r13
    8fea:	cf 90       	pop	r12
    8fec:	bf 90       	pop	r11
    8fee:	af 90       	pop	r10
    8ff0:	9f 90       	pop	r9
    8ff2:	8f 90       	pop	r8
    8ff4:	08 95       	ret
    8ff6:	12 96       	adiw	r26, 0x02	; 2
    8ff8:	4d 91       	ld	r20, X+
    8ffa:	5c 91       	ld	r21, X
    8ffc:	13 97       	sbiw	r26, 0x03	; 3
    8ffe:	26 81       	ldd	r18, Z+6	; 0x06
    9000:	37 81       	ldd	r19, Z+7	; 0x07
    9002:	42 17       	cp	r20, r18
    9004:	53 07       	cpc	r21, r19
    9006:	29 f7       	brne	.-54     	; 0x8fd2 <f_readdir+0x36>
    9008:	7b 01       	movw	r14, r22
    900a:	8c 01       	movw	r16, r24
    900c:	81 81       	ldd	r24, Z+1	; 0x01
    900e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
    9012:	80 ff       	sbrs	r24, 0
    9014:	02 c0       	rjmp	.+4      	; 0x901a <f_readdir+0x7e>
    9016:	83 e0       	ldi	r24, 0x03	; 3
    9018:	dd cf       	rjmp	.-70     	; 0x8fd4 <f_readdir+0x38>
    901a:	e1 14       	cp	r14, r1
    901c:	f1 04       	cpc	r15, r1
    901e:	09 f4       	brne	.+2      	; 0x9022 <f_readdir+0x86>
    9020:	54 c0       	rjmp	.+168    	; 0x90ca <f_readdir+0x12e>
    9022:	ce 01       	movw	r24, r28
    9024:	8f 5f       	subi	r24, 0xFF	; 255
    9026:	9d 4f       	sbci	r25, 0xFD	; 253
    9028:	f8 01       	movw	r30, r16
    902a:	84 8b       	std	Z+20, r24	; 0x14
    902c:	95 8b       	std	Z+21, r25	; 0x15
    902e:	92 50       	subi	r25, 0x02	; 2
    9030:	86 8b       	std	Z+22, r24	; 0x16
    9032:	97 8b       	std	Z+23, r25	; 0x17
    9034:	c8 01       	movw	r24, r16
    9036:	0e 94 03 2a 	call	0x5406	; 0x5406 <dir_read>
    903a:	84 30       	cpi	r24, 0x04	; 4
    903c:	a1 f0       	breq	.+40     	; 0x9066 <f_readdir+0xca>
    903e:	81 11       	cpse	r24, r1
    9040:	c9 cf       	rjmp	.-110    	; 0x8fd4 <f_readdir+0x38>
    9042:	b7 01       	movw	r22, r14
    9044:	c8 01       	movw	r24, r16
    9046:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <get_fileinfo>
    904a:	f8 01       	movw	r30, r16
    904c:	e4 80       	ldd	r14, Z+4	; 0x04
    904e:	f5 80       	ldd	r15, Z+5	; 0x05
    9050:	ff ef       	ldi	r31, 0xFF	; 255
    9052:	ef 1a       	sub	r14, r31
    9054:	ff 0a       	sbc	r15, r31
    9056:	79 f4       	brne	.+30     	; 0x9076 <f_readdir+0xda>
    9058:	f8 01       	movw	r30, r16
    905a:	16 86       	std	Z+14, r1	; 0x0e
    905c:	17 86       	std	Z+15, r1	; 0x0f
    905e:	10 8a       	std	Z+16, r1	; 0x10
    9060:	11 8a       	std	Z+17, r1	; 0x11
    9062:	80 e0       	ldi	r24, 0x00	; 0
    9064:	b7 cf       	rjmp	.-146    	; 0x8fd4 <f_readdir+0x38>
    9066:	d8 01       	movw	r26, r16
    9068:	1e 96       	adiw	r26, 0x0e	; 14
    906a:	1d 92       	st	X+, r1
    906c:	1d 92       	st	X+, r1
    906e:	1d 92       	st	X+, r1
    9070:	1c 92       	st	X, r1
    9072:	51 97       	sbiw	r26, 0x11	; 17
    9074:	e6 cf       	rjmp	.-52     	; 0x9042 <f_readdir+0xa6>
    9076:	f8 01       	movw	r30, r16
    9078:	86 85       	ldd	r24, Z+14	; 0x0e
    907a:	97 85       	ldd	r25, Z+15	; 0x0f
    907c:	a0 89       	ldd	r26, Z+16	; 0x10
    907e:	b1 89       	ldd	r27, Z+17	; 0x11
    9080:	00 97       	sbiw	r24, 0x00	; 0
    9082:	a1 05       	cpc	r26, r1
    9084:	b1 05       	cpc	r27, r1
    9086:	41 f3       	breq	.-48     	; 0x9058 <f_readdir+0xbc>
    9088:	67 01       	movw	r12, r14
    908a:	ff e0       	ldi	r31, 0x0F	; 15
    908c:	cf 22       	and	r12, r31
    908e:	dd 24       	eor	r13, r13
    9090:	c1 14       	cp	r12, r1
    9092:	d1 04       	cpc	r13, r1
    9094:	01 f1       	breq	.+64     	; 0x90d6 <f_readdir+0x13a>
    9096:	d8 01       	movw	r26, r16
    9098:	ed 91       	ld	r30, X+
    909a:	fc 91       	ld	r31, X
    909c:	d8 01       	movw	r26, r16
    909e:	14 96       	adiw	r26, 0x04	; 4
    90a0:	ed 92       	st	X+, r14
    90a2:	fc 92       	st	X, r15
    90a4:	15 97       	sbiw	r26, 0x05	; 5
    90a6:	be 96       	adiw	r30, 0x2e	; 46
    90a8:	cc 0c       	add	r12, r12
    90aa:	dd 1c       	adc	r13, r13
    90ac:	c2 94       	swap	r12
    90ae:	d2 94       	swap	r13
    90b0:	80 ef       	ldi	r24, 0xF0	; 240
    90b2:	d8 22       	and	r13, r24
    90b4:	dc 24       	eor	r13, r12
    90b6:	c8 22       	and	r12, r24
    90b8:	dc 24       	eor	r13, r12
    90ba:	ce 0e       	add	r12, r30
    90bc:	df 1e       	adc	r13, r31
    90be:	52 96       	adiw	r26, 0x12	; 18
    90c0:	cd 92       	st	X+, r12
    90c2:	dc 92       	st	X, r13
    90c4:	53 97       	sbiw	r26, 0x13	; 19
    90c6:	80 e0       	ldi	r24, 0x00	; 0
    90c8:	85 cf       	rjmp	.-246    	; 0x8fd4 <f_readdir+0x38>
    90ca:	60 e0       	ldi	r22, 0x00	; 0
    90cc:	70 e0       	ldi	r23, 0x00	; 0
    90ce:	c8 01       	movw	r24, r16
    90d0:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
    90d4:	7f cf       	rjmp	.-258    	; 0x8fd4 <f_readdir+0x38>
    90d6:	01 96       	adiw	r24, 0x01	; 1
    90d8:	a1 1d       	adc	r26, r1
    90da:	b1 1d       	adc	r27, r1
    90dc:	f8 01       	movw	r30, r16
    90de:	86 87       	std	Z+14, r24	; 0x0e
    90e0:	97 87       	std	Z+15, r25	; 0x0f
    90e2:	a0 8b       	std	Z+16, r26	; 0x10
    90e4:	b1 8b       	std	Z+17, r27	; 0x11
    90e6:	42 85       	ldd	r20, Z+10	; 0x0a
    90e8:	53 85       	ldd	r21, Z+11	; 0x0b
    90ea:	64 85       	ldd	r22, Z+12	; 0x0c
    90ec:	75 85       	ldd	r23, Z+13	; 0x0d
    90ee:	41 15       	cp	r20, r1
    90f0:	51 05       	cpc	r21, r1
    90f2:	61 05       	cpc	r22, r1
    90f4:	71 05       	cpc	r23, r1
    90f6:	51 f4       	brne	.+20     	; 0x910c <f_readdir+0x170>
    90f8:	01 90       	ld	r0, Z+
    90fa:	f0 81       	ld	r31, Z
    90fc:	e0 2d       	mov	r30, r0
    90fe:	80 85       	ldd	r24, Z+8	; 0x08
    9100:	91 85       	ldd	r25, Z+9	; 0x09
    9102:	e8 16       	cp	r14, r24
    9104:	f9 06       	cpc	r15, r25
    9106:	08 f0       	brcs	.+2      	; 0x910a <f_readdir+0x16e>
    9108:	a7 cf       	rjmp	.-178    	; 0x9058 <f_readdir+0xbc>
    910a:	c8 cf       	rjmp	.-112    	; 0x909c <f_readdir+0x100>
    910c:	01 90       	ld	r0, Z+
    910e:	f0 81       	ld	r31, Z
    9110:	e0 2d       	mov	r30, r0
    9112:	82 81       	ldd	r24, Z+2	; 0x02
    9114:	90 e0       	ldi	r25, 0x00	; 0
    9116:	01 97       	sbiw	r24, 0x01	; 1
    9118:	97 01       	movw	r18, r14
    911a:	32 95       	swap	r19
    911c:	22 95       	swap	r18
    911e:	2f 70       	andi	r18, 0x0F	; 15
    9120:	23 27       	eor	r18, r19
    9122:	3f 70       	andi	r19, 0x0F	; 15
    9124:	23 27       	eor	r18, r19
    9126:	82 23       	and	r24, r18
    9128:	93 23       	and	r25, r19
    912a:	89 2b       	or	r24, r25
    912c:	09 f0       	breq	.+2      	; 0x9130 <f_readdir+0x194>
    912e:	b6 cf       	rjmp	.-148    	; 0x909c <f_readdir+0x100>
    9130:	42 30       	cpi	r20, 0x02	; 2
    9132:	51 05       	cpc	r21, r1
    9134:	61 05       	cpc	r22, r1
    9136:	71 05       	cpc	r23, r1
    9138:	48 f0       	brcs	.+18     	; 0x914c <f_readdir+0x1b0>
    913a:	86 89       	ldd	r24, Z+22	; 0x16
    913c:	97 89       	ldd	r25, Z+23	; 0x17
    913e:	a0 8d       	ldd	r26, Z+24	; 0x18
    9140:	b1 8d       	ldd	r27, Z+25	; 0x19
    9142:	48 17       	cp	r20, r24
    9144:	59 07       	cpc	r21, r25
    9146:	6a 07       	cpc	r22, r26
    9148:	7b 07       	cpc	r23, r27
    914a:	10 f0       	brcs	.+4      	; 0x9150 <f_readdir+0x1b4>
    914c:	82 e0       	ldi	r24, 0x02	; 2
    914e:	42 cf       	rjmp	.-380    	; 0x8fd4 <f_readdir+0x38>
    9150:	cf 01       	movw	r24, r30
    9152:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
    9156:	62 30       	cpi	r22, 0x02	; 2
    9158:	71 05       	cpc	r23, r1
    915a:	81 05       	cpc	r24, r1
    915c:	91 05       	cpc	r25, r1
    915e:	b0 f3       	brcs	.-20     	; 0x914c <f_readdir+0x1b0>
    9160:	6f 3f       	cpi	r22, 0xFF	; 255
    9162:	bf ef       	ldi	r27, 0xFF	; 255
    9164:	7b 07       	cpc	r23, r27
    9166:	8b 07       	cpc	r24, r27
    9168:	9b 07       	cpc	r25, r27
    916a:	f1 f1       	breq	.+124    	; 0x91e8 <f_readdir+0x24c>
    916c:	d8 01       	movw	r26, r16
    916e:	ed 91       	ld	r30, X+
    9170:	fc 91       	ld	r31, X
    9172:	11 97       	sbiw	r26, 0x01	; 1
    9174:	86 88       	ldd	r8, Z+22	; 0x16
    9176:	97 88       	ldd	r9, Z+23	; 0x17
    9178:	a0 8c       	ldd	r10, Z+24	; 0x18
    917a:	b1 8c       	ldd	r11, Z+25	; 0x19
    917c:	68 15       	cp	r22, r8
    917e:	79 05       	cpc	r23, r9
    9180:	8a 05       	cpc	r24, r10
    9182:	9b 05       	cpc	r25, r11
    9184:	08 f0       	brcs	.+2      	; 0x9188 <f_readdir+0x1ec>
    9186:	68 cf       	rjmp	.-304    	; 0x9058 <f_readdir+0xbc>
    9188:	1a 96       	adiw	r26, 0x0a	; 10
    918a:	6d 93       	st	X+, r22
    918c:	7d 93       	st	X+, r23
    918e:	8d 93       	st	X+, r24
    9190:	9c 93       	st	X, r25
    9192:	1d 97       	sbiw	r26, 0x0d	; 13
    9194:	9b 01       	movw	r18, r22
    9196:	ac 01       	movw	r20, r24
    9198:	22 50       	subi	r18, 0x02	; 2
    919a:	31 09       	sbc	r19, r1
    919c:	41 09       	sbc	r20, r1
    919e:	51 09       	sbc	r21, r1
    91a0:	86 89       	ldd	r24, Z+22	; 0x16
    91a2:	97 89       	ldd	r25, Z+23	; 0x17
    91a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    91a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    91a8:	02 97       	sbiw	r24, 0x02	; 2
    91aa:	a1 09       	sbc	r26, r1
    91ac:	b1 09       	sbc	r27, r1
    91ae:	28 17       	cp	r18, r24
    91b0:	39 07       	cpc	r19, r25
    91b2:	4a 07       	cpc	r20, r26
    91b4:	5b 07       	cpc	r21, r27
    91b6:	a0 f4       	brcc	.+40     	; 0x91e0 <f_readdir+0x244>
    91b8:	a2 81       	ldd	r26, Z+2	; 0x02
    91ba:	b0 e0       	ldi	r27, 0x00	; 0
    91bc:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    91c0:	26 a1       	ldd	r18, Z+38	; 0x26
    91c2:	37 a1       	ldd	r19, Z+39	; 0x27
    91c4:	40 a5       	ldd	r20, Z+40	; 0x28
    91c6:	51 a5       	ldd	r21, Z+41	; 0x29
    91c8:	26 0f       	add	r18, r22
    91ca:	37 1f       	adc	r19, r23
    91cc:	48 1f       	adc	r20, r24
    91ce:	59 1f       	adc	r21, r25
    91d0:	d8 01       	movw	r26, r16
    91d2:	1e 96       	adiw	r26, 0x0e	; 14
    91d4:	2d 93       	st	X+, r18
    91d6:	3d 93       	st	X+, r19
    91d8:	4d 93       	st	X+, r20
    91da:	5c 93       	st	X, r21
    91dc:	51 97       	sbiw	r26, 0x11	; 17
    91de:	5e cf       	rjmp	.-324    	; 0x909c <f_readdir+0x100>
    91e0:	20 e0       	ldi	r18, 0x00	; 0
    91e2:	30 e0       	ldi	r19, 0x00	; 0
    91e4:	a9 01       	movw	r20, r18
    91e6:	f4 cf       	rjmp	.-24     	; 0x91d0 <f_readdir+0x234>
    91e8:	81 e0       	ldi	r24, 0x01	; 1
    91ea:	f4 ce       	rjmp	.-536    	; 0x8fd4 <f_readdir+0x38>

000091ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    91ec:	2f 92       	push	r2
    91ee:	3f 92       	push	r3
    91f0:	4f 92       	push	r4
    91f2:	5f 92       	push	r5
    91f4:	6f 92       	push	r6
    91f6:	7f 92       	push	r7
    91f8:	8f 92       	push	r8
    91fa:	9f 92       	push	r9
    91fc:	af 92       	push	r10
    91fe:	bf 92       	push	r11
    9200:	cf 92       	push	r12
    9202:	df 92       	push	r13
    9204:	ef 92       	push	r14
    9206:	ff 92       	push	r15
    9208:	0f 93       	push	r16
    920a:	1f 93       	push	r17
    920c:	cf 93       	push	r28
    920e:	df 93       	push	r29
    9210:	cd b7       	in	r28, 0x3d	; 61
    9212:	de b7       	in	r29, 0x3e	; 62
    9214:	c5 55       	subi	r28, 0x55	; 85
    9216:	d2 40       	sbci	r29, 0x02	; 2
    9218:	cd bf       	out	0x3d, r28	; 61
    921a:	de bf       	out	0x3e, r29	; 62
    921c:	7c 01       	movw	r14, r24
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    921e:	dc 01       	movw	r26, r24
    9220:	8c 91       	ld	r24, X
    9222:	08 2e       	mov	r0, r24
    9224:	00 0c       	add	r0, r0
    9226:	99 0b       	sbc	r25, r25
    9228:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    922a:	8a 30       	cpi	r24, 0x0A	; 10
    922c:	91 05       	cpc	r25, r1
    922e:	d0 f0       	brcs	.+52     	; 0x9264 <f_unlink+0x78>
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9230:	c0 90 ef 29 	lds	r12, 0x29EF	; 0x8029ef <FatFs>
    9234:	d0 90 f0 29 	lds	r13, 0x29F0	; 0x8029f0 <FatFs+0x1>
    9238:	c5 5e       	subi	r28, 0xE5	; 229
    923a:	dd 4f       	sbci	r29, 0xFD	; 253
    923c:	c8 82       	st	Y, r12
    923e:	d9 82       	std	Y+1, r13	; 0x01
    9240:	cb 51       	subi	r28, 0x1B	; 27
    9242:	d2 40       	sbci	r29, 0x02	; 2
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9244:	c1 14       	cp	r12, r1
    9246:	d1 04       	cpc	r13, r1
    9248:	b9 f1       	breq	.+110    	; 0x92b8 <f_unlink+0xcc>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    924a:	f6 01       	movw	r30, r12
    924c:	80 81       	ld	r24, Z
    924e:	88 23       	and	r24, r24
    9250:	41 f1       	breq	.+80     	; 0x92a2 <f_unlink+0xb6>
		stat = disk_status(fs->drv);
    9252:	81 81       	ldd	r24, Z+1	; 0x01
    9254:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9258:	80 fd       	sbrc	r24, 0
    925a:	23 c0       	rjmp	.+70     	; 0x92a2 <f_unlink+0xb6>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    925c:	82 ff       	sbrs	r24, 2
    925e:	1f c2       	rjmp	.+1086   	; 0x969e <f_unlink+0x4b2>
				return FR_WRITE_PROTECTED;
    9260:	8a e0       	ldi	r24, 0x0A	; 10
    9262:	08 c0       	rjmp	.+16     	; 0x9274 <f_unlink+0x88>
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9264:	11 96       	adiw	r26, 0x01	; 1
    9266:	2c 91       	ld	r18, X
    9268:	2a 33       	cpi	r18, 0x3A	; 58
    926a:	11 f7       	brne	.-60     	; 0x9230 <f_unlink+0x44>
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    926c:	89 2b       	or	r24, r25
    926e:	09 f4       	brne	.+2      	; 0x9272 <f_unlink+0x86>
    9270:	ac c4       	rjmp	.+2392   	; 0x9bca <f_unlink+0x9de>
		return FR_INVALID_DRIVE;
    9272:	8b e0       	ldi	r24, 0x0B	; 11
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    9274:	cb 5a       	subi	r28, 0xAB	; 171
    9276:	dd 4f       	sbci	r29, 0xFD	; 253
    9278:	cd bf       	out	0x3d, r28	; 61
    927a:	de bf       	out	0x3e, r29	; 62
    927c:	df 91       	pop	r29
    927e:	cf 91       	pop	r28
    9280:	1f 91       	pop	r17
    9282:	0f 91       	pop	r16
    9284:	ff 90       	pop	r15
    9286:	ef 90       	pop	r14
    9288:	df 90       	pop	r13
    928a:	cf 90       	pop	r12
    928c:	bf 90       	pop	r11
    928e:	af 90       	pop	r10
    9290:	9f 90       	pop	r9
    9292:	8f 90       	pop	r8
    9294:	7f 90       	pop	r7
    9296:	6f 90       	pop	r6
    9298:	5f 90       	pop	r5
    929a:	4f 90       	pop	r4
    929c:	3f 90       	pop	r3
    929e:	2f 90       	pop	r2
    92a0:	08 95       	ret
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    92a2:	d6 01       	movw	r26, r12
    92a4:	1c 92       	st	X, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    92a6:	11 96       	adiw	r26, 0x01	; 1
    92a8:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    92aa:	80 e0       	ldi	r24, 0x00	; 0
    92ac:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    92b0:	80 ff       	sbrs	r24, 0
    92b2:	04 c0       	rjmp	.+8      	; 0x92bc <f_unlink+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    92b4:	83 e0       	ldi	r24, 0x03	; 3
    92b6:	de cf       	rjmp	.-68     	; 0x9274 <f_unlink+0x88>

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    92b8:	8c e0       	ldi	r24, 0x0C	; 12
    92ba:	dc cf       	rjmp	.-72     	; 0x9274 <f_unlink+0x88>
	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    92bc:	82 fd       	sbrc	r24, 2
    92be:	d0 cf       	rjmp	.-96     	; 0x9260 <f_unlink+0x74>
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    92c0:	56 01       	movw	r10, r12
    92c2:	be e2       	ldi	r27, 0x2E	; 46
    92c4:	ab 0e       	add	r10, r27
    92c6:	b1 1c       	adc	r11, r1
    92c8:	01 e0       	ldi	r16, 0x01	; 1
    92ca:	20 e0       	ldi	r18, 0x00	; 0
    92cc:	30 e0       	ldi	r19, 0x00	; 0
    92ce:	a9 01       	movw	r20, r18
    92d0:	b5 01       	movw	r22, r10
    92d2:	f6 01       	movw	r30, r12
    92d4:	81 81       	ldd	r24, Z+1	; 0x01
    92d6:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    92da:	81 11       	cpse	r24, r1
    92dc:	3c c3       	rjmp	.+1656   	; 0x9956 <f_unlink+0x76a>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    92de:	86 01       	movw	r16, r12
    92e0:	04 5d       	subi	r16, 0xD4	; 212
    92e2:	1d 4f       	sbci	r17, 0xFD	; 253
    92e4:	cf 5b       	subi	r28, 0xBF	; 191
    92e6:	dd 4f       	sbci	r29, 0xFD	; 253
    92e8:	08 83       	st	Y, r16
    92ea:	19 83       	std	Y+1, r17	; 0x01
    92ec:	c1 54       	subi	r28, 0x41	; 65
    92ee:	d2 40       	sbci	r29, 0x02	; 2
    92f0:	d8 01       	movw	r26, r16
    92f2:	8d 91       	ld	r24, X+
    92f4:	9c 91       	ld	r25, X
    92f6:	85 35       	cpi	r24, 0x55	; 85
    92f8:	9a 4a       	sbci	r25, 0xAA	; 170
    92fa:	09 f0       	breq	.+2      	; 0x92fe <f_unlink+0x112>
    92fc:	e9 c3       	rjmp	.+2002   	; 0x9ad0 <f_unlink+0x8e4>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    92fe:	36 01       	movw	r6, r12
    9300:	e4 e6       	ldi	r30, 0x64	; 100
    9302:	6e 0e       	add	r6, r30
    9304:	71 1c       	adc	r7, r1
    9306:	f3 01       	movw	r30, r6
    9308:	80 81       	ld	r24, Z
    930a:	91 81       	ldd	r25, Z+1	; 0x01
    930c:	a2 81       	ldd	r26, Z+2	; 0x02
    930e:	b3 81       	ldd	r27, Z+3	; 0x03
    9310:	bb 27       	eor	r27, r27
    9312:	86 34       	cpi	r24, 0x46	; 70
    9314:	91 44       	sbci	r25, 0x41	; 65
    9316:	a4 45       	sbci	r26, 0x54	; 84
    9318:	b1 05       	cpc	r27, r1
    931a:	09 f4       	brne	.+2      	; 0x931e <f_unlink+0x132>
    931c:	eb c3       	rjmp	.+2006   	; 0x9af4 <f_unlink+0x908>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    931e:	46 01       	movw	r8, r12
    9320:	00 e8       	ldi	r16, 0x80	; 128
    9322:	80 0e       	add	r8, r16
    9324:	91 1c       	adc	r9, r1
    9326:	f4 01       	movw	r30, r8
    9328:	80 81       	ld	r24, Z
    932a:	91 81       	ldd	r25, Z+1	; 0x01
    932c:	a2 81       	ldd	r26, Z+2	; 0x02
    932e:	b3 81       	ldd	r27, Z+3	; 0x03
    9330:	bb 27       	eor	r27, r27
    9332:	86 34       	cpi	r24, 0x46	; 70
    9334:	91 44       	sbci	r25, 0x41	; 65
    9336:	a4 45       	sbci	r26, 0x54	; 84
    9338:	b1 05       	cpc	r27, r1
    933a:	09 f4       	brne	.+2      	; 0x933e <f_unlink+0x152>
    933c:	db c3       	rjmp	.+1974   	; 0x9af4 <f_unlink+0x908>
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    933e:	f6 01       	movw	r30, r12
    9340:	e0 51       	subi	r30, 0x10	; 16
    9342:	fe 4f       	sbci	r31, 0xFE	; 254
    9344:	80 81       	ld	r24, Z
    9346:	88 23       	and	r24, r24
    9348:	09 f4       	brne	.+2      	; 0x934c <f_unlink+0x160>
    934a:	c2 c3       	rjmp	.+1924   	; 0x9ad0 <f_unlink+0x8e4>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    934c:	f6 01       	movw	r30, r12
    934e:	ec 50       	subi	r30, 0x0C	; 12
    9350:	fe 4f       	sbci	r31, 0xFE	; 254
    9352:	20 80       	ld	r2, Z
    9354:	31 80       	ldd	r3, Z+1	; 0x01
    9356:	42 80       	ldd	r4, Z+2	; 0x02
    9358:	53 80       	ldd	r5, Z+3	; 0x03
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    935a:	01 e0       	ldi	r16, 0x01	; 1
    935c:	a2 01       	movw	r20, r4
    935e:	91 01       	movw	r18, r2
    9360:	b5 01       	movw	r22, r10
    9362:	d6 01       	movw	r26, r12
    9364:	11 96       	adiw	r26, 0x01	; 1
    9366:	8c 91       	ld	r24, X
    9368:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    936c:	81 11       	cpse	r24, r1
    936e:	f3 c2       	rjmp	.+1510   	; 0x9956 <f_unlink+0x76a>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9370:	cf 5b       	subi	r28, 0xBF	; 191
    9372:	dd 4f       	sbci	r29, 0xFD	; 253
    9374:	e8 81       	ld	r30, Y
    9376:	f9 81       	ldd	r31, Y+1	; 0x01
    9378:	c1 54       	subi	r28, 0x41	; 65
    937a:	d2 40       	sbci	r29, 0x02	; 2
    937c:	80 81       	ld	r24, Z
    937e:	91 81       	ldd	r25, Z+1	; 0x01
    9380:	85 35       	cpi	r24, 0x55	; 85
    9382:	9a 4a       	sbci	r25, 0xAA	; 170
    9384:	09 f0       	breq	.+2      	; 0x9388 <f_unlink+0x19c>
    9386:	a4 c3       	rjmp	.+1864   	; 0x9ad0 <f_unlink+0x8e4>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    9388:	f3 01       	movw	r30, r6
    938a:	80 81       	ld	r24, Z
    938c:	91 81       	ldd	r25, Z+1	; 0x01
    938e:	a2 81       	ldd	r26, Z+2	; 0x02
    9390:	b3 81       	ldd	r27, Z+3	; 0x03
    9392:	bb 27       	eor	r27, r27
    9394:	86 34       	cpi	r24, 0x46	; 70
    9396:	91 44       	sbci	r25, 0x41	; 65
    9398:	a4 45       	sbci	r26, 0x54	; 84
    939a:	b1 05       	cpc	r27, r1
    939c:	61 f0       	breq	.+24     	; 0x93b6 <f_unlink+0x1ca>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    939e:	f4 01       	movw	r30, r8
    93a0:	80 81       	ld	r24, Z
    93a2:	91 81       	ldd	r25, Z+1	; 0x01
    93a4:	a2 81       	ldd	r26, Z+2	; 0x02
    93a6:	b3 81       	ldd	r27, Z+3	; 0x03
    93a8:	bb 27       	eor	r27, r27
    93aa:	86 34       	cpi	r24, 0x46	; 70
    93ac:	91 44       	sbci	r25, 0x41	; 65
    93ae:	a4 45       	sbci	r26, 0x54	; 84
    93b0:	b1 05       	cpc	r27, r1
    93b2:	09 f0       	breq	.+2      	; 0x93b6 <f_unlink+0x1ca>
    93b4:	8d c3       	rjmp	.+1818   	; 0x9ad0 <f_unlink+0x8e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    93b6:	d6 01       	movw	r26, r12
    93b8:	d9 96       	adiw	r26, 0x39	; 57
    93ba:	8d 91       	ld	r24, X+
    93bc:	9c 91       	ld	r25, X
    93be:	da 97       	sbiw	r26, 0x3a	; 58
    93c0:	81 15       	cp	r24, r1
    93c2:	92 40       	sbci	r25, 0x02	; 2
    93c4:	09 f0       	breq	.+2      	; 0x93c8 <f_unlink+0x1dc>
    93c6:	84 c3       	rjmp	.+1800   	; 0x9ad0 <f_unlink+0x8e4>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    93c8:	f6 01       	movw	r30, r12
    93ca:	ec 5b       	subi	r30, 0xBC	; 188
    93cc:	ff 4f       	sbci	r31, 0xFF	; 255
    93ce:	80 81       	ld	r24, Z
    93d0:	91 81       	ldd	r25, Z+1	; 0x01
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    93d2:	00 97       	sbiw	r24, 0x00	; 0
    93d4:	09 f4       	brne	.+2      	; 0x93d8 <f_unlink+0x1ec>
    93d6:	86 c3       	rjmp	.+1804   	; 0x9ae4 <f_unlink+0x8f8>
	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    93d8:	3c 01       	movw	r6, r24
    93da:	81 2c       	mov	r8, r1
    93dc:	91 2c       	mov	r9, r1
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
    93de:	f6 01       	movw	r30, r12
    93e0:	62 8e       	std	Z+26, r6	; 0x1a
    93e2:	73 8e       	std	Z+27, r7	; 0x1b
    93e4:	84 8e       	std	Z+28, r8	; 0x1c
    93e6:	95 8e       	std	Z+29, r9	; 0x1d

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    93e8:	66 ad       	ldd	r22, Z+62	; 0x3e
    93ea:	63 83       	std	Z+3, r22	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    93ec:	8f ef       	ldi	r24, 0xFF	; 255
    93ee:	86 0f       	add	r24, r22
    93f0:	82 30       	cpi	r24, 0x02	; 2
    93f2:	08 f0       	brcs	.+2      	; 0x93f6 <f_unlink+0x20a>
    93f4:	6d c3       	rjmp	.+1754   	; 0x9ad0 <f_unlink+0x8e4>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    93f6:	f3 ad       	ldd	r31, Z+59	; 0x3b
    93f8:	c7 5b       	subi	r28, 0xB7	; 183
    93fa:	dd 4f       	sbci	r29, 0xFD	; 253
    93fc:	f8 83       	st	Y, r31
    93fe:	c9 54       	subi	r28, 0x49	; 73
    9400:	d2 40       	sbci	r29, 0x02	; 2
    9402:	d6 01       	movw	r26, r12
    9404:	12 96       	adiw	r26, 0x02	; 2
    9406:	fc 93       	st	X, r31
    9408:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    940a:	ff 23       	and	r31, r31
    940c:	09 f4       	brne	.+2      	; 0x9410 <f_unlink+0x224>
    940e:	60 c3       	rjmp	.+1728   	; 0x9ad0 <f_unlink+0x8e4>
    9410:	8f 2f       	mov	r24, r31
    9412:	90 e0       	ldi	r25, 0x00	; 0
    9414:	9c 01       	movw	r18, r24
    9416:	21 50       	subi	r18, 0x01	; 1
    9418:	31 09       	sbc	r19, r1
    941a:	82 23       	and	r24, r18
    941c:	93 23       	and	r25, r19
    941e:	89 2b       	or	r24, r25
    9420:	09 f0       	breq	.+2      	; 0x9424 <f_unlink+0x238>
    9422:	56 c3       	rjmp	.+1708   	; 0x9ad0 <f_unlink+0x8e4>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9424:	f6 01       	movw	r30, r12
    9426:	ff 96       	adiw	r30, 0x3f	; 63
    9428:	00 81       	ld	r16, Z
    942a:	11 81       	ldd	r17, Z+1	; 0x01
    942c:	18 96       	adiw	r26, 0x08	; 8
    942e:	0d 93       	st	X+, r16
    9430:	1c 93       	st	X, r17
    9432:	19 97       	sbiw	r26, 0x09	; 9
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    9434:	c8 01       	movw	r24, r16
    9436:	8f 70       	andi	r24, 0x0F	; 15
    9438:	99 27       	eor	r25, r25
    943a:	89 2b       	or	r24, r25
    943c:	09 f0       	breq	.+2      	; 0x9440 <f_unlink+0x254>
    943e:	48 c3       	rjmp	.+1680   	; 0x9ad0 <f_unlink+0x8e4>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    9440:	32 96       	adiw	r30, 0x02	; 2
    9442:	80 81       	ld	r24, Z
    9444:	91 81       	ldd	r25, Z+1	; 0x01
    9446:	9c 01       	movw	r18, r24
    9448:	40 e0       	ldi	r20, 0x00	; 0
    944a:	50 e0       	ldi	r21, 0x00	; 0
    944c:	ce 5a       	subi	r28, 0xAE	; 174
    944e:	dd 4f       	sbci	r29, 0xFD	; 253
    9450:	28 83       	st	Y, r18
    9452:	39 83       	std	Y+1, r19	; 0x01
    9454:	4a 83       	std	Y+2, r20	; 0x02
    9456:	5b 83       	std	Y+3, r21	; 0x03
    9458:	c2 55       	subi	r28, 0x52	; 82
    945a:	d2 40       	sbci	r29, 0x02	; 2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    945c:	89 2b       	or	r24, r25
    945e:	69 f4       	brne	.+26     	; 0x947a <f_unlink+0x28e>
    9460:	3d 96       	adiw	r30, 0x0d	; 13
    9462:	80 81       	ld	r24, Z
    9464:	91 81       	ldd	r25, Z+1	; 0x01
    9466:	a2 81       	ldd	r26, Z+2	; 0x02
    9468:	b3 81       	ldd	r27, Z+3	; 0x03
    946a:	ce 5a       	subi	r28, 0xAE	; 174
    946c:	dd 4f       	sbci	r29, 0xFD	; 253
    946e:	88 83       	st	Y, r24
    9470:	99 83       	std	Y+1, r25	; 0x01
    9472:	aa 83       	std	Y+2, r26	; 0x02
    9474:	bb 83       	std	Y+3, r27	; 0x03
    9476:	c2 55       	subi	r28, 0x52	; 82
    9478:	d2 40       	sbci	r29, 0x02	; 2

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    947a:	d6 01       	movw	r26, r12
    947c:	dc 96       	adiw	r26, 0x3c	; 60
    947e:	ed 91       	ld	r30, X+
    9480:	fc 91       	ld	r31, X
    9482:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    9484:	30 97       	sbiw	r30, 0x00	; 0
    9486:	09 f4       	brne	.+2      	; 0x948a <f_unlink+0x29e>
    9488:	23 c3       	rjmp	.+1606   	; 0x9ad0 <f_unlink+0x8e4>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    948a:	a6 2f       	mov	r26, r22
    948c:	b0 e0       	ldi	r27, 0x00	; 0
    948e:	a4 01       	movw	r20, r8
    9490:	93 01       	movw	r18, r6
    9492:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    9496:	c2 5b       	subi	r28, 0xB2	; 178
    9498:	dd 4f       	sbci	r29, 0xFD	; 253
    949a:	68 83       	st	Y, r22
    949c:	79 83       	std	Y+1, r23	; 0x01
    949e:	8a 83       	std	Y+2, r24	; 0x02
    94a0:	9b 83       	std	Y+3, r25	; 0x03
    94a2:	ce 54       	subi	r28, 0x4E	; 78
    94a4:	d2 40       	sbci	r29, 0x02	; 2

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    94a6:	9f 01       	movw	r18, r30
    94a8:	40 e0       	ldi	r20, 0x00	; 0
    94aa:	50 e0       	ldi	r21, 0x00	; 0
    94ac:	c6 5b       	subi	r28, 0xB6	; 182
    94ae:	dd 4f       	sbci	r29, 0xFD	; 253
    94b0:	28 83       	st	Y, r18
    94b2:	39 83       	std	Y+1, r19	; 0x01
    94b4:	4a 83       	std	Y+2, r20	; 0x02
    94b6:	5b 83       	std	Y+3, r21	; 0x03
    94b8:	ca 54       	subi	r28, 0x4A	; 74
    94ba:	d2 40       	sbci	r29, 0x02	; 2
    94bc:	c8 01       	movw	r24, r16
    94be:	92 95       	swap	r25
    94c0:	82 95       	swap	r24
    94c2:	8f 70       	andi	r24, 0x0F	; 15
    94c4:	89 27       	eor	r24, r25
    94c6:	9f 70       	andi	r25, 0x0F	; 15
    94c8:	89 27       	eor	r24, r25
    94ca:	28 0f       	add	r18, r24
    94cc:	39 1f       	adc	r19, r25
    94ce:	41 1d       	adc	r20, r1
    94d0:	51 1d       	adc	r21, r1
    94d2:	da 01       	movw	r26, r20
    94d4:	c9 01       	movw	r24, r18
    94d6:	c2 5b       	subi	r28, 0xB2	; 178
    94d8:	dd 4f       	sbci	r29, 0xFD	; 253
    94da:	28 81       	ld	r18, Y
    94dc:	39 81       	ldd	r19, Y+1	; 0x01
    94de:	4a 81       	ldd	r20, Y+2	; 0x02
    94e0:	5b 81       	ldd	r21, Y+3	; 0x03
    94e2:	ce 54       	subi	r28, 0x4E	; 78
    94e4:	d2 40       	sbci	r29, 0x02	; 2
    94e6:	28 0f       	add	r18, r24
    94e8:	39 1f       	adc	r19, r25
    94ea:	4a 1f       	adc	r20, r26
    94ec:	5b 1f       	adc	r21, r27
    94ee:	cb 5b       	subi	r28, 0xBB	; 187
    94f0:	dd 4f       	sbci	r29, 0xFD	; 253
    94f2:	28 83       	st	Y, r18
    94f4:	39 83       	std	Y+1, r19	; 0x01
    94f6:	4a 83       	std	Y+2, r20	; 0x02
    94f8:	5b 83       	std	Y+3, r21	; 0x03
    94fa:	c5 54       	subi	r28, 0x45	; 69
    94fc:	d2 40       	sbci	r29, 0x02	; 2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    94fe:	ce 5a       	subi	r28, 0xAE	; 174
    9500:	dd 4f       	sbci	r29, 0xFD	; 253
    9502:	88 81       	ld	r24, Y
    9504:	99 81       	ldd	r25, Y+1	; 0x01
    9506:	aa 81       	ldd	r26, Y+2	; 0x02
    9508:	bb 81       	ldd	r27, Y+3	; 0x03
    950a:	c2 55       	subi	r28, 0x52	; 82
    950c:	d2 40       	sbci	r29, 0x02	; 2
    950e:	82 17       	cp	r24, r18
    9510:	93 07       	cpc	r25, r19
    9512:	a4 07       	cpc	r26, r20
    9514:	b5 07       	cpc	r27, r21
    9516:	08 f4       	brcc	.+2      	; 0x951a <f_unlink+0x32e>
    9518:	db c2       	rjmp	.+1462   	; 0x9ad0 <f_unlink+0x8e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    951a:	bc 01       	movw	r22, r24
    951c:	cd 01       	movw	r24, r26
    951e:	62 1b       	sub	r22, r18
    9520:	73 0b       	sbc	r23, r19
    9522:	84 0b       	sbc	r24, r20
    9524:	95 0b       	sbc	r25, r21
    9526:	c7 5b       	subi	r28, 0xB7	; 183
    9528:	dd 4f       	sbci	r29, 0xFD	; 253
    952a:	e8 81       	ld	r30, Y
    952c:	c9 54       	subi	r28, 0x49	; 73
    952e:	d2 40       	sbci	r29, 0x02	; 2
    9530:	2e 2f       	mov	r18, r30
    9532:	30 e0       	ldi	r19, 0x00	; 0
    9534:	40 e0       	ldi	r20, 0x00	; 0
    9536:	50 e0       	ldi	r21, 0x00	; 0
    9538:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    953c:	21 15       	cp	r18, r1
    953e:	31 05       	cpc	r19, r1
    9540:	41 05       	cpc	r20, r1
    9542:	51 05       	cpc	r21, r1
    9544:	09 f4       	brne	.+2      	; 0x9548 <f_unlink+0x35c>
    9546:	c4 c2       	rjmp	.+1416   	; 0x9ad0 <f_unlink+0x8e4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9548:	26 3f       	cpi	r18, 0xF6	; 246
    954a:	ff e0       	ldi	r31, 0x0F	; 15
    954c:	3f 07       	cpc	r19, r31
    954e:	41 05       	cpc	r20, r1
    9550:	51 05       	cpc	r21, r1
    9552:	08 f4       	brcc	.+2      	; 0x9556 <f_unlink+0x36a>
    9554:	3e c3       	rjmp	.+1660   	; 0x9bd2 <f_unlink+0x9e6>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    9556:	26 3f       	cpi	r18, 0xF6	; 246
    9558:	8f ef       	ldi	r24, 0xFF	; 255
    955a:	38 07       	cpc	r19, r24
    955c:	41 05       	cpc	r20, r1
    955e:	51 05       	cpc	r21, r1
    9560:	08 f4       	brcc	.+2      	; 0x9564 <f_unlink+0x378>
    9562:	cc c2       	rjmp	.+1432   	; 0x9afc <f_unlink+0x910>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9564:	ba 01       	movw	r22, r20
    9566:	a9 01       	movw	r20, r18
    9568:	4e 5f       	subi	r20, 0xFE	; 254
    956a:	5f 4f       	sbci	r21, 0xFF	; 255
    956c:	6f 4f       	sbci	r22, 0xFF	; 255
    956e:	7f 4f       	sbci	r23, 0xFF	; 255
    9570:	d6 01       	movw	r26, r12
    9572:	56 96       	adiw	r26, 0x16	; 22
    9574:	4d 93       	st	X+, r20
    9576:	5d 93       	st	X+, r21
    9578:	6d 93       	st	X+, r22
    957a:	7c 93       	st	X, r23
    957c:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    957e:	cb 5b       	subi	r28, 0xBB	; 187
    9580:	dd 4f       	sbci	r29, 0xFD	; 253
    9582:	88 81       	ld	r24, Y
    9584:	99 81       	ldd	r25, Y+1	; 0x01
    9586:	aa 81       	ldd	r26, Y+2	; 0x02
    9588:	bb 81       	ldd	r27, Y+3	; 0x03
    958a:	c5 54       	subi	r28, 0x45	; 69
    958c:	d2 40       	sbci	r29, 0x02	; 2
    958e:	82 0d       	add	r24, r2
    9590:	93 1d       	adc	r25, r3
    9592:	a4 1d       	adc	r26, r4
    9594:	b5 1d       	adc	r27, r5
    9596:	f6 01       	movw	r30, r12
    9598:	86 a3       	std	Z+38, r24	; 0x26
    959a:	97 a3       	std	Z+39, r25	; 0x27
    959c:	a0 a7       	std	Z+40, r26	; 0x28
    959e:	b1 a7       	std	Z+41, r27	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    95a0:	c6 5b       	subi	r28, 0xB6	; 182
    95a2:	dd 4f       	sbci	r29, 0xFD	; 253
    95a4:	88 81       	ld	r24, Y
    95a6:	99 81       	ldd	r25, Y+1	; 0x01
    95a8:	aa 81       	ldd	r26, Y+2	; 0x02
    95aa:	bb 81       	ldd	r27, Y+3	; 0x03
    95ac:	ca 54       	subi	r28, 0x4A	; 74
    95ae:	d2 40       	sbci	r29, 0x02	; 2
    95b0:	82 0d       	add	r24, r2
    95b2:	93 1d       	adc	r25, r3
    95b4:	a4 1d       	adc	r26, r4
    95b6:	b5 1d       	adc	r27, r5
    95b8:	86 8f       	std	Z+30, r24	; 0x1e
    95ba:	97 8f       	std	Z+31, r25	; 0x1f
    95bc:	a0 a3       	std	Z+32, r26	; 0x20
    95be:	b1 a3       	std	Z+33, r27	; 0x21
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    95c0:	01 2b       	or	r16, r17
    95c2:	09 f0       	breq	.+2      	; 0x95c6 <f_unlink+0x3da>
    95c4:	85 c2       	rjmp	.+1290   	; 0x9ad0 <f_unlink+0x8e4>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    95c6:	f6 01       	movw	r30, r12
    95c8:	e6 5a       	subi	r30, 0xA6	; 166
    95ca:	ff 4f       	sbci	r31, 0xFF	; 255
    95cc:	80 81       	ld	r24, Z
    95ce:	91 81       	ldd	r25, Z+1	; 0x01
    95d0:	a2 81       	ldd	r26, Z+2	; 0x02
    95d2:	b3 81       	ldd	r27, Z+3	; 0x03
    95d4:	f6 01       	movw	r30, r12
    95d6:	82 a3       	std	Z+34, r24	; 0x22
    95d8:	93 a3       	std	Z+35, r25	; 0x23
    95da:	a4 a3       	std	Z+36, r26	; 0x24
    95dc:	b5 a3       	std	Z+37, r27	; 0x25
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    95de:	db 01       	movw	r26, r22
    95e0:	ca 01       	movw	r24, r20
    95e2:	88 0f       	add	r24, r24
    95e4:	99 1f       	adc	r25, r25
    95e6:	aa 1f       	adc	r26, r26
    95e8:	bb 1f       	adc	r27, r27
    95ea:	88 0f       	add	r24, r24
    95ec:	99 1f       	adc	r25, r25
    95ee:	aa 1f       	adc	r26, r26
    95f0:	bb 1f       	adc	r27, r27
    95f2:	81 50       	subi	r24, 0x01	; 1
    95f4:	9e 4f       	sbci	r25, 0xFE	; 254
    95f6:	af 4f       	sbci	r26, 0xFF	; 255
    95f8:	bf 4f       	sbci	r27, 0xFF	; 255
    95fa:	09 e0       	ldi	r16, 0x09	; 9
    95fc:	b6 95       	lsr	r27
    95fe:	a7 95       	ror	r26
    9600:	97 95       	ror	r25
    9602:	87 95       	ror	r24
    9604:	0a 95       	dec	r16
    9606:	d1 f7       	brne	.-12     	; 0x95fc <f_unlink+0x410>
    9608:	68 16       	cp	r6, r24
    960a:	79 06       	cpc	r7, r25
    960c:	8a 06       	cpc	r8, r26
    960e:	9b 06       	cpc	r9, r27
    9610:	08 f4       	brcc	.+2      	; 0x9614 <f_unlink+0x428>
    9612:	5e c2       	rjmp	.+1212   	; 0x9ad0 <f_unlink+0x8e4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9614:	8f ef       	ldi	r24, 0xFF	; 255
    9616:	9f ef       	ldi	r25, 0xFF	; 255
    9618:	dc 01       	movw	r26, r24
    961a:	f6 01       	movw	r30, r12
    961c:	86 87       	std	Z+14, r24	; 0x0e
    961e:	97 87       	std	Z+15, r25	; 0x0f
    9620:	a0 8b       	std	Z+16, r26	; 0x10
    9622:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    9624:	12 86       	std	Z+10, r1	; 0x0a
    9626:	13 86       	std	Z+11, r1	; 0x0b
    9628:	14 86       	std	Z+12, r1	; 0x0c
    962a:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
    962c:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    962e:	e2 5a       	subi	r30, 0xA2	; 162
    9630:	ff 4f       	sbci	r31, 0xFF	; 255
    9632:	80 81       	ld	r24, Z
    9634:	91 81       	ldd	r25, Z+1	; 0x01
    9636:	a2 01       	movw	r20, r4
    9638:	91 01       	movw	r18, r2
    963a:	28 0f       	add	r18, r24
    963c:	39 1f       	adc	r19, r25
    963e:	41 1d       	adc	r20, r1
    9640:	51 1d       	adc	r21, r1
    9642:	f6 01       	movw	r30, r12
    9644:	22 8b       	std	Z+18, r18	; 0x12
    9646:	33 8b       	std	Z+19, r19	; 0x13
    9648:	44 8b       	std	Z+20, r20	; 0x14
    964a:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    964c:	01 e0       	ldi	r16, 0x01	; 1
    964e:	b5 01       	movw	r22, r10
    9650:	81 81       	ldd	r24, Z+1	; 0x01
    9652:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    9656:	81 11       	cpse	r24, r1
    9658:	0c c0       	rjmp	.+24     	; 0x9672 <f_unlink+0x486>
    965a:	cf 5b       	subi	r28, 0xBF	; 191
    965c:	dd 4f       	sbci	r29, 0xFD	; 253
    965e:	e8 81       	ld	r30, Y
    9660:	f9 81       	ldd	r31, Y+1	; 0x01
    9662:	c1 54       	subi	r28, 0x41	; 65
    9664:	d2 40       	sbci	r29, 0x02	; 2
    9666:	80 81       	ld	r24, Z
    9668:	91 81       	ldd	r25, Z+1	; 0x01
    966a:	85 35       	cpi	r24, 0x55	; 85
    966c:	9a 4a       	sbci	r25, 0xAA	; 170
    966e:	09 f4       	brne	.+2      	; 0x9672 <f_unlink+0x486>
    9670:	31 c3       	rjmp	.+1634   	; 0x9cd4 <f_unlink+0xae8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9672:	83 e0       	ldi	r24, 0x03	; 3
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9674:	d6 01       	movw	r26, r12
    9676:	8c 93       	st	X, r24
	fs->id = ++Fsid;		/* File system mount ID */
    9678:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <Fsid>
    967c:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <Fsid+0x1>
    9680:	01 96       	adiw	r24, 0x01	; 1
    9682:	80 93 ed 29 	sts	0x29ED, r24	; 0x8029ed <Fsid>
    9686:	90 93 ee 29 	sts	0x29EE, r25	; 0x8029ee <Fsid+0x1>
    968a:	16 96       	adiw	r26, 0x06	; 6
    968c:	8d 93       	st	X+, r24
    968e:	9c 93       	st	X, r25
    9690:	17 97       	sbiw	r26, 0x07	; 7
	fs->winsect = 0;		/* Invalidate sector cache */
    9692:	f6 01       	movw	r30, r12
    9694:	12 a6       	std	Z+42, r1	; 0x2a
    9696:	13 a6       	std	Z+43, r1	; 0x2b
    9698:	14 a6       	std	Z+44, r1	; 0x2c
    969a:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    969c:	14 82       	std	Z+4, r1	; 0x04
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
    969e:	ce 01       	movw	r24, r28
    96a0:	8b 5c       	subi	r24, 0xCB	; 203
    96a2:	9d 4f       	sbci	r25, 0xFD	; 253
    96a4:	c1 5d       	subi	r28, 0xD1	; 209
    96a6:	dd 4f       	sbci	r29, 0xFD	; 253
    96a8:	88 83       	st	Y, r24
    96aa:	99 83       	std	Y+1, r25	; 0x01
    96ac:	cf 52       	subi	r28, 0x2F	; 47
    96ae:	d2 40       	sbci	r29, 0x02	; 2
    96b0:	84 53       	subi	r24, 0x34	; 52
    96b2:	92 40       	sbci	r25, 0x02	; 2
    96b4:	cf 5c       	subi	r28, 0xCF	; 207
    96b6:	dd 4f       	sbci	r29, 0xFD	; 253
    96b8:	88 83       	st	Y, r24
    96ba:	99 83       	std	Y+1, r25	; 0x01
    96bc:	c1 53       	subi	r28, 0x31	; 49
    96be:	d2 40       	sbci	r29, 0x02	; 2
		res = follow_path(&dj, path);		/* Follow the file path */
    96c0:	b7 01       	movw	r22, r14
    96c2:	86 5e       	subi	r24, 0xE6	; 230
    96c4:	9d 4f       	sbci	r25, 0xFD	; 253
    96c6:	0e 94 ed 27 	call	0x4fda	; 0x4fda <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    96ca:	81 11       	cpse	r24, r1
    96cc:	d3 cd       	rjmp	.-1114   	; 0x9274 <f_unlink+0x88>
			dir = dj.dir;
    96ce:	c3 5d       	subi	r28, 0xD3	; 211
    96d0:	dd 4f       	sbci	r29, 0xFD	; 253
    96d2:	e8 81       	ld	r30, Y
    96d4:	f9 81       	ldd	r31, Y+1	; 0x01
    96d6:	cd 52       	subi	r28, 0x2D	; 45
    96d8:	d2 40       	sbci	r29, 0x02	; 2
			if (!dir) {
    96da:	30 97       	sbiw	r30, 0x00	; 0
    96dc:	09 f4       	brne	.+2      	; 0x96e0 <f_unlink+0x4f4>
    96de:	fa c1       	rjmp	.+1012   	; 0x9ad4 <f_unlink+0x8e8>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    96e0:	23 85       	ldd	r18, Z+11	; 0x0b
    96e2:	20 fd       	sbrc	r18, 0
    96e4:	e2 c0       	rjmp	.+452    	; 0x98aa <f_unlink+0x6be>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    96e6:	84 89       	ldd	r24, Z+20	; 0x14
    96e8:	95 89       	ldd	r25, Z+21	; 0x15
    96ea:	a0 e0       	ldi	r26, 0x00	; 0
    96ec:	b0 e0       	ldi	r27, 0x00	; 0
    96ee:	dc 01       	movw	r26, r24
    96f0:	99 27       	eor	r25, r25
    96f2:	88 27       	eor	r24, r24
    96f4:	42 8d       	ldd	r20, Z+26	; 0x1a
    96f6:	53 8d       	ldd	r21, Z+27	; 0x1b
    96f8:	60 e0       	ldi	r22, 0x00	; 0
    96fa:	70 e0       	ldi	r23, 0x00	; 0
    96fc:	7c 01       	movw	r14, r24
    96fe:	8d 01       	movw	r16, r26
    9700:	e4 2a       	or	r14, r20
    9702:	f5 2a       	or	r15, r21
    9704:	06 2b       	or	r16, r22
    9706:	17 2b       	or	r17, r23
    9708:	cb 5b       	subi	r28, 0xBB	; 187
    970a:	dd 4f       	sbci	r29, 0xFD	; 253
    970c:	e8 82       	st	Y, r14
    970e:	f9 82       	std	Y+1, r15	; 0x01
    9710:	0a 83       	std	Y+2, r16	; 0x02
    9712:	1b 83       	std	Y+3, r17	; 0x03
    9714:	c5 54       	subi	r28, 0x45	; 69
    9716:	d2 40       	sbci	r29, 0x02	; 2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    9718:	24 ff       	sbrs	r18, 4
    971a:	2f c0       	rjmp	.+94     	; 0x977a <f_unlink+0x58e>
    971c:	98 01       	movw	r18, r16
    971e:	87 01       	movw	r16, r14
				if (dclst < 2) {
    9720:	02 30       	cpi	r16, 0x02	; 2
    9722:	11 05       	cpc	r17, r1
    9724:	21 05       	cpc	r18, r1
    9726:	31 05       	cpc	r19, r1
    9728:	08 f4       	brcc	.+2      	; 0x972c <f_unlink+0x540>
    972a:	bd c0       	rjmp	.+378    	; 0x98a6 <f_unlink+0x6ba>
    972c:	8a e1       	ldi	r24, 0x1A	; 26
    972e:	fe 01       	movw	r30, r28
    9730:	e5 5e       	subi	r30, 0xE5	; 229
    9732:	fd 4f       	sbci	r31, 0xFD	; 253
    9734:	de 01       	movw	r26, r28
    9736:	af 5f       	subi	r26, 0xFF	; 255
    9738:	bd 4f       	sbci	r27, 0xFD	; 253
    973a:	01 90       	ld	r0, Z+
    973c:	0d 92       	st	X+, r0
    973e:	8a 95       	dec	r24
    9740:	e1 f7       	brne	.-8      	; 0x973a <f_unlink+0x54e>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
    9742:	c9 5f       	subi	r28, 0xF9	; 249
    9744:	dd 4f       	sbci	r29, 0xFD	; 253
    9746:	08 83       	st	Y, r16
    9748:	19 83       	std	Y+1, r17	; 0x01
    974a:	2a 83       	std	Y+2, r18	; 0x02
    974c:	3b 83       	std	Y+3, r19	; 0x03
    974e:	c7 50       	subi	r28, 0x07	; 7
    9750:	d2 40       	sbci	r29, 0x02	; 2
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    9752:	62 e0       	ldi	r22, 0x02	; 2
    9754:	70 e0       	ldi	r23, 0x00	; 0
    9756:	ce 01       	movw	r24, r28
    9758:	8f 5f       	subi	r24, 0xFF	; 255
    975a:	9d 4f       	sbci	r25, 0xFD	; 253
    975c:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
					if (res == FR_OK) {
    9760:	81 11       	cpse	r24, r1
    9762:	88 cd       	rjmp	.-1264   	; 0x9274 <f_unlink+0x88>
						res = dir_read(&sdj);
    9764:	ce 01       	movw	r24, r28
    9766:	8f 5f       	subi	r24, 0xFF	; 255
    9768:	9d 4f       	sbci	r25, 0xFD	; 253
    976a:	0e 94 03 2a 	call	0x5406	; 0x5406 <dir_read>
						if (res == FR_OK			/* Not empty dir */
    976e:	88 23       	and	r24, r24
    9770:	09 f4       	brne	.+2      	; 0x9774 <f_unlink+0x588>
    9772:	9b c0       	rjmp	.+310    	; 0x98aa <f_unlink+0x6be>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    9774:	84 30       	cpi	r24, 0x04	; 4
    9776:	09 f0       	breq	.+2      	; 0x977a <f_unlink+0x58e>
    9778:	7d cd       	rjmp	.-1286   	; 0x9274 <f_unlink+0x88>
{
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    977a:	c1 5e       	subi	r28, 0xE1	; 225
    977c:	dd 4f       	sbci	r29, 0xFD	; 253
    977e:	28 80       	ld	r2, Y
    9780:	39 80       	ldd	r3, Y+1	; 0x01
    9782:	cf 51       	subi	r28, 0x1F	; 31
    9784:	d2 40       	sbci	r29, 0x02	; 2
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    9786:	cd 5c       	subi	r28, 0xCD	; 205
    9788:	dd 4f       	sbci	r29, 0xFD	; 253
    978a:	68 81       	ld	r22, Y
    978c:	79 81       	ldd	r23, Y+1	; 0x01
    978e:	c3 53       	subi	r28, 0x33	; 51
    9790:	d2 40       	sbci	r29, 0x02	; 2
    9792:	6f 3f       	cpi	r22, 0xFF	; 255
    9794:	ff ef       	ldi	r31, 0xFF	; 255
    9796:	7f 07       	cpc	r23, r31
    9798:	09 f4       	brne	.+2      	; 0x979c <f_unlink+0x5b0>
    979a:	9e c1       	rjmp	.+828    	; 0x9ad8 <f_unlink+0x8ec>
    979c:	ce 01       	movw	r24, r28
    979e:	85 5e       	subi	r24, 0xE5	; 229
    97a0:	9d 4f       	sbci	r25, 0xFD	; 253
    97a2:	0e 94 cd 24 	call	0x499a	; 0x499a <dir_sdi>
	if (res == FR_OK) {
    97a6:	81 11       	cpse	r24, r1
    97a8:	65 cd       	rjmp	.-1334   	; 0x9274 <f_unlink+0x88>
    97aa:	c5 5e       	subi	r28, 0xE5	; 229
    97ac:	dd 4f       	sbci	r29, 0xFD	; 253
    97ae:	e8 80       	ld	r14, Y
    97b0:	f9 80       	ldd	r15, Y+1	; 0x01
    97b2:	cb 51       	subi	r28, 0x1B	; 27
    97b4:	d2 40       	sbci	r29, 0x02	; 2
    97b6:	c7 5d       	subi	r28, 0xD7	; 215
    97b8:	dd 4f       	sbci	r29, 0xFD	; 253
    97ba:	48 80       	ld	r4, Y
    97bc:	59 80       	ldd	r5, Y+1	; 0x01
    97be:	6a 80       	ldd	r6, Y+2	; 0x02
    97c0:	7b 80       	ldd	r7, Y+3	; 0x03
    97c2:	c9 52       	subi	r28, 0x29	; 41
    97c4:	d2 40       	sbci	r29, 0x02	; 2
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
    97c6:	d7 01       	movw	r26, r14
    97c8:	9a 96       	adiw	r26, 0x2a	; 42
    97ca:	8d 90       	ld	r8, X+
    97cc:	9d 90       	ld	r9, X+
    97ce:	ad 90       	ld	r10, X+
    97d0:	bc 90       	ld	r11, X
    97d2:	9d 97       	sbiw	r26, 0x2d	; 45
	if (wsect != sector) {	/* Changed current window */
    97d4:	48 14       	cp	r4, r8
    97d6:	59 04       	cpc	r5, r9
    97d8:	6a 04       	cpc	r6, r10
    97da:	7b 04       	cpc	r7, r11
    97dc:	51 f0       	breq	.+20     	; 0x97f2 <f_unlink+0x606>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    97de:	14 96       	adiw	r26, 0x04	; 4
    97e0:	8c 91       	ld	r24, X
    97e2:	81 11       	cpse	r24, r1
    97e4:	77 c0       	rjmp	.+238    	; 0x98d4 <f_unlink+0x6e8>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    97e6:	41 14       	cp	r4, r1
    97e8:	51 04       	cpc	r5, r1
    97ea:	61 04       	cpc	r6, r1
    97ec:	71 04       	cpc	r7, r1
    97ee:	09 f0       	breq	.+2      	; 0x97f2 <f_unlink+0x606>
    97f0:	5e c0       	rjmp	.+188    	; 0x98ae <f_unlink+0x6c2>
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
	if (res == FR_OK) {
		do {
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    97f2:	c3 5d       	subi	r28, 0xD3	; 211
    97f4:	dd 4f       	sbci	r29, 0xFD	; 253
    97f6:	e8 81       	ld	r30, Y
    97f8:	f9 81       	ldd	r31, Y+1	; 0x01
    97fa:	cd 52       	subi	r28, 0x2D	; 45
    97fc:	d2 40       	sbci	r29, 0x02	; 2
    97fe:	a5 ee       	ldi	r26, 0xE5	; 229
    9800:	ea 2e       	mov	r14, r26
    9802:	e0 82       	st	Z, r14
			dj->fs->wflag = 1;
    9804:	c5 5e       	subi	r28, 0xE5	; 229
    9806:	dd 4f       	sbci	r29, 0xFD	; 253
    9808:	e8 80       	ld	r14, Y
    980a:	f9 80       	ldd	r15, Y+1	; 0x01
    980c:	cb 51       	subi	r28, 0x1B	; 27
    980e:	d2 40       	sbci	r29, 0x02	; 2
    9810:	81 e0       	ldi	r24, 0x01	; 1
    9812:	d7 01       	movw	r26, r14
    9814:	14 96       	adiw	r26, 0x04	; 4
    9816:	8c 93       	st	X, r24
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    9818:	c1 5e       	subi	r28, 0xE1	; 225
    981a:	dd 4f       	sbci	r29, 0xFD	; 253
    981c:	88 81       	ld	r24, Y
    981e:	99 81       	ldd	r25, Y+1	; 0x01
    9820:	cf 51       	subi	r28, 0x1F	; 31
    9822:	d2 40       	sbci	r29, 0x02	; 2
    9824:	82 15       	cp	r24, r2
    9826:	93 05       	cpc	r25, r3
    9828:	08 f0       	brcs	.+2      	; 0x982c <f_unlink+0x640>
    982a:	97 c0       	rjmp	.+302    	; 0x995a <f_unlink+0x76e>
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    982c:	8c 01       	movw	r16, r24
    982e:	0f 5f       	subi	r16, 0xFF	; 255
    9830:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    9832:	c9 f1       	breq	.+114    	; 0x98a6 <f_unlink+0x6ba>
    9834:	c7 5d       	subi	r28, 0xD7	; 215
    9836:	dd 4f       	sbci	r29, 0xFD	; 253
    9838:	48 80       	ld	r4, Y
    983a:	59 80       	ldd	r5, Y+1	; 0x01
    983c:	6a 80       	ldd	r6, Y+2	; 0x02
    983e:	7b 80       	ldd	r7, Y+3	; 0x03
    9840:	c9 52       	subi	r28, 0x29	; 41
    9842:	d2 40       	sbci	r29, 0x02	; 2
    9844:	41 14       	cp	r4, r1
    9846:	51 04       	cpc	r5, r1
    9848:	61 04       	cpc	r6, r1
    984a:	71 04       	cpc	r7, r1
    984c:	61 f1       	breq	.+88     	; 0x98a6 <f_unlink+0x6ba>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    984e:	68 01       	movw	r12, r16
    9850:	ff e0       	ldi	r31, 0x0F	; 15
    9852:	cf 22       	and	r12, r31
    9854:	dd 24       	eor	r13, r13
    9856:	c1 14       	cp	r12, r1
    9858:	d1 04       	cpc	r13, r1
    985a:	09 f0       	breq	.+2      	; 0x985e <f_unlink+0x672>
    985c:	1f c1       	rjmp	.+574    	; 0x9a9c <f_unlink+0x8b0>
		dj->sect++;					/* Next sector */
    985e:	2f ef       	ldi	r18, 0xFF	; 255
    9860:	42 1a       	sub	r4, r18
    9862:	52 0a       	sbc	r5, r18
    9864:	62 0a       	sbc	r6, r18
    9866:	72 0a       	sbc	r7, r18
    9868:	c7 5d       	subi	r28, 0xD7	; 215
    986a:	dd 4f       	sbci	r29, 0xFD	; 253
    986c:	48 82       	st	Y, r4
    986e:	59 82       	std	Y+1, r5	; 0x01
    9870:	6a 82       	std	Y+2, r6	; 0x02
    9872:	7b 82       	std	Y+3, r7	; 0x03
    9874:	c9 52       	subi	r28, 0x29	; 41
    9876:	d2 40       	sbci	r29, 0x02	; 2

		if (dj->clust == 0) {	/* Static table */
    9878:	cb 5d       	subi	r28, 0xDB	; 219
    987a:	dd 4f       	sbci	r29, 0xFD	; 253
    987c:	48 81       	ld	r20, Y
    987e:	59 81       	ldd	r21, Y+1	; 0x01
    9880:	6a 81       	ldd	r22, Y+2	; 0x02
    9882:	7b 81       	ldd	r23, Y+3	; 0x03
    9884:	c5 52       	subi	r28, 0x25	; 37
    9886:	d2 40       	sbci	r29, 0x02	; 2
    9888:	41 15       	cp	r20, r1
    988a:	51 05       	cpc	r21, r1
    988c:	61 05       	cpc	r22, r1
    988e:	71 05       	cpc	r23, r1
    9890:	09 f0       	breq	.+2      	; 0x9894 <f_unlink+0x6a8>
    9892:	92 c0       	rjmp	.+292    	; 0x99b8 <f_unlink+0x7cc>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    9894:	d7 01       	movw	r26, r14
    9896:	18 96       	adiw	r26, 0x08	; 8
    9898:	8d 91       	ld	r24, X+
    989a:	9c 91       	ld	r25, X
    989c:	19 97       	sbiw	r26, 0x09	; 9
    989e:	08 17       	cp	r16, r24
    98a0:	19 07       	cpc	r17, r25
    98a2:	08 f4       	brcc	.+2      	; 0x98a6 <f_unlink+0x6ba>
    98a4:	fb c0       	rjmp	.+502    	; 0x9a9c <f_unlink+0x8b0>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    98a6:	82 e0       	ldi	r24, 0x02	; 2
    98a8:	e5 cc       	rjmp	.-1590   	; 0x9274 <f_unlink+0x88>
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
    98aa:	87 e0       	ldi	r24, 0x07	; 7
    98ac:	e3 cc       	rjmp	.-1594   	; 0x9274 <f_unlink+0x88>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    98ae:	01 e0       	ldi	r16, 0x01	; 1
    98b0:	a3 01       	movw	r20, r6
    98b2:	92 01       	movw	r18, r4
    98b4:	b7 01       	movw	r22, r14
    98b6:	62 5d       	subi	r22, 0xD2	; 210
    98b8:	7f 4f       	sbci	r23, 0xFF	; 255
    98ba:	d7 01       	movw	r26, r14
    98bc:	11 96       	adiw	r26, 0x01	; 1
    98be:	8c 91       	ld	r24, X
    98c0:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <disk_read>
    98c4:	81 11       	cpse	r24, r1
    98c6:	47 c0       	rjmp	.+142    	; 0x9956 <f_unlink+0x76a>
				return FR_DISK_ERR;
			fs->winsect = sector;
    98c8:	f7 01       	movw	r30, r14
    98ca:	42 a6       	std	Z+42, r4	; 0x2a
    98cc:	53 a6       	std	Z+43, r5	; 0x2b
    98ce:	64 a6       	std	Z+44, r6	; 0x2c
    98d0:	75 a6       	std	Z+45, r7	; 0x2d
    98d2:	8f cf       	rjmp	.-226    	; 0x97f2 <f_unlink+0x606>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    98d4:	67 01       	movw	r12, r14
    98d6:	be e2       	ldi	r27, 0x2E	; 46
    98d8:	cb 0e       	add	r12, r27
    98da:	d1 1c       	adc	r13, r1
    98dc:	01 e0       	ldi	r16, 0x01	; 1
    98de:	a5 01       	movw	r20, r10
    98e0:	94 01       	movw	r18, r8
    98e2:	b6 01       	movw	r22, r12
    98e4:	f7 01       	movw	r30, r14
    98e6:	81 81       	ldd	r24, Z+1	; 0x01
    98e8:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
    98ec:	81 11       	cpse	r24, r1
    98ee:	33 c0       	rjmp	.+102    	; 0x9956 <f_unlink+0x76a>
				return FR_DISK_ERR;
			fs->wflag = 0;
    98f0:	d7 01       	movw	r26, r14
    98f2:	14 96       	adiw	r26, 0x04	; 4
    98f4:	1c 92       	st	X, r1
    98f6:	14 97       	sbiw	r26, 0x04	; 4
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    98f8:	5a 96       	adiw	r26, 0x1a	; 26
    98fa:	8d 91       	ld	r24, X+
    98fc:	9d 91       	ld	r25, X+
    98fe:	0d 90       	ld	r0, X+
    9900:	bc 91       	ld	r27, X
    9902:	a0 2d       	mov	r26, r0
    9904:	f7 01       	movw	r30, r14
    9906:	46 8d       	ldd	r20, Z+30	; 0x1e
    9908:	57 8d       	ldd	r21, Z+31	; 0x1f
    990a:	60 a1       	ldd	r22, Z+32	; 0x20
    990c:	71 a1       	ldd	r23, Z+33	; 0x21
    990e:	48 0f       	add	r20, r24
    9910:	59 1f       	adc	r21, r25
    9912:	6a 1f       	adc	r22, r26
    9914:	7b 1f       	adc	r23, r27
    9916:	84 16       	cp	r8, r20
    9918:	95 06       	cpc	r9, r21
    991a:	a6 06       	cpc	r10, r22
    991c:	b7 06       	cpc	r11, r23
    991e:	08 f0       	brcs	.+2      	; 0x9922 <f_unlink+0x736>
    9920:	62 cf       	rjmp	.-316    	; 0x97e6 <f_unlink+0x5fa>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    9922:	13 81       	ldd	r17, Z+3	; 0x03
    9924:	12 30       	cpi	r17, 0x02	; 2
    9926:	30 f4       	brcc	.+12     	; 0x9934 <f_unlink+0x748>
    9928:	5e cf       	rjmp	.-324    	; 0x97e6 <f_unlink+0x5fa>
    992a:	f7 01       	movw	r30, r14
    992c:	82 8d       	ldd	r24, Z+26	; 0x1a
    992e:	93 8d       	ldd	r25, Z+27	; 0x1b
    9930:	a4 8d       	ldd	r26, Z+28	; 0x1c
    9932:	b5 8d       	ldd	r27, Z+29	; 0x1d
					wsect += fs->fsize;
    9934:	88 0e       	add	r8, r24
    9936:	99 1e       	adc	r9, r25
    9938:	aa 1e       	adc	r10, r26
    993a:	bb 1e       	adc	r11, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    993c:	01 e0       	ldi	r16, 0x01	; 1
    993e:	a5 01       	movw	r20, r10
    9940:	94 01       	movw	r18, r8
    9942:	b6 01       	movw	r22, r12
    9944:	d7 01       	movw	r26, r14
    9946:	11 96       	adiw	r26, 0x01	; 1
    9948:	8c 91       	ld	r24, X
    994a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    994e:	11 50       	subi	r17, 0x01	; 1
    9950:	11 30       	cpi	r17, 0x01	; 1
    9952:	59 f7       	brne	.-42     	; 0x992a <f_unlink+0x73e>
    9954:	48 cf       	rjmp	.-368    	; 0x97e6 <f_unlink+0x5fa>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    9956:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    9958:	8d cc       	rjmp	.-1766   	; 0x9274 <f_unlink+0x88>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    995a:	cb 5b       	subi	r28, 0xBB	; 187
    995c:	dd 4f       	sbci	r29, 0xFD	; 253
    995e:	08 81       	ld	r16, Y
    9960:	19 81       	ldd	r17, Y+1	; 0x01
    9962:	2a 81       	ldd	r18, Y+2	; 0x02
    9964:	3b 81       	ldd	r19, Y+3	; 0x03
    9966:	c5 54       	subi	r28, 0x45	; 69
    9968:	d2 40       	sbci	r29, 0x02	; 2
    996a:	01 15       	cp	r16, r1
    996c:	11 05       	cpc	r17, r1
    996e:	21 05       	cpc	r18, r1
    9970:	31 05       	cpc	r19, r1
    9972:	f1 f0       	breq	.+60     	; 0x99b0 <f_unlink+0x7c4>
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    9974:	01 30       	cpi	r16, 0x01	; 1
    9976:	11 05       	cpc	r17, r1
    9978:	21 05       	cpc	r18, r1
    997a:	31 05       	cpc	r19, r1
    997c:	09 f4       	brne	.+2      	; 0x9980 <f_unlink+0x794>
    997e:	93 cf       	rjmp	.-218    	; 0x98a6 <f_unlink+0x6ba>
    9980:	f7 01       	movw	r30, r14
    9982:	86 89       	ldd	r24, Z+22	; 0x16
    9984:	97 89       	ldd	r25, Z+23	; 0x17
    9986:	a0 8d       	ldd	r26, Z+24	; 0x18
    9988:	b1 8d       	ldd	r27, Z+25	; 0x19
    998a:	08 17       	cp	r16, r24
    998c:	19 07       	cpc	r17, r25
    998e:	2a 07       	cpc	r18, r26
    9990:	3b 07       	cpc	r19, r27
    9992:	08 f0       	brcs	.+2      	; 0x9996 <f_unlink+0x7aa>
    9994:	88 cf       	rjmp	.-240    	; 0x98a6 <f_unlink+0x6ba>
    9996:	b9 01       	movw	r22, r18
    9998:	a8 01       	movw	r20, r16
    999a:	c7 01       	movw	r24, r14
    999c:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <remove_chain.part.6>
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
						res = remove_chain(dj.fs, dclst);
					if (res == FR_OK) res = sync(dj.fs);
    99a0:	81 11       	cpse	r24, r1
    99a2:	68 cc       	rjmp	.-1840   	; 0x9274 <f_unlink+0x88>
    99a4:	c5 5e       	subi	r28, 0xE5	; 229
    99a6:	dd 4f       	sbci	r29, 0xFD	; 253
    99a8:	e8 80       	ld	r14, Y
    99aa:	f9 80       	ldd	r15, Y+1	; 0x01
    99ac:	cb 51       	subi	r28, 0x1B	; 27
    99ae:	d2 40       	sbci	r29, 0x02	; 2
    99b0:	c7 01       	movw	r24, r14
    99b2:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <sync>
    99b6:	5e cc       	rjmp	.-1860   	; 0x9274 <f_unlink+0x88>
		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    99b8:	f7 01       	movw	r30, r14
    99ba:	82 81       	ldd	r24, Z+2	; 0x02
    99bc:	90 e0       	ldi	r25, 0x00	; 0
    99be:	01 97       	sbiw	r24, 0x01	; 1
    99c0:	98 01       	movw	r18, r16
    99c2:	32 95       	swap	r19
    99c4:	22 95       	swap	r18
    99c6:	2f 70       	andi	r18, 0x0F	; 15
    99c8:	23 27       	eor	r18, r19
    99ca:	3f 70       	andi	r19, 0x0F	; 15
    99cc:	23 27       	eor	r18, r19
    99ce:	82 23       	and	r24, r18
    99d0:	93 23       	and	r25, r19
    99d2:	89 2b       	or	r24, r25
    99d4:	09 f0       	breq	.+2      	; 0x99d8 <f_unlink+0x7ec>
    99d6:	62 c0       	rjmp	.+196    	; 0x9a9c <f_unlink+0x8b0>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    99d8:	42 30       	cpi	r20, 0x02	; 2
    99da:	51 05       	cpc	r21, r1
    99dc:	61 05       	cpc	r22, r1
    99de:	71 05       	cpc	r23, r1
    99e0:	08 f4       	brcc	.+2      	; 0x99e4 <f_unlink+0x7f8>
    99e2:	61 cf       	rjmp	.-318    	; 0x98a6 <f_unlink+0x6ba>
    99e4:	86 89       	ldd	r24, Z+22	; 0x16
    99e6:	97 89       	ldd	r25, Z+23	; 0x17
    99e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    99ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    99ec:	48 17       	cp	r20, r24
    99ee:	59 07       	cpc	r21, r25
    99f0:	6a 07       	cpc	r22, r26
    99f2:	7b 07       	cpc	r23, r27
    99f4:	08 f0       	brcs	.+2      	; 0x99f8 <f_unlink+0x80c>
    99f6:	57 cf       	rjmp	.-338    	; 0x98a6 <f_unlink+0x6ba>
    99f8:	c7 01       	movw	r24, r14
    99fa:	0e 94 af 22 	call	0x455e	; 0x455e <get_fat.part.3>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    99fe:	62 30       	cpi	r22, 0x02	; 2
    9a00:	71 05       	cpc	r23, r1
    9a02:	81 05       	cpc	r24, r1
    9a04:	91 05       	cpc	r25, r1
    9a06:	08 f4       	brcc	.+2      	; 0x9a0a <f_unlink+0x81e>
    9a08:	4e cf       	rjmp	.-356    	; 0x98a6 <f_unlink+0x6ba>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    9a0a:	6f 3f       	cpi	r22, 0xFF	; 255
    9a0c:	ff ef       	ldi	r31, 0xFF	; 255
    9a0e:	7f 07       	cpc	r23, r31
    9a10:	8f 07       	cpc	r24, r31
    9a12:	9f 07       	cpc	r25, r31
    9a14:	09 f4       	brne	.+2      	; 0x9a18 <f_unlink+0x82c>
    9a16:	9f cf       	rjmp	.-194    	; 0x9956 <f_unlink+0x76a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    9a18:	c5 5e       	subi	r28, 0xE5	; 229
    9a1a:	dd 4f       	sbci	r29, 0xFD	; 253
    9a1c:	e8 80       	ld	r14, Y
    9a1e:	f9 80       	ldd	r15, Y+1	; 0x01
    9a20:	cb 51       	subi	r28, 0x1B	; 27
    9a22:	d2 40       	sbci	r29, 0x02	; 2
    9a24:	d7 01       	movw	r26, r14
    9a26:	56 96       	adiw	r26, 0x16	; 22
    9a28:	8d 90       	ld	r8, X+
    9a2a:	9d 90       	ld	r9, X+
    9a2c:	ad 90       	ld	r10, X+
    9a2e:	bc 90       	ld	r11, X
    9a30:	59 97       	sbiw	r26, 0x19	; 25
    9a32:	68 15       	cp	r22, r8
    9a34:	79 05       	cpc	r23, r9
    9a36:	8a 05       	cpc	r24, r10
    9a38:	9b 05       	cpc	r25, r11
    9a3a:	08 f0       	brcs	.+2      	; 0x9a3e <f_unlink+0x852>
    9a3c:	34 cf       	rjmp	.-408    	; 0x98a6 <f_unlink+0x6ba>
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    9a3e:	cb 5d       	subi	r28, 0xDB	; 219
    9a40:	dd 4f       	sbci	r29, 0xFD	; 253
    9a42:	68 83       	st	Y, r22
    9a44:	79 83       	std	Y+1, r23	; 0x01
    9a46:	8a 83       	std	Y+2, r24	; 0x02
    9a48:	9b 83       	std	Y+3, r25	; 0x03
    9a4a:	c5 52       	subi	r28, 0x25	; 37
    9a4c:	d2 40       	sbci	r29, 0x02	; 2
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9a4e:	9b 01       	movw	r18, r22
    9a50:	ac 01       	movw	r20, r24
    9a52:	22 50       	subi	r18, 0x02	; 2
    9a54:	31 09       	sbc	r19, r1
    9a56:	41 09       	sbc	r20, r1
    9a58:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    9a5a:	b2 e0       	ldi	r27, 0x02	; 2
    9a5c:	8b 1a       	sub	r8, r27
    9a5e:	91 08       	sbc	r9, r1
    9a60:	a1 08       	sbc	r10, r1
    9a62:	b1 08       	sbc	r11, r1
    9a64:	28 15       	cp	r18, r8
    9a66:	39 05       	cpc	r19, r9
    9a68:	4a 05       	cpc	r20, r10
    9a6a:	5b 05       	cpc	r21, r11
    9a6c:	b8 f5       	brcc	.+110    	; 0x9adc <f_unlink+0x8f0>
	return clst * fs->csize + fs->database;
    9a6e:	f7 01       	movw	r30, r14
    9a70:	a2 81       	ldd	r26, Z+2	; 0x02
    9a72:	b0 e0       	ldi	r27, 0x00	; 0
    9a74:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    9a78:	86 a0       	ldd	r8, Z+38	; 0x26
    9a7a:	97 a0       	ldd	r9, Z+39	; 0x27
    9a7c:	a0 a4       	ldd	r10, Z+40	; 0x28
    9a7e:	b1 a4       	ldd	r11, Z+41	; 0x29
    9a80:	2b 01       	movw	r4, r22
    9a82:	3c 01       	movw	r6, r24
    9a84:	48 0c       	add	r4, r8
    9a86:	59 1c       	adc	r5, r9
    9a88:	6a 1c       	adc	r6, r10
    9a8a:	7b 1c       	adc	r7, r11
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    9a8c:	c7 5d       	subi	r28, 0xD7	; 215
    9a8e:	dd 4f       	sbci	r29, 0xFD	; 253
    9a90:	48 82       	st	Y, r4
    9a92:	59 82       	std	Y+1, r5	; 0x01
    9a94:	6a 82       	std	Y+2, r6	; 0x02
    9a96:	7b 82       	std	Y+3, r7	; 0x03
    9a98:	c9 52       	subi	r28, 0x29	; 41
    9a9a:	d2 40       	sbci	r29, 0x02	; 2
			}
		}
	}

	dj->index = i;
    9a9c:	c1 5e       	subi	r28, 0xE1	; 225
    9a9e:	dd 4f       	sbci	r29, 0xFD	; 253
    9aa0:	08 83       	st	Y, r16
    9aa2:	19 83       	std	Y+1, r17	; 0x01
    9aa4:	cf 51       	subi	r28, 0x1F	; 31
    9aa6:	d2 40       	sbci	r29, 0x02	; 2
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    9aa8:	cc 0c       	add	r12, r12
    9aaa:	dd 1c       	adc	r13, r13
    9aac:	c2 94       	swap	r12
    9aae:	d2 94       	swap	r13
    9ab0:	b0 ef       	ldi	r27, 0xF0	; 240
    9ab2:	db 22       	and	r13, r27
    9ab4:	dc 24       	eor	r13, r12
    9ab6:	cb 22       	and	r12, r27
    9ab8:	dc 24       	eor	r13, r12
    9aba:	c7 01       	movw	r24, r14
    9abc:	8e 96       	adiw	r24, 0x2e	; 46
    9abe:	c8 0e       	add	r12, r24
    9ac0:	d9 1e       	adc	r13, r25
    9ac2:	c3 5d       	subi	r28, 0xD3	; 211
    9ac4:	dd 4f       	sbci	r29, 0xFD	; 253
    9ac6:	c8 82       	st	Y, r12
    9ac8:	d9 82       	std	Y+1, r13	; 0x01
    9aca:	cd 52       	subi	r28, 0x2D	; 45
    9acc:	d2 40       	sbci	r29, 0x02	; 2
    9ace:	7b ce       	rjmp	.-778    	; 0x97c6 <f_unlink+0x5da>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    9ad0:	8d e0       	ldi	r24, 0x0D	; 13
    9ad2:	d0 cb       	rjmp	.-2144   	; 0x9274 <f_unlink+0x88>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    9ad4:	86 e0       	ldi	r24, 0x06	; 6
    9ad6:	ce cb       	rjmp	.-2148   	; 0x9274 <f_unlink+0x88>
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    9ad8:	b1 01       	movw	r22, r2
    9ada:	60 ce       	rjmp	.-832    	; 0x979c <f_unlink+0x5b0>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    9adc:	41 2c       	mov	r4, r1
    9ade:	51 2c       	mov	r5, r1
    9ae0:	32 01       	movw	r6, r4
    9ae2:	d4 cf       	rjmp	.-88     	; 0x9a8c <f_unlink+0x8a0>

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    9ae4:	f6 01       	movw	r30, r12
    9ae6:	ee 5a       	subi	r30, 0xAE	; 174
    9ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    9aea:	60 80       	ld	r6, Z
    9aec:	71 80       	ldd	r7, Z+1	; 0x01
    9aee:	82 80       	ldd	r8, Z+2	; 0x02
    9af0:	93 80       	ldd	r9, Z+3	; 0x03
    9af2:	75 cc       	rjmp	.-1814   	; 0x93de <f_unlink+0x1f2>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    9af4:	21 2c       	mov	r2, r1
    9af6:	31 2c       	mov	r3, r1
    9af8:	21 01       	movw	r4, r2
    9afa:	5d cc       	rjmp	.-1862   	; 0x93b6 <f_unlink+0x1ca>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9afc:	ba 01       	movw	r22, r20
    9afe:	a9 01       	movw	r20, r18
    9b00:	4e 5f       	subi	r20, 0xFE	; 254
    9b02:	5f 4f       	sbci	r21, 0xFF	; 255
    9b04:	6f 4f       	sbci	r22, 0xFF	; 255
    9b06:	7f 4f       	sbci	r23, 0xFF	; 255
    9b08:	d6 01       	movw	r26, r12
    9b0a:	56 96       	adiw	r26, 0x16	; 22
    9b0c:	4d 93       	st	X+, r20
    9b0e:	5d 93       	st	X+, r21
    9b10:	6d 93       	st	X+, r22
    9b12:	7c 93       	st	X, r23
    9b14:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    9b16:	cb 5b       	subi	r28, 0xBB	; 187
    9b18:	dd 4f       	sbci	r29, 0xFD	; 253
    9b1a:	88 81       	ld	r24, Y
    9b1c:	99 81       	ldd	r25, Y+1	; 0x01
    9b1e:	aa 81       	ldd	r26, Y+2	; 0x02
    9b20:	bb 81       	ldd	r27, Y+3	; 0x03
    9b22:	c5 54       	subi	r28, 0x45	; 69
    9b24:	d2 40       	sbci	r29, 0x02	; 2
    9b26:	82 0d       	add	r24, r2
    9b28:	93 1d       	adc	r25, r3
    9b2a:	a4 1d       	adc	r26, r4
    9b2c:	b5 1d       	adc	r27, r5
    9b2e:	f6 01       	movw	r30, r12
    9b30:	86 a3       	std	Z+38, r24	; 0x26
    9b32:	97 a3       	std	Z+39, r25	; 0x27
    9b34:	a0 a7       	std	Z+40, r26	; 0x28
    9b36:	b1 a7       	std	Z+41, r27	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9b38:	c6 5b       	subi	r28, 0xB6	; 182
    9b3a:	dd 4f       	sbci	r29, 0xFD	; 253
    9b3c:	88 81       	ld	r24, Y
    9b3e:	99 81       	ldd	r25, Y+1	; 0x01
    9b40:	aa 81       	ldd	r26, Y+2	; 0x02
    9b42:	bb 81       	ldd	r27, Y+3	; 0x03
    9b44:	ca 54       	subi	r28, 0x4A	; 74
    9b46:	d2 40       	sbci	r29, 0x02	; 2
    9b48:	82 0d       	add	r24, r2
    9b4a:	93 1d       	adc	r25, r3
    9b4c:	a4 1d       	adc	r26, r4
    9b4e:	b5 1d       	adc	r27, r5
    9b50:	86 8f       	std	Z+30, r24	; 0x1e
    9b52:	97 8f       	std	Z+31, r25	; 0x1f
    9b54:	a0 a3       	std	Z+32, r26	; 0x20
    9b56:	b1 a3       	std	Z+33, r27	; 0x21
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9b58:	01 2b       	or	r16, r17
    9b5a:	09 f4       	brne	.+2      	; 0x9b5e <f_unlink+0x972>
    9b5c:	b9 cf       	rjmp	.-142    	; 0x9ad0 <f_unlink+0x8e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9b5e:	c2 5b       	subi	r28, 0xB2	; 178
    9b60:	dd 4f       	sbci	r29, 0xFD	; 253
    9b62:	08 81       	ld	r16, Y
    9b64:	19 81       	ldd	r17, Y+1	; 0x01
    9b66:	2a 81       	ldd	r18, Y+2	; 0x02
    9b68:	3b 81       	ldd	r19, Y+3	; 0x03
    9b6a:	ce 54       	subi	r28, 0x4E	; 78
    9b6c:	d2 40       	sbci	r29, 0x02	; 2
    9b6e:	80 0f       	add	r24, r16
    9b70:	91 1f       	adc	r25, r17
    9b72:	a2 1f       	adc	r26, r18
    9b74:	b3 1f       	adc	r27, r19
    9b76:	f6 01       	movw	r30, r12
    9b78:	82 a3       	std	Z+34, r24	; 0x22
    9b7a:	93 a3       	std	Z+35, r25	; 0x23
    9b7c:	a4 a3       	std	Z+36, r26	; 0x24
    9b7e:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9b80:	db 01       	movw	r26, r22
    9b82:	ca 01       	movw	r24, r20
    9b84:	88 0f       	add	r24, r24
    9b86:	99 1f       	adc	r25, r25
    9b88:	aa 1f       	adc	r26, r26
    9b8a:	bb 1f       	adc	r27, r27
    9b8c:	81 50       	subi	r24, 0x01	; 1
    9b8e:	9e 4f       	sbci	r25, 0xFE	; 254
    9b90:	af 4f       	sbci	r26, 0xFF	; 255
    9b92:	bf 4f       	sbci	r27, 0xFF	; 255
    9b94:	f9 e0       	ldi	r31, 0x09	; 9
    9b96:	b6 95       	lsr	r27
    9b98:	a7 95       	ror	r26
    9b9a:	97 95       	ror	r25
    9b9c:	87 95       	ror	r24
    9b9e:	fa 95       	dec	r31
    9ba0:	d1 f7       	brne	.-12     	; 0x9b96 <f_unlink+0x9aa>
    9ba2:	68 16       	cp	r6, r24
    9ba4:	79 06       	cpc	r7, r25
    9ba6:	8a 06       	cpc	r8, r26
    9ba8:	9b 06       	cpc	r9, r27
    9baa:	08 f4       	brcc	.+2      	; 0x9bae <f_unlink+0x9c2>
    9bac:	91 cf       	rjmp	.-222    	; 0x9ad0 <f_unlink+0x8e4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9bae:	8f ef       	ldi	r24, 0xFF	; 255
    9bb0:	9f ef       	ldi	r25, 0xFF	; 255
    9bb2:	dc 01       	movw	r26, r24
    9bb4:	f6 01       	movw	r30, r12
    9bb6:	86 87       	std	Z+14, r24	; 0x0e
    9bb8:	97 87       	std	Z+15, r25	; 0x0f
    9bba:	a0 8b       	std	Z+16, r26	; 0x10
    9bbc:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    9bbe:	12 86       	std	Z+10, r1	; 0x0a
    9bc0:	13 86       	std	Z+11, r1	; 0x0b
    9bc2:	14 86       	std	Z+12, r1	; 0x0c
    9bc4:	15 86       	std	Z+13, r1	; 0x0d
    9bc6:	82 e0       	ldi	r24, 0x02	; 2
    9bc8:	55 cd       	rjmp	.-1366   	; 0x9674 <f_unlink+0x488>
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
		p += 2; *path = p;				/* Return pointer to the path name */
    9bca:	b2 e0       	ldi	r27, 0x02	; 2
    9bcc:	eb 0e       	add	r14, r27
    9bce:	f1 1c       	adc	r15, r1
    9bd0:	2f cb       	rjmp	.-2466   	; 0x9230 <f_unlink+0x44>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9bd2:	da 01       	movw	r26, r20
    9bd4:	c9 01       	movw	r24, r18
    9bd6:	02 96       	adiw	r24, 0x02	; 2
    9bd8:	a1 1d       	adc	r26, r1
    9bda:	b1 1d       	adc	r27, r1
    9bdc:	cf 5b       	subi	r28, 0xBF	; 191
    9bde:	dd 4f       	sbci	r29, 0xFD	; 253
    9be0:	88 83       	st	Y, r24
    9be2:	99 83       	std	Y+1, r25	; 0x01
    9be4:	aa 83       	std	Y+2, r26	; 0x02
    9be6:	bb 83       	std	Y+3, r27	; 0x03
    9be8:	c1 54       	subi	r28, 0x41	; 65
    9bea:	d2 40       	sbci	r29, 0x02	; 2
    9bec:	f6 01       	movw	r30, r12
    9bee:	86 8b       	std	Z+22, r24	; 0x16
    9bf0:	97 8b       	std	Z+23, r25	; 0x17
    9bf2:	a0 8f       	std	Z+24, r26	; 0x18
    9bf4:	b1 8f       	std	Z+25, r27	; 0x19
	fs->database = bsect + sysect;						/* Data start sector */
    9bf6:	cb 5b       	subi	r28, 0xBB	; 187
    9bf8:	dd 4f       	sbci	r29, 0xFD	; 253
    9bfa:	88 81       	ld	r24, Y
    9bfc:	99 81       	ldd	r25, Y+1	; 0x01
    9bfe:	aa 81       	ldd	r26, Y+2	; 0x02
    9c00:	bb 81       	ldd	r27, Y+3	; 0x03
    9c02:	c5 54       	subi	r28, 0x45	; 69
    9c04:	d2 40       	sbci	r29, 0x02	; 2
    9c06:	82 0d       	add	r24, r2
    9c08:	93 1d       	adc	r25, r3
    9c0a:	a4 1d       	adc	r26, r4
    9c0c:	b5 1d       	adc	r27, r5
    9c0e:	86 a3       	std	Z+38, r24	; 0x26
    9c10:	97 a3       	std	Z+39, r25	; 0x27
    9c12:	a0 a7       	std	Z+40, r26	; 0x28
    9c14:	b1 a7       	std	Z+41, r27	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9c16:	c6 5b       	subi	r28, 0xB6	; 182
    9c18:	dd 4f       	sbci	r29, 0xFD	; 253
    9c1a:	88 81       	ld	r24, Y
    9c1c:	99 81       	ldd	r25, Y+1	; 0x01
    9c1e:	aa 81       	ldd	r26, Y+2	; 0x02
    9c20:	bb 81       	ldd	r27, Y+3	; 0x03
    9c22:	ca 54       	subi	r28, 0x4A	; 74
    9c24:	d2 40       	sbci	r29, 0x02	; 2
    9c26:	82 0d       	add	r24, r2
    9c28:	93 1d       	adc	r25, r3
    9c2a:	a4 1d       	adc	r26, r4
    9c2c:	b5 1d       	adc	r27, r5
    9c2e:	86 8f       	std	Z+30, r24	; 0x1e
    9c30:	97 8f       	std	Z+31, r25	; 0x1f
    9c32:	a0 a3       	std	Z+32, r26	; 0x20
    9c34:	b1 a3       	std	Z+33, r27	; 0x21
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9c36:	01 2b       	or	r16, r17
    9c38:	09 f4       	brne	.+2      	; 0x9c3c <f_unlink+0xa50>
    9c3a:	4a cf       	rjmp	.-364    	; 0x9ad0 <f_unlink+0x8e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9c3c:	c2 5b       	subi	r28, 0xB2	; 178
    9c3e:	dd 4f       	sbci	r29, 0xFD	; 253
    9c40:	08 81       	ld	r16, Y
    9c42:	19 81       	ldd	r17, Y+1	; 0x01
    9c44:	2a 81       	ldd	r18, Y+2	; 0x02
    9c46:	3b 81       	ldd	r19, Y+3	; 0x03
    9c48:	ce 54       	subi	r28, 0x4E	; 78
    9c4a:	d2 40       	sbci	r29, 0x02	; 2
    9c4c:	80 0f       	add	r24, r16
    9c4e:	91 1f       	adc	r25, r17
    9c50:	a2 1f       	adc	r26, r18
    9c52:	b3 1f       	adc	r27, r19
    9c54:	f6 01       	movw	r30, r12
    9c56:	82 a3       	std	Z+34, r24	; 0x22
    9c58:	93 a3       	std	Z+35, r25	; 0x23
    9c5a:	a4 a3       	std	Z+36, r26	; 0x24
    9c5c:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9c5e:	a3 e0       	ldi	r26, 0x03	; 3
    9c60:	b0 e0       	ldi	r27, 0x00	; 0
    9c62:	cf 5b       	subi	r28, 0xBF	; 191
    9c64:	dd 4f       	sbci	r29, 0xFD	; 253
    9c66:	28 81       	ld	r18, Y
    9c68:	39 81       	ldd	r19, Y+1	; 0x01
    9c6a:	4a 81       	ldd	r20, Y+2	; 0x02
    9c6c:	5b 81       	ldd	r21, Y+3	; 0x03
    9c6e:	c1 54       	subi	r28, 0x41	; 65
    9c70:	d2 40       	sbci	r29, 0x02	; 2
    9c72:	0e 94 a0 7f 	call	0xff40	; 0xff40 <__muluhisi3>
    9c76:	dc 01       	movw	r26, r24
    9c78:	cb 01       	movw	r24, r22
    9c7a:	b6 95       	lsr	r27
    9c7c:	a7 95       	ror	r26
    9c7e:	97 95       	ror	r25
    9c80:	87 95       	ror	r24
    9c82:	ba 01       	movw	r22, r20
    9c84:	a9 01       	movw	r20, r18
    9c86:	41 70       	andi	r20, 0x01	; 1
    9c88:	55 27       	eor	r21, r21
    9c8a:	66 27       	eor	r22, r22
    9c8c:	77 27       	eor	r23, r23
    9c8e:	41 50       	subi	r20, 0x01	; 1
    9c90:	5e 4f       	sbci	r21, 0xFE	; 254
    9c92:	6f 4f       	sbci	r22, 0xFF	; 255
    9c94:	7f 4f       	sbci	r23, 0xFF	; 255
    9c96:	84 0f       	add	r24, r20
    9c98:	95 1f       	adc	r25, r21
    9c9a:	a6 1f       	adc	r26, r22
    9c9c:	b7 1f       	adc	r27, r23
    9c9e:	79 e0       	ldi	r23, 0x09	; 9
    9ca0:	b6 95       	lsr	r27
    9ca2:	a7 95       	ror	r26
    9ca4:	97 95       	ror	r25
    9ca6:	87 95       	ror	r24
    9ca8:	7a 95       	dec	r23
    9caa:	d1 f7       	brne	.-12     	; 0x9ca0 <f_unlink+0xab4>
    9cac:	68 16       	cp	r6, r24
    9cae:	79 06       	cpc	r7, r25
    9cb0:	8a 06       	cpc	r8, r26
    9cb2:	9b 06       	cpc	r9, r27
    9cb4:	08 f4       	brcc	.+2      	; 0x9cb8 <f_unlink+0xacc>
    9cb6:	0c cf       	rjmp	.-488    	; 0x9ad0 <f_unlink+0x8e4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9cb8:	8f ef       	ldi	r24, 0xFF	; 255
    9cba:	9f ef       	ldi	r25, 0xFF	; 255
    9cbc:	dc 01       	movw	r26, r24
    9cbe:	f6 01       	movw	r30, r12
    9cc0:	86 87       	std	Z+14, r24	; 0x0e
    9cc2:	97 87       	std	Z+15, r25	; 0x0f
    9cc4:	a0 8b       	std	Z+16, r26	; 0x10
    9cc6:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    9cc8:	12 86       	std	Z+10, r1	; 0x0a
    9cca:	13 86       	std	Z+11, r1	; 0x0b
    9ccc:	14 86       	std	Z+12, r1	; 0x0c
    9cce:	15 86       	std	Z+13, r1	; 0x0d
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    9cd0:	81 e0       	ldi	r24, 0x01	; 1
    9cd2:	d0 cc       	rjmp	.-1632   	; 0x9674 <f_unlink+0x488>
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9cd4:	f6 01       	movw	r30, r12
    9cd6:	86 a5       	ldd	r24, Z+46	; 0x2e
    9cd8:	97 a5       	ldd	r25, Z+47	; 0x2f
    9cda:	a0 a9       	ldd	r26, Z+48	; 0x30
    9cdc:	b1 a9       	ldd	r27, Z+49	; 0x31
    9cde:	82 35       	cpi	r24, 0x52	; 82
    9ce0:	92 45       	sbci	r25, 0x52	; 82
    9ce2:	a1 46       	sbci	r26, 0x61	; 97
    9ce4:	b1 44       	sbci	r27, 0x41	; 65
    9ce6:	09 f0       	breq	.+2      	; 0x9cea <f_unlink+0xafe>
    9ce8:	c4 cc       	rjmp	.-1656   	; 0x9672 <f_unlink+0x486>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9cea:	f6 01       	movw	r30, r12
    9cec:	ee 5e       	subi	r30, 0xEE	; 238
    9cee:	fd 4f       	sbci	r31, 0xFD	; 253
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9cf0:	80 81       	ld	r24, Z
    9cf2:	91 81       	ldd	r25, Z+1	; 0x01
    9cf4:	a2 81       	ldd	r26, Z+2	; 0x02
    9cf6:	b3 81       	ldd	r27, Z+3	; 0x03
    9cf8:	82 37       	cpi	r24, 0x72	; 114
    9cfa:	92 47       	sbci	r25, 0x72	; 114
    9cfc:	a1 44       	sbci	r26, 0x41	; 65
    9cfe:	b1 46       	sbci	r27, 0x61	; 97
    9d00:	09 f0       	breq	.+2      	; 0x9d04 <f_unlink+0xb18>
    9d02:	b7 cc       	rjmp	.-1682   	; 0x9672 <f_unlink+0x486>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9d04:	38 96       	adiw	r30, 0x08	; 8
    9d06:	80 81       	ld	r24, Z
    9d08:	91 81       	ldd	r25, Z+1	; 0x01
    9d0a:	a2 81       	ldd	r26, Z+2	; 0x02
    9d0c:	b3 81       	ldd	r27, Z+3	; 0x03
    9d0e:	f6 01       	movw	r30, r12
    9d10:	82 87       	std	Z+10, r24	; 0x0a
    9d12:	93 87       	std	Z+11, r25	; 0x0b
    9d14:	a4 87       	std	Z+12, r26	; 0x0c
    9d16:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9d18:	ea 5e       	subi	r30, 0xEA	; 234
    9d1a:	fd 4f       	sbci	r31, 0xFD	; 253
    9d1c:	80 81       	ld	r24, Z
    9d1e:	91 81       	ldd	r25, Z+1	; 0x01
    9d20:	a2 81       	ldd	r26, Z+2	; 0x02
    9d22:	b3 81       	ldd	r27, Z+3	; 0x03
    9d24:	f6 01       	movw	r30, r12
    9d26:	86 87       	std	Z+14, r24	; 0x0e
    9d28:	97 87       	std	Z+15, r25	; 0x0f
    9d2a:	a0 8b       	std	Z+16, r26	; 0x10
    9d2c:	b1 8b       	std	Z+17, r27	; 0x11
    9d2e:	83 e0       	ldi	r24, 0x03	; 3
    9d30:	a1 cc       	rjmp	.-1726   	; 0x9674 <f_unlink+0x488>

00009d32 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    9d32:	80 38       	cpi	r24, 0x80	; 128
    9d34:	91 05       	cpc	r25, r1
    9d36:	d8 f0       	brcs	.+54     	; 0x9d6e <ff_convert+0x3c>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
    9d38:	67 2b       	or	r22, r23
    9d3a:	99 f4       	brne	.+38     	; 0x9d62 <ff_convert+0x30>
    9d3c:	e4 ed       	ldi	r30, 0xD4	; 212
    9d3e:	f5 e2       	ldi	r31, 0x25	; 37
    9d40:	20 e0       	ldi	r18, 0x00	; 0
    9d42:	30 e0       	ldi	r19, 0x00	; 0
    9d44:	05 c0       	rjmp	.+10     	; 0x9d50 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    9d46:	2f 5f       	subi	r18, 0xFF	; 255
    9d48:	3f 4f       	sbci	r19, 0xFF	; 255
    9d4a:	20 38       	cpi	r18, 0x80	; 128
    9d4c:	31 05       	cpc	r19, r1
    9d4e:	69 f0       	breq	.+26     	; 0x9d6a <ff_convert+0x38>
				if (src == Tbl[c]) break;
    9d50:	41 91       	ld	r20, Z+
    9d52:	51 91       	ld	r21, Z+
    9d54:	84 17       	cp	r24, r20
    9d56:	95 07       	cpc	r25, r21
    9d58:	b1 f7       	brne	.-20     	; 0x9d46 <ff_convert+0x14>
    9d5a:	c9 01       	movw	r24, r18
    9d5c:	80 58       	subi	r24, 0x80	; 128
    9d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d60:	08 95       	ret
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    9d62:	8f 3f       	cpi	r24, 0xFF	; 255
    9d64:	91 05       	cpc	r25, r1
    9d66:	21 f0       	breq	.+8      	; 0x9d70 <ff_convert+0x3e>
    9d68:	18 f0       	brcs	.+6      	; 0x9d70 <ff_convert+0x3e>
    9d6a:	80 e0       	ldi	r24, 0x00	; 0
    9d6c:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    9d6e:	08 95       	ret
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    9d70:	88 0f       	add	r24, r24
    9d72:	99 1f       	adc	r25, r25
    9d74:	fc 01       	movw	r30, r24
    9d76:	ec 52       	subi	r30, 0x2C	; 44
    9d78:	fb 4d       	sbci	r31, 0xDB	; 219
    9d7a:	80 81       	ld	r24, Z
    9d7c:	91 81       	ldd	r25, Z+1	; 0x01
    9d7e:	08 95       	ret

00009d80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    9d80:	bc 01       	movw	r22, r24
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    9d82:	81 36       	cpi	r24, 0x61	; 97
    9d84:	91 05       	cpc	r25, r1
    9d86:	c9 f0       	breq	.+50     	; 0x9dba <ff_wtoupper+0x3a>
    9d88:	e6 ef       	ldi	r30, 0xF6	; 246
    9d8a:	f3 e2       	ldi	r31, 0x23	; 35
    9d8c:	40 e0       	ldi	r20, 0x00	; 0
    9d8e:	50 e0       	ldi	r21, 0x00	; 0
    9d90:	03 c0       	rjmp	.+6      	; 0x9d98 <ff_wtoupper+0x18>
    9d92:	26 17       	cp	r18, r22
    9d94:	37 07       	cpc	r19, r23
    9d96:	49 f0       	breq	.+18     	; 0x9daa <ff_wtoupper+0x2a>
    9d98:	4f 5f       	subi	r20, 0xFF	; 255
    9d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    9d9c:	21 91       	ld	r18, Z+
    9d9e:	31 91       	ld	r19, Z+
    9da0:	21 15       	cp	r18, r1
    9da2:	31 05       	cpc	r19, r1
    9da4:	b1 f7       	brne	.-20     	; 0x9d92 <ff_wtoupper+0x12>
    9da6:	cb 01       	movw	r24, r22
    9da8:	08 95       	ret
    9daa:	44 0f       	add	r20, r20
    9dac:	55 1f       	adc	r21, r21
    9dae:	fa 01       	movw	r30, r20
    9db0:	ec 5e       	subi	r30, 0xEC	; 236
    9db2:	fd 4d       	sbci	r31, 0xDD	; 221
    9db4:	80 81       	ld	r24, Z
    9db6:	91 81       	ldd	r25, Z+1	; 0x01
    9db8:	08 95       	ret
    9dba:	81 e4       	ldi	r24, 0x41	; 65
    9dbc:	90 e0       	ldi	r25, 0x00	; 0

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
    9dbe:	08 95       	ret

00009dc0 <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    9dc0:	0f 93       	push	r16
    9dc2:	1f 93       	push	r17
    9dc4:	cf 93       	push	r28
    9dc6:	df 93       	push	r29
    9dc8:	1f 92       	push	r1
    9dca:	cd b7       	in	r28, 0x3d	; 61
    9dcc:	de b7       	in	r29, 0x3e	; 62
    9dce:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    9dd2:	80 fd       	sbrc	r24, 0
    9dd4:	fc cf       	rjmp	.-8      	; 0x9dce <rtc_get_time+0xe>
    9dd6:	8f b7       	in	r24, 0x3f	; 63
    9dd8:	89 83       	std	Y+1, r24	; 0x01
    9dda:	f8 94       	cli
    9ddc:	29 81       	ldd	r18, Y+1	; 0x01
    9dde:	40 91 b4 2d 	lds	r20, 0x2DB4	; 0x802db4 <rtc_data>
    9de2:	50 91 b5 2d 	lds	r21, 0x2DB5	; 0x802db5 <rtc_data+0x1>
    9de6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    9dea:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    9dee:	00 97       	sbiw	r24, 0x00	; 0
    9df0:	31 f4       	brne	.+12     	; 0x9dfe <rtc_get_time+0x3e>
    9df2:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
    9df6:	30 ff       	sbrs	r19, 0
    9df8:	02 c0       	rjmp	.+4      	; 0x9dfe <rtc_get_time+0x3e>
    9dfa:	4f 5f       	subi	r20, 0xFF	; 255
    9dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    9dfe:	2f bf       	out	0x3f, r18	; 63
    9e00:	60 e0       	ldi	r22, 0x00	; 0
    9e02:	70 e0       	ldi	r23, 0x00	; 0
    9e04:	ba 01       	movw	r22, r20
    9e06:	55 27       	eor	r21, r21
    9e08:	44 27       	eor	r20, r20
    9e0a:	a0 e0       	ldi	r26, 0x00	; 0
    9e0c:	b0 e0       	ldi	r27, 0x00	; 0
    9e0e:	8a 01       	movw	r16, r20
    9e10:	9b 01       	movw	r18, r22
    9e12:	08 2b       	or	r16, r24
    9e14:	19 2b       	or	r17, r25
    9e16:	2a 2b       	or	r18, r26
    9e18:	3b 2b       	or	r19, r27
    9e1a:	c9 01       	movw	r24, r18
    9e1c:	b8 01       	movw	r22, r16
    9e1e:	0f 90       	pop	r0
    9e20:	df 91       	pop	r29
    9e22:	cf 91       	pop	r28
    9e24:	1f 91       	pop	r17
    9e26:	0f 91       	pop	r16
    9e28:	08 95       	ret

00009e2a <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    9e2a:	cf 93       	push	r28
    9e2c:	df 93       	push	r29
    9e2e:	1f 92       	push	r1
    9e30:	cd b7       	in	r28, 0x3d	; 61
    9e32:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    9e34:	64 e0       	ldi	r22, 0x04	; 4
    9e36:	80 e0       	ldi	r24, 0x00	; 0
    9e38:	0e 94 94 73 	call	0xe728	; 0xe728 <sysclk_enable_module>
	RTC.PER = 0xffff;
    9e3c:	8f ef       	ldi	r24, 0xFF	; 255
    9e3e:	9f ef       	ldi	r25, 0xFF	; 255
    9e40:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    9e44:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CNT = 0;
    9e48:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    9e4c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    9e50:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <sleepmgr_locks+0x3>
    9e54:	8f 3f       	cpi	r24, 0xFF	; 255
    9e56:	a1 f0       	breq	.+40     	; 0x9e80 <rtc_init+0x56>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9e58:	8f b7       	in	r24, 0x3f	; 63
    9e5a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9e5c:	f8 94       	cli
	return flags;
    9e5e:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    9e60:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <sleepmgr_locks+0x3>
    9e64:	8f 5f       	subi	r24, 0xFF	; 255
    9e66:	80 93 d1 31 	sts	0x31D1, r24	; 0x8031d1 <sleepmgr_locks+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9e6a:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    9e6c:	81 e0       	ldi	r24, 0x01	; 1
    9e6e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    9e72:	87 e0       	ldi	r24, 0x07	; 7
    9e74:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
}
    9e78:	0f 90       	pop	r0
    9e7a:	df 91       	pop	r29
    9e7c:	cf 91       	pop	r28
    9e7e:	08 95       	ret
    9e80:	ff cf       	rjmp	.-2      	; 0x9e80 <rtc_init+0x56>

00009e82 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    9e82:	1f 92       	push	r1
    9e84:	0f 92       	push	r0
    9e86:	0f b6       	in	r0, 0x3f	; 63
    9e88:	0f 92       	push	r0
    9e8a:	11 24       	eor	r1, r1
    9e8c:	0b b6       	in	r0, 0x3b	; 59
    9e8e:	0f 92       	push	r0
    9e90:	8f 93       	push	r24
    9e92:	9f 93       	push	r25
    9e94:	ef 93       	push	r30
    9e96:	ff 93       	push	r31
	rtc_data.counter_high++;
    9e98:	e4 eb       	ldi	r30, 0xB4	; 180
    9e9a:	fd e2       	ldi	r31, 0x2D	; 45
    9e9c:	80 81       	ld	r24, Z
    9e9e:	91 81       	ldd	r25, Z+1	; 0x01
    9ea0:	01 96       	adiw	r24, 0x01	; 1
    9ea2:	80 83       	st	Z, r24
    9ea4:	91 83       	std	Z+1, r25	; 0x01
}
    9ea6:	ff 91       	pop	r31
    9ea8:	ef 91       	pop	r30
    9eaa:	9f 91       	pop	r25
    9eac:	8f 91       	pop	r24
    9eae:	0f 90       	pop	r0
    9eb0:	0b be       	out	0x3b, r0	; 59
    9eb2:	0f 90       	pop	r0
    9eb4:	0f be       	out	0x3f, r0	; 63
    9eb6:	0f 90       	pop	r0
    9eb8:	1f 90       	pop	r1
    9eba:	18 95       	reti

00009ebc <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    9ebc:	1f 92       	push	r1
    9ebe:	0f 92       	push	r0
    9ec0:	0f b6       	in	r0, 0x3f	; 63
    9ec2:	0f 92       	push	r0
    9ec4:	11 24       	eor	r1, r1
    9ec6:	0b b6       	in	r0, 0x3b	; 59
    9ec8:	0f 92       	push	r0
    9eca:	0f 93       	push	r16
    9ecc:	1f 93       	push	r17
    9ece:	2f 93       	push	r18
    9ed0:	3f 93       	push	r19
    9ed2:	4f 93       	push	r20
    9ed4:	5f 93       	push	r21
    9ed6:	6f 93       	push	r22
    9ed8:	7f 93       	push	r23
    9eda:	8f 93       	push	r24
    9edc:	9f 93       	push	r25
    9ede:	af 93       	push	r26
    9ee0:	bf 93       	push	r27
    9ee2:	ef 93       	push	r30
    9ee4:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    9ee6:	40 91 b4 2d 	lds	r20, 0x2DB4	; 0x802db4 <rtc_data>
    9eea:	50 91 b5 2d 	lds	r21, 0x2DB5	; 0x802db5 <rtc_data+0x1>
    9eee:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <rtc_data+0x2>
    9ef2:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <rtc_data+0x3>
    9ef6:	48 17       	cp	r20, r24
    9ef8:	59 07       	cpc	r21, r25
    9efa:	78 f1       	brcs	.+94     	; 0x9f5a <__vector_11+0x9e>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    9efc:	21 e0       	ldi	r18, 0x01	; 1
    9efe:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    9f02:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <rtc_data+0x6>
    9f06:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <rtc_data+0x7>
    9f0a:	30 97       	sbiw	r30, 0x00	; 0
    9f0c:	31 f1       	breq	.+76     	; 0x9f5a <__vector_11+0x9e>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    9f0e:	00 91 08 04 	lds	r16, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    9f12:	10 91 09 04 	lds	r17, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    9f16:	60 e0       	ldi	r22, 0x00	; 0
    9f18:	70 e0       	ldi	r23, 0x00	; 0
    9f1a:	ba 01       	movw	r22, r20
    9f1c:	55 27       	eor	r21, r21
    9f1e:	44 27       	eor	r20, r20
    9f20:	20 e0       	ldi	r18, 0x00	; 0
    9f22:	30 e0       	ldi	r19, 0x00	; 0
    9f24:	40 2b       	or	r20, r16
    9f26:	51 2b       	or	r21, r17
    9f28:	62 2b       	or	r22, r18
    9f2a:	73 2b       	or	r23, r19
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    9f2c:	a0 e0       	ldi	r26, 0x00	; 0
    9f2e:	b0 e0       	ldi	r27, 0x00	; 0
    9f30:	dc 01       	movw	r26, r24
    9f32:	99 27       	eor	r25, r25
    9f34:	88 27       	eor	r24, r24
    9f36:	00 91 b8 2d 	lds	r16, 0x2DB8	; 0x802db8 <rtc_data+0x4>
    9f3a:	10 91 b9 2d 	lds	r17, 0x2DB9	; 0x802db9 <rtc_data+0x5>
    9f3e:	20 e0       	ldi	r18, 0x00	; 0
    9f40:	30 e0       	ldi	r19, 0x00	; 0
    9f42:	80 2b       	or	r24, r16
    9f44:	91 2b       	or	r25, r17
    9f46:	a2 2b       	or	r26, r18
    9f48:	b3 2b       	or	r27, r19
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    9f4a:	84 17       	cp	r24, r20
    9f4c:	95 07       	cpc	r25, r21
    9f4e:	a6 07       	cpc	r26, r22
    9f50:	b7 07       	cpc	r27, r23
    9f52:	c0 f4       	brcc	.+48     	; 0x9f84 <__vector_11+0xc8>
				count = alarm + 1;
			rtc_data.callback(count);
    9f54:	cb 01       	movw	r24, r22
    9f56:	ba 01       	movw	r22, r20
    9f58:	19 95       	eicall
		}
	}
}
    9f5a:	ff 91       	pop	r31
    9f5c:	ef 91       	pop	r30
    9f5e:	bf 91       	pop	r27
    9f60:	af 91       	pop	r26
    9f62:	9f 91       	pop	r25
    9f64:	8f 91       	pop	r24
    9f66:	7f 91       	pop	r23
    9f68:	6f 91       	pop	r22
    9f6a:	5f 91       	pop	r21
    9f6c:	4f 91       	pop	r20
    9f6e:	3f 91       	pop	r19
    9f70:	2f 91       	pop	r18
    9f72:	1f 91       	pop	r17
    9f74:	0f 91       	pop	r16
    9f76:	0f 90       	pop	r0
    9f78:	0b be       	out	0x3b, r0	; 59
    9f7a:	0f 90       	pop	r0
    9f7c:	0f be       	out	0x3f, r0	; 63
    9f7e:	0f 90       	pop	r0
    9f80:	1f 90       	pop	r1
    9f82:	18 95       	reti
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
				count = alarm + 1;
    9f84:	ac 01       	movw	r20, r24
    9f86:	bd 01       	movw	r22, r26
    9f88:	4f 5f       	subi	r20, 0xFF	; 255
    9f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    9f8c:	6f 4f       	sbci	r22, 0xFF	; 255
    9f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f90:	e1 cf       	rjmp	.-62     	; 0x9f54 <__vector_11+0x98>

00009f92 <udd_ep_trans_complet>:
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
    9f92:	3f 92       	push	r3
    9f94:	4f 92       	push	r4
    9f96:	5f 92       	push	r5
    9f98:	6f 92       	push	r6
    9f9a:	7f 92       	push	r7
    9f9c:	8f 92       	push	r8
    9f9e:	9f 92       	push	r9
    9fa0:	af 92       	push	r10
    9fa2:	bf 92       	push	r11
    9fa4:	cf 92       	push	r12
    9fa6:	df 92       	push	r13
    9fa8:	ef 92       	push	r14
    9faa:	ff 92       	push	r15
    9fac:	0f 93       	push	r16
    9fae:	1f 93       	push	r17
    9fb0:	cf 93       	push	r28
    9fb2:	df 93       	push	r29
    9fb4:	38 2e       	mov	r3, r24
    9fb6:	c8 2f       	mov	r28, r24
    9fb8:	cf 70       	andi	r28, 0x0F	; 15
    9fba:	d0 e0       	ldi	r29, 0x00	; 0
    9fbc:	ce 01       	movw	r24, r28
    9fbe:	88 0f       	add	r24, r24
    9fc0:	99 1f       	adc	r25, r25
    9fc2:	c3 2d       	mov	r28, r3
    9fc4:	03 2c       	mov	r0, r3
    9fc6:	00 0c       	add	r0, r0
    9fc8:	dd 0b       	sbc	r29, r29
    9fca:	cc 27       	eor	r28, r28
    9fcc:	dd 0f       	add	r29, r29
    9fce:	cc 1f       	adc	r28, r28
    9fd0:	dd 27       	eor	r29, r29
    9fd2:	c8 0f       	add	r28, r24
    9fd4:	d9 1f       	adc	r29, r25
    9fd6:	8e 01       	movw	r16, r28
    9fd8:	02 50       	subi	r16, 0x02	; 2
    9fda:	11 09       	sbc	r17, r1
    9fdc:	7e 01       	movw	r14, r28
    9fde:	ee 0c       	add	r14, r14
    9fe0:	ff 1c       	adc	r15, r15
    9fe2:	ee 0c       	add	r14, r14
    9fe4:	ff 1c       	adc	r15, r15
    9fe6:	ee 0c       	add	r14, r14
    9fe8:	ff 1c       	adc	r15, r15
    9fea:	f7 01       	movw	r30, r14
    9fec:	e4 52       	subi	r30, 0x24	; 36
    9fee:	f5 4d       	sbci	r31, 0xD5	; 213
    9ff0:	e5 85       	ldd	r30, Z+13	; 0x0d
    9ff2:	e7 70       	andi	r30, 0x07	; 7
    9ff4:	e1 50       	subi	r30, 0x01	; 1
    9ff6:	e7 30       	cpi	r30, 0x07	; 7
    9ff8:	08 f0       	brcs	.+2      	; 0x9ffc <udd_ep_trans_complet+0x6a>
    9ffa:	60 c0       	rjmp	.+192    	; 0xa0bc <__stack+0xbd>
    9ffc:	f0 e0       	ldi	r31, 0x00	; 0
    9ffe:	ee 0f       	add	r30, r30
    a000:	ff 1f       	adc	r31, r31
    a002:	ec 52       	subi	r30, 0x2C	; 44
    a004:	f9 4d       	sbci	r31, 0xD9	; 217
    a006:	80 80       	ld	r8, Z
    a008:	91 80       	ldd	r9, Z+1	; 0x01
    a00a:	37 fc       	sbrc	r3, 7
    a00c:	5c c0       	rjmp	.+184    	; 0xa0c6 <__stack+0xc7>
    a00e:	f7 01       	movw	r30, r14
    a010:	e4 52       	subi	r30, 0x24	; 36
    a012:	f5 4d       	sbci	r31, 0xD5	; 213
    a014:	66 84       	ldd	r6, Z+14	; 0x0e
    a016:	77 84       	ldd	r7, Z+15	; 0x0f
    a018:	58 01       	movw	r10, r16
    a01a:	aa 0c       	add	r10, r10
    a01c:	bb 1c       	adc	r11, r11
    a01e:	aa 0c       	add	r10, r10
    a020:	bb 1c       	adc	r11, r11
    a022:	aa 0c       	add	r10, r10
    a024:	bb 1c       	adc	r11, r11
    a026:	f5 01       	movw	r30, r10
    a028:	e0 0f       	add	r30, r16
    a02a:	f1 1f       	adc	r31, r17
    a02c:	ee 58       	subi	r30, 0x8E	; 142
    a02e:	f5 4d       	sbci	r31, 0xD5	; 213
    a030:	80 81       	ld	r24, Z
    a032:	82 fd       	sbrc	r24, 2
    a034:	cb c0       	rjmp	.+406    	; 0xa1cc <__stack+0x1cd>
    a036:	45 80       	ldd	r4, Z+5	; 0x05
    a038:	56 80       	ldd	r5, Z+6	; 0x06
    a03a:	c3 80       	ldd	r12, Z+3	; 0x03
    a03c:	d4 80       	ldd	r13, Z+4	; 0x04
    a03e:	46 0c       	add	r4, r6
    a040:	57 1c       	adc	r5, r7
    a042:	d5 01       	movw	r26, r10
    a044:	a0 0f       	add	r26, r16
    a046:	b1 1f       	adc	r27, r17
    a048:	ae 58       	subi	r26, 0x8E	; 142
    a04a:	b5 4d       	sbci	r27, 0xD5	; 213
    a04c:	15 96       	adiw	r26, 0x05	; 5
    a04e:	4d 92       	st	X+, r4
    a050:	5c 92       	st	X, r5
    a052:	16 97       	sbiw	r26, 0x06	; 6
    a054:	c4 14       	cp	r12, r4
    a056:	d5 04       	cpc	r13, r5
    a058:	08 f4       	brcc	.+2      	; 0xa05c <__stack+0x5d>
    a05a:	ad c0       	rjmp	.+346    	; 0xa1b6 <__stack+0x1b7>
    a05c:	f7 01       	movw	r30, r14
    a05e:	e4 52       	subi	r30, 0x24	; 36
    a060:	f5 4d       	sbci	r31, 0xD5	; 213
    a062:	82 89       	ldd	r24, Z+18	; 0x12
    a064:	93 89       	ldd	r25, Z+19	; 0x13
    a066:	68 16       	cp	r6, r24
    a068:	79 06       	cpc	r7, r25
    a06a:	09 f4       	brne	.+2      	; 0xa06e <__stack+0x6f>
    a06c:	d9 c0       	rjmp	.+434    	; 0xa220 <__stack+0x221>
    a06e:	8c 91       	ld	r24, X
    a070:	62 01       	movw	r12, r4
    a072:	80 ff       	sbrs	r24, 0
    a074:	8e c0       	rjmp	.+284    	; 0xa192 <__stack+0x193>
    a076:	0a 0d       	add	r16, r10
    a078:	1b 1d       	adc	r17, r11
    a07a:	f8 01       	movw	r30, r16
    a07c:	ee 58       	subi	r30, 0x8E	; 142
    a07e:	f5 4d       	sbci	r31, 0xD5	; 213
    a080:	80 81       	ld	r24, Z
    a082:	8e 7f       	andi	r24, 0xFE	; 254
    a084:	80 83       	st	Z, r24
    a086:	07 80       	ldd	r0, Z+7	; 0x07
    a088:	f0 85       	ldd	r31, Z+8	; 0x08
    a08a:	e0 2d       	mov	r30, r0
    a08c:	30 97       	sbiw	r30, 0x00	; 0
    a08e:	09 f4       	brne	.+2      	; 0xa092 <__stack+0x93>
    a090:	80 c0       	rjmp	.+256    	; 0xa192 <__stack+0x193>
    a092:	43 2d       	mov	r20, r3
    a094:	b6 01       	movw	r22, r12
    a096:	80 e0       	ldi	r24, 0x00	; 0
    a098:	df 91       	pop	r29
    a09a:	cf 91       	pop	r28
    a09c:	1f 91       	pop	r17
    a09e:	0f 91       	pop	r16
    a0a0:	ff 90       	pop	r15
    a0a2:	ef 90       	pop	r14
    a0a4:	df 90       	pop	r13
    a0a6:	cf 90       	pop	r12
    a0a8:	bf 90       	pop	r11
    a0aa:	af 90       	pop	r10
    a0ac:	9f 90       	pop	r9
    a0ae:	8f 90       	pop	r8
    a0b0:	7f 90       	pop	r7
    a0b2:	6f 90       	pop	r6
    a0b4:	5f 90       	pop	r5
    a0b6:	4f 90       	pop	r4
    a0b8:	3f 90       	pop	r3
    a0ba:	19 94       	eijmp
    a0bc:	68 e0       	ldi	r22, 0x08	; 8
    a0be:	86 2e       	mov	r8, r22
    a0c0:	91 2c       	mov	r9, r1
    a0c2:	37 fe       	sbrs	r3, 7
    a0c4:	a4 cf       	rjmp	.-184    	; 0xa00e <__stack+0xf>
    a0c6:	d7 01       	movw	r26, r14
    a0c8:	a4 52       	subi	r26, 0x24	; 36
    a0ca:	b5 4d       	sbci	r27, 0xD5	; 213
    a0cc:	52 96       	adiw	r26, 0x12	; 18
    a0ce:	cd 90       	ld	r12, X+
    a0d0:	dc 90       	ld	r13, X
    a0d2:	53 97       	sbiw	r26, 0x13	; 19
    a0d4:	58 01       	movw	r10, r16
    a0d6:	aa 0c       	add	r10, r10
    a0d8:	bb 1c       	adc	r11, r11
    a0da:	aa 0c       	add	r10, r10
    a0dc:	bb 1c       	adc	r11, r11
    a0de:	aa 0c       	add	r10, r10
    a0e0:	bb 1c       	adc	r11, r11
    a0e2:	f5 01       	movw	r30, r10
    a0e4:	e0 0f       	add	r30, r16
    a0e6:	f1 1f       	adc	r31, r17
    a0e8:	ee 58       	subi	r30, 0x8E	; 142
    a0ea:	f5 4d       	sbci	r31, 0xD5	; 213
    a0ec:	85 81       	ldd	r24, Z+5	; 0x05
    a0ee:	96 81       	ldd	r25, Z+6	; 0x06
    a0f0:	c8 0e       	add	r12, r24
    a0f2:	d9 1e       	adc	r13, r25
    a0f4:	c5 82       	std	Z+5, r12	; 0x05
    a0f6:	d6 82       	std	Z+6, r13	; 0x06
    a0f8:	23 81       	ldd	r18, Z+3	; 0x03
    a0fa:	34 81       	ldd	r19, Z+4	; 0x04
    a0fc:	c2 16       	cp	r12, r18
    a0fe:	d3 06       	cpc	r13, r19
    a100:	09 f4       	brne	.+2      	; 0xa104 <__stack+0x105>
    a102:	7b c0       	rjmp	.+246    	; 0xa1fa <__stack+0x1fb>
    a104:	2c 19       	sub	r18, r12
    a106:	3d 09       	sbc	r19, r13
    a108:	21 15       	cp	r18, r1
    a10a:	44 e0       	ldi	r20, 0x04	; 4
    a10c:	34 07       	cpc	r19, r20
    a10e:	40 f0       	brcs	.+16     	; 0xa120 <__stack+0x121>
    a110:	2f ef       	ldi	r18, 0xFF	; 255
    a112:	33 e0       	ldi	r19, 0x03	; 3
    a114:	c9 01       	movw	r24, r18
    a116:	b4 01       	movw	r22, r8
    a118:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    a11c:	28 1b       	sub	r18, r24
    a11e:	39 0b       	sbc	r19, r25
    a120:	f5 01       	movw	r30, r10
    a122:	e0 0f       	add	r30, r16
    a124:	f1 1f       	adc	r31, r17
    a126:	ee 58       	subi	r30, 0x8E	; 142
    a128:	f5 4d       	sbci	r31, 0xD5	; 213
    a12a:	80 81       	ld	r24, Z
    a12c:	81 ff       	sbrs	r24, 1
    a12e:	b4 c0       	rjmp	.+360    	; 0xa298 <__stack+0x299>
    a130:	c9 01       	movw	r24, r18
    a132:	b4 01       	movw	r22, r8
    a134:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    a138:	ac 01       	movw	r20, r24
    a13a:	91 e0       	ldi	r25, 0x01	; 1
    a13c:	45 2b       	or	r20, r21
    a13e:	09 f0       	breq	.+2      	; 0xa142 <__stack+0x143>
    a140:	c7 c0       	rjmp	.+398    	; 0xa2d0 <__stack+0x2d1>
    a142:	89 2f       	mov	r24, r25
    a144:	0a 0d       	add	r16, r10
    a146:	1b 1d       	adc	r17, r11
    a148:	f8 01       	movw	r30, r16
    a14a:	ee 58       	subi	r30, 0x8E	; 142
    a14c:	f5 4d       	sbci	r31, 0xD5	; 213
    a14e:	90 81       	ld	r25, Z
    a150:	80 fb       	bst	r24, 0
    a152:	91 f9       	bld	r25, 1
    a154:	90 83       	st	Z, r25
    a156:	d7 01       	movw	r26, r14
    a158:	a4 52       	subi	r26, 0x24	; 36
    a15a:	b5 4d       	sbci	r27, 0xD5	; 213
    a15c:	52 96       	adiw	r26, 0x12	; 18
    a15e:	1d 92       	st	X+, r1
    a160:	1c 92       	st	X, r1
    a162:	53 97       	sbiw	r26, 0x13	; 19
    a164:	1e 96       	adiw	r26, 0x0e	; 14
    a166:	2d 93       	st	X+, r18
    a168:	3c 93       	st	X, r19
    a16a:	1f 97       	sbiw	r26, 0x0f	; 15
    a16c:	81 81       	ldd	r24, Z+1	; 0x01
    a16e:	92 81       	ldd	r25, Z+2	; 0x02
    a170:	c8 0e       	add	r12, r24
    a172:	d9 1e       	adc	r13, r25
    a174:	cc 0f       	add	r28, r28
    a176:	dd 1f       	adc	r29, r29
    a178:	cc 0f       	add	r28, r28
    a17a:	dd 1f       	adc	r29, r29
    a17c:	cc 0f       	add	r28, r28
    a17e:	dd 1f       	adc	r29, r29
    a180:	c4 51       	subi	r28, 0x14	; 20
    a182:	d5 4d       	sbci	r29, 0xD5	; 213
    a184:	c8 82       	st	Y, r12
    a186:	d9 82       	std	Y+1, r13	; 0x01
    a188:	f7 01       	movw	r30, r14
    a18a:	e8 51       	subi	r30, 0x18	; 24
    a18c:	f5 4d       	sbci	r31, 0xD5	; 213
    a18e:	02 e0       	ldi	r16, 0x02	; 2
    a190:	06 93       	lac	Z, r16
    a192:	df 91       	pop	r29
    a194:	cf 91       	pop	r28
    a196:	1f 91       	pop	r17
    a198:	0f 91       	pop	r16
    a19a:	ff 90       	pop	r15
    a19c:	ef 90       	pop	r14
    a19e:	df 90       	pop	r13
    a1a0:	cf 90       	pop	r12
    a1a2:	bf 90       	pop	r11
    a1a4:	af 90       	pop	r10
    a1a6:	9f 90       	pop	r9
    a1a8:	8f 90       	pop	r8
    a1aa:	7f 90       	pop	r7
    a1ac:	6f 90       	pop	r6
    a1ae:	5f 90       	pop	r5
    a1b0:	4f 90       	pop	r4
    a1b2:	3f 90       	pop	r3
    a1b4:	08 95       	ret
    a1b6:	15 96       	adiw	r26, 0x05	; 5
    a1b8:	cd 92       	st	X+, r12
    a1ba:	dc 92       	st	X, r13
    a1bc:	16 97       	sbiw	r26, 0x06	; 6
    a1be:	f7 01       	movw	r30, r14
    a1c0:	e4 52       	subi	r30, 0x24	; 36
    a1c2:	f5 4d       	sbci	r31, 0xD5	; 213
    a1c4:	82 89       	ldd	r24, Z+18	; 0x12
    a1c6:	93 89       	ldd	r25, Z+19	; 0x13
    a1c8:	8c 91       	ld	r24, X
    a1ca:	53 cf       	rjmp	.-346    	; 0xa072 <__stack+0x73>
    a1cc:	c3 80       	ldd	r12, Z+3	; 0x03
    a1ce:	d4 80       	ldd	r13, Z+4	; 0x04
    a1d0:	45 80       	ldd	r4, Z+5	; 0x05
    a1d2:	56 80       	ldd	r5, Z+6	; 0x06
    a1d4:	21 81       	ldd	r18, Z+1	; 0x01
    a1d6:	32 81       	ldd	r19, Z+2	; 0x02
    a1d8:	c6 01       	movw	r24, r12
    a1da:	b4 01       	movw	r22, r8
    a1dc:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    a1e0:	40 e4       	ldi	r20, 0x40	; 64
    a1e2:	34 9e       	mul	r3, r20
    a1e4:	b0 01       	movw	r22, r0
    a1e6:	11 24       	eor	r1, r1
    a1e8:	6e 54       	subi	r22, 0x4E	; 78
    a1ea:	76 4d       	sbci	r23, 0xD6	; 214
    a1ec:	ac 01       	movw	r20, r24
    a1ee:	c9 01       	movw	r24, r18
    a1f0:	84 0d       	add	r24, r4
    a1f2:	95 1d       	adc	r25, r5
    a1f4:	0e 94 93 80 	call	0x10126	; 0x10126 <memcpy>
    a1f8:	22 cf       	rjmp	.-444    	; 0xa03e <__stack+0x3f>
    a1fa:	80 81       	ld	r24, Z
    a1fc:	81 ff       	sbrs	r24, 1
    a1fe:	39 cf       	rjmp	.-398    	; 0xa072 <__stack+0x73>
    a200:	8d 7f       	andi	r24, 0xFD	; 253
    a202:	80 83       	st	Z, r24
    a204:	52 96       	adiw	r26, 0x12	; 18
    a206:	1d 92       	st	X+, r1
    a208:	1c 92       	st	X, r1
    a20a:	53 97       	sbiw	r26, 0x13	; 19
    a20c:	1e 96       	adiw	r26, 0x0e	; 14
    a20e:	1d 92       	st	X+, r1
    a210:	1c 92       	st	X, r1
    a212:	1f 97       	sbiw	r26, 0x0f	; 15
    a214:	f7 01       	movw	r30, r14
    a216:	e8 51       	subi	r30, 0x18	; 24
    a218:	f5 4d       	sbci	r31, 0xD5	; 213
    a21a:	02 e0       	ldi	r16, 0x02	; 2
    a21c:	06 93       	lac	Z, r16
    a21e:	b9 cf       	rjmp	.-142    	; 0xa192 <__stack+0x193>
    a220:	4c 14       	cp	r4, r12
    a222:	5d 04       	cpc	r5, r13
    a224:	09 f4       	brne	.+2      	; 0xa228 <__stack+0x229>
    a226:	56 c0       	rjmp	.+172    	; 0xa2d4 <__stack+0x2d5>
    a228:	c4 18       	sub	r12, r4
    a22a:	d5 08       	sbc	r13, r5
    a22c:	c1 14       	cp	r12, r1
    a22e:	84 e0       	ldi	r24, 0x04	; 4
    a230:	d8 06       	cpc	r13, r24
    a232:	08 f4       	brcc	.+2      	; 0xa236 <__stack+0x237>
    a234:	46 c0       	rjmp	.+140    	; 0xa2c2 <__stack+0x2c3>
    a236:	2f ef       	ldi	r18, 0xFF	; 255
    a238:	33 e0       	ldi	r19, 0x03	; 3
    a23a:	c9 01       	movw	r24, r18
    a23c:	b4 01       	movw	r22, r8
    a23e:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    a242:	69 01       	movw	r12, r18
    a244:	c8 1a       	sub	r12, r24
    a246:	d9 0a       	sbc	r13, r25
    a248:	f7 01       	movw	r30, r14
    a24a:	e4 52       	subi	r30, 0x24	; 36
    a24c:	f5 4d       	sbci	r31, 0xD5	; 213
    a24e:	16 86       	std	Z+14, r1	; 0x0e
    a250:	17 86       	std	Z+15, r1	; 0x0f
    a252:	0a 0d       	add	r16, r10
    a254:	1b 1d       	adc	r17, r11
    a256:	d8 01       	movw	r26, r16
    a258:	ae 58       	subi	r26, 0x8E	; 142
    a25a:	b5 4d       	sbci	r27, 0xD5	; 213
    a25c:	c8 14       	cp	r12, r8
    a25e:	d9 04       	cpc	r13, r9
    a260:	e8 f4       	brcc	.+58     	; 0xa29c <__stack+0x29d>
    a262:	8c 91       	ld	r24, X
    a264:	84 60       	ori	r24, 0x04	; 4
    a266:	8c 93       	st	X, r24
    a268:	20 e4       	ldi	r18, 0x40	; 64
    a26a:	32 9e       	mul	r3, r18
    a26c:	c0 01       	movw	r24, r0
    a26e:	11 24       	eor	r1, r1
    a270:	8e 54       	subi	r24, 0x4E	; 78
    a272:	96 4d       	sbci	r25, 0xD6	; 214
    a274:	cc 0f       	add	r28, r28
    a276:	dd 1f       	adc	r29, r29
    a278:	cc 0f       	add	r28, r28
    a27a:	dd 1f       	adc	r29, r29
    a27c:	cc 0f       	add	r28, r28
    a27e:	dd 1f       	adc	r29, r29
    a280:	c4 51       	subi	r28, 0x14	; 20
    a282:	d5 4d       	sbci	r29, 0xD5	; 213
    a284:	88 83       	st	Y, r24
    a286:	99 83       	std	Y+1, r25	; 0x01
    a288:	82 8a       	std	Z+18, r8	; 0x12
    a28a:	93 8a       	std	Z+19, r9	; 0x13
    a28c:	f7 01       	movw	r30, r14
    a28e:	e8 51       	subi	r30, 0x18	; 24
    a290:	f5 4d       	sbci	r31, 0xD5	; 213
    a292:	02 e0       	ldi	r16, 0x02	; 2
    a294:	06 93       	lac	Z, r16
    a296:	7d cf       	rjmp	.-262    	; 0xa192 <__stack+0x193>
    a298:	80 e0       	ldi	r24, 0x00	; 0
    a29a:	54 cf       	rjmp	.-344    	; 0xa144 <__stack+0x145>
    a29c:	11 96       	adiw	r26, 0x01	; 1
    a29e:	8d 91       	ld	r24, X+
    a2a0:	9c 91       	ld	r25, X
    a2a2:	12 97       	sbiw	r26, 0x02	; 2
    a2a4:	48 0e       	add	r4, r24
    a2a6:	59 1e       	adc	r5, r25
    a2a8:	cc 0f       	add	r28, r28
    a2aa:	dd 1f       	adc	r29, r29
    a2ac:	cc 0f       	add	r28, r28
    a2ae:	dd 1f       	adc	r29, r29
    a2b0:	cc 0f       	add	r28, r28
    a2b2:	dd 1f       	adc	r29, r29
    a2b4:	c4 51       	subi	r28, 0x14	; 20
    a2b6:	d5 4d       	sbci	r29, 0xD5	; 213
    a2b8:	48 82       	st	Y, r4
    a2ba:	59 82       	std	Y+1, r5	; 0x01
    a2bc:	c2 8a       	std	Z+18, r12	; 0x12
    a2be:	d3 8a       	std	Z+19, r13	; 0x13
    a2c0:	e5 cf       	rjmp	.-54     	; 0xa28c <__stack+0x28d>
    a2c2:	c6 01       	movw	r24, r12
    a2c4:	b4 01       	movw	r22, r8
    a2c6:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    a2ca:	c8 1a       	sub	r12, r24
    a2cc:	d9 0a       	sbc	r13, r25
    a2ce:	bc cf       	rjmp	.-136    	; 0xa248 <__stack+0x249>
    a2d0:	90 e0       	ldi	r25, 0x00	; 0
    a2d2:	37 cf       	rjmp	.-402    	; 0xa142 <__stack+0x143>
    a2d4:	8c 91       	ld	r24, X
    a2d6:	cd ce       	rjmp	.-614    	; 0xa072 <__stack+0x73>

0000a2d8 <udd_ctrl_in_sent>:
    a2d8:	0f 93       	push	r16
    a2da:	cf 93       	push	r28
    a2dc:	df 93       	push	r29
    a2de:	80 91 da 2a 	lds	r24, 0x2ADA	; 0x802ada <udd_ep_control_state>
    a2e2:	83 30       	cpi	r24, 0x03	; 3
    a2e4:	09 f4       	brne	.+2      	; 0xa2e8 <udd_ctrl_in_sent+0x10>
    a2e6:	56 c0       	rjmp	.+172    	; 0xa394 <udd_ctrl_in_sent+0xbc>
    a2e8:	20 91 d6 2a 	lds	r18, 0x2AD6	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    a2ec:	30 91 d7 2a 	lds	r19, 0x2AD7	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    a2f0:	c0 91 c6 2d 	lds	r28, 0x2DC6	; 0x802dc6 <udd_g_ctrlreq+0xa>
    a2f4:	d0 91 c7 2d 	lds	r29, 0x2DC7	; 0x802dc7 <udd_g_ctrlreq+0xb>
    a2f8:	c2 1b       	sub	r28, r18
    a2fa:	d3 0b       	sbc	r29, r19
    a2fc:	21 f1       	breq	.+72     	; 0xa346 <udd_ctrl_in_sent+0x6e>
    a2fe:	c0 34       	cpi	r28, 0x40	; 64
    a300:	d1 05       	cpc	r29, r1
    a302:	08 f4       	brcc	.+2      	; 0xa306 <udd_ctrl_in_sent+0x2e>
    a304:	43 c0       	rjmp	.+134    	; 0xa38c <udd_ctrl_in_sent+0xb4>
    a306:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <b_shortpacket.5256>
    a30a:	c0 e4       	ldi	r28, 0x40	; 64
    a30c:	d0 e0       	ldi	r29, 0x00	; 0
    a30e:	c0 93 f2 2a 	sts	0x2AF2, r28	; 0x802af2 <udd_sram+0x16>
    a312:	d0 93 f3 2a 	sts	0x2AF3, r29	; 0x802af3 <udd_sram+0x17>
    a316:	80 91 c4 2d 	lds	r24, 0x2DC4	; 0x802dc4 <udd_g_ctrlreq+0x8>
    a31a:	90 91 c5 2d 	lds	r25, 0x2DC5	; 0x802dc5 <udd_g_ctrlreq+0x9>
    a31e:	82 0f       	add	r24, r18
    a320:	93 1f       	adc	r25, r19
    a322:	80 93 f4 2a 	sts	0x2AF4, r24	; 0x802af4 <udd_sram+0x18>
    a326:	90 93 f5 2a 	sts	0x2AF5, r25	; 0x802af5 <udd_sram+0x19>
    a32a:	c2 0f       	add	r28, r18
    a32c:	d3 1f       	adc	r29, r19
    a32e:	c0 93 d6 2a 	sts	0x2AD6, r28	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    a332:	d0 93 d7 2a 	sts	0x2AD7, r29	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    a336:	e0 ef       	ldi	r30, 0xF0	; 240
    a338:	fa e2       	ldi	r31, 0x2A	; 42
    a33a:	02 e0       	ldi	r16, 0x02	; 2
    a33c:	06 93       	lac	Z, r16
    a33e:	df 91       	pop	r29
    a340:	cf 91       	pop	r28
    a342:	0f 91       	pop	r16
    a344:	08 95       	ret
    a346:	80 91 d8 2a 	lds	r24, 0x2AD8	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    a34a:	90 91 d9 2a 	lds	r25, 0x2AD9	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    a34e:	82 0f       	add	r24, r18
    a350:	93 1f       	adc	r25, r19
    a352:	80 93 d8 2a 	sts	0x2AD8, r24	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    a356:	90 93 d9 2a 	sts	0x2AD9, r25	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    a35a:	40 91 c2 2d 	lds	r20, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    a35e:	50 91 c3 2d 	lds	r21, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    a362:	84 17       	cp	r24, r20
    a364:	95 07       	cpc	r25, r21
    a366:	09 f4       	brne	.+2      	; 0xa36a <udd_ctrl_in_sent+0x92>
    a368:	48 c0       	rjmp	.+144    	; 0xa3fa <udd_ctrl_in_sent+0x122>
    a36a:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <b_shortpacket.5256>
    a36e:	81 11       	cpse	r24, r1
    a370:	44 c0       	rjmp	.+136    	; 0xa3fa <udd_ctrl_in_sent+0x122>
    a372:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udd_g_ctrlreq+0xe>
    a376:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udd_g_ctrlreq+0xf>
    a37a:	30 97       	sbiw	r30, 0x00	; 0
    a37c:	39 f0       	breq	.+14     	; 0xa38c <udd_ctrl_in_sent+0xb4>
    a37e:	19 95       	eicall
    a380:	81 11       	cpse	r24, r1
    a382:	46 c0       	rjmp	.+140    	; 0xa410 <udd_ctrl_in_sent+0x138>
    a384:	20 91 d6 2a 	lds	r18, 0x2AD6	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    a388:	30 91 d7 2a 	lds	r19, 0x2AD7	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    a38c:	81 e0       	ldi	r24, 0x01	; 1
    a38e:	80 93 f1 29 	sts	0x29F1, r24	; 0x8029f1 <b_shortpacket.5256>
    a392:	bd cf       	rjmp	.-134    	; 0xa30e <udd_ctrl_in_sent+0x36>
    a394:	e0 91 c8 2d 	lds	r30, 0x2DC8	; 0x802dc8 <udd_g_ctrlreq+0xc>
    a398:	f0 91 c9 2d 	lds	r31, 0x2DC9	; 0x802dc9 <udd_g_ctrlreq+0xd>
    a39c:	30 97       	sbiw	r30, 0x00	; 0
    a39e:	09 f0       	breq	.+2      	; 0xa3a2 <udd_ctrl_in_sent+0xca>
    a3a0:	19 95       	eicall
    a3a2:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a3a6:	8f 7d       	andi	r24, 0xDF	; 223
    a3a8:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a3ac:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a3b0:	8f 7d       	andi	r24, 0xDF	; 223
    a3b2:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a3b6:	e0 ef       	ldi	r30, 0xF0	; 240
    a3b8:	fa e2       	ldi	r31, 0x2A	; 42
    a3ba:	02 e0       	ldi	r16, 0x02	; 2
    a3bc:	05 93       	las	Z, r16
    a3be:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    a3c2:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
    a3c6:	00 e2       	ldi	r16, 0x20	; 32
    a3c8:	06 93       	lac	Z, r16
    a3ca:	00 e4       	ldi	r16, 0x40	; 64
    a3cc:	06 93       	lac	Z, r16
    a3ce:	e8 ee       	ldi	r30, 0xE8	; 232
    a3d0:	fa e2       	ldi	r31, 0x2A	; 42
    a3d2:	00 e4       	ldi	r16, 0x40	; 64
    a3d4:	06 93       	lac	Z, r16
    a3d6:	10 92 c8 2d 	sts	0x2DC8, r1	; 0x802dc8 <udd_g_ctrlreq+0xc>
    a3da:	10 92 c9 2d 	sts	0x2DC9, r1	; 0x802dc9 <udd_g_ctrlreq+0xd>
    a3de:	10 92 ca 2d 	sts	0x2DCA, r1	; 0x802dca <udd_g_ctrlreq+0xe>
    a3e2:	10 92 cb 2d 	sts	0x2DCB, r1	; 0x802dcb <udd_g_ctrlreq+0xf>
    a3e6:	10 92 c6 2d 	sts	0x2DC6, r1	; 0x802dc6 <udd_g_ctrlreq+0xa>
    a3ea:	10 92 c7 2d 	sts	0x2DC7, r1	; 0x802dc7 <udd_g_ctrlreq+0xb>
    a3ee:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <udd_ep_control_state>
    a3f2:	df 91       	pop	r29
    a3f4:	cf 91       	pop	r28
    a3f6:	0f 91       	pop	r16
    a3f8:	08 95       	ret
    a3fa:	84 e0       	ldi	r24, 0x04	; 4
    a3fc:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
    a400:	e8 ee       	ldi	r30, 0xE8	; 232
    a402:	fa e2       	ldi	r31, 0x2A	; 42
    a404:	02 e0       	ldi	r16, 0x02	; 2
    a406:	06 93       	lac	Z, r16
    a408:	df 91       	pop	r29
    a40a:	cf 91       	pop	r28
    a40c:	0f 91       	pop	r16
    a40e:	08 95       	ret
    a410:	c0 91 c6 2d 	lds	r28, 0x2DC6	; 0x802dc6 <udd_g_ctrlreq+0xa>
    a414:	d0 91 c7 2d 	lds	r29, 0x2DC7	; 0x802dc7 <udd_g_ctrlreq+0xb>
    a418:	20 e0       	ldi	r18, 0x00	; 0
    a41a:	30 e0       	ldi	r19, 0x00	; 0
    a41c:	70 cf       	rjmp	.-288    	; 0xa2fe <udd_ctrl_in_sent+0x26>

0000a41e <udd_ctrl_interrupt_tc_setup.part.0>:
    a41e:	ef 92       	push	r14
    a420:	ff 92       	push	r15
    a422:	0f 93       	push	r16
    a424:	cf 93       	push	r28
    a426:	df 93       	push	r29
    a428:	81 e0       	ldi	r24, 0x01	; 1
    a42a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    a42e:	c8 ee       	ldi	r28, 0xE8	; 232
    a430:	da e2       	ldi	r29, 0x2A	; 42
    a432:	fe 01       	movw	r30, r28
    a434:	00 e8       	ldi	r16, 0x80	; 128
    a436:	06 93       	lac	Z, r16
    a438:	90 ef       	ldi	r25, 0xF0	; 240
    a43a:	e9 2e       	mov	r14, r25
    a43c:	9a e2       	ldi	r25, 0x2A	; 42
    a43e:	f9 2e       	mov	r15, r25
    a440:	f7 01       	movw	r30, r14
    a442:	00 e8       	ldi	r16, 0x80	; 128
    a444:	06 93       	lac	Z, r16
    a446:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    a44a:	fe 01       	movw	r30, r28
    a44c:	00 e1       	ldi	r16, 0x10	; 16
    a44e:	06 93       	lac	Z, r16
    a450:	80 91 da 2a 	lds	r24, 0x2ADA	; 0x802ada <udd_ep_control_state>
    a454:	88 23       	and	r24, r24
    a456:	51 f1       	breq	.+84     	; 0xa4ac <udd_ctrl_interrupt_tc_setup.part.0+0x8e>
    a458:	83 50       	subi	r24, 0x03	; 3
    a45a:	82 30       	cpi	r24, 0x02	; 2
    a45c:	08 f4       	brcc	.+2      	; 0xa460 <udd_ctrl_interrupt_tc_setup.part.0+0x42>
    a45e:	33 c0       	rjmp	.+102    	; 0xa4c6 <udd_ctrl_interrupt_tc_setup.part.0+0xa8>
    a460:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a464:	8f 7d       	andi	r24, 0xDF	; 223
    a466:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a46a:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a46e:	8f 7d       	andi	r24, 0xDF	; 223
    a470:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a474:	f7 01       	movw	r30, r14
    a476:	02 e0       	ldi	r16, 0x02	; 2
    a478:	05 93       	las	Z, r16
    a47a:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    a47e:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
    a482:	00 e2       	ldi	r16, 0x20	; 32
    a484:	06 93       	lac	Z, r16
    a486:	00 e4       	ldi	r16, 0x40	; 64
    a488:	06 93       	lac	Z, r16
    a48a:	fe 01       	movw	r30, r28
    a48c:	00 e4       	ldi	r16, 0x40	; 64
    a48e:	06 93       	lac	Z, r16
    a490:	10 92 c8 2d 	sts	0x2DC8, r1	; 0x802dc8 <udd_g_ctrlreq+0xc>
    a494:	10 92 c9 2d 	sts	0x2DC9, r1	; 0x802dc9 <udd_g_ctrlreq+0xd>
    a498:	10 92 ca 2d 	sts	0x2DCA, r1	; 0x802dca <udd_g_ctrlreq+0xe>
    a49c:	10 92 cb 2d 	sts	0x2DCB, r1	; 0x802dcb <udd_g_ctrlreq+0xf>
    a4a0:	10 92 c6 2d 	sts	0x2DC6, r1	; 0x802dc6 <udd_g_ctrlreq+0xa>
    a4a4:	10 92 c7 2d 	sts	0x2DC7, r1	; 0x802dc7 <udd_g_ctrlreq+0xb>
    a4a8:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <udd_ep_control_state>
    a4ac:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udd_sram+0xe>
    a4b0:	90 91 eb 2a 	lds	r25, 0x2AEB	; 0x802aeb <udd_sram+0xf>
    a4b4:	08 97       	sbiw	r24, 0x08	; 8
    a4b6:	81 f0       	breq	.+32     	; 0xa4d8 <udd_ctrl_interrupt_tc_setup.part.0+0xba>
    a4b8:	81 e0       	ldi	r24, 0x01	; 1
    a4ba:	df 91       	pop	r29
    a4bc:	cf 91       	pop	r28
    a4be:	0f 91       	pop	r16
    a4c0:	ff 90       	pop	r15
    a4c2:	ef 90       	pop	r14
    a4c4:	08 95       	ret
    a4c6:	e0 91 c8 2d 	lds	r30, 0x2DC8	; 0x802dc8 <udd_g_ctrlreq+0xc>
    a4ca:	f0 91 c9 2d 	lds	r31, 0x2DC9	; 0x802dc9 <udd_g_ctrlreq+0xd>
    a4ce:	30 97       	sbiw	r30, 0x00	; 0
    a4d0:	09 f4       	brne	.+2      	; 0xa4d4 <udd_ctrl_interrupt_tc_setup.part.0+0xb6>
    a4d2:	c6 cf       	rjmp	.-116    	; 0xa460 <udd_ctrl_interrupt_tc_setup.part.0+0x42>
    a4d4:	19 95       	eicall
    a4d6:	c4 cf       	rjmp	.-120    	; 0xa460 <udd_ctrl_interrupt_tc_setup.part.0+0x42>
    a4d8:	88 e0       	ldi	r24, 0x08	; 8
    a4da:	e6 e9       	ldi	r30, 0x96	; 150
    a4dc:	fa e2       	ldi	r31, 0x2A	; 42
    a4de:	ac eb       	ldi	r26, 0xBC	; 188
    a4e0:	bd e2       	ldi	r27, 0x2D	; 45
    a4e2:	01 90       	ld	r0, Z+
    a4e4:	0d 92       	st	X+, r0
    a4e6:	8a 95       	dec	r24
    a4e8:	e1 f7       	brne	.-8      	; 0xa4e2 <udd_ctrl_interrupt_tc_setup.part.0+0xc4>
    a4ea:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a4ee:	80 62       	ori	r24, 0x20	; 32
    a4f0:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a4f4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a4f8:	80 62       	ori	r24, 0x20	; 32
    a4fa:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a4fe:	0e 94 8f 19 	call	0x331e	; 0x331e <udc_process_setup>
    a502:	88 23       	and	r24, r24
    a504:	d9 f0       	breq	.+54     	; 0xa53c <udd_ctrl_interrupt_tc_setup.part.0+0x11e>
    a506:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udd_g_ctrlreq>
    a50a:	87 fd       	sbrc	r24, 7
    a50c:	2e c0       	rjmp	.+92     	; 0xa56a <udd_ctrl_interrupt_tc_setup.part.0+0x14c>
    a50e:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    a512:	90 91 c3 2d 	lds	r25, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    a516:	89 2b       	or	r24, r25
    a518:	e9 f0       	breq	.+58     	; 0xa554 <udd_ctrl_interrupt_tc_setup.part.0+0x136>
    a51a:	10 92 d8 2a 	sts	0x2AD8, r1	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    a51e:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    a522:	10 92 d6 2a 	sts	0x2AD6, r1	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    a526:	10 92 d7 2a 	sts	0x2AD7, r1	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    a52a:	81 e0       	ldi	r24, 0x01	; 1
    a52c:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
    a530:	fe 01       	movw	r30, r28
    a532:	02 e0       	ldi	r16, 0x02	; 2
    a534:	06 93       	lac	Z, r16
    a536:	00 e2       	ldi	r16, 0x20	; 32
    a538:	06 93       	lac	Z, r16
    a53a:	be cf       	rjmp	.-132    	; 0xa4b8 <udd_ctrl_interrupt_tc_setup.part.0+0x9a>
    a53c:	85 e0       	ldi	r24, 0x05	; 5
    a53e:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
    a542:	e1 ef       	ldi	r30, 0xF1	; 241
    a544:	fa e2       	ldi	r31, 0x2A	; 42
    a546:	04 e0       	ldi	r16, 0x04	; 4
    a548:	05 93       	las	Z, r16
    a54a:	e9 ee       	ldi	r30, 0xE9	; 233
    a54c:	fa e2       	ldi	r31, 0x2A	; 42
    a54e:	04 e0       	ldi	r16, 0x04	; 4
    a550:	05 93       	las	Z, r16
    a552:	b2 cf       	rjmp	.-156    	; 0xa4b8 <udd_ctrl_interrupt_tc_setup.part.0+0x9a>
    a554:	83 e0       	ldi	r24, 0x03	; 3
    a556:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
    a55a:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    a55e:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
    a562:	f7 01       	movw	r30, r14
    a564:	02 e0       	ldi	r16, 0x02	; 2
    a566:	06 93       	lac	Z, r16
    a568:	a7 cf       	rjmp	.-178    	; 0xa4b8 <udd_ctrl_interrupt_tc_setup.part.0+0x9a>
    a56a:	10 92 d8 2a 	sts	0x2AD8, r1	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    a56e:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    a572:	10 92 d6 2a 	sts	0x2AD6, r1	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    a576:	10 92 d7 2a 	sts	0x2AD7, r1	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    a57a:	82 e0       	ldi	r24, 0x02	; 2
    a57c:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
    a580:	ab de       	rcall	.-682    	; 0xa2d8 <udd_ctrl_in_sent>
    a582:	9a cf       	rjmp	.-204    	; 0xa4b8 <udd_ctrl_interrupt_tc_setup.part.0+0x9a>

0000a584 <udd_enable>:
    a584:	1f 93       	push	r17
    a586:	cf 93       	push	r28
    a588:	df 93       	push	r29
    a58a:	00 d0       	rcall	.+0      	; 0xa58c <udd_enable+0x8>
    a58c:	1f 92       	push	r1
    a58e:	cd b7       	in	r28, 0x3d	; 61
    a590:	de b7       	in	r29, 0x3e	; 62
    a592:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    a596:	80 e3       	ldi	r24, 0x30	; 48
    a598:	0e 94 aa 73 	call	0xe754	; 0xe754 <sysclk_enable_usb>
    a59c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a5a0:	80 64       	ori	r24, 0x40	; 64
    a5a2:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a5a6:	81 e0       	ldi	r24, 0x01	; 1
    a5a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    a5ac:	8f b7       	in	r24, 0x3f	; 63
    a5ae:	8c 83       	std	Y+4, r24	; 0x04
    a5b0:	f8 94       	cli
    a5b2:	1c 81       	ldd	r17, Y+4	; 0x04
    a5b4:	10 92 e9 2a 	sts	0x2AE9, r1	; 0x802ae9 <udd_sram+0xd>
    a5b8:	10 92 f1 2a 	sts	0x2AF1, r1	; 0x802af1 <udd_sram+0x15>
    a5bc:	10 92 f9 2a 	sts	0x2AF9, r1	; 0x802af9 <udd_sram+0x1d>
    a5c0:	10 92 01 2b 	sts	0x2B01, r1	; 0x802b01 <udd_sram+0x25>
    a5c4:	10 92 09 2b 	sts	0x2B09, r1	; 0x802b09 <udd_sram+0x2d>
    a5c8:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <udd_sram+0x35>
    a5cc:	80 91 72 2a 	lds	r24, 0x2A72	; 0x802a72 <udd_ep_job>
    a5d0:	8e 7f       	andi	r24, 0xFE	; 254
    a5d2:	80 93 72 2a 	sts	0x2A72, r24	; 0x802a72 <udd_ep_job>
    a5d6:	80 91 7b 2a 	lds	r24, 0x2A7B	; 0x802a7b <udd_ep_job+0x9>
    a5da:	8e 7f       	andi	r24, 0xFE	; 254
    a5dc:	80 93 7b 2a 	sts	0x2A7B, r24	; 0x802a7b <udd_ep_job+0x9>
    a5e0:	80 91 84 2a 	lds	r24, 0x2A84	; 0x802a84 <udd_ep_job+0x12>
    a5e4:	8e 7f       	andi	r24, 0xFE	; 254
    a5e6:	80 93 84 2a 	sts	0x2A84, r24	; 0x802a84 <udd_ep_job+0x12>
    a5ea:	80 91 8d 2a 	lds	r24, 0x2A8D	; 0x802a8d <udd_ep_job+0x1b>
    a5ee:	8e 7f       	andi	r24, 0xFE	; 254
    a5f0:	80 93 8d 2a 	sts	0x2A8D, r24	; 0x802a8d <udd_ep_job+0x1b>
    a5f4:	6a e1       	ldi	r22, 0x1A	; 26
    a5f6:	70 e0       	ldi	r23, 0x00	; 0
    a5f8:	82 e0       	ldi	r24, 0x02	; 2
    a5fa:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <nvm_read_byte>
    a5fe:	8f 3f       	cpi	r24, 0xFF	; 255
    a600:	09 f4       	brne	.+2      	; 0xa604 <udd_enable+0x80>
    a602:	81 c0       	rjmp	.+258    	; 0xa706 <udd_enable+0x182>
    a604:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    a608:	6b e1       	ldi	r22, 0x1B	; 27
    a60a:	70 e0       	ldi	r23, 0x00	; 0
    a60c:	82 e0       	ldi	r24, 0x02	; 2
    a60e:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <nvm_read_byte>
    a612:	8f 3f       	cpi	r24, 0xFF	; 255
    a614:	09 f4       	brne	.+2      	; 0xa618 <udd_enable+0x94>
    a616:	8f e1       	ldi	r24, 0x1F	; 31
    a618:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    a61c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a620:	82 60       	ori	r24, 0x02	; 2
    a622:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a626:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a62a:	80 68       	ori	r24, 0x80	; 128
    a62c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a630:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a634:	80 61       	ori	r24, 0x10	; 16
    a636:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a63a:	88 ee       	ldi	r24, 0xE8	; 232
    a63c:	9a e2       	ldi	r25, 0x2A	; 42
    a63e:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
    a642:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
    a646:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a64a:	80 62       	ori	r24, 0x20	; 32
    a64c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a650:	8f ef       	ldi	r24, 0xFF	; 255
    a652:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    a656:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a65a:	81 60       	ori	r24, 0x01	; 1
    a65c:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a660:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <udd_b_idle>
    a664:	80 91 d3 31 	lds	r24, 0x31D3	; 0x8031d3 <sleepmgr_locks+0x5>
    a668:	8f 3f       	cpi	r24, 0xFF	; 255
    a66a:	09 f4       	brne	.+2      	; 0xa66e <udd_enable+0xea>
    a66c:	ff cf       	rjmp	.-2      	; 0xa66c <udd_enable+0xe8>
    a66e:	8f b7       	in	r24, 0x3f	; 63
    a670:	8b 83       	std	Y+3, r24	; 0x03
    a672:	f8 94       	cli
    a674:	9b 81       	ldd	r25, Y+3	; 0x03
    a676:	80 91 d3 31 	lds	r24, 0x31D3	; 0x8031d3 <sleepmgr_locks+0x5>
    a67a:	8f 5f       	subi	r24, 0xFF	; 255
    a67c:	80 93 d3 31 	sts	0x31D3, r24	; 0x8031d3 <sleepmgr_locks+0x5>
    a680:	9f bf       	out	0x3f, r25	; 63
    a682:	8f b7       	in	r24, 0x3f	; 63
    a684:	8a 83       	std	Y+2, r24	; 0x02
    a686:	f8 94       	cli
    a688:	9a 81       	ldd	r25, Y+2	; 0x02
    a68a:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <udd_b_idle>
    a68e:	81 11       	cpse	r24, r1
    a690:	0e c0       	rjmp	.+28     	; 0xa6ae <udd_enable+0x12a>
    a692:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    a696:	8f 3f       	cpi	r24, 0xFF	; 255
    a698:	a9 f1       	breq	.+106    	; 0xa704 <udd_enable+0x180>
    a69a:	8f b7       	in	r24, 0x3f	; 63
    a69c:	89 83       	std	Y+1, r24	; 0x01
    a69e:	f8 94       	cli
    a6a0:	29 81       	ldd	r18, Y+1	; 0x01
    a6a2:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    a6a6:	8f 5f       	subi	r24, 0xFF	; 255
    a6a8:	80 93 cf 31 	sts	0x31CF, r24	; 0x8031cf <sleepmgr_locks+0x1>
    a6ac:	2f bf       	out	0x3f, r18	; 63
    a6ae:	81 e0       	ldi	r24, 0x01	; 1
    a6b0:	80 93 1c 2b 	sts	0x2B1C, r24	; 0x802b1c <udd_b_idle>
    a6b4:	80 e4       	ldi	r24, 0x40	; 64
    a6b6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    a6ba:	80 e2       	ldi	r24, 0x20	; 32
    a6bc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    a6c0:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    a6c4:	81 60       	ori	r24, 0x01	; 1
    a6c6:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    a6ca:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <__TEXT_REGION_LENGTH__+0x7004c9>
    a6ce:	82 60       	ori	r24, 0x02	; 2
    a6d0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <__TEXT_REGION_LENGTH__+0x7004c9>
    a6d4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a6d8:	80 64       	ori	r24, 0x40	; 64
    a6da:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a6de:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <__TEXT_REGION_LENGTH__+0x7004c9>
    a6e2:	81 60       	ori	r24, 0x01	; 1
    a6e4:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <__TEXT_REGION_LENGTH__+0x7004c9>
    a6e8:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a6ec:	80 68       	ori	r24, 0x80	; 128
    a6ee:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    a6f2:	9f bf       	out	0x3f, r25	; 63
    a6f4:	1f bf       	out	0x3f, r17	; 63
    a6f6:	24 96       	adiw	r28, 0x04	; 4
    a6f8:	cd bf       	out	0x3d, r28	; 61
    a6fa:	de bf       	out	0x3e, r29	; 62
    a6fc:	df 91       	pop	r29
    a6fe:	cf 91       	pop	r28
    a700:	1f 91       	pop	r17
    a702:	08 95       	ret
    a704:	ff cf       	rjmp	.-2      	; 0xa704 <udd_enable+0x180>
    a706:	8f e1       	ldi	r24, 0x1F	; 31
    a708:	7d cf       	rjmp	.-262    	; 0xa604 <udd_enable+0x80>

0000a70a <udd_is_high_speed>:
    a70a:	80 e0       	ldi	r24, 0x00	; 0
    a70c:	08 95       	ret

0000a70e <udd_set_address>:
    a70e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    a712:	08 95       	ret

0000a714 <udd_getaddress>:
    a714:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    a718:	08 95       	ret

0000a71a <udd_get_frame_number>:
    a71a:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <udd_sram+0x3c>
    a71e:	90 91 19 2b 	lds	r25, 0x2B19	; 0x802b19 <udd_sram+0x3d>
    a722:	08 95       	ret

0000a724 <udd_get_micro_frame_number>:
    a724:	80 e0       	ldi	r24, 0x00	; 0
    a726:	90 e0       	ldi	r25, 0x00	; 0
    a728:	08 95       	ret

0000a72a <udd_set_setup_payload>:
    a72a:	ec eb       	ldi	r30, 0xBC	; 188
    a72c:	fd e2       	ldi	r31, 0x2D	; 45
    a72e:	80 87       	std	Z+8, r24	; 0x08
    a730:	91 87       	std	Z+9, r25	; 0x09
    a732:	62 87       	std	Z+10, r22	; 0x0a
    a734:	73 87       	std	Z+11, r23	; 0x0b
    a736:	08 95       	ret

0000a738 <udd_ep_alloc>:
    a738:	28 2f       	mov	r18, r24
    a73a:	2f 70       	andi	r18, 0x0F	; 15
    a73c:	30 e0       	ldi	r19, 0x00	; 0
    a73e:	22 0f       	add	r18, r18
    a740:	33 1f       	adc	r19, r19
    a742:	08 2e       	mov	r0, r24
    a744:	00 0c       	add	r0, r0
    a746:	99 0b       	sbc	r25, r25
    a748:	88 27       	eor	r24, r24
    a74a:	99 0f       	add	r25, r25
    a74c:	88 1f       	adc	r24, r24
    a74e:	99 27       	eor	r25, r25
    a750:	82 0f       	add	r24, r18
    a752:	93 1f       	adc	r25, r19
    a754:	88 0f       	add	r24, r24
    a756:	99 1f       	adc	r25, r25
    a758:	88 0f       	add	r24, r24
    a75a:	99 1f       	adc	r25, r25
    a75c:	88 0f       	add	r24, r24
    a75e:	99 1f       	adc	r25, r25
    a760:	fc 01       	movw	r30, r24
    a762:	e4 52       	subi	r30, 0x24	; 36
    a764:	f5 4d       	sbci	r31, 0xD5	; 213
    a766:	25 85       	ldd	r18, Z+13	; 0x0d
    a768:	20 7c       	andi	r18, 0xC0	; 192
    a76a:	11 f0       	breq	.+4      	; 0xa770 <udd_ep_alloc+0x38>
    a76c:	80 e0       	ldi	r24, 0x00	; 0
    a76e:	08 95       	ret
    a770:	63 70       	andi	r22, 0x03	; 3
    a772:	61 30       	cpi	r22, 0x01	; 1
    a774:	09 f4       	brne	.+2      	; 0xa778 <udd_ep_alloc+0x40>
    a776:	48 c0       	rjmp	.+144    	; 0xa808 <udd_ep_alloc+0xd0>
    a778:	58 f1       	brcs	.+86     	; 0xa7d0 <udd_ep_alloc+0x98>
    a77a:	21 e8       	ldi	r18, 0x81	; 129
    a77c:	a2 e8       	ldi	r26, 0x82	; 130
    a77e:	f3 e8       	ldi	r31, 0x83	; 131
    a780:	e4 e8       	ldi	r30, 0x84	; 132
    a782:	75 e8       	ldi	r23, 0x85	; 133
    a784:	66 e8       	ldi	r22, 0x86	; 134
    a786:	37 e8       	ldi	r19, 0x87	; 135
    a788:	b0 e8       	ldi	r27, 0x80	; 128
    a78a:	40 38       	cpi	r20, 0x80	; 128
    a78c:	51 05       	cpc	r21, r1
    a78e:	09 f4       	brne	.+2      	; 0xa792 <udd_ep_alloc+0x5a>
    a790:	48 c0       	rjmp	.+144    	; 0xa822 <udd_ep_alloc+0xea>
    a792:	38 f5       	brcc	.+78     	; 0xa7e2 <udd_ep_alloc+0xaa>
    a794:	40 32       	cpi	r20, 0x20	; 32
    a796:	51 05       	cpc	r21, r1
    a798:	09 f4       	brne	.+2      	; 0xa79c <udd_ep_alloc+0x64>
    a79a:	41 c0       	rjmp	.+130    	; 0xa81e <udd_ep_alloc+0xe6>
    a79c:	40 34       	cpi	r20, 0x40	; 64
    a79e:	51 05       	cpc	r21, r1
    a7a0:	e1 f1       	breq	.+120    	; 0xa81a <udd_ep_alloc+0xe2>
    a7a2:	40 31       	cpi	r20, 0x10	; 16
    a7a4:	51 05       	cpc	r21, r1
    a7a6:	09 f0       	breq	.+2      	; 0xa7aa <udd_ep_alloc+0x72>
    a7a8:	2b 2f       	mov	r18, r27
    a7aa:	fc 01       	movw	r30, r24
    a7ac:	e4 52       	subi	r30, 0x24	; 36
    a7ae:	f5 4d       	sbci	r31, 0xD5	; 213
    a7b0:	15 86       	std	Z+13, r1	; 0x0d
    a7b2:	36 e0       	ldi	r19, 0x06	; 6
    a7b4:	34 87       	std	Z+12, r19	; 0x0c
    a7b6:	25 87       	std	Z+13, r18	; 0x0d
    a7b8:	25 85       	ldd	r18, Z+13	; 0x0d
    a7ba:	20 7c       	andi	r18, 0xC0	; 192
    a7bc:	20 3c       	cpi	r18, 0xC0	; 192
    a7be:	f1 f0       	breq	.+60     	; 0xa7fc <udd_ep_alloc+0xc4>
    a7c0:	fc 01       	movw	r30, r24
    a7c2:	e4 52       	subi	r30, 0x24	; 36
    a7c4:	f5 4d       	sbci	r31, 0xD5	; 213
    a7c6:	85 85       	ldd	r24, Z+13	; 0x0d
    a7c8:	80 62       	ori	r24, 0x20	; 32
    a7ca:	85 87       	std	Z+13, r24	; 0x0d
    a7cc:	81 e0       	ldi	r24, 0x01	; 1
    a7ce:	08 95       	ret
    a7d0:	21 e4       	ldi	r18, 0x41	; 65
    a7d2:	a2 e4       	ldi	r26, 0x42	; 66
    a7d4:	f3 e4       	ldi	r31, 0x43	; 67
    a7d6:	e4 e4       	ldi	r30, 0x44	; 68
    a7d8:	75 e4       	ldi	r23, 0x45	; 69
    a7da:	66 e4       	ldi	r22, 0x46	; 70
    a7dc:	37 e4       	ldi	r19, 0x47	; 71
    a7de:	b0 e4       	ldi	r27, 0x40	; 64
    a7e0:	d4 cf       	rjmp	.-88     	; 0xa78a <udd_ep_alloc+0x52>
    a7e2:	41 15       	cp	r20, r1
    a7e4:	22 e0       	ldi	r18, 0x02	; 2
    a7e6:	52 07       	cpc	r21, r18
    a7e8:	01 f1       	breq	.+64     	; 0xa82a <udd_ep_alloc+0xf2>
    a7ea:	4f 3f       	cpi	r20, 0xFF	; 255
    a7ec:	23 e0       	ldi	r18, 0x03	; 3
    a7ee:	52 07       	cpc	r21, r18
    a7f0:	d1 f0       	breq	.+52     	; 0xa826 <udd_ep_alloc+0xee>
    a7f2:	41 15       	cp	r20, r1
    a7f4:	51 40       	sbci	r21, 0x01	; 1
    a7f6:	c1 f6       	brne	.-80     	; 0xa7a8 <udd_ep_alloc+0x70>
    a7f8:	27 2f       	mov	r18, r23
    a7fa:	d7 cf       	rjmp	.-82     	; 0xa7aa <udd_ep_alloc+0x72>
    a7fc:	25 85       	ldd	r18, Z+13	; 0x0d
    a7fe:	27 70       	andi	r18, 0x07	; 7
    a800:	27 30       	cpi	r18, 0x07	; 7
    a802:	f1 f6       	brne	.-68     	; 0xa7c0 <udd_ep_alloc+0x88>
    a804:	81 e0       	ldi	r24, 0x01	; 1
    a806:	08 95       	ret
    a808:	21 ec       	ldi	r18, 0xC1	; 193
    a80a:	a2 ec       	ldi	r26, 0xC2	; 194
    a80c:	f3 ec       	ldi	r31, 0xC3	; 195
    a80e:	e4 ec       	ldi	r30, 0xC4	; 196
    a810:	75 ec       	ldi	r23, 0xC5	; 197
    a812:	66 ec       	ldi	r22, 0xC6	; 198
    a814:	37 ec       	ldi	r19, 0xC7	; 199
    a816:	b0 ec       	ldi	r27, 0xC0	; 192
    a818:	b8 cf       	rjmp	.-144    	; 0xa78a <udd_ep_alloc+0x52>
    a81a:	2f 2f       	mov	r18, r31
    a81c:	c6 cf       	rjmp	.-116    	; 0xa7aa <udd_ep_alloc+0x72>
    a81e:	2a 2f       	mov	r18, r26
    a820:	c4 cf       	rjmp	.-120    	; 0xa7aa <udd_ep_alloc+0x72>
    a822:	2e 2f       	mov	r18, r30
    a824:	c2 cf       	rjmp	.-124    	; 0xa7aa <udd_ep_alloc+0x72>
    a826:	23 2f       	mov	r18, r19
    a828:	c0 cf       	rjmp	.-128    	; 0xa7aa <udd_ep_alloc+0x72>
    a82a:	26 2f       	mov	r18, r22
    a82c:	be cf       	rjmp	.-132    	; 0xa7aa <udd_ep_alloc+0x72>

0000a82e <udd_ep_free>:
    a82e:	0f 93       	push	r16
    a830:	cf 93       	push	r28
    a832:	df 93       	push	r29
    a834:	c8 2f       	mov	r28, r24
    a836:	cf 70       	andi	r28, 0x0F	; 15
    a838:	d0 e0       	ldi	r29, 0x00	; 0
    a83a:	cc 0f       	add	r28, r28
    a83c:	dd 1f       	adc	r29, r29
    a83e:	28 2f       	mov	r18, r24
    a840:	08 2e       	mov	r0, r24
    a842:	00 0c       	add	r0, r0
    a844:	33 0b       	sbc	r19, r19
    a846:	22 27       	eor	r18, r18
    a848:	33 0f       	add	r19, r19
    a84a:	22 1f       	adc	r18, r18
    a84c:	33 27       	eor	r19, r19
    a84e:	c2 0f       	add	r28, r18
    a850:	d3 1f       	adc	r29, r19
    a852:	9e 01       	movw	r18, r28
    a854:	22 50       	subi	r18, 0x02	; 2
    a856:	31 09       	sbc	r19, r1
    a858:	cc 0f       	add	r28, r28
    a85a:	dd 1f       	adc	r29, r29
    a85c:	cc 0f       	add	r28, r28
    a85e:	dd 1f       	adc	r29, r29
    a860:	cc 0f       	add	r28, r28
    a862:	dd 1f       	adc	r29, r29
    a864:	fe 01       	movw	r30, r28
    a866:	e8 51       	subi	r30, 0x18	; 24
    a868:	f5 4d       	sbci	r31, 0xD5	; 213
    a86a:	02 e0       	ldi	r16, 0x02	; 2
    a86c:	05 93       	las	Z, r16
    a86e:	f9 01       	movw	r30, r18
    a870:	ee 0f       	add	r30, r30
    a872:	ff 1f       	adc	r31, r31
    a874:	ee 0f       	add	r30, r30
    a876:	ff 1f       	adc	r31, r31
    a878:	ee 0f       	add	r30, r30
    a87a:	ff 1f       	adc	r31, r31
    a87c:	e2 0f       	add	r30, r18
    a87e:	f3 1f       	adc	r31, r19
    a880:	ee 58       	subi	r30, 0x8E	; 142
    a882:	f5 4d       	sbci	r31, 0xD5	; 213
    a884:	90 81       	ld	r25, Z
    a886:	90 ff       	sbrs	r25, 0
    a888:	13 c0       	rjmp	.+38     	; 0xa8b0 <udd_ep_free+0x82>
    a88a:	9e 7f       	andi	r25, 0xFE	; 254
    a88c:	90 83       	st	Z, r25
    a88e:	07 80       	ldd	r0, Z+7	; 0x07
    a890:	f0 85       	ldd	r31, Z+8	; 0x08
    a892:	e0 2d       	mov	r30, r0
    a894:	30 97       	sbiw	r30, 0x00	; 0
    a896:	61 f0       	breq	.+24     	; 0xa8b0 <udd_ep_free+0x82>
    a898:	de 01       	movw	r26, r28
    a89a:	a4 52       	subi	r26, 0x24	; 36
    a89c:	b5 4d       	sbci	r27, 0xD5	; 213
    a89e:	87 fd       	sbrc	r24, 7
    a8a0:	0e c0       	rjmp	.+28     	; 0xa8be <udd_ep_free+0x90>
    a8a2:	1e 96       	adiw	r26, 0x0e	; 14
    a8a4:	6d 91       	ld	r22, X+
    a8a6:	7c 91       	ld	r23, X
    a8a8:	1f 97       	sbiw	r26, 0x0f	; 15
    a8aa:	48 2f       	mov	r20, r24
    a8ac:	81 e0       	ldi	r24, 0x01	; 1
    a8ae:	19 95       	eicall
    a8b0:	c4 52       	subi	r28, 0x24	; 36
    a8b2:	d5 4d       	sbci	r29, 0xD5	; 213
    a8b4:	1d 86       	std	Y+13, r1	; 0x0d
    a8b6:	df 91       	pop	r29
    a8b8:	cf 91       	pop	r28
    a8ba:	0f 91       	pop	r16
    a8bc:	08 95       	ret
    a8be:	52 96       	adiw	r26, 0x12	; 18
    a8c0:	6d 91       	ld	r22, X+
    a8c2:	7c 91       	ld	r23, X
    a8c4:	53 97       	sbiw	r26, 0x13	; 19
    a8c6:	f1 cf       	rjmp	.-30     	; 0xa8aa <udd_ep_free+0x7c>

0000a8c8 <udd_ep_is_halted>:
    a8c8:	e8 2f       	mov	r30, r24
    a8ca:	ef 70       	andi	r30, 0x0F	; 15
    a8cc:	f0 e0       	ldi	r31, 0x00	; 0
    a8ce:	ee 0f       	add	r30, r30
    a8d0:	ff 1f       	adc	r31, r31
    a8d2:	08 2e       	mov	r0, r24
    a8d4:	00 0c       	add	r0, r0
    a8d6:	99 0b       	sbc	r25, r25
    a8d8:	88 27       	eor	r24, r24
    a8da:	99 0f       	add	r25, r25
    a8dc:	88 1f       	adc	r24, r24
    a8de:	99 27       	eor	r25, r25
    a8e0:	e8 0f       	add	r30, r24
    a8e2:	f9 1f       	adc	r31, r25
    a8e4:	ee 0f       	add	r30, r30
    a8e6:	ff 1f       	adc	r31, r31
    a8e8:	ee 0f       	add	r30, r30
    a8ea:	ff 1f       	adc	r31, r31
    a8ec:	ee 0f       	add	r30, r30
    a8ee:	ff 1f       	adc	r31, r31
    a8f0:	e4 52       	subi	r30, 0x24	; 36
    a8f2:	f5 4d       	sbci	r31, 0xD5	; 213
    a8f4:	85 85       	ldd	r24, Z+13	; 0x0d
    a8f6:	82 fb       	bst	r24, 2
    a8f8:	88 27       	eor	r24, r24
    a8fa:	80 f9       	bld	r24, 0
    a8fc:	08 95       	ret

0000a8fe <udd_ep_set_halt>:
    a8fe:	0f 93       	push	r16
    a900:	28 2f       	mov	r18, r24
    a902:	2f 70       	andi	r18, 0x0F	; 15
    a904:	30 e0       	ldi	r19, 0x00	; 0
    a906:	f9 01       	movw	r30, r18
    a908:	ee 0f       	add	r30, r30
    a90a:	ff 1f       	adc	r31, r31
    a90c:	28 2f       	mov	r18, r24
    a90e:	08 2e       	mov	r0, r24
    a910:	00 0c       	add	r0, r0
    a912:	33 0b       	sbc	r19, r19
    a914:	22 27       	eor	r18, r18
    a916:	33 0f       	add	r19, r19
    a918:	22 1f       	adc	r18, r18
    a91a:	33 27       	eor	r19, r19
    a91c:	2e 0f       	add	r18, r30
    a91e:	3f 1f       	adc	r19, r31
    a920:	f9 01       	movw	r30, r18
    a922:	ee 0f       	add	r30, r30
    a924:	ff 1f       	adc	r31, r31
    a926:	ee 0f       	add	r30, r30
    a928:	ff 1f       	adc	r31, r31
    a92a:	ee 0f       	add	r30, r30
    a92c:	ff 1f       	adc	r31, r31
    a92e:	df 01       	movw	r26, r30
    a930:	a4 52       	subi	r26, 0x24	; 36
    a932:	b5 4d       	sbci	r27, 0xD5	; 213
    a934:	1d 96       	adiw	r26, 0x0d	; 13
    a936:	9c 91       	ld	r25, X
    a938:	1d 97       	sbiw	r26, 0x0d	; 13
    a93a:	94 60       	ori	r25, 0x04	; 4
    a93c:	1d 96       	adiw	r26, 0x0d	; 13
    a93e:	9c 93       	st	X, r25
    a940:	1d 97       	sbiw	r26, 0x0d	; 13
    a942:	22 50       	subi	r18, 0x02	; 2
    a944:	31 09       	sbc	r19, r1
    a946:	e8 51       	subi	r30, 0x18	; 24
    a948:	f5 4d       	sbci	r31, 0xD5	; 213
    a94a:	02 e0       	ldi	r16, 0x02	; 2
    a94c:	05 93       	las	Z, r16
    a94e:	f9 01       	movw	r30, r18
    a950:	ee 0f       	add	r30, r30
    a952:	ff 1f       	adc	r31, r31
    a954:	ee 0f       	add	r30, r30
    a956:	ff 1f       	adc	r31, r31
    a958:	ee 0f       	add	r30, r30
    a95a:	ff 1f       	adc	r31, r31
    a95c:	e2 0f       	add	r30, r18
    a95e:	f3 1f       	adc	r31, r19
    a960:	ee 58       	subi	r30, 0x8E	; 142
    a962:	f5 4d       	sbci	r31, 0xD5	; 213
    a964:	90 81       	ld	r25, Z
    a966:	90 ff       	sbrs	r25, 0
    a968:	10 c0       	rjmp	.+32     	; 0xa98a <udd_ep_set_halt+0x8c>
    a96a:	9e 7f       	andi	r25, 0xFE	; 254
    a96c:	90 83       	st	Z, r25
    a96e:	07 80       	ldd	r0, Z+7	; 0x07
    a970:	f0 85       	ldd	r31, Z+8	; 0x08
    a972:	e0 2d       	mov	r30, r0
    a974:	30 97       	sbiw	r30, 0x00	; 0
    a976:	49 f0       	breq	.+18     	; 0xa98a <udd_ep_set_halt+0x8c>
    a978:	87 fd       	sbrc	r24, 7
    a97a:	0a c0       	rjmp	.+20     	; 0xa990 <udd_ep_set_halt+0x92>
    a97c:	1e 96       	adiw	r26, 0x0e	; 14
    a97e:	6d 91       	ld	r22, X+
    a980:	7c 91       	ld	r23, X
    a982:	1f 97       	sbiw	r26, 0x0f	; 15
    a984:	48 2f       	mov	r20, r24
    a986:	81 e0       	ldi	r24, 0x01	; 1
    a988:	19 95       	eicall
    a98a:	81 e0       	ldi	r24, 0x01	; 1
    a98c:	0f 91       	pop	r16
    a98e:	08 95       	ret
    a990:	52 96       	adiw	r26, 0x12	; 18
    a992:	6d 91       	ld	r22, X+
    a994:	7c 91       	ld	r23, X
    a996:	53 97       	sbiw	r26, 0x13	; 19
    a998:	f5 cf       	rjmp	.-22     	; 0xa984 <udd_ep_set_halt+0x86>

0000a99a <udd_ep_clear_halt>:
    a99a:	0f 93       	push	r16
    a99c:	28 2f       	mov	r18, r24
    a99e:	2f 70       	andi	r18, 0x0F	; 15
    a9a0:	30 e0       	ldi	r19, 0x00	; 0
    a9a2:	22 0f       	add	r18, r18
    a9a4:	33 1f       	adc	r19, r19
    a9a6:	08 2e       	mov	r0, r24
    a9a8:	00 0c       	add	r0, r0
    a9aa:	99 0b       	sbc	r25, r25
    a9ac:	88 27       	eor	r24, r24
    a9ae:	99 0f       	add	r25, r25
    a9b0:	88 1f       	adc	r24, r24
    a9b2:	99 27       	eor	r25, r25
    a9b4:	82 0f       	add	r24, r18
    a9b6:	93 1f       	adc	r25, r19
    a9b8:	9c 01       	movw	r18, r24
    a9ba:	22 0f       	add	r18, r18
    a9bc:	33 1f       	adc	r19, r19
    a9be:	22 0f       	add	r18, r18
    a9c0:	33 1f       	adc	r19, r19
    a9c2:	22 0f       	add	r18, r18
    a9c4:	33 1f       	adc	r19, r19
    a9c6:	f9 01       	movw	r30, r18
    a9c8:	e8 51       	subi	r30, 0x18	; 24
    a9ca:	f5 4d       	sbci	r31, 0xD5	; 213
    a9cc:	01 e0       	ldi	r16, 0x01	; 1
    a9ce:	06 93       	lac	Z, r16
    a9d0:	f9 01       	movw	r30, r18
    a9d2:	e4 52       	subi	r30, 0x24	; 36
    a9d4:	f5 4d       	sbci	r31, 0xD5	; 213
    a9d6:	25 85       	ldd	r18, Z+13	; 0x0d
    a9d8:	22 ff       	sbrs	r18, 2
    a9da:	13 c0       	rjmp	.+38     	; 0xaa02 <udd_ep_clear_halt+0x68>
    a9dc:	25 85       	ldd	r18, Z+13	; 0x0d
    a9de:	2b 7f       	andi	r18, 0xFB	; 251
    a9e0:	25 87       	std	Z+13, r18	; 0x0d
    a9e2:	02 97       	sbiw	r24, 0x02	; 2
    a9e4:	fc 01       	movw	r30, r24
    a9e6:	ee 0f       	add	r30, r30
    a9e8:	ff 1f       	adc	r31, r31
    a9ea:	ee 0f       	add	r30, r30
    a9ec:	ff 1f       	adc	r31, r31
    a9ee:	ee 0f       	add	r30, r30
    a9f0:	ff 1f       	adc	r31, r31
    a9f2:	8e 0f       	add	r24, r30
    a9f4:	9f 1f       	adc	r25, r31
    a9f6:	fc 01       	movw	r30, r24
    a9f8:	ee 58       	subi	r30, 0x8E	; 142
    a9fa:	f5 4d       	sbci	r31, 0xD5	; 213
    a9fc:	80 81       	ld	r24, Z
    a9fe:	80 fd       	sbrc	r24, 0
    aa00:	03 c0       	rjmp	.+6      	; 0xaa08 <udd_ep_clear_halt+0x6e>
    aa02:	81 e0       	ldi	r24, 0x01	; 1
    aa04:	0f 91       	pop	r16
    aa06:	08 95       	ret
    aa08:	8e 7f       	andi	r24, 0xFE	; 254
    aa0a:	80 83       	st	Z, r24
    aa0c:	07 80       	ldd	r0, Z+7	; 0x07
    aa0e:	f0 85       	ldd	r31, Z+8	; 0x08
    aa10:	e0 2d       	mov	r30, r0
    aa12:	19 95       	eicall
    aa14:	81 e0       	ldi	r24, 0x01	; 1
    aa16:	0f 91       	pop	r16
    aa18:	08 95       	ret

0000aa1a <udd_ep_run>:
    aa1a:	af 92       	push	r10
    aa1c:	bf 92       	push	r11
    aa1e:	cf 92       	push	r12
    aa20:	df 92       	push	r13
    aa22:	ff 92       	push	r15
    aa24:	0f 93       	push	r16
    aa26:	1f 93       	push	r17
    aa28:	cf 93       	push	r28
    aa2a:	df 93       	push	r29
    aa2c:	1f 92       	push	r1
    aa2e:	cd b7       	in	r28, 0x3d	; 61
    aa30:	de b7       	in	r29, 0x3e	; 62
    aa32:	f8 2e       	mov	r15, r24
    aa34:	e8 2f       	mov	r30, r24
    aa36:	ef 70       	andi	r30, 0x0F	; 15
    aa38:	f0 e0       	ldi	r31, 0x00	; 0
    aa3a:	df 01       	movw	r26, r30
    aa3c:	aa 0f       	add	r26, r26
    aa3e:	bb 1f       	adc	r27, r27
    aa40:	e8 2f       	mov	r30, r24
    aa42:	88 0f       	add	r24, r24
    aa44:	ff 0b       	sbc	r31, r31
    aa46:	ee 27       	eor	r30, r30
    aa48:	ff 0f       	add	r31, r31
    aa4a:	ee 1f       	adc	r30, r30
    aa4c:	ff 27       	eor	r31, r31
    aa4e:	ea 0f       	add	r30, r26
    aa50:	fb 1f       	adc	r31, r27
    aa52:	6f 01       	movw	r12, r30
    aa54:	cc 0c       	add	r12, r12
    aa56:	dd 1c       	adc	r13, r13
    aa58:	cc 0c       	add	r12, r12
    aa5a:	dd 1c       	adc	r13, r13
    aa5c:	cc 0c       	add	r12, r12
    aa5e:	dd 1c       	adc	r13, r13
    aa60:	d6 01       	movw	r26, r12
    aa62:	a4 52       	subi	r26, 0x24	; 36
    aa64:	b5 4d       	sbci	r27, 0xD5	; 213
    aa66:	1d 96       	adiw	r26, 0x0d	; 13
    aa68:	9c 91       	ld	r25, X
    aa6a:	1d 97       	sbiw	r26, 0x0d	; 13
    aa6c:	90 7c       	andi	r25, 0xC0	; 192
    aa6e:	09 f4       	brne	.+2      	; 0xaa72 <udd_ep_run+0x58>
    aa70:	58 c0       	rjmp	.+176    	; 0xab22 <udd_ep_run+0x108>
    aa72:	1d 96       	adiw	r26, 0x0d	; 13
    aa74:	8c 91       	ld	r24, X
    aa76:	1d 97       	sbiw	r26, 0x0d	; 13
    aa78:	80 7c       	andi	r24, 0xC0	; 192
    aa7a:	80 3c       	cpi	r24, 0xC0	; 192
    aa7c:	21 f0       	breq	.+8      	; 0xaa86 <udd_ep_run+0x6c>
    aa7e:	1d 96       	adiw	r26, 0x0d	; 13
    aa80:	8c 91       	ld	r24, X
    aa82:	82 fd       	sbrc	r24, 2
    aa84:	4e c0       	rjmp	.+156    	; 0xab22 <udd_ep_run+0x108>
    aa86:	32 97       	sbiw	r30, 0x02	; 2
    aa88:	8f b7       	in	r24, 0x3f	; 63
    aa8a:	89 83       	std	Y+1, r24	; 0x01
    aa8c:	f8 94       	cli
    aa8e:	99 81       	ldd	r25, Y+1	; 0x01
    aa90:	5f 01       	movw	r10, r30
    aa92:	aa 0c       	add	r10, r10
    aa94:	bb 1c       	adc	r11, r11
    aa96:	aa 0c       	add	r10, r10
    aa98:	bb 1c       	adc	r11, r11
    aa9a:	aa 0c       	add	r10, r10
    aa9c:	bb 1c       	adc	r11, r11
    aa9e:	d5 01       	movw	r26, r10
    aaa0:	ae 0f       	add	r26, r30
    aaa2:	bf 1f       	adc	r27, r31
    aaa4:	ae 58       	subi	r26, 0x8E	; 142
    aaa6:	b5 4d       	sbci	r27, 0xD5	; 213
    aaa8:	8c 91       	ld	r24, X
    aaaa:	80 fd       	sbrc	r24, 0
    aaac:	4c c0       	rjmp	.+152    	; 0xab46 <udd_ep_run+0x12c>
    aaae:	81 60       	ori	r24, 0x01	; 1
    aab0:	8c 93       	st	X, r24
    aab2:	9f bf       	out	0x3f, r25	; 63
    aab4:	11 96       	adiw	r26, 0x01	; 1
    aab6:	4d 93       	st	X+, r20
    aab8:	5c 93       	st	X, r21
    aaba:	12 97       	sbiw	r26, 0x02	; 2
    aabc:	13 96       	adiw	r26, 0x03	; 3
    aabe:	2d 93       	st	X+, r18
    aac0:	3c 93       	st	X, r19
    aac2:	14 97       	sbiw	r26, 0x04	; 4
    aac4:	15 96       	adiw	r26, 0x05	; 5
    aac6:	1d 92       	st	X+, r1
    aac8:	1c 92       	st	X, r1
    aaca:	16 97       	sbiw	r26, 0x06	; 6
    aacc:	17 96       	adiw	r26, 0x07	; 7
    aace:	0d 93       	st	X+, r16
    aad0:	1c 93       	st	X, r17
    aad2:	18 97       	sbiw	r26, 0x08	; 8
    aad4:	91 e0       	ldi	r25, 0x01	; 1
    aad6:	61 11       	cpse	r22, r1
    aad8:	04 c0       	rjmp	.+8      	; 0xaae2 <udd_ep_run+0xc8>
    aada:	21 15       	cp	r18, r1
    aadc:	31 05       	cpc	r19, r1
    aade:	09 f0       	breq	.+2      	; 0xaae2 <udd_ep_run+0xc8>
    aae0:	90 e0       	ldi	r25, 0x00	; 0
    aae2:	d5 01       	movw	r26, r10
    aae4:	ae 0f       	add	r26, r30
    aae6:	bf 1f       	adc	r27, r31
    aae8:	ae 58       	subi	r26, 0x8E	; 142
    aaea:	b5 4d       	sbci	r27, 0xD5	; 213
    aaec:	8c 91       	ld	r24, X
    aaee:	90 fb       	bst	r25, 0
    aaf0:	81 f9       	bld	r24, 1
    aaf2:	8b 7f       	andi	r24, 0xFB	; 251
    aaf4:	8c 93       	st	X, r24
    aaf6:	f7 fc       	sbrc	r15, 7
    aaf8:	20 c0       	rjmp	.+64     	; 0xab3a <udd_ep_run+0x120>
    aafa:	d6 01       	movw	r26, r12
    aafc:	a4 52       	subi	r26, 0x24	; 36
    aafe:	b5 4d       	sbci	r27, 0xD5	; 213
    ab00:	1d 96       	adiw	r26, 0x0d	; 13
    ab02:	8c 91       	ld	r24, X
    ab04:	1d 97       	sbiw	r26, 0x0d	; 13
    ab06:	80 7c       	andi	r24, 0xC0	; 192
    ab08:	80 3c       	cpi	r24, 0xC0	; 192
    ab0a:	01 f1       	breq	.+64     	; 0xab4c <udd_ep_run+0x132>
    ab0c:	f6 01       	movw	r30, r12
    ab0e:	e4 52       	subi	r30, 0x24	; 36
    ab10:	f5 4d       	sbci	r31, 0xD5	; 213
    ab12:	16 86       	std	Z+14, r1	; 0x0e
    ab14:	17 86       	std	Z+15, r1	; 0x0f
    ab16:	12 8a       	std	Z+18, r1	; 0x12
    ab18:	13 8a       	std	Z+19, r1	; 0x13
    ab1a:	8f 2d       	mov	r24, r15
    ab1c:	3a da       	rcall	.-2956   	; 0x9f92 <udd_ep_trans_complet>
    ab1e:	81 e0       	ldi	r24, 0x01	; 1
    ab20:	01 c0       	rjmp	.+2      	; 0xab24 <udd_ep_run+0x10a>
    ab22:	80 e0       	ldi	r24, 0x00	; 0
    ab24:	0f 90       	pop	r0
    ab26:	df 91       	pop	r29
    ab28:	cf 91       	pop	r28
    ab2a:	1f 91       	pop	r17
    ab2c:	0f 91       	pop	r16
    ab2e:	ff 90       	pop	r15
    ab30:	df 90       	pop	r13
    ab32:	cf 90       	pop	r12
    ab34:	bf 90       	pop	r11
    ab36:	af 90       	pop	r10
    ab38:	08 95       	ret
    ab3a:	f6 01       	movw	r30, r12
    ab3c:	e4 52       	subi	r30, 0x24	; 36
    ab3e:	f5 4d       	sbci	r31, 0xD5	; 213
    ab40:	12 8a       	std	Z+18, r1	; 0x12
    ab42:	13 8a       	std	Z+19, r1	; 0x13
    ab44:	ea cf       	rjmp	.-44     	; 0xab1a <udd_ep_run+0x100>
    ab46:	9f bf       	out	0x3f, r25	; 63
    ab48:	80 e0       	ldi	r24, 0x00	; 0
    ab4a:	ec cf       	rjmp	.-40     	; 0xab24 <udd_ep_run+0x10a>
    ab4c:	1d 96       	adiw	r26, 0x0d	; 13
    ab4e:	ac 91       	ld	r26, X
    ab50:	a7 70       	andi	r26, 0x07	; 7
    ab52:	a1 50       	subi	r26, 0x01	; 1
    ab54:	a7 30       	cpi	r26, 0x07	; 7
    ab56:	a8 f4       	brcc	.+42     	; 0xab82 <udd_ep_run+0x168>
    ab58:	b0 e0       	ldi	r27, 0x00	; 0
    ab5a:	aa 0f       	add	r26, r26
    ab5c:	bb 1f       	adc	r27, r27
    ab5e:	ac 52       	subi	r26, 0x2C	; 44
    ab60:	b9 4d       	sbci	r27, 0xD9	; 217
    ab62:	6d 91       	ld	r22, X+
    ab64:	7c 91       	ld	r23, X
    ab66:	c9 01       	movw	r24, r18
    ab68:	0e 94 48 7f 	call	0xfe90	; 0xfe90 <__udivmodhi4>
    ab6c:	89 2b       	or	r24, r25
    ab6e:	71 f2       	breq	.-100    	; 0xab0c <udd_ep_run+0xf2>
    ab70:	ea 0d       	add	r30, r10
    ab72:	fb 1d       	adc	r31, r11
    ab74:	ee 58       	subi	r30, 0x8E	; 142
    ab76:	f5 4d       	sbci	r31, 0xD5	; 213
    ab78:	80 81       	ld	r24, Z
    ab7a:	8e 7f       	andi	r24, 0xFE	; 254
    ab7c:	80 83       	st	Z, r24
    ab7e:	80 e0       	ldi	r24, 0x00	; 0
    ab80:	d1 cf       	rjmp	.-94     	; 0xab24 <udd_ep_run+0x10a>
    ab82:	68 e0       	ldi	r22, 0x08	; 8
    ab84:	70 e0       	ldi	r23, 0x00	; 0
    ab86:	ef cf       	rjmp	.-34     	; 0xab66 <udd_ep_run+0x14c>

0000ab88 <udd_ep_abort>:
    ab88:	0f 93       	push	r16
    ab8a:	28 2f       	mov	r18, r24
    ab8c:	2f 70       	andi	r18, 0x0F	; 15
    ab8e:	30 e0       	ldi	r19, 0x00	; 0
    ab90:	b9 01       	movw	r22, r18
    ab92:	66 0f       	add	r22, r22
    ab94:	77 1f       	adc	r23, r23
    ab96:	28 2f       	mov	r18, r24
    ab98:	08 2e       	mov	r0, r24
    ab9a:	00 0c       	add	r0, r0
    ab9c:	33 0b       	sbc	r19, r19
    ab9e:	22 27       	eor	r18, r18
    aba0:	33 0f       	add	r19, r19
    aba2:	22 1f       	adc	r18, r18
    aba4:	33 27       	eor	r19, r19
    aba6:	26 0f       	add	r18, r22
    aba8:	37 1f       	adc	r19, r23
    abaa:	b9 01       	movw	r22, r18
    abac:	62 50       	subi	r22, 0x02	; 2
    abae:	71 09       	sbc	r23, r1
    abb0:	22 0f       	add	r18, r18
    abb2:	33 1f       	adc	r19, r19
    abb4:	22 0f       	add	r18, r18
    abb6:	33 1f       	adc	r19, r19
    abb8:	22 0f       	add	r18, r18
    abba:	33 1f       	adc	r19, r19
    abbc:	f9 01       	movw	r30, r18
    abbe:	e8 51       	subi	r30, 0x18	; 24
    abc0:	f5 4d       	sbci	r31, 0xD5	; 213
    abc2:	02 e0       	ldi	r16, 0x02	; 2
    abc4:	05 93       	las	Z, r16
    abc6:	fb 01       	movw	r30, r22
    abc8:	ee 0f       	add	r30, r30
    abca:	ff 1f       	adc	r31, r31
    abcc:	ee 0f       	add	r30, r30
    abce:	ff 1f       	adc	r31, r31
    abd0:	ee 0f       	add	r30, r30
    abd2:	ff 1f       	adc	r31, r31
    abd4:	e6 0f       	add	r30, r22
    abd6:	f7 1f       	adc	r31, r23
    abd8:	ee 58       	subi	r30, 0x8E	; 142
    abda:	f5 4d       	sbci	r31, 0xD5	; 213
    abdc:	90 81       	ld	r25, Z
    abde:	90 ff       	sbrs	r25, 0
    abe0:	14 c0       	rjmp	.+40     	; 0xac0a <udd_ep_abort+0x82>
    abe2:	9e 7f       	andi	r25, 0xFE	; 254
    abe4:	90 83       	st	Z, r25
    abe6:	07 80       	ldd	r0, Z+7	; 0x07
    abe8:	f0 85       	ldd	r31, Z+8	; 0x08
    abea:	e0 2d       	mov	r30, r0
    abec:	30 97       	sbiw	r30, 0x00	; 0
    abee:	69 f0       	breq	.+26     	; 0xac0a <udd_ep_abort+0x82>
    abf0:	d9 01       	movw	r26, r18
    abf2:	a4 52       	subi	r26, 0x24	; 36
    abf4:	b5 4d       	sbci	r27, 0xD5	; 213
    abf6:	87 fd       	sbrc	r24, 7
    abf8:	0a c0       	rjmp	.+20     	; 0xac0e <udd_ep_abort+0x86>
    abfa:	1e 96       	adiw	r26, 0x0e	; 14
    abfc:	6d 91       	ld	r22, X+
    abfe:	7c 91       	ld	r23, X
    ac00:	1f 97       	sbiw	r26, 0x0f	; 15
    ac02:	48 2f       	mov	r20, r24
    ac04:	81 e0       	ldi	r24, 0x01	; 1
    ac06:	0f 91       	pop	r16
    ac08:	19 94       	eijmp
    ac0a:	0f 91       	pop	r16
    ac0c:	08 95       	ret
    ac0e:	52 96       	adiw	r26, 0x12	; 18
    ac10:	6d 91       	ld	r22, X+
    ac12:	7c 91       	ld	r23, X
    ac14:	53 97       	sbiw	r26, 0x13	; 19
    ac16:	48 2f       	mov	r20, r24
    ac18:	81 e0       	ldi	r24, 0x01	; 1
    ac1a:	0f 91       	pop	r16
    ac1c:	19 94       	eijmp

0000ac1e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    ac1e:	1f 92       	push	r1
    ac20:	0f 92       	push	r0
    ac22:	0f b6       	in	r0, 0x3f	; 63
    ac24:	0f 92       	push	r0
    ac26:	11 24       	eor	r1, r1
    ac28:	0b b6       	in	r0, 0x3b	; 59
    ac2a:	0f 92       	push	r0
    ac2c:	af 92       	push	r10
    ac2e:	bf 92       	push	r11
    ac30:	cf 92       	push	r12
    ac32:	df 92       	push	r13
    ac34:	ef 92       	push	r14
    ac36:	ff 92       	push	r15
    ac38:	0f 93       	push	r16
    ac3a:	1f 93       	push	r17
    ac3c:	2f 93       	push	r18
    ac3e:	3f 93       	push	r19
    ac40:	4f 93       	push	r20
    ac42:	5f 93       	push	r21
    ac44:	6f 93       	push	r22
    ac46:	7f 93       	push	r23
    ac48:	8f 93       	push	r24
    ac4a:	9f 93       	push	r25
    ac4c:	af 93       	push	r26
    ac4e:	bf 93       	push	r27
    ac50:	ef 93       	push	r30
    ac52:	ff 93       	push	r31
    ac54:	cf 93       	push	r28
    ac56:	df 93       	push	r29
    ac58:	1f 92       	push	r1
    ac5a:	1f 92       	push	r1
    ac5c:	cd b7       	in	r28, 0x3d	; 61
    ac5e:	de b7       	in	r29, 0x3e	; 62
	if (udd_is_start_of_frame_event()) {
    ac60:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ac64:	87 fd       	sbrc	r24, 7
    ac66:	30 c1       	rjmp	.+608    	; 0xaec8 <__vector_125+0x2aa>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    ac68:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ac6c:	82 ff       	sbrs	r24, 2
    ac6e:	26 c0       	rjmp	.+76     	; 0xacbc <__vector_125+0x9e>
		udd_ack_underflow_event();
    ac70:	84 e0       	ldi	r24, 0x04	; 4
    ac72:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    ac76:	80 91 f0 2a 	lds	r24, 0x2AF0	; 0x802af0 <udd_sram+0x14>
    ac7a:	86 fd       	sbrc	r24, 6
    ac7c:	45 c1       	rjmp	.+650    	; 0xaf08 <__vector_125+0x2ea>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    ac7e:	0f 90       	pop	r0
    ac80:	0f 90       	pop	r0
    ac82:	df 91       	pop	r29
    ac84:	cf 91       	pop	r28
    ac86:	ff 91       	pop	r31
    ac88:	ef 91       	pop	r30
    ac8a:	bf 91       	pop	r27
    ac8c:	af 91       	pop	r26
    ac8e:	9f 91       	pop	r25
    ac90:	8f 91       	pop	r24
    ac92:	7f 91       	pop	r23
    ac94:	6f 91       	pop	r22
    ac96:	5f 91       	pop	r21
    ac98:	4f 91       	pop	r20
    ac9a:	3f 91       	pop	r19
    ac9c:	2f 91       	pop	r18
    ac9e:	1f 91       	pop	r17
    aca0:	0f 91       	pop	r16
    aca2:	ff 90       	pop	r15
    aca4:	ef 90       	pop	r14
    aca6:	df 90       	pop	r13
    aca8:	cf 90       	pop	r12
    acaa:	bf 90       	pop	r11
    acac:	af 90       	pop	r10
    acae:	0f 90       	pop	r0
    acb0:	0b be       	out	0x3b, r0	; 59
    acb2:	0f 90       	pop	r0
    acb4:	0f be       	out	0x3f, r0	; 63
    acb6:	0f 90       	pop	r0
    acb8:	1f 90       	pop	r1
    acba:	18 95       	reti
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    acbc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    acc0:	81 ff       	sbrs	r24, 1
    acc2:	1f c0       	rjmp	.+62     	; 0xad02 <__vector_125+0xe4>
		udd_ack_overflow_event();
    acc4:	82 e0       	ldi	r24, 0x02	; 2
    acc6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    acca:	80 91 e8 2a 	lds	r24, 0x2AE8	; 0x802ae8 <udd_sram+0xc>
    acce:	86 ff       	sbrs	r24, 6
    acd0:	d6 cf       	rjmp	.-84     	; 0xac7e <__vector_125+0x60>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    acd2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    acd6:	81 fd       	sbrc	r24, 1
    acd8:	d2 cf       	rjmp	.-92     	; 0xac7e <__vector_125+0x60>
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
    acda:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    acde:	80 fd       	sbrc	r24, 0
    ace0:	23 c1       	rjmp	.+582    	; 0xaf28 <__vector_125+0x30a>
static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    ace2:	80 91 da 2a 	lds	r24, 0x2ADA	; 0x802ada <udd_ep_control_state>
    ace6:	82 30       	cpi	r24, 0x02	; 2
    ace8:	09 f4       	brne	.+2      	; 0xacec <__vector_125+0xce>
    acea:	26 c1       	rjmp	.+588    	; 0xaf38 <__vector_125+0x31a>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    acec:	83 30       	cpi	r24, 0x03	; 3
    acee:	39 f6       	brne	.-114    	; 0xac7e <__vector_125+0x60>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    acf0:	e1 ef       	ldi	r30, 0xF1	; 241
    acf2:	fa e2       	ldi	r31, 0x2A	; 42
    acf4:	04 e0       	ldi	r16, 0x04	; 4
    acf6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    acf8:	e9 ee       	ldi	r30, 0xE9	; 233
    acfa:	fa e2       	ldi	r31, 0x2A	; 42
    acfc:	04 e0       	ldi	r16, 0x04	; 4
    acfe:	05 93       	las	Z, r16
    ad00:	be cf       	rjmp	.-132    	; 0xac7e <__vector_125+0x60>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    ad02:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ad06:	84 ff       	sbrs	r24, 4
    ad08:	be c0       	rjmp	.+380    	; 0xae86 <__vector_125+0x268>
		udd_ack_reset_event();
    ad0a:	80 e1       	ldi	r24, 0x10	; 16
    ad0c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    ad10:	68 ef       	ldi	r22, 0xF8	; 248
    ad12:	a6 2e       	mov	r10, r22
    ad14:	6a e2       	ldi	r22, 0x2A	; 42
    ad16:	b6 2e       	mov	r11, r22
    ad18:	72 e7       	ldi	r23, 0x72	; 114
    ad1a:	c7 2e       	mov	r12, r23
    ad1c:	7a e2       	ldi	r23, 0x2A	; 42
    ad1e:	d7 2e       	mov	r13, r23
    ad20:	e3 e0       	ldi	r30, 0x03	; 3
    ad22:	ee 2e       	mov	r14, r30
    ad24:	f1 2c       	mov	r15, r1
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    ad26:	11 e0       	ldi	r17, 0x01	; 1
    ad28:	97 01       	movw	r18, r14
    ad2a:	21 50       	subi	r18, 0x01	; 1
    ad2c:	31 09       	sbc	r19, r1
    ad2e:	c7 01       	movw	r24, r14
    ad30:	03 97       	sbiw	r24, 0x03	; 3

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    ad32:	f5 01       	movw	r30, r10
    ad34:	02 e0       	ldi	r16, 0x02	; 2
    ad36:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    ad38:	fc 01       	movw	r30, r24
    ad3a:	ee 0f       	add	r30, r30
    ad3c:	ff 1f       	adc	r31, r31
    ad3e:	ee 0f       	add	r30, r30
    ad40:	ff 1f       	adc	r31, r31
    ad42:	ee 0f       	add	r30, r30
    ad44:	ff 1f       	adc	r31, r31
    ad46:	8e 0f       	add	r24, r30
    ad48:	9f 1f       	adc	r25, r31
    ad4a:	fc 01       	movw	r30, r24
    ad4c:	ee 58       	subi	r30, 0x8E	; 142
    ad4e:	f5 4d       	sbci	r31, 0xD5	; 213
    ad50:	80 81       	ld	r24, Z
    ad52:	80 ff       	sbrs	r24, 0
    ad54:	19 c0       	rjmp	.+50     	; 0xad88 <__vector_125+0x16a>
		return; // No job on going
	}
	ptr_job->busy = false;
    ad56:	8e 7f       	andi	r24, 0xFE	; 254
    ad58:	80 83       	st	Z, r24
	if (NULL != ptr_job->call_trans) {
    ad5a:	d6 01       	movw	r26, r12
    ad5c:	17 96       	adiw	r26, 0x07	; 7
    ad5e:	ed 91       	ld	r30, X+
    ad60:	fc 91       	ld	r31, X
    ad62:	18 97       	sbiw	r26, 0x08	; 8
    ad64:	30 97       	sbiw	r30, 0x00	; 0
    ad66:	81 f0       	breq	.+32     	; 0xad88 <__vector_125+0x16a>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    ad68:	22 0f       	add	r18, r18
    ad6a:	33 1f       	adc	r19, r19
    ad6c:	22 0f       	add	r18, r18
    ad6e:	33 1f       	adc	r19, r19
    ad70:	22 0f       	add	r18, r18
    ad72:	33 1f       	adc	r19, r19
    ad74:	d9 01       	movw	r26, r18
    ad76:	a4 52       	subi	r26, 0x24	; 36
    ad78:	b5 4d       	sbci	r27, 0xD5	; 213
    ad7a:	1e 96       	adiw	r26, 0x0e	; 14
    ad7c:	6d 91       	ld	r22, X+
    ad7e:	7c 91       	ld	r23, X
    ad80:	1f 97       	sbiw	r26, 0x0f	; 15
    ad82:	41 2f       	mov	r20, r17
    ad84:	81 e0       	ldi	r24, 0x01	; 1
    ad86:	19 95       	eicall
    ad88:	c7 01       	movw	r24, r14
    ad8a:	02 97       	sbiw	r24, 0x02	; 2

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    ad8c:	f5 01       	movw	r30, r10
    ad8e:	38 96       	adiw	r30, 0x08	; 8
    ad90:	02 e0       	ldi	r16, 0x02	; 2
    ad92:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    ad94:	fc 01       	movw	r30, r24
    ad96:	ee 0f       	add	r30, r30
    ad98:	ff 1f       	adc	r31, r31
    ad9a:	ee 0f       	add	r30, r30
    ad9c:	ff 1f       	adc	r31, r31
    ad9e:	ee 0f       	add	r30, r30
    ada0:	ff 1f       	adc	r31, r31
    ada2:	8e 0f       	add	r24, r30
    ada4:	9f 1f       	adc	r25, r31
    ada6:	fc 01       	movw	r30, r24
    ada8:	ee 58       	subi	r30, 0x8E	; 142
    adaa:	f5 4d       	sbci	r31, 0xD5	; 213
    adac:	80 81       	ld	r24, Z
    adae:	80 ff       	sbrs	r24, 0
    adb0:	1a c0       	rjmp	.+52     	; 0xade6 <__vector_125+0x1c8>
		return; // No job on going
	}
	ptr_job->busy = false;
    adb2:	8e 7f       	andi	r24, 0xFE	; 254
    adb4:	80 83       	st	Z, r24
	if (NULL != ptr_job->call_trans) {
    adb6:	d6 01       	movw	r26, r12
    adb8:	50 96       	adiw	r26, 0x10	; 16
    adba:	ed 91       	ld	r30, X+
    adbc:	fc 91       	ld	r31, X
    adbe:	51 97       	sbiw	r26, 0x11	; 17
    adc0:	30 97       	sbiw	r30, 0x00	; 0
    adc2:	89 f0       	breq	.+34     	; 0xade6 <__vector_125+0x1c8>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    adc4:	d7 01       	movw	r26, r14
    adc6:	aa 0f       	add	r26, r26
    adc8:	bb 1f       	adc	r27, r27
    adca:	aa 0f       	add	r26, r26
    adcc:	bb 1f       	adc	r27, r27
    adce:	aa 0f       	add	r26, r26
    add0:	bb 1f       	adc	r27, r27
    add2:	a4 52       	subi	r26, 0x24	; 36
    add4:	b5 4d       	sbci	r27, 0xD5	; 213
    add6:	52 96       	adiw	r26, 0x12	; 18
    add8:	6d 91       	ld	r22, X+
    adda:	7c 91       	ld	r23, X
    addc:	53 97       	sbiw	r26, 0x13	; 19
    adde:	41 2f       	mov	r20, r17
    ade0:	40 68       	ori	r20, 0x80	; 128
    ade2:	81 e0       	ldi	r24, 0x01	; 1
    ade4:	19 95       	eicall
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    ade6:	1f 5f       	subi	r17, 0xFF	; 255
    ade8:	b0 e1       	ldi	r27, 0x10	; 16
    adea:	ab 0e       	add	r10, r27
    adec:	b1 1c       	adc	r11, r1
    adee:	e2 e0       	ldi	r30, 0x02	; 2
    adf0:	ee 0e       	add	r14, r30
    adf2:	f1 1c       	adc	r15, r1
    adf4:	f2 e1       	ldi	r31, 0x12	; 18
    adf6:	cf 0e       	add	r12, r31
    adf8:	d1 1c       	adc	r13, r1
    adfa:	87 e0       	ldi	r24, 0x07	; 7
    adfc:	e8 16       	cp	r14, r24
    adfe:	f1 04       	cpc	r15, r1
    ae00:	09 f0       	breq	.+2      	; 0xae04 <__vector_125+0x1e6>
    ae02:	92 cf       	rjmp	.-220    	; 0xad28 <__vector_125+0x10a>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    ae04:	0e 94 04 19 	call	0x3208	; 0x3208 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    ae08:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    ae0c:	10 92 e9 2a 	sts	0x2AE9, r1	; 0x802ae9 <udd_sram+0xd>
	udd_endpoint_clear_status(ep_ctrl);
    ae10:	96 e0       	ldi	r25, 0x06	; 6
    ae12:	90 93 e8 2a 	sts	0x2AE8, r25	; 0x802ae8 <udd_sram+0xc>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    ae16:	83 e4       	ldi	r24, 0x43	; 67
    ae18:	80 93 e9 2a 	sts	0x2AE9, r24	; 0x802ae9 <udd_sram+0xd>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    ae1c:	10 92 f1 2a 	sts	0x2AF1, r1	; 0x802af1 <udd_sram+0x15>
	udd_endpoint_clear_status(ep_ctrl);
    ae20:	90 93 f0 2a 	sts	0x2AF0, r25	; 0x802af0 <udd_sram+0x14>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    ae24:	80 93 f1 2a 	sts	0x2AF1, r24	; 0x802af1 <udd_sram+0x15>
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    ae28:	86 e9       	ldi	r24, 0x96	; 150
    ae2a:	9a e2       	ldi	r25, 0x2A	; 42
    ae2c:	80 93 ec 2a 	sts	0x2AEC, r24	; 0x802aec <udd_sram+0x10>
    ae30:	90 93 ed 2a 	sts	0x2AED, r25	; 0x802aed <udd_sram+0x11>
//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
	udd_disable_overflow_interrupt();
    ae34:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    ae38:	8f 7d       	andi	r24, 0xDF	; 223
    ae3a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
	udd_disable_underflow_interrupt();
    ae3e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    ae42:	8f 7d       	andi	r24, 0xDF	; 223
    ae44:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    ae48:	e0 ef       	ldi	r30, 0xF0	; 240
    ae4a:	fa e2       	ldi	r31, 0x2A	; 42
    ae4c:	02 e0       	ldi	r16, 0x02	; 2
    ae4e:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    ae50:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    ae54:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
	udd_control_in_ack_tc();
    ae58:	00 e2       	ldi	r16, 0x20	; 32
    ae5a:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    ae5c:	00 e4       	ldi	r16, 0x40	; 64
    ae5e:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    ae60:	e8 ee       	ldi	r30, 0xE8	; 232
    ae62:	fa e2       	ldi	r31, 0x2A	; 42
    ae64:	00 e4       	ldi	r16, 0x40	; 64
    ae66:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    ae68:	10 92 c8 2d 	sts	0x2DC8, r1	; 0x802dc8 <udd_g_ctrlreq+0xc>
    ae6c:	10 92 c9 2d 	sts	0x2DC9, r1	; 0x802dc9 <udd_g_ctrlreq+0xd>
	udd_g_ctrlreq.over_under_run = NULL;
    ae70:	10 92 ca 2d 	sts	0x2DCA, r1	; 0x802dca <udd_g_ctrlreq+0xe>
    ae74:	10 92 cb 2d 	sts	0x2DCB, r1	; 0x802dcb <udd_g_ctrlreq+0xf>
	udd_g_ctrlreq.payload_size = 0;
    ae78:	10 92 c6 2d 	sts	0x2DC6, r1	; 0x802dc6 <udd_g_ctrlreq+0xa>
    ae7c:	10 92 c7 2d 	sts	0x2DC7, r1	; 0x802dc7 <udd_g_ctrlreq+0xb>
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    ae80:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <udd_ep_control_state>
    ae84:	fc ce       	rjmp	.-520    	; 0xac7e <__vector_125+0x60>
		// Reset endpoint control management
		udd_ctrl_init();
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    ae86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ae8a:	86 fd       	sbrc	r24, 6
    ae8c:	24 c0       	rjmp	.+72     	; 0xaed6 <__vector_125+0x2b8>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    ae8e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ae92:	85 ff       	sbrs	r24, 5
    ae94:	f4 ce       	rjmp	.-536    	; 0xac7e <__vector_125+0x60>
		udd_ack_resume_event();
    ae96:	80 e2       	ldi	r24, 0x20	; 32
    ae98:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    ae9c:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <udd_b_idle>
    aea0:	81 11       	cpse	r24, r1
    aea2:	0e c0       	rjmp	.+28     	; 0xaec0 <__vector_125+0x2a2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    aea4:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    aea8:	8f 3f       	cpi	r24, 0xFF	; 255
    aeaa:	a1 f0       	breq	.+40     	; 0xaed4 <__vector_125+0x2b6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    aeac:	8f b7       	in	r24, 0x3f	; 63
    aeae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    aeb0:	f8 94       	cli
	return flags;
    aeb2:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    aeb4:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    aeb8:	8f 5f       	subi	r24, 0xFF	; 255
    aeba:	80 93 cf 31 	sts	0x31CF, r24	; 0x8031cf <sleepmgr_locks+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    aebe:	9f bf       	out	0x3f, r25	; 63
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    aec0:	81 e0       	ldi	r24, 0x01	; 1
    aec2:	80 93 1c 2b 	sts	0x2B1C, r24	; 0x802b1c <udd_b_idle>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    aec6:	db ce       	rjmp	.-586    	; 0xac7e <__vector_125+0x60>
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
	if (udd_is_start_of_frame_event()) {
		udd_ack_start_of_frame_event();
    aec8:	80 e8       	ldi	r24, 0x80	; 128
    aeca:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    aece:	0e 94 5f 19 	call	0x32be	; 0x32be <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    aed2:	d5 ce       	rjmp	.-598    	; 0xac7e <__vector_125+0x60>
    aed4:	ff cf       	rjmp	.-2      	; 0xaed4 <__vector_125+0x2b6>
		udd_ctrl_init();
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
		udd_ack_suspend_event();
    aed6:	80 e4       	ldi	r24, 0x40	; 64
    aed8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
    aedc:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <udd_b_idle>
    aee0:	88 23       	and	r24, r24
    aee2:	71 f0       	breq	.+28     	; 0xaf00 <__vector_125+0x2e2>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    aee4:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    aee8:	88 23       	and	r24, r24
    aeea:	69 f0       	breq	.+26     	; 0xaf06 <__vector_125+0x2e8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    aeec:	8f b7       	in	r24, 0x3f	; 63
    aeee:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    aef0:	f8 94       	cli
	return flags;
    aef2:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    aef4:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    aef8:	81 50       	subi	r24, 0x01	; 1
    aefa:	80 93 cf 31 	sts	0x31CF, r24	; 0x8031cf <sleepmgr_locks+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    aefe:	9f bf       	out	0x3f, r25	; 63
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    af00:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <udd_b_idle>
    af04:	bc ce       	rjmp	.-648    	; 0xac7e <__vector_125+0x60>
    af06:	ff cf       	rjmp	.-2      	; 0xaf06 <__vector_125+0x2e8>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    af08:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    af0c:	81 fd       	sbrc	r24, 1
    af0e:	b7 ce       	rjmp	.-658    	; 0xac7e <__vector_125+0x60>
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
    af10:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    af14:	80 fd       	sbrc	r24, 0
    af16:	0c c0       	rjmp	.+24     	; 0xaf30 <__vector_125+0x312>
static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    af18:	80 91 da 2a 	lds	r24, 0x2ADA	; 0x802ada <udd_ep_control_state>
    af1c:	81 30       	cpi	r24, 0x01	; 1
    af1e:	a1 f0       	breq	.+40     	; 0xaf48 <__vector_125+0x32a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    af20:	84 30       	cpi	r24, 0x04	; 4
    af22:	09 f0       	breq	.+2      	; 0xaf26 <__vector_125+0x308>
    af24:	ac ce       	rjmp	.-680    	; 0xac7e <__vector_125+0x60>
    af26:	e4 ce       	rjmp	.-568    	; 0xacf0 <__vector_125+0xd2>
    af28:	7a da       	rcall	.-2828   	; 0xa41e <udd_ctrl_interrupt_tc_setup.part.0>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    af2a:	81 11       	cpse	r24, r1
    af2c:	a8 ce       	rjmp	.-688    	; 0xac7e <__vector_125+0x60>
    af2e:	d9 ce       	rjmp	.-590    	; 0xace2 <__vector_125+0xc4>
    af30:	76 da       	rcall	.-2836   	; 0xa41e <udd_ctrl_interrupt_tc_setup.part.0>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    af32:	81 11       	cpse	r24, r1
    af34:	a4 ce       	rjmp	.-696    	; 0xac7e <__vector_125+0x60>
    af36:	f0 cf       	rjmp	.-32     	; 0xaf18 <__vector_125+0x2fa>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    af38:	84 e0       	ldi	r24, 0x04	; 4
    af3a:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    af3e:	e8 ee       	ldi	r30, 0xE8	; 232
    af40:	fa e2       	ldi	r31, 0x2A	; 42
    af42:	02 e0       	ldi	r16, 0x02	; 2
    af44:	06 93       	lac	Z, r16
    af46:	9b ce       	rjmp	.-714    	; 0xac7e <__vector_125+0x60>
	udd_control_out_enable_stall();
}

static void udd_ctrl_send_zlp_in(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    af48:	83 e0       	ldi	r24, 0x03	; 3
    af4a:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    af4e:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    af52:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
	udd_control_in_clear_NACK0();
    af56:	e0 ef       	ldi	r30, 0xF0	; 240
    af58:	fa e2       	ldi	r31, 0x2A	; 42
    af5a:	02 e0       	ldi	r16, 0x02	; 2
    af5c:	06 93       	lac	Z, r16
    af5e:	8f ce       	rjmp	.-738    	; 0xac7e <__vector_125+0x60>

0000af60 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    af60:	1f 92       	push	r1
    af62:	0f 92       	push	r0
    af64:	0f b6       	in	r0, 0x3f	; 63
    af66:	0f 92       	push	r0
    af68:	11 24       	eor	r1, r1
    af6a:	0b b6       	in	r0, 0x3b	; 59
    af6c:	0f 92       	push	r0
    af6e:	ef 92       	push	r14
    af70:	ff 92       	push	r15
    af72:	0f 93       	push	r16
    af74:	1f 93       	push	r17
    af76:	2f 93       	push	r18
    af78:	3f 93       	push	r19
    af7a:	4f 93       	push	r20
    af7c:	5f 93       	push	r21
    af7e:	6f 93       	push	r22
    af80:	7f 93       	push	r23
    af82:	8f 93       	push	r24
    af84:	9f 93       	push	r25
    af86:	af 93       	push	r26
    af88:	bf 93       	push	r27
    af8a:	cf 93       	push	r28
    af8c:	df 93       	push	r29
    af8e:	ef 93       	push	r30
    af90:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    af92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    af96:	81 fd       	sbrc	r24, 1
    af98:	04 c0       	rjmp	.+8      	; 0xafa2 <__vector_126+0x42>
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
    af9a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    af9e:	80 fd       	sbrc	r24, 0
    afa0:	5e c0       	rjmp	.+188    	; 0xb05e <__vector_126+0xfe>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    afa2:	82 e0       	ldi	r24, 0x02	; 2
    afa4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    afa8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    afac:	c8 ee       	ldi	r28, 0xE8	; 232
    afae:	da e2       	ldi	r29, 0x2A	; 42
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    afb0:	81 95       	neg	r24
    afb2:	88 0f       	add	r24, r24
    afb4:	fe 01       	movw	r30, r28
    afb6:	e8 1b       	sub	r30, r24
    afb8:	f1 09       	sbc	r31, r1
    afba:	20 81       	ld	r18, Z
    afbc:	31 81       	ldd	r19, Z+1	; 0x01
    afbe:	28 5e       	subi	r18, 0xE8	; 232
    afc0:	3a 42       	sbci	r19, 0x2A	; 42
    afc2:	36 95       	lsr	r19
    afc4:	27 95       	ror	r18
    afc6:	36 95       	lsr	r19
    afc8:	27 95       	ror	r18
    afca:	36 95       	lsr	r19
    afcc:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    afce:	82 2f       	mov	r24, r18
    afd0:	86 95       	lsr	r24
    afd2:	20 fd       	sbrc	r18, 0
    afd4:	42 c0       	rjmp	.+132    	; 0xb05a <__vector_126+0xfa>
    afd6:	90 e0       	ldi	r25, 0x00	; 0
    afd8:	89 0f       	add	r24, r25
    afda:	e8 2f       	mov	r30, r24
    afdc:	ef 70       	andi	r30, 0x0F	; 15
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    afde:	f0 e0       	ldi	r31, 0x00	; 0
    afe0:	ee 0f       	add	r30, r30
    afe2:	ff 1f       	adc	r31, r31
    afe4:	28 2f       	mov	r18, r24
    afe6:	08 2e       	mov	r0, r24
    afe8:	00 0c       	add	r0, r0
    afea:	33 0b       	sbc	r19, r19
    afec:	22 27       	eor	r18, r18
    afee:	33 0f       	add	r19, r19
    aff0:	22 1f       	adc	r18, r18
    aff2:	33 27       	eor	r19, r19
    aff4:	e2 0f       	add	r30, r18
    aff6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    aff8:	ee 0f       	add	r30, r30
    affa:	ff 1f       	adc	r31, r31
    affc:	ee 0f       	add	r30, r30
    affe:	ff 1f       	adc	r31, r31
    b000:	ee 0f       	add	r30, r30
    b002:	ff 1f       	adc	r31, r31
    b004:	df 01       	movw	r26, r30
    b006:	a4 52       	subi	r26, 0x24	; 36
    b008:	b5 4d       	sbci	r27, 0xD5	; 213
    b00a:	1c 96       	adiw	r26, 0x0c	; 12
    b00c:	9c 91       	ld	r25, X
    b00e:	95 ff       	sbrs	r25, 5
    b010:	0b c0       	rjmp	.+22     	; 0xb028 <__vector_126+0xc8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b012:	e8 51       	subi	r30, 0x18	; 24
    b014:	f5 4d       	sbci	r31, 0xD5	; 213
    b016:	00 e2       	ldi	r16, 0x20	; 32
    b018:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    b01a:	88 23       	and	r24, r24
    b01c:	21 f1       	breq	.+72     	; 0xb066 <__vector_126+0x106>
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    b01e:	80 38       	cpi	r24, 0x80	; 128
    b020:	09 f4       	brne	.+2      	; 0xb024 <__vector_126+0xc4>
    b022:	65 c0       	rjmp	.+202    	; 0xb0ee <__vector_126+0x18e>
		udd_ctrl_in_sent();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    b024:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    b028:	ff 91       	pop	r31
    b02a:	ef 91       	pop	r30
    b02c:	df 91       	pop	r29
    b02e:	cf 91       	pop	r28
    b030:	bf 91       	pop	r27
    b032:	af 91       	pop	r26
    b034:	9f 91       	pop	r25
    b036:	8f 91       	pop	r24
    b038:	7f 91       	pop	r23
    b03a:	6f 91       	pop	r22
    b03c:	5f 91       	pop	r21
    b03e:	4f 91       	pop	r20
    b040:	3f 91       	pop	r19
    b042:	2f 91       	pop	r18
    b044:	1f 91       	pop	r17
    b046:	0f 91       	pop	r16
    b048:	ff 90       	pop	r15
    b04a:	ef 90       	pop	r14
    b04c:	0f 90       	pop	r0
    b04e:	0b be       	out	0x3b, r0	; 59
    b050:	0f 90       	pop	r0
    b052:	0f be       	out	0x3f, r0	; 63
    b054:	0f 90       	pop	r0
    b056:	1f 90       	pop	r1
    b058:	18 95       	reti
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    b05a:	90 e8       	ldi	r25, 0x80	; 128
    b05c:	bd cf       	rjmp	.-134    	; 0xafd8 <__vector_126+0x78>
    b05e:	df d9       	rcall	.-3138   	; 0xa41e <udd_ctrl_interrupt_tc_setup.part.0>
#endif

	if (!udd_is_tc_event()) {
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    b060:	81 11       	cpse	r24, r1
    b062:	e2 cf       	rjmp	.-60     	; 0xb028 <__vector_126+0xc8>
    b064:	9e cf       	rjmp	.-196    	; 0xafa2 <__vector_126+0x42>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b066:	80 91 da 2a 	lds	r24, 0x2ADA	; 0x802ada <udd_ep_control_state>
    b06a:	84 30       	cpi	r24, 0x04	; 4
    b06c:	09 f4       	brne	.+2      	; 0xb070 <__vector_126+0x110>
    b06e:	52 c0       	rjmp	.+164    	; 0xb114 <__vector_126+0x1b4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    b070:	e0 90 ea 2a 	lds	r14, 0x2AEA	; 0x802aea <udd_sram+0xe>
    b074:	f0 90 eb 2a 	lds	r15, 0x2AEB	; 0x802aeb <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    b078:	20 91 c6 2d 	lds	r18, 0x2DC6	; 0x802dc6 <udd_g_ctrlreq+0xa>
    b07c:	30 91 c7 2d 	lds	r19, 0x2DC7	; 0x802dc7 <udd_g_ctrlreq+0xb>
    b080:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    b084:	90 91 d7 2a 	lds	r25, 0x2AD7	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    b088:	87 01       	movw	r16, r14
    b08a:	08 0f       	add	r16, r24
    b08c:	19 1f       	adc	r17, r25
    b08e:	20 17       	cp	r18, r16
    b090:	31 07       	cpc	r19, r17
    b092:	78 f1       	brcs	.+94     	; 0xb0f2 <__vector_126+0x192>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    b094:	20 91 c4 2d 	lds	r18, 0x2DC4	; 0x802dc4 <udd_g_ctrlreq+0x8>
    b098:	30 91 c5 2d 	lds	r19, 0x2DC5	; 0x802dc5 <udd_g_ctrlreq+0x9>
    b09c:	a7 01       	movw	r20, r14
    b09e:	66 e9       	ldi	r22, 0x96	; 150
    b0a0:	7a e2       	ldi	r23, 0x2A	; 42
    b0a2:	82 0f       	add	r24, r18
    b0a4:	93 1f       	adc	r25, r19
    b0a6:	0e 94 93 80 	call	0x10126	; 0x10126 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    b0aa:	00 93 d6 2a 	sts	0x2AD6, r16	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    b0ae:	10 93 d7 2a 	sts	0x2AD7, r17	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b0b2:	f0 e4       	ldi	r31, 0x40	; 64
    b0b4:	ef 16       	cp	r14, r31
    b0b6:	f1 04       	cpc	r15, r1
    b0b8:	09 f4       	brne	.+2      	; 0xb0bc <__vector_126+0x15c>
    b0ba:	5b c0       	rjmp	.+182    	; 0xb172 <__vector_126+0x212>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    b0bc:	00 93 c6 2d 	sts	0x2DC6, r16	; 0x802dc6 <udd_g_ctrlreq+0xa>
    b0c0:	10 93 c7 2d 	sts	0x2DC7, r17	; 0x802dc7 <udd_g_ctrlreq+0xb>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    b0c4:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udd_g_ctrlreq+0xe>
    b0c8:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udd_g_ctrlreq+0xf>
    b0cc:	30 97       	sbiw	r30, 0x00	; 0
    b0ce:	b1 f0       	breq	.+44     	; 0xb0fc <__vector_126+0x19c>
			if (!udd_g_ctrlreq.over_under_run()) {
    b0d0:	19 95       	eicall
    b0d2:	81 11       	cpse	r24, r1
    b0d4:	13 c0       	rjmp	.+38     	; 0xb0fc <__vector_126+0x19c>
}

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    b0d6:	85 e0       	ldi	r24, 0x05	; 5
    b0d8:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
	udd_control_in_enable_stall();
    b0dc:	e1 ef       	ldi	r30, 0xF1	; 241
    b0de:	fa e2       	ldi	r31, 0x2A	; 42
    b0e0:	04 e0       	ldi	r16, 0x04	; 4
    b0e2:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    b0e4:	e9 ee       	ldi	r30, 0xE9	; 233
    b0e6:	fa e2       	ldi	r31, 0x2A	; 42
    b0e8:	04 e0       	ldi	r16, 0x04	; 4
    b0ea:	05 93       	las	Z, r16
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
		udd_ctrl_in_sent();
    b0ec:	9d cf       	rjmp	.-198    	; 0xb028 <__vector_126+0xc8>
    b0ee:	f4 d8       	rcall	.-3608   	; 0xa2d8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    b0f0:	9b cf       	rjmp	.-202    	; 0xb028 <__vector_126+0xc8>
	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    b0f2:	79 01       	movw	r14, r18
    b0f4:	e8 1a       	sub	r14, r24
    b0f6:	f9 0a       	sbc	r15, r25
    b0f8:	89 01       	movw	r16, r18
    b0fa:	cc cf       	rjmp	.-104    	; 0xb094 <__vector_126+0x134>
	udd_control_out_enable_stall();
}

static void udd_ctrl_send_zlp_in(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    b0fc:	83 e0       	ldi	r24, 0x03	; 3
    b0fe:	80 93 da 2a 	sts	0x2ADA, r24	; 0x802ada <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    b102:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    b106:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
	udd_control_in_clear_NACK0();
    b10a:	e0 ef       	ldi	r30, 0xF0	; 240
    b10c:	fa e2       	ldi	r31, 0x2A	; 42
    b10e:	02 e0       	ldi	r16, 0x02	; 2
    b110:	06 93       	lac	Z, r16
    b112:	8a cf       	rjmp	.-236    	; 0xb028 <__vector_126+0xc8>
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    b114:	e0 91 c8 2d 	lds	r30, 0x2DC8	; 0x802dc8 <udd_g_ctrlreq+0xc>
    b118:	f0 91 c9 2d 	lds	r31, 0x2DC9	; 0x802dc9 <udd_g_ctrlreq+0xd>
    b11c:	30 97       	sbiw	r30, 0x00	; 0
    b11e:	09 f0       	breq	.+2      	; 0xb122 <__vector_126+0x1c2>
		udd_g_ctrlreq.callback();
    b120:	19 95       	eicall
//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
	udd_disable_overflow_interrupt();
    b122:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    b126:	8f 7d       	andi	r24, 0xDF	; 223
    b128:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
	udd_disable_underflow_interrupt();
    b12c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    b130:	8f 7d       	andi	r24, 0xDF	; 223
    b132:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    b136:	e0 ef       	ldi	r30, 0xF0	; 240
    b138:	fa e2       	ldi	r31, 0x2A	; 42
    b13a:	02 e0       	ldi	r16, 0x02	; 2
    b13c:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    b13e:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <udd_sram+0x16>
    b142:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <udd_sram+0x17>
	udd_control_in_ack_tc();
    b146:	00 e2       	ldi	r16, 0x20	; 32
    b148:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    b14a:	00 e4       	ldi	r16, 0x40	; 64
    b14c:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    b14e:	fe 01       	movw	r30, r28
    b150:	00 e4       	ldi	r16, 0x40	; 64
    b152:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    b154:	10 92 c8 2d 	sts	0x2DC8, r1	; 0x802dc8 <udd_g_ctrlreq+0xc>
    b158:	10 92 c9 2d 	sts	0x2DC9, r1	; 0x802dc9 <udd_g_ctrlreq+0xd>
	udd_g_ctrlreq.over_under_run = NULL;
    b15c:	10 92 ca 2d 	sts	0x2DCA, r1	; 0x802dca <udd_g_ctrlreq+0xe>
    b160:	10 92 cb 2d 	sts	0x2DCB, r1	; 0x802dcb <udd_g_ctrlreq+0xf>
	udd_g_ctrlreq.payload_size = 0;
    b164:	10 92 c6 2d 	sts	0x2DC6, r1	; 0x802dc6 <udd_g_ctrlreq+0xa>
    b168:	10 92 c7 2d 	sts	0x2DC7, r1	; 0x802dc7 <udd_g_ctrlreq+0xb>
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    b16c:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <udd_ep_control_state>
    b170:	5b cf       	rjmp	.-330    	; 0xb028 <__vector_126+0xc8>

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b172:	80 91 d8 2a 	lds	r24, 0x2AD8	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    b176:	90 91 d9 2a 	lds	r25, 0x2AD9	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    b17a:	80 0f       	add	r24, r16
    b17c:	91 1f       	adc	r25, r17
    b17e:	20 91 c2 2d 	lds	r18, 0x2DC2	; 0x802dc2 <udd_g_ctrlreq+0x6>
    b182:	30 91 c3 2d 	lds	r19, 0x2DC3	; 0x802dc3 <udd_g_ctrlreq+0x7>
    b186:	82 17       	cp	r24, r18
    b188:	93 07       	cpc	r25, r19
    b18a:	08 f0       	brcs	.+2      	; 0xb18e <__vector_126+0x22e>
    b18c:	97 cf       	rjmp	.-210    	; 0xb0bc <__vector_126+0x15c>
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    b18e:	80 91 c6 2d 	lds	r24, 0x2DC6	; 0x802dc6 <udd_g_ctrlreq+0xa>
    b192:	90 91 c7 2d 	lds	r25, 0x2DC7	; 0x802dc7 <udd_g_ctrlreq+0xb>
    b196:	80 17       	cp	r24, r16
    b198:	91 07       	cpc	r25, r17
    b19a:	31 f0       	breq	.+12     	; 0xb1a8 <__vector_126+0x248>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    b19c:	fe 01       	movw	r30, r28
    b19e:	02 e0       	ldi	r16, 0x02	; 2
    b1a0:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    b1a2:	00 e2       	ldi	r16, 0x20	; 32
    b1a4:	06 93       	lac	Z, r16
    b1a6:	40 cf       	rjmp	.-384    	; 0xb028 <__vector_126+0xc8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    b1a8:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udd_g_ctrlreq+0xe>
    b1ac:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udd_g_ctrlreq+0xf>
    b1b0:	30 97       	sbiw	r30, 0x00	; 0
    b1b2:	09 f4       	brne	.+2      	; 0xb1b6 <__vector_126+0x256>
    b1b4:	90 cf       	rjmp	.-224    	; 0xb0d6 <__vector_126+0x176>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    b1b6:	19 95       	eicall
    b1b8:	88 23       	and	r24, r24
    b1ba:	09 f4       	brne	.+2      	; 0xb1be <__vector_126+0x25e>
    b1bc:	8c cf       	rjmp	.-232    	; 0xb0d6 <__vector_126+0x176>
			udd_ctrl_stall_data();
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    b1be:	20 91 d8 2a 	lds	r18, 0x2AD8	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    b1c2:	30 91 d9 2a 	lds	r19, 0x2AD9	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
    b1c6:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    b1ca:	90 91 d7 2a 	lds	r25, 0x2AD7	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    b1ce:	82 0f       	add	r24, r18
    b1d0:	93 1f       	adc	r25, r19
    b1d2:	80 93 d8 2a 	sts	0x2AD8, r24	; 0x802ad8 <udd_ctrl_prev_payload_nb_trans>
    b1d6:	90 93 d9 2a 	sts	0x2AD9, r25	; 0x802ad9 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    b1da:	10 92 d6 2a 	sts	0x2AD6, r1	; 0x802ad6 <udd_ctrl_payload_nb_trans>
    b1de:	10 92 d7 2a 	sts	0x2AD7, r1	; 0x802ad7 <udd_ctrl_payload_nb_trans+0x1>
    b1e2:	dc cf       	rjmp	.-72     	; 0xb19c <__vector_126+0x23c>

0000b1e4 <init_board>:
#include "sound.h"
#include "irq.h"
#include "init.h"

void init_board(void)
{
    b1e4:	0f 93       	push	r16
    b1e6:	1f 93       	push	r17
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    b1e8:	43 e0       	ldi	r20, 0x03	; 3
    b1ea:	50 e0       	ldi	r21, 0x00	; 0
    b1ec:	62 e0       	ldi	r22, 0x02	; 2
    b1ee:	80 e6       	ldi	r24, 0x60	; 96
    b1f0:	96 e0       	ldi	r25, 0x06	; 6
    b1f2:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b1f6:	43 e0       	ldi	r20, 0x03	; 3
    b1f8:	50 e0       	ldi	r21, 0x00	; 0
    b1fa:	61 e0       	ldi	r22, 0x01	; 1
    b1fc:	80 e6       	ldi	r24, 0x60	; 96
    b1fe:	96 e0       	ldi	r25, 0x06	; 6
    b200:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b204:	41 e0       	ldi	r20, 0x01	; 1
    b206:	50 e0       	ldi	r21, 0x00	; 0
    b208:	60 e1       	ldi	r22, 0x10	; 16
    b20a:	80 e6       	ldi	r24, 0x60	; 96
    b20c:	96 e0       	ldi	r25, 0x06	; 6
    b20e:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b212:	43 e0       	ldi	r20, 0x03	; 3
    b214:	50 e0       	ldi	r21, 0x00	; 0
    b216:	68 e0       	ldi	r22, 0x08	; 8
    b218:	80 ea       	ldi	r24, 0xA0	; 160
    b21a:	96 e0       	ldi	r25, 0x06	; 6
    b21c:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b220:	43 e0       	ldi	r20, 0x03	; 3
    b222:	50 e0       	ldi	r21, 0x00	; 0
    b224:	60 e2       	ldi	r22, 0x20	; 32
    b226:	80 e6       	ldi	r24, 0x60	; 96
    b228:	96 e0       	ldi	r25, 0x06	; 6
    b22a:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b22e:	43 e0       	ldi	r20, 0x03	; 3
    b230:	50 e0       	ldi	r21, 0x00	; 0
    b232:	68 e0       	ldi	r22, 0x08	; 8
    b234:	80 e6       	ldi	r24, 0x60	; 96
    b236:	96 e0       	ldi	r25, 0x06	; 6
    b238:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b23c:	40 e0       	ldi	r20, 0x00	; 0
    b23e:	50 e0       	ldi	r21, 0x00	; 0
    b240:	64 e0       	ldi	r22, 0x04	; 4
    b242:	80 e6       	ldi	r24, 0x60	; 96
    b244:	96 e0       	ldi	r25, 0x06	; 6
    b246:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b24a:	41 e0       	ldi	r20, 0x01	; 1
    b24c:	50 e0       	ldi	r21, 0x00	; 0
    b24e:	62 e0       	ldi	r22, 0x02	; 2
    b250:	80 e4       	ldi	r24, 0x40	; 64
    b252:	96 e0       	ldi	r25, 0x06	; 6
    b254:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b258:	40 e0       	ldi	r20, 0x00	; 0
    b25a:	58 e1       	ldi	r21, 0x18	; 24
    b25c:	64 e0       	ldi	r22, 0x04	; 4
    b25e:	80 e4       	ldi	r24, 0x40	; 64
    b260:	96 e0       	ldi	r25, 0x06	; 6
    b262:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b266:	41 e0       	ldi	r20, 0x01	; 1
    b268:	50 e0       	ldi	r21, 0x00	; 0
    b26a:	68 e0       	ldi	r22, 0x08	; 8
    b26c:	80 e4       	ldi	r24, 0x40	; 64
    b26e:	96 e0       	ldi	r25, 0x06	; 6
    b270:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b274:	43 e0       	ldi	r20, 0x03	; 3
    b276:	50 e0       	ldi	r21, 0x00	; 0
    b278:	61 e0       	ldi	r22, 0x01	; 1
    b27a:	80 e4       	ldi	r24, 0x40	; 64
    b27c:	96 e0       	ldi	r25, 0x06	; 6
    b27e:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b282:	40 e0       	ldi	r20, 0x00	; 0
    b284:	50 e0       	ldi	r21, 0x00	; 0
    b286:	62 e0       	ldi	r22, 0x02	; 2
    b288:	80 e0       	ldi	r24, 0x00	; 0
    b28a:	96 e0       	ldi	r25, 0x06	; 6
    b28c:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b290:	40 e0       	ldi	r20, 0x00	; 0
    b292:	50 e0       	ldi	r21, 0x00	; 0
    b294:	64 e0       	ldi	r22, 0x04	; 4
    b296:	80 e0       	ldi	r24, 0x00	; 0
    b298:	96 e0       	ldi	r25, 0x06	; 6
    b29a:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b29e:	40 e0       	ldi	r20, 0x00	; 0
    b2a0:	50 e0       	ldi	r21, 0x00	; 0
    b2a2:	61 e0       	ldi	r22, 0x01	; 1
    b2a4:	80 e0       	ldi	r24, 0x00	; 0
    b2a6:	96 e0       	ldi	r25, 0x06	; 6
    b2a8:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2ac:	40 e0       	ldi	r20, 0x00	; 0
    b2ae:	50 e0       	ldi	r21, 0x00	; 0
    b2b0:	62 e0       	ldi	r22, 0x02	; 2
    b2b2:	80 e2       	ldi	r24, 0x20	; 32
    b2b4:	96 e0       	ldi	r25, 0x06	; 6
    b2b6:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2ba:	40 e0       	ldi	r20, 0x00	; 0
    b2bc:	50 e0       	ldi	r21, 0x00	; 0
    b2be:	64 e0       	ldi	r22, 0x04	; 4
    b2c0:	80 e2       	ldi	r24, 0x20	; 32
    b2c2:	96 e0       	ldi	r25, 0x06	; 6
    b2c4:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2c8:	40 e0       	ldi	r20, 0x00	; 0
    b2ca:	50 e0       	ldi	r21, 0x00	; 0
    b2cc:	61 e0       	ldi	r22, 0x01	; 1
    b2ce:	80 e2       	ldi	r24, 0x20	; 32
    b2d0:	96 e0       	ldi	r25, 0x06	; 6
    b2d2:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2d6:	40 e0       	ldi	r20, 0x00	; 0
    b2d8:	50 e0       	ldi	r21, 0x00	; 0
    b2da:	60 e2       	ldi	r22, 0x20	; 32
    b2dc:	80 e0       	ldi	r24, 0x00	; 0
    b2de:	96 e0       	ldi	r25, 0x06	; 6
    b2e0:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2e4:	40 e0       	ldi	r20, 0x00	; 0
    b2e6:	50 e0       	ldi	r21, 0x00	; 0
    b2e8:	68 e0       	ldi	r22, 0x08	; 8
    b2ea:	80 e2       	ldi	r24, 0x20	; 32
    b2ec:	96 e0       	ldi	r25, 0x06	; 6
    b2ee:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b2f2:	40 e0       	ldi	r20, 0x00	; 0
    b2f4:	50 e0       	ldi	r21, 0x00	; 0
    b2f6:	68 e0       	ldi	r22, 0x08	; 8
    b2f8:	80 e0       	ldi	r24, 0x00	; 0
    b2fa:	96 e0       	ldi	r25, 0x06	; 6
    b2fc:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b300:	40 e0       	ldi	r20, 0x00	; 0
    b302:	50 e0       	ldi	r21, 0x00	; 0
    b304:	60 e1       	ldi	r22, 0x10	; 16
    b306:	80 e0       	ldi	r24, 0x00	; 0
    b308:	96 e0       	ldi	r25, 0x06	; 6
    b30a:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
    b30e:	43 e0       	ldi	r20, 0x03	; 3
    b310:	50 e0       	ldi	r21, 0x00	; 0
    b312:	60 e8       	ldi	r22, 0x80	; 128
    b314:	80 e4       	ldi	r24, 0x40	; 64
    b316:	96 e0       	ldi	r25, 0x06	; 6
    b318:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <ioport_configure_port_pin>
	ioport_configure_pin(CONF_TILT_B, IOPORT_DIR_INPUT);

	ioport_configure_pin(AUDIO_OUT_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);


	sysclk_init();
    b31c:	0e 94 18 73 	call	0xe630	; 0xe630 <sysclk_init>
	irq_initialize_vectors();
    b320:	87 e0       	ldi	r24, 0x07	; 7
    b322:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    b326:	78 94       	sei
	stdio_usb_init();
    b328:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <stdio_usb_init>
	stdio_usb_enable();
    b32c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <stdio_usb_enable>
    b330:	86 e5       	ldi	r24, 0x56	; 86
    b332:	98 e5       	ldi	r25, 0x58	; 88
    b334:	a4 e1       	ldi	r26, 0x14	; 20
    b336:	b0 e0       	ldi	r27, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    b338:	01 97       	sbiw	r24, 0x01	; 1
    b33a:	a1 09       	sbc	r26, r1
    b33c:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    b33e:	e1 f7       	brne	.-8      	; 0xb338 <init_board+0x154>
	delay_ms(250);
//	sleepmgr_init(); // Optional
	sd_mmc_init();
    b340:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <sd_mmc_init>
	rtc_init();
    b344:	0e 94 15 4f 	call	0x9e2a	; 0x9e2a <rtc_init>
    b348:	86 e5       	ldi	r24, 0x56	; 86
    b34a:	98 e5       	ldi	r25, 0x58	; 88
    b34c:	a4 e1       	ldi	r26, 0x14	; 20
    b34e:	b0 e0       	ldi	r27, 0x00	; 0
		barrier();
    b350:	01 97       	sbiw	r24, 0x01	; 1
    b352:	a1 09       	sbc	r26, r1
    b354:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    b356:	e1 f7       	brne	.-8      	; 0xb350 <init_board+0x16c>
	delay_ms(250);
	

	PORTA.INTCTRL = ( PORTA.INTCTRL & ~PORT_INT0LVL_gm ) | PORT_INT0LVL_MED_gc;
    b358:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
    b35c:	8c 7f       	andi	r24, 0xFC	; 252
    b35e:	82 60       	ori	r24, 0x02	; 2
    b360:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
	PORTA.INT0MASK = 0x3F;
    b364:	8f e3       	ldi	r24, 0x3F	; 63
    b366:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
	PORTB.INTCTRL = ( PORTB.INTCTRL & ~PORT_INT0LVL_gm ) | PORT_INT0LVL_MED_gc;
    b36a:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <__TEXT_REGION_LENGTH__+0x700629>
    b36e:	8c 7f       	andi	r24, 0xFC	; 252
    b370:	82 60       	ori	r24, 0x02	; 2
    b372:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <__TEXT_REGION_LENGTH__+0x700629>
	PORTB.INT0MASK = 0x0F;
    b376:	8f e0       	ldi	r24, 0x0F	; 15
    b378:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
	
	init_tc();
    b37c:	a0 d1       	rcall	.+832    	; 0xb6be <init_tc>

	gfx_init();
    b37e:	0e 94 b8 70 	call	0xe170	; 0xe170 <gfx_ili9341_init>
	gfx_draw_filled_rect(0,0,ILI9341_DEFAULT_WIDTH,ILI9341_DEFAULT_HEIGHT, GFX_COLOR_BLACK);
    b382:	00 e0       	ldi	r16, 0x00	; 0
    b384:	10 e0       	ldi	r17, 0x00	; 0
    b386:	20 ef       	ldi	r18, 0xF0	; 240
    b388:	30 e0       	ldi	r19, 0x00	; 0
    b38a:	40 e4       	ldi	r20, 0x40	; 64
    b38c:	51 e0       	ldi	r21, 0x01	; 1
    b38e:	60 e0       	ldi	r22, 0x00	; 0
    b390:	70 e0       	ldi	r23, 0x00	; 0
    b392:	80 e0       	ldi	r24, 0x00	; 0
    b394:	90 e0       	ldi	r25, 0x00	; 0
    b396:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
	gfx_set_orientation(GFX_FLIP_X | GFX_FLIP_Y);
    b39a:	83 e0       	ldi	r24, 0x03	; 3
    b39c:	0e 94 14 70 	call	0xe028	; 0xe028 <gfx_ili9341_set_orientation>
/*! Generic implementation of gfx_draw_horizontal_line(). */
__always_inline static void gfx_generic_draw_horizontal_line(
		gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
		gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, length, 1, color);
    b3a0:	0f ef       	ldi	r16, 0xFF	; 255
    b3a2:	1f ef       	ldi	r17, 0xFF	; 255
    b3a4:	21 e0       	ldi	r18, 0x01	; 1
    b3a6:	30 e0       	ldi	r19, 0x00	; 0
    b3a8:	40 e4       	ldi	r20, 0x40	; 64
    b3aa:	51 e0       	ldi	r21, 0x01	; 1
    b3ac:	60 e0       	ldi	r22, 0x00	; 0
    b3ae:	70 e0       	ldi	r23, 0x00	; 0
    b3b0:	80 e0       	ldi	r24, 0x00	; 0
    b3b2:	90 e0       	ldi	r25, 0x00	; 0
    b3b4:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    b3b8:	21 e0       	ldi	r18, 0x01	; 1
    b3ba:	30 e0       	ldi	r19, 0x00	; 0
    b3bc:	40 e4       	ldi	r20, 0x40	; 64
    b3be:	51 e0       	ldi	r21, 0x01	; 1
    b3c0:	6f ee       	ldi	r22, 0xEF	; 239
    b3c2:	70 e0       	ldi	r23, 0x00	; 0
    b3c4:	80 e0       	ldi	r24, 0x00	; 0
    b3c6:	90 e0       	ldi	r25, 0x00	; 0
    b3c8:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>

/*! Generic implementation of gfx_draw_vertical_line(). */
__always_inline static void gfx_generic_draw_vertical_line(gfx_coord_t x,
		gfx_coord_t y, gfx_coord_t length, gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, 1, length, color);
    b3cc:	20 ef       	ldi	r18, 0xF0	; 240
    b3ce:	30 e0       	ldi	r19, 0x00	; 0
    b3d0:	41 e0       	ldi	r20, 0x01	; 1
    b3d2:	50 e0       	ldi	r21, 0x00	; 0
    b3d4:	60 e0       	ldi	r22, 0x00	; 0
    b3d6:	70 e0       	ldi	r23, 0x00	; 0
    b3d8:	80 e0       	ldi	r24, 0x00	; 0
    b3da:	90 e0       	ldi	r25, 0x00	; 0
    b3dc:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    b3e0:	20 ef       	ldi	r18, 0xF0	; 240
    b3e2:	30 e0       	ldi	r19, 0x00	; 0
    b3e4:	41 e0       	ldi	r20, 0x01	; 1
    b3e6:	50 e0       	ldi	r21, 0x00	; 0
    b3e8:	60 e0       	ldi	r22, 0x00	; 0
    b3ea:	70 e0       	ldi	r23, 0x00	; 0
    b3ec:	8f e3       	ldi	r24, 0x3F	; 63
    b3ee:	91 e0       	ldi	r25, 0x01	; 1
    b3f0:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
	gfx_draw_rect(0,0,ILI9341_DEFAULT_WIDTH,ILI9341_DEFAULT_HEIGHT,GFX_COLOR_WHITE);
	
    b3f4:	1f 91       	pop	r17
    b3f6:	0f 91       	pop	r16
    b3f8:	08 95       	ret

0000b3fa <my_callback>:
static void my_callback(void)
{
	extern uint8_t audio_en;
	// User code to execute when the overflow occurs here
	//Important to clear Interrupt Flag
	if(audio_en == 1)
    b3fa:	80 91 ab 2d 	lds	r24, 0x2DAB	; 0x802dab <audio_en>
    b3fe:	81 30       	cpi	r24, 0x01	; 1
    b400:	19 f4       	brne	.+6      	; 0xb408 <my_callback+0xe>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    b402:	80 e8       	ldi	r24, 0x80	; 128
    b404:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    b408:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    b40c:	81 60       	ori	r24, 0x01	; 1
    b40e:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    b412:	08 95       	ret

0000b414 <__vector_66>:
	tc_clear_overflow(&TCC0);
}


ISR(PORTA_INT0_vect)
{
    b414:	1f 92       	push	r1
    b416:	0f 92       	push	r0
    b418:	0f b6       	in	r0, 0x3f	; 63
    b41a:	0f 92       	push	r0
    b41c:	11 24       	eor	r1, r1
    b41e:	0b b6       	in	r0, 0x3b	; 59
    b420:	0f 92       	push	r0
    b422:	2f 93       	push	r18
    b424:	3f 93       	push	r19
    b426:	4f 93       	push	r20
    b428:	5f 93       	push	r21
    b42a:	6f 93       	push	r22
    b42c:	7f 93       	push	r23
    b42e:	8f 93       	push	r24
    b430:	9f 93       	push	r25
    b432:	ef 93       	push	r30
    b434:	ff 93       	push	r31
	extern int8_t enc_left;
	extern uint8_t pbl, tilt_in;
	// Record the A and B signals in separate sequences
	seqLA <<= 1;
    b436:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b43a:	66 0f       	add	r22, r22
    b43c:	77 0b       	sbc	r23, r23
    b43e:	60 93 20 2b 	sts	0x2B20, r22	; 0x802b20 <seqLA>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    b442:	60 91 08 06 	lds	r22, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	seqLA |= gpio_pin_is_high(CONF_ENC_L_A);
    b446:	70 91 20 2b 	lds	r23, 0x2B20	; 0x802b20 <seqLA>
    b44a:	66 95       	lsr	r22
    b44c:	61 70       	andi	r22, 0x01	; 1
    b44e:	67 2b       	or	r22, r23
    b450:	60 93 20 2b 	sts	0x2B20, r22	; 0x802b20 <seqLA>
	
	seqLB <<= 1;
    b454:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b458:	66 0f       	add	r22, r22
    b45a:	77 0b       	sbc	r23, r23
    b45c:	60 93 1f 2b 	sts	0x2B1F, r22	; 0x802b1f <seqLB>
    b460:	60 91 08 06 	lds	r22, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	seqLB |= gpio_pin_is_high(CONF_ENC_L_B);
    b464:	70 91 1f 2b 	lds	r23, 0x2B1F	; 0x802b1f <seqLB>
    b468:	62 fb       	bst	r22, 2
    b46a:	66 27       	eor	r22, r22
    b46c:	60 f9       	bld	r22, 0
    b46e:	67 2b       	or	r22, r23
    b470:	60 93 1f 2b 	sts	0x2B1F, r22	; 0x802b1f <seqLB>
	
	seqLA &= 0b00000011;
    b474:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b478:	63 70       	andi	r22, 0x03	; 3
    b47a:	60 93 20 2b 	sts	0x2B20, r22	; 0x802b20 <seqLA>
	seqLB &= 0b00000011;
    b47e:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b482:	63 70       	andi	r22, 0x03	; 3
    b484:	60 93 1f 2b 	sts	0x2B1F, r22	; 0x802b1f <seqLB>
	
	// Compare the recorded sequence with the expected sequence
	if ((seqLA == 0b00000001 && seqLB == 0b00000011) ||  (seqLA == 0b0000011 && seqLB == 0b00000010))
    b488:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b48c:	61 30       	cpi	r22, 0x01	; 1
    b48e:	09 f4       	brne	.+2      	; 0xb492 <__vector_66+0x7e>
    b490:	5d c0       	rjmp	.+186    	; 0xb54c <__vector_66+0x138>
    b492:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b496:	63 30       	cpi	r22, 0x03	; 3
    b498:	09 f4       	brne	.+2      	; 0xb49c <__vector_66+0x88>
    b49a:	63 c0       	rjmp	.+198    	; 0xb562 <__vector_66+0x14e>
	{
		enc_left ++;
	}
	
	if ((seqLA == 0b00000011 && seqLB == 0b00000001) || (seqLA == 0b00000010 && seqLB == 0b00000011))
    b49c:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b4a0:	63 30       	cpi	r22, 0x03	; 3
    b4a2:	09 f4       	brne	.+2      	; 0xb4a6 <__vector_66+0x92>
    b4a4:	4d c0       	rjmp	.+154    	; 0xb540 <__vector_66+0x12c>
    b4a6:	60 91 20 2b 	lds	r22, 0x2B20	; 0x802b20 <seqLA>
    b4aa:	62 30       	cpi	r22, 0x02	; 2
    b4ac:	f1 f1       	breq	.+124    	; 0xb52a <__vector_66+0x116>
    b4ae:	60 91 08 06 	lds	r22, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    b4b2:	70 91 08 06 	lds	r23, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	{
		enc_left --;
	}
	pbl |= gpio_pin_is_high(CONF_ENC_L_PB)<<1 | gpio_pin_is_high(CONF_PB_L);
    b4b6:	75 fb       	bst	r23, 5
    b4b8:	ee 27       	eor	r30, r30
    b4ba:	e0 f9       	bld	r30, 0
    b4bc:	f0 e0       	ldi	r31, 0x00	; 0
    b4be:	86 2f       	mov	r24, r22
    b4c0:	81 70       	andi	r24, 0x01	; 1
    b4c2:	90 e0       	ldi	r25, 0x00	; 0
    b4c4:	88 0f       	add	r24, r24
    b4c6:	99 1f       	adc	r25, r25
    b4c8:	8e 2b       	or	r24, r30
    b4ca:	9f 2b       	or	r25, r31
    b4cc:	90 91 e7 31 	lds	r25, 0x31E7	; 0x8031e7 <pbl>
    b4d0:	89 2b       	or	r24, r25
    b4d2:	80 93 e7 31 	sts	0x31E7, r24	; 0x8031e7 <pbl>
    b4d6:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    b4da:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	tilt_in |= gpio_pin_is_high(CONF_TILT_A)<<4 |gpio_pin_is_high(CONF_TILT_B);
    b4de:	93 fb       	bst	r25, 3
    b4e0:	44 27       	eor	r20, r20
    b4e2:	40 f9       	bld	r20, 0
    b4e4:	50 e0       	ldi	r21, 0x00	; 0
    b4e6:	42 95       	swap	r20
    b4e8:	52 95       	swap	r21
    b4ea:	50 7f       	andi	r21, 0xF0	; 240
    b4ec:	54 27       	eor	r21, r20
    b4ee:	40 7f       	andi	r20, 0xF0	; 240
    b4f0:	54 27       	eor	r21, r20
    b4f2:	84 fb       	bst	r24, 4
    b4f4:	22 27       	eor	r18, r18
    b4f6:	20 f9       	bld	r18, 0
    b4f8:	30 e0       	ldi	r19, 0x00	; 0
    b4fa:	24 2b       	or	r18, r20
    b4fc:	35 2b       	or	r19, r21
    b4fe:	80 91 db 31 	lds	r24, 0x31DB	; 0x8031db <tilt_in>
    b502:	28 2b       	or	r18, r24
    b504:	20 93 db 31 	sts	0x31DB, r18	; 0x8031db <tilt_in>

}
    b508:	ff 91       	pop	r31
    b50a:	ef 91       	pop	r30
    b50c:	9f 91       	pop	r25
    b50e:	8f 91       	pop	r24
    b510:	7f 91       	pop	r23
    b512:	6f 91       	pop	r22
    b514:	5f 91       	pop	r21
    b516:	4f 91       	pop	r20
    b518:	3f 91       	pop	r19
    b51a:	2f 91       	pop	r18
    b51c:	0f 90       	pop	r0
    b51e:	0b be       	out	0x3b, r0	; 59
    b520:	0f 90       	pop	r0
    b522:	0f be       	out	0x3f, r0	; 63
    b524:	0f 90       	pop	r0
    b526:	1f 90       	pop	r1
    b528:	18 95       	reti
	if ((seqLA == 0b00000001 && seqLB == 0b00000011) ||  (seqLA == 0b0000011 && seqLB == 0b00000010))
	{
		enc_left ++;
	}
	
	if ((seqLA == 0b00000011 && seqLB == 0b00000001) || (seqLA == 0b00000010 && seqLB == 0b00000011))
    b52a:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b52e:	63 30       	cpi	r22, 0x03	; 3
    b530:	09 f0       	breq	.+2      	; 0xb534 <__vector_66+0x120>
    b532:	bd cf       	rjmp	.-134    	; 0xb4ae <__vector_66+0x9a>
	{
		enc_left --;
    b534:	60 91 ad 2d 	lds	r22, 0x2DAD	; 0x802dad <enc_left>
    b538:	61 50       	subi	r22, 0x01	; 1
    b53a:	60 93 ad 2d 	sts	0x2DAD, r22	; 0x802dad <enc_left>
    b53e:	b7 cf       	rjmp	.-146    	; 0xb4ae <__vector_66+0x9a>
	if ((seqLA == 0b00000001 && seqLB == 0b00000011) ||  (seqLA == 0b0000011 && seqLB == 0b00000010))
	{
		enc_left ++;
	}
	
	if ((seqLA == 0b00000011 && seqLB == 0b00000001) || (seqLA == 0b00000010 && seqLB == 0b00000011))
    b540:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b544:	61 30       	cpi	r22, 0x01	; 1
    b546:	09 f0       	breq	.+2      	; 0xb54a <__vector_66+0x136>
    b548:	ae cf       	rjmp	.-164    	; 0xb4a6 <__vector_66+0x92>
    b54a:	f4 cf       	rjmp	.-24     	; 0xb534 <__vector_66+0x120>
	
	seqLA &= 0b00000011;
	seqLB &= 0b00000011;
	
	// Compare the recorded sequence with the expected sequence
	if ((seqLA == 0b00000001 && seqLB == 0b00000011) ||  (seqLA == 0b0000011 && seqLB == 0b00000010))
    b54c:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b550:	63 30       	cpi	r22, 0x03	; 3
    b552:	09 f0       	breq	.+2      	; 0xb556 <__vector_66+0x142>
    b554:	9e cf       	rjmp	.-196    	; 0xb492 <__vector_66+0x7e>
	{
		enc_left ++;
    b556:	60 91 ad 2d 	lds	r22, 0x2DAD	; 0x802dad <enc_left>
    b55a:	6f 5f       	subi	r22, 0xFF	; 255
    b55c:	60 93 ad 2d 	sts	0x2DAD, r22	; 0x802dad <enc_left>
    b560:	9d cf       	rjmp	.-198    	; 0xb49c <__vector_66+0x88>
	
	seqLA &= 0b00000011;
	seqLB &= 0b00000011;
	
	// Compare the recorded sequence with the expected sequence
	if ((seqLA == 0b00000001 && seqLB == 0b00000011) ||  (seqLA == 0b0000011 && seqLB == 0b00000010))
    b562:	60 91 1f 2b 	lds	r22, 0x2B1F	; 0x802b1f <seqLB>
    b566:	62 30       	cpi	r22, 0x02	; 2
    b568:	09 f0       	breq	.+2      	; 0xb56c <__vector_66+0x158>
    b56a:	98 cf       	rjmp	.-208    	; 0xb49c <__vector_66+0x88>
    b56c:	f4 cf       	rjmp	.-24     	; 0xb556 <__vector_66+0x142>

0000b56e <__vector_34>:
	tilt_in |= gpio_pin_is_high(CONF_TILT_A)<<4 |gpio_pin_is_high(CONF_TILT_B);

}

ISR(PORTB_INT0_vect)
{
    b56e:	1f 92       	push	r1
    b570:	0f 92       	push	r0
    b572:	0f b6       	in	r0, 0x3f	; 63
    b574:	0f 92       	push	r0
    b576:	11 24       	eor	r1, r1
    b578:	2f 93       	push	r18
    b57a:	3f 93       	push	r19
    b57c:	4f 93       	push	r20
    b57e:	5f 93       	push	r21
    b580:	8f 93       	push	r24
    b582:	9f 93       	push	r25
	extern int8_t enc_right;
	extern uint8_t pbr;
	// Record the A and B signals in separate sequences
	seqRA <<= 1;
    b584:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b588:	22 0f       	add	r18, r18
    b58a:	33 0b       	sbc	r19, r19
    b58c:	20 93 1e 2b 	sts	0x2B1E, r18	; 0x802b1e <seqRA>
    b590:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	seqRA |= gpio_pin_is_high(CONF_ENC_R_A);
    b594:	30 91 1e 2b 	lds	r19, 0x2B1E	; 0x802b1e <seqRA>
    b598:	26 95       	lsr	r18
    b59a:	21 70       	andi	r18, 0x01	; 1
    b59c:	23 2b       	or	r18, r19
    b59e:	20 93 1e 2b 	sts	0x2B1E, r18	; 0x802b1e <seqRA>
	
	seqRB <<= 1;
    b5a2:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b5a6:	22 0f       	add	r18, r18
    b5a8:	33 0b       	sbc	r19, r19
    b5aa:	20 93 1d 2b 	sts	0x2B1D, r18	; 0x802b1d <seqRB>
    b5ae:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	seqRB |= gpio_pin_is_high(CONF_ENC_R_B);
    b5b2:	30 91 1d 2b 	lds	r19, 0x2B1D	; 0x802b1d <seqRB>
    b5b6:	22 fb       	bst	r18, 2
    b5b8:	22 27       	eor	r18, r18
    b5ba:	20 f9       	bld	r18, 0
    b5bc:	23 2b       	or	r18, r19
    b5be:	20 93 1d 2b 	sts	0x2B1D, r18	; 0x802b1d <seqRB>
	
	seqRA &= 0b00000011;
    b5c2:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b5c6:	23 70       	andi	r18, 0x03	; 3
    b5c8:	20 93 1e 2b 	sts	0x2B1E, r18	; 0x802b1e <seqRA>
	seqRB &= 0b00000011;
    b5cc:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b5d0:	23 70       	andi	r18, 0x03	; 3
    b5d2:	20 93 1d 2b 	sts	0x2B1D, r18	; 0x802b1d <seqRB>
	
	// Compare the recorded sequence with the expected sequence
	if ((seqRA == 0b00000001 && seqRB == 0b00000011) ||  (seqRA == 0b0000011 && seqRB == 0b00000010))
    b5d6:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b5da:	21 30       	cpi	r18, 0x01	; 1
    b5dc:	d9 f1       	breq	.+118    	; 0xb654 <__vector_34+0xe6>
    b5de:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b5e2:	23 30       	cpi	r18, 0x03	; 3
    b5e4:	09 f4       	brne	.+2      	; 0xb5e8 <__vector_34+0x7a>
    b5e6:	40 c0       	rjmp	.+128    	; 0xb668 <__vector_34+0xfa>
	{
		enc_right ++;
	}
	
	if ((seqRA == 0b00000011 && seqRB == 0b00000001) || (seqRA == 0b00000010 && seqRB == 0b00000011))
    b5e8:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b5ec:	23 30       	cpi	r18, 0x03	; 3
    b5ee:	69 f1       	breq	.+90     	; 0xb64a <__vector_34+0xdc>
    b5f0:	20 91 1e 2b 	lds	r18, 0x2B1E	; 0x802b1e <seqRA>
    b5f4:	22 30       	cpi	r18, 0x02	; 2
    b5f6:	f9 f0       	breq	.+62     	; 0xb636 <__vector_34+0xc8>
    b5f8:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    b5fc:	30 91 28 06 	lds	r19, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	{
		enc_right --;
	}
	pbr |= gpio_pin_is_high(CONF_ENC_R_PB)<<1 | gpio_pin_is_high(CONF_PB_R);
    b600:	33 fb       	bst	r19, 3
    b602:	44 27       	eor	r20, r20
    b604:	40 f9       	bld	r20, 0
    b606:	50 e0       	ldi	r21, 0x00	; 0
    b608:	82 2f       	mov	r24, r18
    b60a:	81 70       	andi	r24, 0x01	; 1
    b60c:	90 e0       	ldi	r25, 0x00	; 0
    b60e:	88 0f       	add	r24, r24
    b610:	99 1f       	adc	r25, r25
    b612:	84 2b       	or	r24, r20
    b614:	95 2b       	or	r25, r21
    b616:	90 91 e1 31 	lds	r25, 0x31E1	; 0x8031e1 <pbr>
    b61a:	89 2b       	or	r24, r25
    b61c:	80 93 e1 31 	sts	0x31E1, r24	; 0x8031e1 <pbr>

}
    b620:	9f 91       	pop	r25
    b622:	8f 91       	pop	r24
    b624:	5f 91       	pop	r21
    b626:	4f 91       	pop	r20
    b628:	3f 91       	pop	r19
    b62a:	2f 91       	pop	r18
    b62c:	0f 90       	pop	r0
    b62e:	0f be       	out	0x3f, r0	; 63
    b630:	0f 90       	pop	r0
    b632:	1f 90       	pop	r1
    b634:	18 95       	reti
	if ((seqRA == 0b00000001 && seqRB == 0b00000011) ||  (seqRA == 0b0000011 && seqRB == 0b00000010))
	{
		enc_right ++;
	}
	
	if ((seqRA == 0b00000011 && seqRB == 0b00000001) || (seqRA == 0b00000010 && seqRB == 0b00000011))
    b636:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b63a:	23 30       	cpi	r18, 0x03	; 3
    b63c:	e9 f6       	brne	.-70     	; 0xb5f8 <__vector_34+0x8a>
	{
		enc_right --;
    b63e:	20 91 ac 2d 	lds	r18, 0x2DAC	; 0x802dac <enc_right>
    b642:	21 50       	subi	r18, 0x01	; 1
    b644:	20 93 ac 2d 	sts	0x2DAC, r18	; 0x802dac <enc_right>
    b648:	d7 cf       	rjmp	.-82     	; 0xb5f8 <__vector_34+0x8a>
	if ((seqRA == 0b00000001 && seqRB == 0b00000011) ||  (seqRA == 0b0000011 && seqRB == 0b00000010))
	{
		enc_right ++;
	}
	
	if ((seqRA == 0b00000011 && seqRB == 0b00000001) || (seqRA == 0b00000010 && seqRB == 0b00000011))
    b64a:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b64e:	21 30       	cpi	r18, 0x01	; 1
    b650:	79 f6       	brne	.-98     	; 0xb5f0 <__vector_34+0x82>
    b652:	f5 cf       	rjmp	.-22     	; 0xb63e <__vector_34+0xd0>
	
	seqRA &= 0b00000011;
	seqRB &= 0b00000011;
	
	// Compare the recorded sequence with the expected sequence
	if ((seqRA == 0b00000001 && seqRB == 0b00000011) ||  (seqRA == 0b0000011 && seqRB == 0b00000010))
    b654:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b658:	23 30       	cpi	r18, 0x03	; 3
    b65a:	09 f6       	brne	.-126    	; 0xb5de <__vector_34+0x70>
	{
		enc_right ++;
    b65c:	20 91 ac 2d 	lds	r18, 0x2DAC	; 0x802dac <enc_right>
    b660:	2f 5f       	subi	r18, 0xFF	; 255
    b662:	20 93 ac 2d 	sts	0x2DAC, r18	; 0x802dac <enc_right>
    b666:	c0 cf       	rjmp	.-128    	; 0xb5e8 <__vector_34+0x7a>
	
	seqRA &= 0b00000011;
	seqRB &= 0b00000011;
	
	// Compare the recorded sequence with the expected sequence
	if ((seqRA == 0b00000001 && seqRB == 0b00000011) ||  (seqRA == 0b0000011 && seqRB == 0b00000010))
    b668:	20 91 1d 2b 	lds	r18, 0x2B1D	; 0x802b1d <seqRB>
    b66c:	22 30       	cpi	r18, 0x02	; 2
    b66e:	09 f0       	breq	.+2      	; 0xb672 <__vector_34+0x104>
    b670:	bb cf       	rjmp	.-138    	; 0xb5e8 <__vector_34+0x7a>
    b672:	f4 cf       	rjmp	.-24     	; 0xb65c <__vector_34+0xee>

0000b674 <get_inputs>:
	extern int8_t enc_right;
	extern uint8_t tilt_in, pbl, pbr;
	extern int8_t enc_a, enc_b, pb, tilt;

	
	enc_a = enc_left>>1;
    b674:	80 91 ad 2d 	lds	r24, 0x2DAD	; 0x802dad <enc_left>
    b678:	85 95       	asr	r24
    b67a:	80 93 d6 31 	sts	0x31D6, r24	; 0x8031d6 <enc_a>
	enc_left = 0;
    b67e:	10 92 ad 2d 	sts	0x2DAD, r1	; 0x802dad <enc_left>
	enc_b = enc_right>>1;
    b682:	80 91 ac 2d 	lds	r24, 0x2DAC	; 0x802dac <enc_right>
    b686:	85 95       	asr	r24
    b688:	80 93 e6 31 	sts	0x31E6, r24	; 0x8031e6 <enc_b>
	enc_right = 0;
    b68c:	10 92 ac 2d 	sts	0x2DAC, r1	; 0x802dac <enc_right>
	
	pb = pbl<<4 | pbr;
    b690:	80 91 e7 31 	lds	r24, 0x31E7	; 0x8031e7 <pbl>
    b694:	20 e1       	ldi	r18, 0x10	; 16
    b696:	82 9f       	mul	r24, r18
    b698:	c0 01       	movw	r24, r0
    b69a:	11 24       	eor	r1, r1
    b69c:	90 91 e1 31 	lds	r25, 0x31E1	; 0x8031e1 <pbr>
    b6a0:	89 2b       	or	r24, r25
    b6a2:	80 93 df 31 	sts	0x31DF, r24	; 0x8031df <pb>
	pbl = 0;
    b6a6:	10 92 e7 31 	sts	0x31E7, r1	; 0x8031e7 <pbl>
	pbr = 0;
    b6aa:	10 92 e1 31 	sts	0x31E1, r1	; 0x8031e1 <pbr>
	tilt = tilt_in;
    b6ae:	80 91 db 31 	lds	r24, 0x31DB	; 0x8031db <tilt_in>
    b6b2:	80 93 dc 31 	sts	0x31DC, r24	; 0x8031dc <tilt>
	tilt_in = 0;
    b6b6:	10 92 db 31 	sts	0x31DB, r1	; 0x8031db <tilt_in>
	
	return(0);
}
    b6ba:	80 e0       	ldi	r24, 0x00	; 0
    b6bc:	08 95       	ret

0000b6be <init_tc>:

void init_tc(void)
{
	tc_enable(&TCC0);
    b6be:	80 e0       	ldi	r24, 0x00	; 0
    b6c0:	98 e0       	ldi	r25, 0x08	; 8
    b6c2:	0e 94 f1 7a 	call	0xf5e2	; 0xf5e2 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, my_callback);
    b6c6:	6d ef       	ldi	r22, 0xFD	; 253
    b6c8:	79 e5       	ldi	r23, 0x59	; 89
    b6ca:	80 e0       	ldi	r24, 0x00	; 0
    b6cc:	98 e0       	ldi	r25, 0x08	; 8
    b6ce:	0e 94 4b 7b 	call	0xf696	; 0xf696 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    b6d2:	e0 e0       	ldi	r30, 0x00	; 0
    b6d4:	f8 e0       	ldi	r31, 0x08	; 8
    b6d6:	81 81       	ldd	r24, Z+1	; 0x01
    b6d8:	88 7f       	andi	r24, 0xF8	; 248
    b6da:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    b6dc:	88 ee       	ldi	r24, 0xE8	; 232
    b6de:	93 e0       	ldi	r25, 0x03	; 3
    b6e0:	86 a3       	std	Z+38, r24	; 0x26
    b6e2:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    b6e4:	86 81       	ldd	r24, Z+6	; 0x06
    b6e6:	8c 7f       	andi	r24, 0xFC	; 252
    b6e8:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    b6ea:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    b6ec:	81 60       	ori	r24, 0x01	; 1
    b6ee:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WGMODE_NORMAL_gc);
	tc_write_period(&TCC0, 1000);
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	cpu_irq_enable();
    b6f0:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b6f2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b6f4:	80 7f       	andi	r24, 0xF0	; 240
    b6f6:	81 60       	ori	r24, 0x01	; 1
    b6f8:	80 83       	st	Z, r24
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b6fa:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b6fc:	80 7f       	andi	r24, 0xF0	; 240
    b6fe:	84 60       	ori	r24, 0x04	; 4
    b700:	80 83       	st	Z, r24
    b702:	08 95       	ret

0000b704 <mm_start>:
	clear_stat();

	gfx_draw_string(mm_entry[mm_ctrl.current_entry].name, 5, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_CYAN);
	return(0);

}
    b704:	ef 92       	push	r14
    b706:	ff 92       	push	r15
    b708:	0f 93       	push	r16
    b70a:	1f 93       	push	r17
    b70c:	82 ee       	ldi	r24, 0xE2	; 226
    b70e:	96 e2       	ldi	r25, 0x26	; 38
    b710:	0e 94 a3 81 	call	0x10346	; 0x10346 <puts>
    b714:	10 92 e0 31 	sts	0x31E0, r1	; 0x8031e0 <master_mode>
    b718:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <mm_ctrl+0x1>
    b71c:	73 d6       	rcall	.+3302   	; 0xc404 <clear_stat>
    b71e:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b722:	2d e0       	ldi	r18, 0x0D	; 13
    b724:	82 9f       	mul	r24, r18
    b726:	c0 01       	movw	r24, r0
    b728:	11 24       	eor	r1, r1
    b72a:	ee 24       	eor	r14, r14
    b72c:	ea 94       	dec	r14
    b72e:	fe 2c       	mov	r15, r14
    b730:	00 e0       	ldi	r16, 0x00	; 0
    b732:	10 e0       	ldi	r17, 0x00	; 0
    b734:	2c eb       	ldi	r18, 0xBC	; 188
    b736:	30 e2       	ldi	r19, 0x20	; 32
    b738:	46 ee       	ldi	r20, 0xE6	; 230
    b73a:	50 e0       	ldi	r21, 0x00	; 0
    b73c:	65 e0       	ldi	r22, 0x05	; 5
    b73e:	70 e0       	ldi	r23, 0x00	; 0
    b740:	87 57       	subi	r24, 0x77	; 119
    b742:	9f 4d       	sbci	r25, 0xDF	; 223
    b744:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    b748:	8b ee       	ldi	r24, 0xEB	; 235
    b74a:	96 e2       	ldi	r25, 0x26	; 38
    b74c:	9f 93       	push	r25
    b74e:	8f 93       	push	r24
    b750:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    b754:	8f df       	rcall	.-226    	; 0xb674 <get_inputs>
    b756:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b75a:	0f 90       	pop	r0
    b75c:	0f 90       	pop	r0
    b75e:	84 ff       	sbrs	r24, 4
    b760:	0c c0       	rjmp	.+24     	; 0xb77a <mm_start+0x76>
    b762:	80 e0       	ldi	r24, 0x00	; 0
    b764:	90 e0       	ldi	r25, 0x00	; 0
    b766:	01 96       	adiw	r24, 0x01	; 1
    b768:	86 35       	cpi	r24, 0x56	; 86
    b76a:	20 ed       	ldi	r18, 0xD0	; 208
    b76c:	92 07       	cpc	r25, r18
    b76e:	d9 f7       	brne	.-10     	; 0xb766 <mm_start+0x62>
    b770:	81 df       	rcall	.-254    	; 0xb674 <get_inputs>
    b772:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b776:	84 fd       	sbrc	r24, 4
    b778:	f4 cf       	rjmp	.-24     	; 0xb762 <mm_start+0x5e>
    b77a:	80 e0       	ldi	r24, 0x00	; 0
    b77c:	1f 91       	pop	r17
    b77e:	0f 91       	pop	r16
    b780:	ff 90       	pop	r15
    b782:	ef 90       	pop	r14
    b784:	08 95       	ret

0000b786 <mm_loop>:
    b786:	ef 92       	push	r14
    b788:	ff 92       	push	r15
    b78a:	0f 93       	push	r16
    b78c:	1f 93       	push	r17
    b78e:	cf 93       	push	r28
    b790:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <enc_a>
    b794:	87 fd       	sbrc	r24, 7
    b796:	7d c0       	rjmp	.+250    	; 0xb892 <mm_loop+0x10c>
    b798:	88 23       	and	r24, r24
    b79a:	89 f0       	breq	.+34     	; 0xb7be <mm_loop+0x38>
    b79c:	8a e0       	ldi	r24, 0x0A	; 10
    b79e:	97 e2       	ldi	r25, 0x27	; 39
    b7a0:	0e 94 a3 81 	call	0x10346	; 0x10346 <puts>
    b7a4:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b7a8:	20 91 87 20 	lds	r18, 0x2087	; 0x802087 <mm_ctrl+0x2>
    b7ac:	30 e0       	ldi	r19, 0x00	; 0
    b7ae:	48 2f       	mov	r20, r24
    b7b0:	50 e0       	ldi	r21, 0x00	; 0
    b7b2:	42 17       	cp	r20, r18
    b7b4:	53 07       	cpc	r21, r19
    b7b6:	0c f4       	brge	.+2      	; 0xb7ba <mm_loop+0x34>
    b7b8:	5a c0       	rjmp	.+180    	; 0xb86e <mm_loop+0xe8>
    b7ba:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <mm_ctrl+0x1>
    b7be:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b7c2:	84 fd       	sbrc	r24, 4
    b7c4:	42 c0       	rjmp	.+132    	; 0xb84a <mm_loop+0xc4>
    b7c6:	85 ff       	sbrs	r24, 5
    b7c8:	23 c0       	rjmp	.+70     	; 0xb810 <mm_loop+0x8a>
    b7ca:	c0 91 86 20 	lds	r28, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b7ce:	c1 30       	cpi	r28, 0x01	; 1
    b7d0:	09 f4       	brne	.+2      	; 0xb7d4 <mm_loop+0x4e>
    b7d2:	6b c0       	rjmp	.+214    	; 0xb8aa <mm_loop+0x124>
    b7d4:	08 f4       	brcc	.+2      	; 0xb7d8 <mm_loop+0x52>
    b7d6:	55 c0       	rjmp	.+170    	; 0xb882 <mm_loop+0xfc>
    b7d8:	c2 30       	cpi	r28, 0x02	; 2
    b7da:	09 f4       	brne	.+2      	; 0xb7de <mm_loop+0x58>
    b7dc:	4c c0       	rjmp	.+152    	; 0xb876 <mm_loop+0xf0>
    b7de:	4a df       	rcall	.-364    	; 0xb674 <get_inputs>
    b7e0:	82 e1       	ldi	r24, 0x12	; 18
    b7e2:	97 e2       	ldi	r25, 0x27	; 39
    b7e4:	9f 93       	push	r25
    b7e6:	8f 93       	push	r24
    b7e8:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    b7ec:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b7f0:	0f 90       	pop	r0
    b7f2:	0f 90       	pop	r0
    b7f4:	85 ff       	sbrs	r24, 5
    b7f6:	0c c0       	rjmp	.+24     	; 0xb810 <mm_loop+0x8a>
    b7f8:	80 e0       	ldi	r24, 0x00	; 0
    b7fa:	90 e0       	ldi	r25, 0x00	; 0
    b7fc:	01 96       	adiw	r24, 0x01	; 1
    b7fe:	86 35       	cpi	r24, 0x56	; 86
    b800:	20 ed       	ldi	r18, 0xD0	; 208
    b802:	92 07       	cpc	r25, r18
    b804:	d9 f7       	brne	.-10     	; 0xb7fc <mm_loop+0x76>
    b806:	36 df       	rcall	.-404    	; 0xb674 <get_inputs>
    b808:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b80c:	85 fd       	sbrc	r24, 5
    b80e:	f4 cf       	rjmp	.-24     	; 0xb7f8 <mm_loop+0x72>
    b810:	f9 d5       	rcall	.+3058   	; 0xc404 <clear_stat>
    b812:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b816:	2d e0       	ldi	r18, 0x0D	; 13
    b818:	82 9f       	mul	r24, r18
    b81a:	c0 01       	movw	r24, r0
    b81c:	11 24       	eor	r1, r1
    b81e:	ee 24       	eor	r14, r14
    b820:	ea 94       	dec	r14
    b822:	fe 2c       	mov	r15, r14
    b824:	00 e0       	ldi	r16, 0x00	; 0
    b826:	10 e0       	ldi	r17, 0x00	; 0
    b828:	2c eb       	ldi	r18, 0xBC	; 188
    b82a:	30 e2       	ldi	r19, 0x20	; 32
    b82c:	46 ee       	ldi	r20, 0xE6	; 230
    b82e:	50 e0       	ldi	r21, 0x00	; 0
    b830:	65 e0       	ldi	r22, 0x05	; 5
    b832:	70 e0       	ldi	r23, 0x00	; 0
    b834:	87 57       	subi	r24, 0x77	; 119
    b836:	9f 4d       	sbci	r25, 0xDF	; 223
    b838:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    b83c:	80 e0       	ldi	r24, 0x00	; 0
    b83e:	cf 91       	pop	r28
    b840:	1f 91       	pop	r17
    b842:	0f 91       	pop	r16
    b844:	ff 90       	pop	r15
    b846:	ef 90       	pop	r14
    b848:	08 95       	ret
    b84a:	0e 94 f9 64 	call	0xc9f2	; 0xc9f2 <update_status>
    b84e:	82 e0       	ldi	r24, 0x02	; 2
    b850:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
    b854:	0f df       	rcall	.-482    	; 0xb674 <get_inputs>
    b856:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b85a:	84 ff       	sbrs	r24, 4
    b85c:	ef cf       	rjmp	.-34     	; 0xb83c <mm_loop+0xb6>
    b85e:	80 e0       	ldi	r24, 0x00	; 0
    b860:	90 e0       	ldi	r25, 0x00	; 0
    b862:	01 96       	adiw	r24, 0x01	; 1
    b864:	86 35       	cpi	r24, 0x56	; 86
    b866:	20 ed       	ldi	r18, 0xD0	; 208
    b868:	92 07       	cpc	r25, r18
    b86a:	d9 f7       	brne	.-10     	; 0xb862 <mm_loop+0xdc>
    b86c:	f3 cf       	rjmp	.-26     	; 0xb854 <mm_loop+0xce>
    b86e:	8f 5f       	subi	r24, 0xFF	; 255
    b870:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <mm_ctrl+0x1>
    b874:	a4 cf       	rjmp	.-184    	; 0xb7be <mm_loop+0x38>
    b876:	6d ec       	ldi	r22, 0xCD	; 205
    b878:	7d e2       	ldi	r23, 0x2D	; 45
    b87a:	82 e3       	ldi	r24, 0x32	; 50
    b87c:	9e d4       	rcall	.+2364   	; 0xc1ba <list_files>
    b87e:	80 93 cc 2d 	sts	0x2DCC, r24	; 0x802dcc <fl_count>
    b882:	10 92 c1 31 	sts	0x31C1, r1	; 0x8031c1 <sm_ndx>
    b886:	10 92 b5 31 	sts	0x31B5, r1	; 0x8031b5 <buffer>
    b88a:	81 e0       	ldi	r24, 0x01	; 1
    b88c:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
    b890:	a6 cf       	rjmp	.-180    	; 0xb7de <mm_loop+0x58>
    b892:	82 e0       	ldi	r24, 0x02	; 2
    b894:	97 e2       	ldi	r25, 0x27	; 39
    b896:	0e 94 a3 81 	call	0x10346	; 0x10346 <puts>
    b89a:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b89e:	88 23       	and	r24, r24
    b8a0:	89 f0       	breq	.+34     	; 0xb8c4 <mm_loop+0x13e>
    b8a2:	81 50       	subi	r24, 0x01	; 1
    b8a4:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <mm_ctrl+0x1>
    b8a8:	8a cf       	rjmp	.-236    	; 0xb7be <mm_loop+0x38>
    b8aa:	6d ec       	ldi	r22, 0xCD	; 205
    b8ac:	7d e2       	ldi	r23, 0x2D	; 45
    b8ae:	82 e3       	ldi	r24, 0x32	; 50
    b8b0:	84 d4       	rcall	.+2312   	; 0xc1ba <list_files>
    b8b2:	80 93 cc 2d 	sts	0x2DCC, r24	; 0x802dcc <fl_count>
    b8b6:	10 92 c1 31 	sts	0x31C1, r1	; 0x8031c1 <sm_ndx>
    b8ba:	10 92 b5 31 	sts	0x31B5, r1	; 0x8031b5 <buffer>
    b8be:	c0 93 e0 31 	sts	0x31E0, r28	; 0x8031e0 <master_mode>
    b8c2:	8d cf       	rjmp	.-230    	; 0xb7de <mm_loop+0x58>
    b8c4:	80 91 87 20 	lds	r24, 0x2087	; 0x802087 <mm_ctrl+0x2>
    b8c8:	81 50       	subi	r24, 0x01	; 1
    b8ca:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <mm_ctrl+0x1>
    b8ce:	77 cf       	rjmp	.-274    	; 0xb7be <mm_loop+0x38>

0000b8d0 <fn_loop>:

uint8_t fn_loop(void)
{
    b8d0:	cf 92       	push	r12
    b8d2:	df 92       	push	r13
    b8d4:	ef 92       	push	r14
    b8d6:	ff 92       	push	r15
    b8d8:	0f 93       	push	r16
    b8da:	1f 93       	push	r17
    b8dc:	cf 93       	push	r28
    b8de:	df 93       	push	r29
    b8e0:	cd b7       	in	r28, 0x3d	; 61
    b8e2:	de b7       	in	r29, 0x3e	; 62
    b8e4:	6b 97       	sbiw	r28, 0x1b	; 27
    b8e6:	cd bf       	out	0x3d, r28	; 61
    b8e8:	de bf       	out	0x3e, r29	; 62
	extern uint8_t master_mode;
	extern int8_t enc_b, pb;
	char alpha[27] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    b8ea:	8b e1       	ldi	r24, 0x1B	; 27
    b8ec:	ed e2       	ldi	r30, 0x2D	; 45
    b8ee:	f7 e2       	ldi	r31, 0x27	; 39
    b8f0:	de 01       	movw	r26, r28
    b8f2:	11 96       	adiw	r26, 0x01	; 1
    b8f4:	01 90       	ld	r0, Z+
    b8f6:	0d 92       	st	X+, r0
    b8f8:	8a 95       	dec	r24
    b8fa:	e1 f7       	brne	.-8      	; 0xb8f4 <fn_loop+0x24>

	if(PB_ENC_R)
    b8fc:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b900:	81 ff       	sbrs	r24, 1
    b902:	7f c0       	rjmp	.+254    	; 0xba02 <fn_loop+0x132>
	{
		if(strlen(buffer)<12)
    b904:	e5 eb       	ldi	r30, 0xB5	; 181
    b906:	f1 e3       	ldi	r31, 0x31	; 49
    b908:	01 90       	ld	r0, Z+
    b90a:	00 20       	and	r0, r0
    b90c:	e9 f7       	brne	.-6      	; 0xb908 <fn_loop+0x38>
    b90e:	31 97       	sbiw	r30, 0x01	; 1
    b910:	e5 5b       	subi	r30, 0xB5	; 181
    b912:	f1 43       	sbci	r31, 0x31	; 49
    b914:	3c 97       	sbiw	r30, 0x0c	; 12
    b916:	08 f4       	brcc	.+2      	; 0xb91a <fn_loop+0x4a>
    b918:	9c c0       	rjmp	.+312    	; 0xba52 <fn_loop+0x182>
		{
			strncat(buffer,&alpha[sm_ndx],1);
		}
		if(test_fn(buffer, SD_MODE_SKETCH) == 0)
    b91a:	61 e0       	ldi	r22, 0x01	; 1
    b91c:	85 eb       	ldi	r24, 0xB5	; 181
    b91e:	91 e3       	ldi	r25, 0x31	; 49
    b920:	e7 d3       	rcall	.+1998   	; 0xc0f0 <test_fn>
    b922:	88 23       	and	r24, r24
    b924:	09 f4       	brne	.+2      	; 0xb928 <fn_loop+0x58>
    b926:	8a c0       	rjmp	.+276    	; 0xba3c <fn_loop+0x16c>
		{
			exist_ch = '*';
		}
		else
		{
			exist_ch = ' ';
    b928:	80 e2       	ldi	r24, 0x20	; 32
    b92a:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <exist_ch>
    b92e:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    b932:	e0 91 c1 31 	lds	r30, 0x31C1	; 0x8031c1 <sm_ndx>
    b936:	f0 e0       	ldi	r31, 0x00	; 0
    b938:	50 e2       	ldi	r21, 0x20	; 32
    b93a:	d5 2e       	mov	r13, r21
		else
		{
			sm_ndx = 0;
		}
	}
	if(PB_R)
    b93c:	80 ff       	sbrs	r24, 0
    b93e:	0e c0       	rjmp	.+28     	; 0xb95c <fn_loop+0x8c>
	{
		int len;
		len = strlen(buffer);
    b940:	a5 eb       	ldi	r26, 0xB5	; 181
    b942:	b1 e3       	ldi	r27, 0x31	; 49
    b944:	0d 90       	ld	r0, X+
    b946:	00 20       	and	r0, r0
    b948:	e9 f7       	brne	.-6      	; 0xb944 <fn_loop+0x74>
    b94a:	11 97       	sbiw	r26, 0x01	; 1
    b94c:	a5 5b       	subi	r26, 0xB5	; 181
    b94e:	b1 43       	sbci	r27, 0x31	; 49
		if(len>0)
    b950:	1a 16       	cp	r1, r26
    b952:	1b 06       	cpc	r1, r27
    b954:	1c f4       	brge	.+6      	; 0xb95c <fn_loop+0x8c>
		{
			buffer[len-1] = '\0';
    b956:	ac 54       	subi	r26, 0x4C	; 76
    b958:	be 4c       	sbci	r27, 0xCE	; 206
    b95a:	1c 92       	st	X, r1
		}	
	}
	if(PB_L)
    b95c:	84 ff       	sbrs	r24, 4
    b95e:	03 c0       	rjmp	.+6      	; 0xb966 <fn_loop+0x96>
	{
		master_mode = MODE_SKETCH;
    b960:	82 e0       	ldi	r24, 0x02	; 2
    b962:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
	}

    fn_show(exist_ch, alpha[sm_ndx]);
    b966:	81 e0       	ldi	r24, 0x01	; 1
    b968:	90 e0       	ldi	r25, 0x00	; 0
    b96a:	8c 0f       	add	r24, r28
    b96c:	9d 1f       	adc	r25, r29
    b96e:	e8 0f       	add	r30, r24
    b970:	f9 1f       	adc	r31, r25
	
}

uint8_t sm_show(void)
{
	clear_stat();
    b972:	c0 80       	ld	r12, Z
    b974:	47 d5       	rcall	.+2702   	; 0xc404 <clear_stat>

	gfx_draw_string(mm_entry[mm_ctrl.current_entry].name, 5, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_CYAN);
    b976:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    b97a:	2d e0       	ldi	r18, 0x0D	; 13
    b97c:	82 9f       	mul	r24, r18
    b97e:	c0 01       	movw	r24, r0
    b980:	11 24       	eor	r1, r1
    b982:	27 e0       	ldi	r18, 0x07	; 7
    b984:	e2 2e       	mov	r14, r18
    b986:	ff 24       	eor	r15, r15
    b988:	fa 94       	dec	r15
    b98a:	00 e0       	ldi	r16, 0x00	; 0
    b98c:	10 e0       	ldi	r17, 0x00	; 0
    b98e:	2c eb       	ldi	r18, 0xBC	; 188
    b990:	30 e2       	ldi	r19, 0x20	; 32
    b992:	46 ee       	ldi	r20, 0xE6	; 230
    b994:	50 e0       	ldi	r21, 0x00	; 0
    b996:	65 e0       	ldi	r22, 0x05	; 5
    b998:	70 e0       	ldi	r23, 0x00	; 0
    b99a:	87 57       	subi	r24, 0x77	; 119
    b99c:	9f 4d       	sbci	r25, 0xDF	; 223
    b99e:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>

uint8_t fn_show(char exist_ch, char cur_letter)
{
	sm_show();

	gfx_draw_char(exist_ch, 50, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_WHITE);
    b9a2:	ee 24       	eor	r14, r14
    b9a4:	ea 94       	dec	r14
    b9a6:	fe 2c       	mov	r15, r14
    b9a8:	2c eb       	ldi	r18, 0xBC	; 188
    b9aa:	30 e2       	ldi	r19, 0x20	; 32
    b9ac:	46 ee       	ldi	r20, 0xE6	; 230
    b9ae:	50 e0       	ldi	r21, 0x00	; 0
    b9b0:	62 e3       	ldi	r22, 0x32	; 50
    b9b2:	70 e0       	ldi	r23, 0x00	; 0
    b9b4:	8d 2d       	mov	r24, r13
    b9b6:	0e 94 f4 73 	call	0xe7e8	; 0xe7e8 <gfx_draw_char>
	gfx_draw_string(buffer, 55, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_WHITE);
    b9ba:	2c eb       	ldi	r18, 0xBC	; 188
    b9bc:	30 e2       	ldi	r19, 0x20	; 32
    b9be:	46 ee       	ldi	r20, 0xE6	; 230
    b9c0:	50 e0       	ldi	r21, 0x00	; 0
    b9c2:	67 e3       	ldi	r22, 0x37	; 55
    b9c4:	70 e0       	ldi	r23, 0x00	; 0
    b9c6:	85 eb       	ldi	r24, 0xB5	; 181
    b9c8:	91 e3       	ldi	r25, 0x31	; 49
    b9ca:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
	gfx_draw_char(cur_letter, 200, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_YELLOW);
    b9ce:	ee 24       	eor	r14, r14
    b9d0:	ea 94       	dec	r14
    b9d2:	40 ee       	ldi	r20, 0xE0	; 224
    b9d4:	f4 2e       	mov	r15, r20
    b9d6:	2c eb       	ldi	r18, 0xBC	; 188
    b9d8:	30 e2       	ldi	r19, 0x20	; 32
    b9da:	46 ee       	ldi	r20, 0xE6	; 230
    b9dc:	50 e0       	ldi	r21, 0x00	; 0
    b9de:	68 ec       	ldi	r22, 0xC8	; 200
    b9e0:	70 e0       	ldi	r23, 0x00	; 0
    b9e2:	8c 2d       	mov	r24, r12
    b9e4:	0e 94 f4 73 	call	0xe7e8	; 0xe7e8 <gfx_draw_char>
		master_mode = MODE_SKETCH;
	}

    fn_show(exist_ch, alpha[sm_ndx]);
	return(0);
}
    b9e8:	80 e0       	ldi	r24, 0x00	; 0
    b9ea:	6b 96       	adiw	r28, 0x1b	; 27
    b9ec:	cd bf       	out	0x3d, r28	; 61
    b9ee:	de bf       	out	0x3e, r29	; 62
    b9f0:	df 91       	pop	r29
    b9f2:	cf 91       	pop	r28
    b9f4:	1f 91       	pop	r17
    b9f6:	0f 91       	pop	r16
    b9f8:	ff 90       	pop	r15
    b9fa:	ef 90       	pop	r14
    b9fc:	df 90       	pop	r13
    b9fe:	cf 90       	pop	r12
    ba00:	08 95       	ret
		else
		{
			exist_ch = ' ';
		}
	}
	else if(PB_ENC_L)
    ba02:	85 ff       	sbrs	r24, 5
    ba04:	0a c0       	rjmp	.+20     	; 0xba1a <fn_loop+0x14a>
	{
		if(mm_ctrl.current_entry == MM_ETCH_SAVE)
    ba06:	90 91 86 20 	lds	r25, 0x2086	; 0x802086 <mm_ctrl+0x1>
    ba0a:	99 23       	and	r25, r25
    ba0c:	b9 f1       	breq	.+110    	; 0xba7c <fn_loop+0x1ac>
    ba0e:	e0 91 c1 31 	lds	r30, 0x31C1	; 0x8031c1 <sm_ndx>
    ba12:	f0 e0       	ldi	r31, 0x00	; 0
    ba14:	d0 90 84 20 	lds	r13, 0x2084	; 0x802084 <exist_ch>
    ba18:	91 cf       	rjmp	.-222    	; 0xb93c <fn_loop+0x6c>
		//{
			//load_image(buffer);
			//master_mode = MODE_SKETCH;
		//}
	}
	else if(enc_b < 0)
    ba1a:	90 91 e6 31 	lds	r25, 0x31E6	; 0x8031e6 <enc_b>
	{
		if(sm_ndx > 0)
    ba1e:	e0 91 c1 31 	lds	r30, 0x31C1	; 0x8031c1 <sm_ndx>
		//{
			//load_image(buffer);
			//master_mode = MODE_SKETCH;
		//}
	}
	else if(enc_b < 0)
    ba22:	97 fd       	sbrc	r25, 7
    ba24:	34 c0       	rjmp	.+104    	; 0xba8e <fn_loop+0x1be>
		else
		{
			sm_ndx = 25;
		}
	}
	else if(enc_b > 0)
    ba26:	99 23       	and	r25, r25
    ba28:	29 f0       	breq	.+10     	; 0xba34 <fn_loop+0x164>
	{
		if(sm_ndx < 25)
    ba2a:	e9 31       	cpi	r30, 0x19	; 25
    ba2c:	c8 f5       	brcc	.+114    	; 0xbaa0 <fn_loop+0x1d0>
		{
			sm_ndx ++;
    ba2e:	ef 5f       	subi	r30, 0xFF	; 255
    ba30:	e0 93 c1 31 	sts	0x31C1, r30	; 0x8031c1 <sm_ndx>
    ba34:	f0 e0       	ldi	r31, 0x00	; 0
    ba36:	d0 90 84 20 	lds	r13, 0x2084	; 0x802084 <exist_ch>
    ba3a:	80 cf       	rjmp	.-256    	; 0xb93c <fn_loop+0x6c>
		{
			strncat(buffer,&alpha[sm_ndx],1);
		}
		if(test_fn(buffer, SD_MODE_SKETCH) == 0)
		{
			exist_ch = '*';
    ba3c:	8a e2       	ldi	r24, 0x2A	; 42
    ba3e:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <exist_ch>
    ba42:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    ba46:	e0 91 c1 31 	lds	r30, 0x31C1	; 0x8031c1 <sm_ndx>
    ba4a:	f0 e0       	ldi	r31, 0x00	; 0
    ba4c:	6a e2       	ldi	r22, 0x2A	; 42
    ba4e:	d6 2e       	mov	r13, r22
    ba50:	75 cf       	rjmp	.-278    	; 0xb93c <fn_loop+0x6c>

	if(PB_ENC_R)
	{
		if(strlen(buffer)<12)
		{
			strncat(buffer,&alpha[sm_ndx],1);
    ba52:	80 91 c1 31 	lds	r24, 0x31C1	; 0x8031c1 <sm_ndx>
    ba56:	61 e0       	ldi	r22, 0x01	; 1
    ba58:	70 e0       	ldi	r23, 0x00	; 0
    ba5a:	6c 0f       	add	r22, r28
    ba5c:	7d 1f       	adc	r23, r29
    ba5e:	68 0f       	add	r22, r24
    ba60:	71 1d       	adc	r23, r1
    ba62:	41 e0       	ldi	r20, 0x01	; 1
    ba64:	50 e0       	ldi	r21, 0x00	; 0
    ba66:	85 eb       	ldi	r24, 0xB5	; 181
    ba68:	91 e3       	ldi	r25, 0x31	; 49
    ba6a:	0e 94 a3 80 	call	0x10146	; 0x10146 <strncat>
		}
		if(test_fn(buffer, SD_MODE_SKETCH) == 0)
    ba6e:	61 e0       	ldi	r22, 0x01	; 1
    ba70:	85 eb       	ldi	r24, 0xB5	; 181
    ba72:	91 e3       	ldi	r25, 0x31	; 49
    ba74:	3d d3       	rcall	.+1658   	; 0xc0f0 <test_fn>
    ba76:	81 11       	cpse	r24, r1
    ba78:	57 cf       	rjmp	.-338    	; 0xb928 <fn_loop+0x58>
    ba7a:	e0 cf       	rjmp	.-64     	; 0xba3c <fn_loop+0x16c>
	}
	else if(PB_ENC_L)
	{
		if(mm_ctrl.current_entry == MM_ETCH_SAVE)
		{
			save_image(buffer);
    ba7c:	85 eb       	ldi	r24, 0xB5	; 181
    ba7e:	91 e3       	ldi	r25, 0x31	; 49
    ba80:	c3 d0       	rcall	.+390    	; 0xbc08 <save_image>
    ba82:	82 e0       	ldi	r24, 0x02	; 2
			master_mode = MODE_SKETCH;
    ba84:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
    ba88:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    ba8c:	c0 cf       	rjmp	.-128    	; 0xba0e <fn_loop+0x13e>
    ba8e:	ee 23       	and	r30, r30
			//master_mode = MODE_SKETCH;
		//}
	}
	else if(enc_b < 0)
	{
		if(sm_ndx > 0)
    ba90:	71 f0       	breq	.+28     	; 0xbaae <fn_loop+0x1de>
    ba92:	e1 50       	subi	r30, 0x01	; 1
		{
			sm_ndx --;
    ba94:	e0 93 c1 31 	sts	0x31C1, r30	; 0x8031c1 <sm_ndx>
    ba98:	f0 e0       	ldi	r31, 0x00	; 0
    ba9a:	d0 90 84 20 	lds	r13, 0x2084	; 0x802084 <exist_ch>
    ba9e:	4e cf       	rjmp	.-356    	; 0xb93c <fn_loop+0x6c>
    baa0:	10 92 c1 31 	sts	0x31C1, r1	; 0x8031c1 <sm_ndx>
		{
			sm_ndx ++;
		}
		else
		{
			sm_ndx = 0;
    baa4:	d0 90 84 20 	lds	r13, 0x2084	; 0x802084 <exist_ch>
    baa8:	e0 e0       	ldi	r30, 0x00	; 0
    baaa:	f0 e0       	ldi	r31, 0x00	; 0
    baac:	47 cf       	rjmp	.-370    	; 0xb93c <fn_loop+0x6c>
    baae:	99 e1       	ldi	r25, 0x19	; 25
		{
			sm_ndx --;
		}
		else
		{
			sm_ndx = 25;
    bab0:	90 93 c1 31 	sts	0x31C1, r25	; 0x8031c1 <sm_ndx>
    bab4:	d0 90 84 20 	lds	r13, 0x2084	; 0x802084 <exist_ch>
    bab8:	e9 e1       	ldi	r30, 0x19	; 25
    baba:	f0 e0       	ldi	r31, 0x00	; 0
    babc:	3f cf       	rjmp	.-386    	; 0xb93c <fn_loop+0x6c>

0000babe <sm_loop>:
    babe:	ef 92       	push	r14
	}
	return(0);
}

uint8_t sm_loop(void)
{
    bac0:	ff 92       	push	r15
    bac2:	0f 93       	push	r16
    bac4:	1f 93       	push	r17
    bac6:	cf 93       	push	r28
    bac8:	df 93       	push	r29
	extern uint8_t master_mode;
//	extern int8_t enc_a, pb;

	switch(mm_entry[mm_ctrl.current_entry].entry_type)
    baca:	90 91 86 20 	lds	r25, 0x2086	; 0x802086 <mm_ctrl+0x1>
    bace:	2d e0       	ldi	r18, 0x0D	; 13
    bad0:	92 9f       	mul	r25, r18
    bad2:	f0 01       	movw	r30, r0
    bad4:	11 24       	eor	r1, r1
    bad6:	e8 57       	subi	r30, 0x78	; 120
    bad8:	ff 4d       	sbci	r31, 0xDF	; 223
    bada:	80 81       	ld	r24, Z
    badc:	82 30       	cpi	r24, 0x02	; 2
    bade:	09 f4       	brne	.+2      	; 0xbae2 <sm_loop+0x24>
    bae0:	4a c0       	rjmp	.+148    	; 0xbb76 <sm_loop+0xb8>
    bae2:	83 30       	cpi	r24, 0x03	; 3
    bae4:	09 f0       	breq	.+2      	; 0xbae8 <sm_loop+0x2a>
    bae6:	3f c0       	rjmp	.+126    	; 0xbb66 <sm_loop+0xa8>
uint8_t fl_loop(void)
{
	extern uint8_t master_mode;
	extern int8_t enc_b, pb;

	if(PB_ENC_R)
    bae8:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    baec:	81 ff       	sbrs	r24, 1
    baee:	4c c0       	rjmp	.+152    	; 0xbb88 <sm_loop+0xca>
	{
		if(mm_ctrl.current_entry == MM_ETCH_LOAD)
    baf0:	91 30       	cpi	r25, 0x01	; 1
    baf2:	09 f4       	brne	.+2      	; 0xbaf6 <sm_loop+0x38>
    baf4:	64 c0       	rjmp	.+200    	; 0xbbbe <sm_loop+0x100>
		{
			load_image(&fl_buffer[sm_ndx].filename[0]);
		}
		else if(mm_ctrl.current_entry == MM_ETCH_DEL)
    baf6:	92 30       	cpi	r25, 0x02	; 2
    baf8:	09 f4       	brne	.+2      	; 0xbafc <sm_loop+0x3e>
    bafa:	7a c0       	rjmp	.+244    	; 0xbbf0 <sm_loop+0x132>
		{
			del_image(&fl_buffer[sm_ndx].filename[0]);
		}
		master_mode = MODE_SKETCH;
    bafc:	92 e0       	ldi	r25, 0x02	; 2
    bafe:	90 93 e0 31 	sts	0x31E0, r25	; 0x8031e0 <master_mode>
		else
		{
			sm_ndx = 0;
		}
	}
	if(PB_L)
    bb02:	84 ff       	sbrs	r24, 4
    bb04:	04 c0       	rjmp	.+8      	; 0xbb0e <sm_loop+0x50>
	{
		update_status();
    bb06:	75 d7       	rcall	.+3818   	; 0xc9f2 <update_status>
		master_mode = MODE_SKETCH;
    bb08:	82 e0       	ldi	r24, 0x02	; 2
    bb0a:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
	}

	fl_show(fl_buffer[sm_ndx].filename);
    bb0e:	c0 91 c1 31 	lds	r28, 0x31C1	; 0x8031c1 <sm_ndx>
    bb12:	84 e1       	ldi	r24, 0x14	; 20
    bb14:	c8 9f       	mul	r28, r24
    bb16:	e0 01       	movw	r28, r0
    bb18:	11 24       	eor	r1, r1
    bb1a:	c3 53       	subi	r28, 0x33	; 51
	
}

uint8_t sm_show(void)
{
	clear_stat();
    bb1c:	d2 4d       	sbci	r29, 0xD2	; 210
    bb1e:	72 d4       	rcall	.+2276   	; 0xc404 <clear_stat>

	gfx_draw_string(mm_entry[mm_ctrl.current_entry].name, 5, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_CYAN);
    bb20:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <mm_ctrl+0x1>
    bb24:	2d e0       	ldi	r18, 0x0D	; 13
    bb26:	82 9f       	mul	r24, r18
    bb28:	c0 01       	movw	r24, r0
    bb2a:	11 24       	eor	r1, r1
    bb2c:	27 e0       	ldi	r18, 0x07	; 7
    bb2e:	e2 2e       	mov	r14, r18
    bb30:	ff 24       	eor	r15, r15
    bb32:	fa 94       	dec	r15
    bb34:	00 e0       	ldi	r16, 0x00	; 0
    bb36:	10 e0       	ldi	r17, 0x00	; 0
    bb38:	2c eb       	ldi	r18, 0xBC	; 188
    bb3a:	30 e2       	ldi	r19, 0x20	; 32
    bb3c:	46 ee       	ldi	r20, 0xE6	; 230
    bb3e:	50 e0       	ldi	r21, 0x00	; 0
    bb40:	65 e0       	ldi	r22, 0x05	; 5
    bb42:	70 e0       	ldi	r23, 0x00	; 0
    bb44:	87 57       	subi	r24, 0x77	; 119
    bb46:	9f 4d       	sbci	r25, 0xDF	; 223
    bb48:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>

uint8_t fl_show(char *cur_fn)
{
	sm_show();

	gfx_draw_string(cur_fn, 200, 230,  &sysfont, GFX_COLOR_BLACK, GFX_COLOR_YELLOW);
    bb4c:	ee 24       	eor	r14, r14
    bb4e:	ea 94       	dec	r14
    bb50:	30 ee       	ldi	r19, 0xE0	; 224
    bb52:	f3 2e       	mov	r15, r19
    bb54:	2c eb       	ldi	r18, 0xBC	; 188
    bb56:	30 e2       	ldi	r19, 0x20	; 32
    bb58:	46 ee       	ldi	r20, 0xE6	; 230
    bb5a:	50 e0       	ldi	r21, 0x00	; 0
    bb5c:	68 ec       	ldi	r22, 0xC8	; 200
    bb5e:	70 e0       	ldi	r23, 0x00	; 0
    bb60:	ce 01       	movw	r24, r28
    bb62:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
			fl_loop();
			break;
	}
	return(0);
	
}
    bb66:	80 e0       	ldi	r24, 0x00	; 0
    bb68:	df 91       	pop	r29
    bb6a:	cf 91       	pop	r28
    bb6c:	1f 91       	pop	r17
    bb6e:	0f 91       	pop	r16
    bb70:	ff 90       	pop	r15
    bb72:	ef 90       	pop	r14
//	extern int8_t enc_a, pb;

	switch(mm_entry[mm_ctrl.current_entry].entry_type)
	{
		case ENTRY_TYPE_FILENAME:
			fn_loop();
    bb74:	08 95       	ret
    bb76:	ac de       	rcall	.-680    	; 0xb8d0 <fn_loop>
			fl_loop();
			break;
	}
	return(0);
	
}
    bb78:	80 e0       	ldi	r24, 0x00	; 0
    bb7a:	df 91       	pop	r29
    bb7c:	cf 91       	pop	r28
    bb7e:	1f 91       	pop	r17
    bb80:	0f 91       	pop	r16
    bb82:	ff 90       	pop	r15
    bb84:	ef 90       	pop	r14
    bb86:	08 95       	ret
			del_image(&fl_buffer[sm_ndx].filename[0]);
		}
		master_mode = MODE_SKETCH;

	}
	else if(PB_ENC_L)
    bb88:	85 fd       	sbrc	r24, 5
    bb8a:	bb cf       	rjmp	.-138    	; 0xbb02 <sm_loop+0x44>
	{
		NULL;
	}
	else if(enc_b < 0)
    bb8c:	90 91 e6 31 	lds	r25, 0x31E6	; 0x8031e6 <enc_b>
    bb90:	97 fd       	sbrc	r25, 7
    bb92:	21 c0       	rjmp	.+66     	; 0xbbd6 <sm_loop+0x118>
		else
		{
			sm_ndx = fl_count-1;
		}
	}
	else if(enc_b > 0)
    bb94:	99 23       	and	r25, r25
    bb96:	09 f4       	brne	.+2      	; 0xbb9a <sm_loop+0xdc>
    bb98:	b4 cf       	rjmp	.-152    	; 0xbb02 <sm_loop+0x44>
	{
		if(sm_ndx < fl_count-1)
    bb9a:	90 91 c1 31 	lds	r25, 0x31C1	; 0x8031c1 <sm_ndx>
    bb9e:	49 2f       	mov	r20, r25
    bba0:	50 e0       	ldi	r21, 0x00	; 0
    bba2:	20 91 cc 2d 	lds	r18, 0x2DCC	; 0x802dcc <fl_count>
    bba6:	02 2e       	mov	r0, r18
    bba8:	00 0c       	add	r0, r0
    bbaa:	33 0b       	sbc	r19, r19
    bbac:	21 50       	subi	r18, 0x01	; 1
    bbae:	31 09       	sbc	r19, r1
    bbb0:	42 17       	cp	r20, r18
    bbb2:	53 07       	cpc	r21, r19
    bbb4:	d4 f4       	brge	.+52     	; 0xbbea <sm_loop+0x12c>
		{
			sm_ndx ++;
    bbb6:	9f 5f       	subi	r25, 0xFF	; 255
    bbb8:	90 93 c1 31 	sts	0x31C1, r25	; 0x8031c1 <sm_ndx>
    bbbc:	a2 cf       	rjmp	.-188    	; 0xbb02 <sm_loop+0x44>

	if(PB_ENC_R)
	{
		if(mm_ctrl.current_entry == MM_ETCH_LOAD)
		{
			load_image(&fl_buffer[sm_ndx].filename[0]);
    bbbe:	80 91 c1 31 	lds	r24, 0x31C1	; 0x8031c1 <sm_ndx>
    bbc2:	24 e1       	ldi	r18, 0x14	; 20
    bbc4:	82 9f       	mul	r24, r18
    bbc6:	c0 01       	movw	r24, r0
    bbc8:	11 24       	eor	r1, r1
    bbca:	83 53       	subi	r24, 0x33	; 51
    bbcc:	92 4d       	sbci	r25, 0xD2	; 210
    bbce:	1a d1       	rcall	.+564    	; 0xbe04 <load_image>
    bbd0:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    bbd4:	93 cf       	rjmp	.-218    	; 0xbafc <sm_loop+0x3e>
	{
		NULL;
	}
	else if(enc_b < 0)
	{
		if(sm_ndx > 0)
    bbd6:	90 91 c1 31 	lds	r25, 0x31C1	; 0x8031c1 <sm_ndx>
    bbda:	91 11       	cpse	r25, r1
    bbdc:	02 c0       	rjmp	.+4      	; 0xbbe2 <sm_loop+0x124>
		{
			sm_ndx --;
		}
		else
		{
			sm_ndx = fl_count-1;
    bbde:	90 91 cc 2d 	lds	r25, 0x2DCC	; 0x802dcc <fl_count>
    bbe2:	91 50       	subi	r25, 0x01	; 1
    bbe4:	90 93 c1 31 	sts	0x31C1, r25	; 0x8031c1 <sm_ndx>
    bbe8:	8c cf       	rjmp	.-232    	; 0xbb02 <sm_loop+0x44>
		{
			sm_ndx ++;
		}
		else
		{
			sm_ndx = 0;
    bbea:	10 92 c1 31 	sts	0x31C1, r1	; 0x8031c1 <sm_ndx>
    bbee:	89 cf       	rjmp	.-238    	; 0xbb02 <sm_loop+0x44>
		{
			load_image(&fl_buffer[sm_ndx].filename[0]);
		}
		else if(mm_ctrl.current_entry == MM_ETCH_DEL)
		{
			del_image(&fl_buffer[sm_ndx].filename[0]);
    bbf0:	80 91 c1 31 	lds	r24, 0x31C1	; 0x8031c1 <sm_ndx>
    bbf4:	24 e1       	ldi	r18, 0x14	; 20
    bbf6:	82 9f       	mul	r24, r18
    bbf8:	c0 01       	movw	r24, r0
    bbfa:	11 24       	eor	r1, r1
    bbfc:	83 53       	subi	r24, 0x33	; 51
    bbfe:	92 4d       	sbci	r25, 0xD2	; 210
    bc00:	04 d2       	rcall	.+1032   	; 0xc00a <del_image>
    bc02:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    bc06:	7a cf       	rjmp	.-268    	; 0xbafc <sm_loop+0x3e>

0000bc08 <save_image>:
{

	switch(sd_mode)
	{
		case SD_MODE_SKETCH:
		sprintf(file_name, "0:/%s.ech", fn);
    bc08:	cf 92       	push	r12
    bc0a:	df 92       	push	r13
    bc0c:	ef 92       	push	r14
    bc0e:	ff 92       	push	r15
    bc10:	0f 93       	push	r16
    bc12:	1f 93       	push	r17
    bc14:	cf 93       	push	r28
    bc16:	df 93       	push	r29
    bc18:	cd b7       	in	r28, 0x3d	; 61
    bc1a:	de b7       	in	r29, 0x3e	; 62
    bc1c:	c0 54       	subi	r28, 0x40	; 64
    bc1e:	d2 40       	sbci	r29, 0x02	; 2
    bc20:	cd bf       	out	0x3d, r28	; 61
    bc22:	de bf       	out	0x3e, r29	; 62
    bc24:	18 2f       	mov	r17, r24
    bc26:	09 2f       	mov	r16, r25
    bc28:	9f 93       	push	r25
    bc2a:	8f 93       	push	r24
    bc2c:	8b e6       	ldi	r24, 0x6B	; 107
    bc2e:	97 e2       	ldi	r25, 0x27	; 39
    bc30:	9f 93       	push	r25
    bc32:	8f 93       	push	r24
    bc34:	6e 01       	movw	r12, r28
    bc36:	2f ed       	ldi	r18, 0xDF	; 223
    bc38:	c2 1a       	sub	r12, r18
    bc3a:	2d ef       	ldi	r18, 0xFD	; 253
    bc3c:	d2 0a       	sbc	r13, r18
    bc3e:	df 92       	push	r13
    bc40:	cf 92       	push	r12
    bc42:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <sprintf>
    bc46:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    bc4a:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    bc4e:	cb 5c       	subi	r28, 0xCB	; 203
    bc50:	dd 4f       	sbci	r29, 0xFD	; 253
    bc52:	88 83       	st	Y, r24
    bc54:	99 83       	std	Y+1, r25	; 0x01
    bc56:	c5 53       	subi	r28, 0x35	; 53
    bc58:	d2 40       	sbci	r29, 0x02	; 2
    bc5a:	80 91 d4 31 	lds	r24, 0x31D4	; 0x8031d4 <cur_y>
    bc5e:	90 91 d5 31 	lds	r25, 0x31D5	; 0x8031d5 <cur_y+0x1>
    bc62:	c9 5c       	subi	r28, 0xC9	; 201
    bc64:	dd 4f       	sbci	r29, 0xFD	; 253
    bc66:	88 83       	st	Y, r24
    bc68:	99 83       	std	Y+1, r25	; 0x01
    bc6a:	c7 53       	subi	r28, 0x37	; 55
    bc6c:	d2 40       	sbci	r29, 0x02	; 2
    bc6e:	80 91 d7 31 	lds	r24, 0x31D7	; 0x8031d7 <cur_color>
    bc72:	90 91 d8 31 	lds	r25, 0x31D8	; 0x8031d8 <cur_color+0x1>
    bc76:	c7 5c       	subi	r28, 0xC7	; 199
    bc78:	dd 4f       	sbci	r29, 0xFD	; 253
    bc7a:	88 83       	st	Y, r24
    bc7c:	99 83       	std	Y+1, r25	; 0x01
    bc7e:	c9 53       	subi	r28, 0x39	; 57
    bc80:	d2 40       	sbci	r29, 0x02	; 2
    bc82:	80 91 e4 31 	lds	r24, 0x31E4	; 0x8031e4 <step>
    bc86:	c5 5c       	subi	r28, 0xC5	; 197
    bc88:	dd 4f       	sbci	r29, 0xFD	; 253
    bc8a:	88 83       	st	Y, r24
    bc8c:	cb 53       	subi	r28, 0x3B	; 59
    bc8e:	d2 40       	sbci	r29, 0x02	; 2
    bc90:	80 91 e5 31 	lds	r24, 0x31E5	; 0x8031e5 <style>
    bc94:	c4 5c       	subi	r28, 0xC4	; 196
    bc96:	dd 4f       	sbci	r29, 0xFD	; 253
    bc98:	88 83       	st	Y, r24
    bc9a:	cc 53       	subi	r28, 0x3C	; 60
    bc9c:	d2 40       	sbci	r29, 0x02	; 2
    bc9e:	0f 93       	push	r16
    bca0:	1f 93       	push	r17
    bca2:	85 e7       	ldi	r24, 0x75	; 117
    bca4:	97 e2       	ldi	r25, 0x27	; 39
    bca6:	9f 93       	push	r25
    bca8:	8f 93       	push	r24
    bcaa:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bcae:	ee 24       	eor	r14, r14
    bcb0:	ea 94       	dec	r14
    bcb2:	fe 2c       	mov	r15, r14
    bcb4:	00 e0       	ldi	r16, 0x00	; 0
    bcb6:	10 e0       	ldi	r17, 0x00	; 0
    bcb8:	2c eb       	ldi	r18, 0xBC	; 188
    bcba:	30 e2       	ldi	r19, 0x20	; 32
    bcbc:	46 ee       	ldi	r20, 0xE6	; 230
    bcbe:	50 e0       	ldi	r21, 0x00	; 0
    bcc0:	65 e0       	ldi	r22, 0x05	; 5
    bcc2:	70 e0       	ldi	r23, 0x00	; 0
    bcc4:	86 e8       	ldi	r24, 0x86	; 134
    bcc6:	97 e2       	ldi	r25, 0x27	; 39
    bcc8:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    bccc:	8e e2       	ldi	r24, 0x2E	; 46
    bcce:	92 e0       	ldi	r25, 0x02	; 2
    bcd0:	eb e3       	ldi	r30, 0x3B	; 59
    bcd2:	fb e2       	ldi	r31, 0x2B	; 43
    bcd4:	df 01       	movw	r26, r30
    bcd6:	9c 01       	movw	r18, r24
    bcd8:	1d 92       	st	X+, r1
    bcda:	21 50       	subi	r18, 0x01	; 1
    bcdc:	30 40       	sbci	r19, 0x00	; 0
    bcde:	e1 f7       	brne	.-8      	; 0xbcd8 <save_image+0xd0>
    bce0:	bf 01       	movw	r22, r30
    bce2:	80 e0       	ldi	r24, 0x00	; 0
    bce4:	0e 94 36 39 	call	0x726c	; 0x726c <f_mount>
    bce8:	cd bf       	out	0x3d, r28	; 61
    bcea:	de bf       	out	0x3e, r29	; 62
    bcec:	81 11       	cpse	r24, r1
    bcee:	70 c0       	rjmp	.+224    	; 0xbdd0 <save_image+0x1c8>
    bcf0:	4a e0       	ldi	r20, 0x0A	; 10
    bcf2:	b6 01       	movw	r22, r12
    bcf4:	ce 01       	movw	r24, r28
    bcf6:	01 96       	adiw	r24, 0x01	; 1
    bcf8:	0e 94 4c 39 	call	0x7298	; 0x7298 <f_open>
    bcfc:	81 11       	cpse	r24, r1
    bcfe:	5b c0       	rjmp	.+182    	; 0xbdb6 <save_image+0x1ae>
    bd00:	9e 01       	movw	r18, r28
    bd02:	23 5c       	subi	r18, 0xC3	; 195
    bd04:	3d 4f       	sbci	r19, 0xFD	; 253
    bd06:	48 e0       	ldi	r20, 0x08	; 8
    bd08:	50 e0       	ldi	r21, 0x00	; 0
    bd0a:	be 01       	movw	r22, r28
    bd0c:	6b 5c       	subi	r22, 0xCB	; 203
    bd0e:	7d 4f       	sbci	r23, 0xFD	; 253
    bd10:	ce 01       	movw	r24, r28
    bd12:	01 96       	adiw	r24, 0x01	; 1
    bd14:	0e 94 93 40 	call	0x8126	; 0x8126 <f_write>
    bd18:	60 91 d4 31 	lds	r22, 0x31D4	; 0x8031d4 <cur_y>
    bd1c:	70 91 d5 31 	lds	r23, 0x31D5	; 0x8031d5 <cur_y+0x1>
    bd20:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    bd24:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    bd28:	97 d5       	rcall	.+2862   	; 0xc858 <draw_cursor>
    bd2a:	83 e0       	ldi	r24, 0x03	; 3
    bd2c:	e8 2e       	mov	r14, r24
    bd2e:	f1 2c       	mov	r15, r1
    bd30:	03 e0       	ldi	r16, 0x03	; 3
    bd32:	10 e0       	ldi	r17, 0x00	; 0
    bd34:	b8 01       	movw	r22, r16
    bd36:	c7 01       	movw	r24, r14
    bd38:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    bd3c:	c1 5c       	subi	r28, 0xC1	; 193
    bd3e:	dd 4f       	sbci	r29, 0xFD	; 253
    bd40:	88 83       	st	Y, r24
    bd42:	99 83       	std	Y+1, r25	; 0x01
    bd44:	cf 53       	subi	r28, 0x3F	; 63
    bd46:	d2 40       	sbci	r29, 0x02	; 2
    bd48:	9e 01       	movw	r18, r28
    bd4a:	23 5c       	subi	r18, 0xC3	; 195
    bd4c:	3d 4f       	sbci	r19, 0xFD	; 253
    bd4e:	42 e0       	ldi	r20, 0x02	; 2
    bd50:	50 e0       	ldi	r21, 0x00	; 0
    bd52:	be 01       	movw	r22, r28
    bd54:	61 5c       	subi	r22, 0xC1	; 193
    bd56:	7d 4f       	sbci	r23, 0xFD	; 253
    bd58:	ce 01       	movw	r24, r28
    bd5a:	01 96       	adiw	r24, 0x01	; 1
    bd5c:	0e 94 93 40 	call	0x8126	; 0x8126 <f_write>
    bd60:	0f 5f       	subi	r16, 0xFF	; 255
    bd62:	1f 4f       	sbci	r17, 0xFF	; 255
    bd64:	0d 3d       	cpi	r16, 0xDD	; 221
    bd66:	11 05       	cpc	r17, r1
    bd68:	29 f7       	brne	.-54     	; 0xbd34 <save_image+0x12c>
    bd6a:	bf ef       	ldi	r27, 0xFF	; 255
    bd6c:	eb 1a       	sub	r14, r27
    bd6e:	fb 0a       	sbc	r15, r27
    bd70:	2d e3       	ldi	r18, 0x3D	; 61
    bd72:	e2 16       	cp	r14, r18
    bd74:	21 e0       	ldi	r18, 0x01	; 1
    bd76:	f2 06       	cpc	r15, r18
    bd78:	d9 f6       	brne	.-74     	; 0xbd30 <save_image+0x128>
    bd7a:	ce 01       	movw	r24, r28
    bd7c:	01 96       	adiw	r24, 0x01	; 1
    bd7e:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <f_close>
    bd82:	81 11       	cpse	r24, r1
    bd84:	32 c0       	rjmp	.+100    	; 0xbdea <save_image+0x1e2>
    bd86:	60 91 d4 31 	lds	r22, 0x31D4	; 0x8031d4 <cur_y>
    bd8a:	70 91 d5 31 	lds	r23, 0x31D5	; 0x8031d5 <cur_y+0x1>
    bd8e:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    bd92:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    bd96:	60 d5       	rcall	.+2752   	; 0xc858 <draw_cursor>
    bd98:	2c d6       	rcall	.+3160   	; 0xc9f2 <update_status>
    bd9a:	80 e0       	ldi	r24, 0x00	; 0
    bd9c:	c0 5c       	subi	r28, 0xC0	; 192
    bd9e:	dd 4f       	sbci	r29, 0xFD	; 253
    bda0:	cd bf       	out	0x3d, r28	; 61
    bda2:	de bf       	out	0x3e, r29	; 62
    bda4:	df 91       	pop	r29
    bda6:	cf 91       	pop	r28
    bda8:	1f 91       	pop	r17
    bdaa:	0f 91       	pop	r16
    bdac:	ff 90       	pop	r15
    bdae:	ef 90       	pop	r14
    bdb0:	df 90       	pop	r13
    bdb2:	cf 90       	pop	r12
    bdb4:	08 95       	ret
    bdb6:	1f 92       	push	r1
    bdb8:	8f 93       	push	r24
    bdba:	85 ea       	ldi	r24, 0xA5	; 165
    bdbc:	97 e2       	ldi	r25, 0x27	; 39
    bdbe:	9f 93       	push	r25
    bdc0:	8f 93       	push	r24
    bdc2:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bdc6:	0f 90       	pop	r0
    bdc8:	0f 90       	pop	r0
    bdca:	0f 90       	pop	r0
    bdcc:	0f 90       	pop	r0
    bdce:	e5 cf       	rjmp	.-54     	; 0xbd9a <save_image+0x192>
    bdd0:	1f 92       	push	r1
    bdd2:	8f 93       	push	r24
    bdd4:	8e e8       	ldi	r24, 0x8E	; 142
    bdd6:	97 e2       	ldi	r25, 0x27	; 39
    bdd8:	9f 93       	push	r25
    bdda:	8f 93       	push	r24
    bddc:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bde0:	0f 90       	pop	r0
    bde2:	0f 90       	pop	r0
    bde4:	0f 90       	pop	r0
    bde6:	0f 90       	pop	r0
    bde8:	d8 cf       	rjmp	.-80     	; 0xbd9a <save_image+0x192>
    bdea:	1f 92       	push	r1
    bdec:	8f 93       	push	r24
    bdee:	82 ec       	ldi	r24, 0xC2	; 194
    bdf0:	97 e2       	ldi	r25, 0x27	; 39
    bdf2:	9f 93       	push	r25
    bdf4:	8f 93       	push	r24
    bdf6:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bdfa:	0f 90       	pop	r0
    bdfc:	0f 90       	pop	r0
    bdfe:	0f 90       	pop	r0
    be00:	0f 90       	pop	r0
    be02:	cb cf       	rjmp	.-106    	; 0xbd9a <save_image+0x192>

0000be04 <load_image>:
    be04:	cf 92       	push	r12
    be06:	df 92       	push	r13
    be08:	ef 92       	push	r14
    be0a:	ff 92       	push	r15
    be0c:	0f 93       	push	r16
    be0e:	1f 93       	push	r17
    be10:	cf 93       	push	r28
    be12:	df 93       	push	r29
    be14:	cd b7       	in	r28, 0x3d	; 61
    be16:	de b7       	in	r29, 0x3e	; 62
    be18:	cc 53       	subi	r28, 0x3C	; 60
    be1a:	d2 40       	sbci	r29, 0x02	; 2
    be1c:	cd bf       	out	0x3d, r28	; 61
    be1e:	de bf       	out	0x3e, r29	; 62
    be20:	18 2f       	mov	r17, r24
    be22:	09 2f       	mov	r16, r25
    be24:	9f 93       	push	r25
    be26:	8f 93       	push	r24
    be28:	89 ed       	ldi	r24, 0xD9	; 217
    be2a:	97 e2       	ldi	r25, 0x27	; 39
    be2c:	9f 93       	push	r25
    be2e:	8f 93       	push	r24
    be30:	6e 01       	movw	r12, r28
    be32:	2f ed       	ldi	r18, 0xDF	; 223
    be34:	c2 1a       	sub	r12, r18
    be36:	2d ef       	ldi	r18, 0xFD	; 253
    be38:	d2 0a       	sbc	r13, r18
    be3a:	df 92       	push	r13
    be3c:	cf 92       	push	r12
    be3e:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <sprintf>
    be42:	0f 93       	push	r16
    be44:	1f 93       	push	r17
    be46:	8f ed       	ldi	r24, 0xDF	; 223
    be48:	97 e2       	ldi	r25, 0x27	; 39
    be4a:	9f 93       	push	r25
    be4c:	8f 93       	push	r24
    be4e:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    be52:	ee 24       	eor	r14, r14
    be54:	ea 94       	dec	r14
    be56:	fe 2c       	mov	r15, r14
    be58:	00 e0       	ldi	r16, 0x00	; 0
    be5a:	10 e0       	ldi	r17, 0x00	; 0
    be5c:	2c eb       	ldi	r18, 0xBC	; 188
    be5e:	30 e2       	ldi	r19, 0x20	; 32
    be60:	46 ee       	ldi	r20, 0xE6	; 230
    be62:	50 e0       	ldi	r21, 0x00	; 0
    be64:	65 e0       	ldi	r22, 0x05	; 5
    be66:	70 e0       	ldi	r23, 0x00	; 0
    be68:	80 ef       	ldi	r24, 0xF0	; 240
    be6a:	97 e2       	ldi	r25, 0x27	; 39
    be6c:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    be70:	8e e2       	ldi	r24, 0x2E	; 46
    be72:	92 e0       	ldi	r25, 0x02	; 2
    be74:	eb e3       	ldi	r30, 0x3B	; 59
    be76:	fb e2       	ldi	r31, 0x2B	; 43
    be78:	df 01       	movw	r26, r30
    be7a:	9c 01       	movw	r18, r24
    be7c:	1d 92       	st	X+, r1
    be7e:	21 50       	subi	r18, 0x01	; 1
    be80:	30 40       	sbci	r19, 0x00	; 0
    be82:	e1 f7       	brne	.-8      	; 0xbe7c <load_image+0x78>
    be84:	bf 01       	movw	r22, r30
    be86:	80 e0       	ldi	r24, 0x00	; 0
    be88:	0e 94 36 39 	call	0x726c	; 0x726c <f_mount>
    be8c:	cd bf       	out	0x3d, r28	; 61
    be8e:	de bf       	out	0x3e, r29	; 62
    be90:	81 11       	cpse	r24, r1
    be92:	a1 c0       	rjmp	.+322    	; 0xbfd6 <load_image+0x1d2>
    be94:	41 e0       	ldi	r20, 0x01	; 1
    be96:	b6 01       	movw	r22, r12
    be98:	ce 01       	movw	r24, r28
    be9a:	01 96       	adiw	r24, 0x01	; 1
    be9c:	0e 94 4c 39 	call	0x7298	; 0x7298 <f_open>
    bea0:	81 11       	cpse	r24, r1
    bea2:	8c c0       	rjmp	.+280    	; 0xbfbc <load_image+0x1b8>
    bea4:	9e 01       	movw	r18, r28
    bea6:	27 5c       	subi	r18, 0xC7	; 199
    bea8:	3d 4f       	sbci	r19, 0xFD	; 253
    beaa:	48 e0       	ldi	r20, 0x08	; 8
    beac:	50 e0       	ldi	r21, 0x00	; 0
    beae:	be 01       	movw	r22, r28
    beb0:	6f 5c       	subi	r22, 0xCF	; 207
    beb2:	7d 4f       	sbci	r23, 0xFD	; 253
    beb4:	ce 01       	movw	r24, r28
    beb6:	01 96       	adiw	r24, 0x01	; 1
    beb8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <f_read>
    bebc:	cf 5c       	subi	r28, 0xCF	; 207
    bebe:	dd 4f       	sbci	r29, 0xFD	; 253
    bec0:	88 81       	ld	r24, Y
    bec2:	99 81       	ldd	r25, Y+1	; 0x01
    bec4:	c1 53       	subi	r28, 0x31	; 49
    bec6:	d2 40       	sbci	r29, 0x02	; 2
    bec8:	80 93 e2 31 	sts	0x31E2, r24	; 0x8031e2 <cur_x>
    becc:	90 93 e3 31 	sts	0x31E3, r25	; 0x8031e3 <cur_x+0x1>
    bed0:	cd 5c       	subi	r28, 0xCD	; 205
    bed2:	dd 4f       	sbci	r29, 0xFD	; 253
    bed4:	88 81       	ld	r24, Y
    bed6:	99 81       	ldd	r25, Y+1	; 0x01
    bed8:	c3 53       	subi	r28, 0x33	; 51
    beda:	d2 40       	sbci	r29, 0x02	; 2
    bedc:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <cur_y>
    bee0:	90 93 d5 31 	sts	0x31D5, r25	; 0x8031d5 <cur_y+0x1>
    bee4:	cb 5c       	subi	r28, 0xCB	; 203
    bee6:	dd 4f       	sbci	r29, 0xFD	; 253
    bee8:	88 81       	ld	r24, Y
    beea:	99 81       	ldd	r25, Y+1	; 0x01
    beec:	c5 53       	subi	r28, 0x35	; 53
    beee:	d2 40       	sbci	r29, 0x02	; 2
    bef0:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    bef4:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    bef8:	c9 5c       	subi	r28, 0xC9	; 201
    befa:	dd 4f       	sbci	r29, 0xFD	; 253
    befc:	88 81       	ld	r24, Y
    befe:	c7 53       	subi	r28, 0x37	; 55
    bf00:	d2 40       	sbci	r29, 0x02	; 2
    bf02:	80 93 e4 31 	sts	0x31E4, r24	; 0x8031e4 <step>
    bf06:	c8 5c       	subi	r28, 0xC8	; 200
    bf08:	dd 4f       	sbci	r29, 0xFD	; 253
    bf0a:	88 81       	ld	r24, Y
    bf0c:	c8 53       	subi	r28, 0x38	; 56
    bf0e:	d2 40       	sbci	r29, 0x02	; 2
    bf10:	80 93 e5 31 	sts	0x31E5, r24	; 0x8031e5 <style>
    bf14:	83 e0       	ldi	r24, 0x03	; 3
    bf16:	e8 2e       	mov	r14, r24
    bf18:	f1 2c       	mov	r15, r1
    bf1a:	03 e0       	ldi	r16, 0x03	; 3
    bf1c:	10 e0       	ldi	r17, 0x00	; 0
    bf1e:	05 c0       	rjmp	.+10     	; 0xbf2a <load_image+0x126>
    bf20:	0f 5f       	subi	r16, 0xFF	; 255
    bf22:	1f 4f       	sbci	r17, 0xFF	; 255
    bf24:	0d 3d       	cpi	r16, 0xDD	; 221
    bf26:	11 05       	cpc	r17, r1
    bf28:	19 f1       	breq	.+70     	; 0xbf70 <load_image+0x16c>
    bf2a:	9e 01       	movw	r18, r28
    bf2c:	27 5c       	subi	r18, 0xC7	; 199
    bf2e:	3d 4f       	sbci	r19, 0xFD	; 253
    bf30:	42 e0       	ldi	r20, 0x02	; 2
    bf32:	50 e0       	ldi	r21, 0x00	; 0
    bf34:	be 01       	movw	r22, r28
    bf36:	65 5c       	subi	r22, 0xC5	; 197
    bf38:	7d 4f       	sbci	r23, 0xFD	; 253
    bf3a:	ce 01       	movw	r24, r28
    bf3c:	01 96       	adiw	r24, 0x01	; 1
    bf3e:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <f_read>
    bf42:	c7 5c       	subi	r28, 0xC7	; 199
    bf44:	dd 4f       	sbci	r29, 0xFD	; 253
    bf46:	88 81       	ld	r24, Y
    bf48:	99 81       	ldd	r25, Y+1	; 0x01
    bf4a:	c9 53       	subi	r28, 0x39	; 57
    bf4c:	d2 40       	sbci	r29, 0x02	; 2
    bf4e:	89 2b       	or	r24, r25
    bf50:	39 f3       	breq	.-50     	; 0xbf20 <load_image+0x11c>
    bf52:	c5 5c       	subi	r28, 0xC5	; 197
    bf54:	dd 4f       	sbci	r29, 0xFD	; 253
    bf56:	48 81       	ld	r20, Y
    bf58:	59 81       	ldd	r21, Y+1	; 0x01
    bf5a:	cb 53       	subi	r28, 0x3B	; 59
    bf5c:	d2 40       	sbci	r29, 0x02	; 2
    bf5e:	b8 01       	movw	r22, r16
    bf60:	c7 01       	movw	r24, r14
    bf62:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    bf66:	0f 5f       	subi	r16, 0xFF	; 255
    bf68:	1f 4f       	sbci	r17, 0xFF	; 255
    bf6a:	0d 3d       	cpi	r16, 0xDD	; 221
    bf6c:	11 05       	cpc	r17, r1
    bf6e:	e9 f6       	brne	.-70     	; 0xbf2a <load_image+0x126>
    bf70:	bf ef       	ldi	r27, 0xFF	; 255
    bf72:	eb 1a       	sub	r14, r27
    bf74:	fb 0a       	sbc	r15, r27
    bf76:	2d e3       	ldi	r18, 0x3D	; 61
    bf78:	e2 16       	cp	r14, r18
    bf7a:	21 e0       	ldi	r18, 0x01	; 1
    bf7c:	f2 06       	cpc	r15, r18
    bf7e:	69 f6       	brne	.-102    	; 0xbf1a <load_image+0x116>
    bf80:	ce 01       	movw	r24, r28
    bf82:	01 96       	adiw	r24, 0x01	; 1
    bf84:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <f_close>
    bf88:	81 11       	cpse	r24, r1
    bf8a:	32 c0       	rjmp	.+100    	; 0xbff0 <load_image+0x1ec>
    bf8c:	60 91 d4 31 	lds	r22, 0x31D4	; 0x8031d4 <cur_y>
    bf90:	70 91 d5 31 	lds	r23, 0x31D5	; 0x8031d5 <cur_y+0x1>
    bf94:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    bf98:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    bf9c:	5d d4       	rcall	.+2234   	; 0xc858 <draw_cursor>
    bf9e:	29 d5       	rcall	.+2642   	; 0xc9f2 <update_status>
    bfa0:	80 e0       	ldi	r24, 0x00	; 0
    bfa2:	c4 5c       	subi	r28, 0xC4	; 196
    bfa4:	dd 4f       	sbci	r29, 0xFD	; 253
    bfa6:	cd bf       	out	0x3d, r28	; 61
    bfa8:	de bf       	out	0x3e, r29	; 62
    bfaa:	df 91       	pop	r29
    bfac:	cf 91       	pop	r28
    bfae:	1f 91       	pop	r17
    bfb0:	0f 91       	pop	r16
    bfb2:	ff 90       	pop	r15
    bfb4:	ef 90       	pop	r14
    bfb6:	df 90       	pop	r13
    bfb8:	cf 90       	pop	r12
    bfba:	08 95       	ret
    bfbc:	1f 92       	push	r1
    bfbe:	8f 93       	push	r24
    bfc0:	85 ea       	ldi	r24, 0xA5	; 165
    bfc2:	97 e2       	ldi	r25, 0x27	; 39
    bfc4:	9f 93       	push	r25
    bfc6:	8f 93       	push	r24
    bfc8:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bfcc:	0f 90       	pop	r0
    bfce:	0f 90       	pop	r0
    bfd0:	0f 90       	pop	r0
    bfd2:	0f 90       	pop	r0
    bfd4:	e5 cf       	rjmp	.-54     	; 0xbfa0 <load_image+0x19c>
    bfd6:	1f 92       	push	r1
    bfd8:	8f 93       	push	r24
    bfda:	8e e8       	ldi	r24, 0x8E	; 142
    bfdc:	97 e2       	ldi	r25, 0x27	; 39
    bfde:	9f 93       	push	r25
    bfe0:	8f 93       	push	r24
    bfe2:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    bfe6:	0f 90       	pop	r0
    bfe8:	0f 90       	pop	r0
    bfea:	0f 90       	pop	r0
    bfec:	0f 90       	pop	r0
    bfee:	d8 cf       	rjmp	.-80     	; 0xbfa0 <load_image+0x19c>
    bff0:	1f 92       	push	r1
    bff2:	8f 93       	push	r24
    bff4:	82 ec       	ldi	r24, 0xC2	; 194
    bff6:	97 e2       	ldi	r25, 0x27	; 39
    bff8:	9f 93       	push	r25
    bffa:	8f 93       	push	r24
    bffc:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c000:	0f 90       	pop	r0
    c002:	0f 90       	pop	r0
    c004:	0f 90       	pop	r0
    c006:	0f 90       	pop	r0
    c008:	cb cf       	rjmp	.-106    	; 0xbfa0 <load_image+0x19c>

0000c00a <del_image>:
    c00a:	cf 92       	push	r12
    c00c:	df 92       	push	r13
    c00e:	ef 92       	push	r14
    c010:	ff 92       	push	r15
    c012:	0f 93       	push	r16
    c014:	1f 93       	push	r17
    c016:	cf 93       	push	r28
    c018:	df 93       	push	r29
    c01a:	cd b7       	in	r28, 0x3d	; 61
    c01c:	de b7       	in	r29, 0x3e	; 62
    c01e:	60 97       	sbiw	r28, 0x10	; 16
    c020:	cd bf       	out	0x3d, r28	; 61
    c022:	de bf       	out	0x3e, r29	; 62
    c024:	18 2f       	mov	r17, r24
    c026:	09 2f       	mov	r16, r25
    c028:	9f 93       	push	r25
    c02a:	8f 93       	push	r24
    c02c:	89 ed       	ldi	r24, 0xD9	; 217
    c02e:	97 e2       	ldi	r25, 0x27	; 39
    c030:	9f 93       	push	r25
    c032:	8f 93       	push	r24
    c034:	9e 01       	movw	r18, r28
    c036:	2f 5f       	subi	r18, 0xFF	; 255
    c038:	3f 4f       	sbci	r19, 0xFF	; 255
    c03a:	69 01       	movw	r12, r18
    c03c:	3f 93       	push	r19
    c03e:	2f 93       	push	r18
    c040:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <sprintf>
    c044:	0f 93       	push	r16
    c046:	1f 93       	push	r17
    c048:	89 ef       	ldi	r24, 0xF9	; 249
    c04a:	97 e2       	ldi	r25, 0x27	; 39
    c04c:	9f 93       	push	r25
    c04e:	8f 93       	push	r24
    c050:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c054:	ee 24       	eor	r14, r14
    c056:	ea 94       	dec	r14
    c058:	fe 2c       	mov	r15, r14
    c05a:	00 e0       	ldi	r16, 0x00	; 0
    c05c:	10 e0       	ldi	r17, 0x00	; 0
    c05e:	2c eb       	ldi	r18, 0xBC	; 188
    c060:	30 e2       	ldi	r19, 0x20	; 32
    c062:	46 ee       	ldi	r20, 0xE6	; 230
    c064:	50 e0       	ldi	r21, 0x00	; 0
    c066:	65 e0       	ldi	r22, 0x05	; 5
    c068:	70 e0       	ldi	r23, 0x00	; 0
    c06a:	8c e0       	ldi	r24, 0x0C	; 12
    c06c:	98 e2       	ldi	r25, 0x28	; 40
    c06e:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    c072:	8e e2       	ldi	r24, 0x2E	; 46
    c074:	92 e0       	ldi	r25, 0x02	; 2
    c076:	eb e3       	ldi	r30, 0x3B	; 59
    c078:	fb e2       	ldi	r31, 0x2B	; 43
    c07a:	df 01       	movw	r26, r30
    c07c:	9c 01       	movw	r18, r24
    c07e:	1d 92       	st	X+, r1
    c080:	21 50       	subi	r18, 0x01	; 1
    c082:	30 40       	sbci	r19, 0x00	; 0
    c084:	e1 f7       	brne	.-8      	; 0xc07e <del_image+0x74>
    c086:	bf 01       	movw	r22, r30
    c088:	80 e0       	ldi	r24, 0x00	; 0
    c08a:	0e 94 36 39 	call	0x726c	; 0x726c <f_mount>
    c08e:	cd bf       	out	0x3d, r28	; 61
    c090:	de bf       	out	0x3e, r29	; 62
    c092:	81 11       	cpse	r24, r1
    c094:	20 c0       	rjmp	.+64     	; 0xc0d6 <del_image+0xcc>
    c096:	c6 01       	movw	r24, r12
    c098:	0e 94 f6 48 	call	0x91ec	; 0x91ec <f_unlink>
    c09c:	81 11       	cpse	r24, r1
    c09e:	0e c0       	rjmp	.+28     	; 0xc0bc <del_image+0xb2>
    c0a0:	a8 d4       	rcall	.+2384   	; 0xc9f2 <update_status>
    c0a2:	80 e0       	ldi	r24, 0x00	; 0
    c0a4:	60 96       	adiw	r28, 0x10	; 16
    c0a6:	cd bf       	out	0x3d, r28	; 61
    c0a8:	de bf       	out	0x3e, r29	; 62
    c0aa:	df 91       	pop	r29
    c0ac:	cf 91       	pop	r28
    c0ae:	1f 91       	pop	r17
    c0b0:	0f 91       	pop	r16
    c0b2:	ff 90       	pop	r15
    c0b4:	ef 90       	pop	r14
    c0b6:	df 90       	pop	r13
    c0b8:	cf 90       	pop	r12
    c0ba:	08 95       	ret
    c0bc:	1f 92       	push	r1
    c0be:	8f 93       	push	r24
    c0c0:	86 e1       	ldi	r24, 0x16	; 22
    c0c2:	98 e2       	ldi	r25, 0x28	; 40
    c0c4:	9f 93       	push	r25
    c0c6:	8f 93       	push	r24
    c0c8:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c0cc:	0f 90       	pop	r0
    c0ce:	0f 90       	pop	r0
    c0d0:	0f 90       	pop	r0
    c0d2:	0f 90       	pop	r0
    c0d4:	e6 cf       	rjmp	.-52     	; 0xc0a2 <del_image+0x98>
    c0d6:	1f 92       	push	r1
    c0d8:	8f 93       	push	r24
    c0da:	8e e8       	ldi	r24, 0x8E	; 142
    c0dc:	97 e2       	ldi	r25, 0x27	; 39
    c0de:	9f 93       	push	r25
    c0e0:	8f 93       	push	r24
    c0e2:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c0e6:	0f 90       	pop	r0
    c0e8:	0f 90       	pop	r0
    c0ea:	0f 90       	pop	r0
    c0ec:	0f 90       	pop	r0
    c0ee:	d9 cf       	rjmp	.-78     	; 0xc0a2 <del_image+0x98>

0000c0f0 <test_fn>:
    c0f0:	0f 93       	push	r16
    c0f2:	1f 93       	push	r17
    c0f4:	cf 93       	push	r28
    c0f6:	df 93       	push	r29
    c0f8:	cd b7       	in	r28, 0x3d	; 61
    c0fa:	de b7       	in	r29, 0x3e	; 62
    c0fc:	c0 53       	subi	r28, 0x30	; 48
    c0fe:	d2 40       	sbci	r29, 0x02	; 2
    c100:	cd bf       	out	0x3d, r28	; 61
    c102:	de bf       	out	0x3e, r29	; 62
    c104:	61 30       	cpi	r22, 0x01	; 1
    c106:	09 f4       	brne	.+2      	; 0xc10a <test_fn+0x1a>
    c108:	43 c0       	rjmp	.+134    	; 0xc190 <test_fn+0xa0>
    c10a:	62 30       	cpi	r22, 0x02	; 2
    c10c:	69 f1       	breq	.+90     	; 0xc168 <test_fn+0x78>
    c10e:	8b e2       	ldi	r24, 0x2B	; 43
    c110:	98 e2       	ldi	r25, 0x28	; 40
    c112:	9f 93       	push	r25
    c114:	8f 93       	push	r24
    c116:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c11a:	8e e2       	ldi	r24, 0x2E	; 46
    c11c:	92 e0       	ldi	r25, 0x02	; 2
    c11e:	eb e3       	ldi	r30, 0x3B	; 59
    c120:	fb e2       	ldi	r31, 0x2B	; 43
    c122:	df 01       	movw	r26, r30
    c124:	9c 01       	movw	r18, r24
    c126:	1d 92       	st	X+, r1
    c128:	21 50       	subi	r18, 0x01	; 1
    c12a:	30 40       	sbci	r19, 0x00	; 0
    c12c:	e1 f7       	brne	.-8      	; 0xc126 <test_fn+0x36>
    c12e:	bf 01       	movw	r22, r30
    c130:	80 e0       	ldi	r24, 0x00	; 0
    c132:	0e 94 36 39 	call	0x726c	; 0x726c <f_mount>
    c136:	0f 90       	pop	r0
    c138:	0f 90       	pop	r0
    c13a:	81 11       	cpse	r24, r1
    c13c:	2e c0       	rjmp	.+92     	; 0xc19a <test_fn+0xaa>
    c13e:	8e 01       	movw	r16, r28
    c140:	0f 5d       	subi	r16, 0xDF	; 223
    c142:	1d 4f       	sbci	r17, 0xFD	; 253
    c144:	41 e0       	ldi	r20, 0x01	; 1
    c146:	b8 01       	movw	r22, r16
    c148:	ce 01       	movw	r24, r28
    c14a:	01 96       	adiw	r24, 0x01	; 1
    c14c:	0e 94 4c 39 	call	0x7298	; 0x7298 <f_open>
    c150:	81 11       	cpse	r24, r1
    c152:	25 c0       	rjmp	.+74     	; 0xc19e <test_fn+0xae>
    c154:	80 e0       	ldi	r24, 0x00	; 0
    c156:	c0 5d       	subi	r28, 0xD0	; 208
    c158:	dd 4f       	sbci	r29, 0xFD	; 253
    c15a:	cd bf       	out	0x3d, r28	; 61
    c15c:	de bf       	out	0x3e, r29	; 62
    c15e:	df 91       	pop	r29
    c160:	cf 91       	pop	r28
    c162:	1f 91       	pop	r17
    c164:	0f 91       	pop	r16
    c166:	08 95       	ret
    c168:	9f 93       	push	r25
    c16a:	8f 93       	push	r24
    c16c:	89 ed       	ldi	r24, 0xD9	; 217
    c16e:	97 e2       	ldi	r25, 0x27	; 39
    c170:	9f 93       	push	r25
    c172:	8f 93       	push	r24
    c174:	ce 01       	movw	r24, r28
    c176:	8f 5d       	subi	r24, 0xDF	; 223
    c178:	9d 4f       	sbci	r25, 0xFD	; 253
    c17a:	9f 93       	push	r25
    c17c:	8f 93       	push	r24
    c17e:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <sprintf>
    c182:	0f 90       	pop	r0
    c184:	0f 90       	pop	r0
    c186:	0f 90       	pop	r0
    c188:	0f 90       	pop	r0
    c18a:	0f 90       	pop	r0
    c18c:	0f 90       	pop	r0
    c18e:	bf cf       	rjmp	.-130    	; 0xc10e <test_fn+0x1e>
    c190:	9f 93       	push	r25
    c192:	8f 93       	push	r24
    c194:	8b e6       	ldi	r24, 0x6B	; 107
    c196:	97 e2       	ldi	r25, 0x27	; 39
    c198:	eb cf       	rjmp	.-42     	; 0xc170 <test_fn+0x80>
    c19a:	8f ef       	ldi	r24, 0xFF	; 255
    c19c:	dc cf       	rjmp	.-72     	; 0xc156 <test_fn+0x66>
    c19e:	1f 93       	push	r17
    c1a0:	0f 93       	push	r16
    c1a2:	85 e3       	ldi	r24, 0x35	; 53
    c1a4:	98 e2       	ldi	r25, 0x28	; 40
    c1a6:	9f 93       	push	r25
    c1a8:	8f 93       	push	r24
    c1aa:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c1ae:	0f 90       	pop	r0
    c1b0:	0f 90       	pop	r0
    c1b2:	0f 90       	pop	r0
    c1b4:	0f 90       	pop	r0
    c1b6:	8e ef       	ldi	r24, 0xFE	; 254
    c1b8:	ce cf       	rjmp	.-100    	; 0xc156 <test_fn+0x66>

0000c1ba <list_files>:
	}
	return(0);
}

int8_t list_files(uint8_t max, struct file_list *fl)
{
    c1ba:	cf 92       	push	r12
    c1bc:	df 92       	push	r13
    c1be:	ef 92       	push	r14
    c1c0:	ff 92       	push	r15
    c1c2:	0f 93       	push	r16
    c1c4:	1f 93       	push	r17
    c1c6:	cf 93       	push	r28
    c1c8:	df 93       	push	r29
    c1ca:	cd b7       	in	r28, 0x3d	; 61
    c1cc:	de b7       	in	r29, 0x3e	; 62
    c1ce:	6a 97       	sbiw	r28, 0x1a	; 26
    c1d0:	cd bf       	out	0x3d, r28	; 61
    c1d2:	de bf       	out	0x3e, r29	; 62
    c1d4:	08 2f       	mov	r16, r24
    c1d6:	6b 01       	movw	r12, r22
	DIR dir;
	static FILINFO fno;
	uint8_t count;
	
	/* Mount disk*/
	printf("list files\n\r");
    c1d8:	8b e4       	ldi	r24, 0x4B	; 75
    c1da:	98 e2       	ldi	r25, 0x28	; 40
    c1dc:	9f 93       	push	r25
    c1de:	8f 93       	push	r24
    c1e0:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
	count = 0;
	/* Clear file system object */
	memset(&fs, 0, sizeof(FATFS));
    c1e4:	8e e2       	ldi	r24, 0x2E	; 46
    c1e6:	92 e0       	ldi	r25, 0x02	; 2
    c1e8:	eb e3       	ldi	r30, 0x3B	; 59
    c1ea:	fb e2       	ldi	r31, 0x2B	; 43
    c1ec:	df 01       	movw	r26, r30
    c1ee:	9c 01       	movw	r18, r24
    c1f0:	1d 92       	st	X+, r1
    c1f2:	21 50       	subi	r18, 0x01	; 1
    c1f4:	30 40       	sbci	r19, 0x00	; 0
    c1f6:	e1 f7       	brne	.-8      	; 0xc1f0 <list_files+0x36>
	res = f_mount(0, &fs);
    c1f8:	bf 01       	movw	r22, r30
    c1fa:	80 e0       	ldi	r24, 0x00	; 0
    c1fc:	0e 94 36 39 	call	0x726c	; 0x726c <f_mount>
	if (res != FR_OK) {
    c200:	0f 90       	pop	r0
    c202:	0f 90       	pop	r0
    c204:	81 11       	cpse	r24, r1
    c206:	52 c0       	rjmp	.+164    	; 0xc2ac <list_files+0xf2>
		printf("-E- f_mount pb: 0x%X\n\r", res);
		return 0;
	}
	res = f_opendir(&dir, "/");                       /* Open the directory */
    c208:	68 e5       	ldi	r22, 0x58	; 88
    c20a:	78 e2       	ldi	r23, 0x28	; 40
    c20c:	ce 01       	movw	r24, r28
    c20e:	01 96       	adiw	r24, 0x01	; 1
    c210:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <f_opendir>
	if (res == FR_OK) {
    c214:	81 11       	cpse	r24, r1
    c216:	3d c0       	rjmp	.+122    	; 0xc292 <list_files+0xd8>
		for (;;) {
			if(count >=max) break;							/* Break on count >= max */
    c218:	00 23       	and	r16, r16
    c21a:	d9 f1       	breq	.+118    	; 0xc292 <list_files+0xd8>
    c21c:	10 e0       	ldi	r17, 0x00	; 0
			if (!(fno.fattrib & AM_DIR)) {                    /* It is a file. */
				if(strstr(fno.fname,".ech")!=0)
				{
					strncpy(&fl[count].filename[0], fno.fname, FN_LEN-1);
					count ++;
					printf("/%s\n", fno.fname);
    c21e:	8a e5       	ldi	r24, 0x5A	; 90
    c220:	e8 2e       	mov	r14, r24
    c222:	88 e2       	ldi	r24, 0x28	; 40
    c224:	f8 2e       	mov	r15, r24
    c226:	2b c0       	rjmp	.+86     	; 0xc27e <list_files+0xc4>
	res = f_opendir(&dir, "/");                       /* Open the directory */
	if (res == FR_OK) {
		for (;;) {
			if(count >=max) break;							/* Break on count >= max */
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
    c228:	80 91 2a 2b 	lds	r24, 0x2B2A	; 0x802b2a <fno.7281+0x9>
    c22c:	88 23       	and	r24, r24
    c22e:	79 f1       	breq	.+94     	; 0xc28e <list_files+0xd4>
			if (!(fno.fattrib & AM_DIR)) {                    /* It is a file. */
    c230:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <fno.7281+0x8>
    c234:	84 fd       	sbrc	r24, 4
    c236:	21 c0       	rjmp	.+66     	; 0xc27a <list_files+0xc0>
				if(strstr(fno.fname,".ech")!=0)
    c238:	60 e7       	ldi	r22, 0x70	; 112
    c23a:	77 e2       	ldi	r23, 0x27	; 39
    c23c:	8a e2       	ldi	r24, 0x2A	; 42
    c23e:	9b e2       	ldi	r25, 0x2B	; 43
    c240:	0e 94 cd 80 	call	0x1019a	; 0x1019a <strstr>
    c244:	89 2b       	or	r24, r25
    c246:	c9 f0       	breq	.+50     	; 0xc27a <list_files+0xc0>
				{
					strncpy(&fl[count].filename[0], fno.fname, FN_LEN-1);
    c248:	43 e1       	ldi	r20, 0x13	; 19
    c24a:	50 e0       	ldi	r21, 0x00	; 0
    c24c:	6a e2       	ldi	r22, 0x2A	; 42
    c24e:	7b e2       	ldi	r23, 0x2B	; 43
    c250:	c6 01       	movw	r24, r12
    c252:	34 e1       	ldi	r19, 0x14	; 20
    c254:	13 9f       	mul	r17, r19
    c256:	80 0d       	add	r24, r0
    c258:	91 1d       	adc	r25, r1
    c25a:	11 24       	eor	r1, r1
    c25c:	0e 94 b3 80 	call	0x10166	; 0x10166 <strncpy>
					count ++;
    c260:	1f 5f       	subi	r17, 0xFF	; 255
					printf("/%s\n", fno.fname);
    c262:	8a e2       	ldi	r24, 0x2A	; 42
    c264:	9b e2       	ldi	r25, 0x2B	; 43
    c266:	9f 93       	push	r25
    c268:	8f 93       	push	r24
    c26a:	ff 92       	push	r15
    c26c:	ef 92       	push	r14
    c26e:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    c272:	0f 90       	pop	r0
    c274:	0f 90       	pop	r0
    c276:	0f 90       	pop	r0
    c278:	0f 90       	pop	r0
		return 0;
	}
	res = f_opendir(&dir, "/");                       /* Open the directory */
	if (res == FR_OK) {
		for (;;) {
			if(count >=max) break;							/* Break on count >= max */
    c27a:	10 17       	cp	r17, r16
    c27c:	40 f4       	brcc	.+16     	; 0xc28e <list_files+0xd4>
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
    c27e:	61 e2       	ldi	r22, 0x21	; 33
    c280:	7b e2       	ldi	r23, 0x2B	; 43
    c282:	ce 01       	movw	r24, r28
    c284:	01 96       	adiw	r24, 0x01	; 1
    c286:	0e 94 ce 47 	call	0x8f9c	; 0x8f9c <f_readdir>
			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
    c28a:	88 23       	and	r24, r24
    c28c:	69 f2       	breq	.-102    	; 0xc228 <list_files+0x6e>
    c28e:	81 2f       	mov	r24, r17
    c290:	01 c0       	rjmp	.+2      	; 0xc294 <list_files+0xda>
		return 0;
	}
	res = f_opendir(&dir, "/");                       /* Open the directory */
	if (res == FR_OK) {
		for (;;) {
			if(count >=max) break;							/* Break on count >= max */
    c292:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return(count);
    c294:	6a 96       	adiw	r28, 0x1a	; 26
    c296:	cd bf       	out	0x3d, r28	; 61
    c298:	de bf       	out	0x3e, r29	; 62
    c29a:	df 91       	pop	r29
    c29c:	cf 91       	pop	r28
    c29e:	1f 91       	pop	r17
    c2a0:	0f 91       	pop	r16
    c2a2:	ff 90       	pop	r15
    c2a4:	ef 90       	pop	r14
    c2a6:	df 90       	pop	r13
    c2a8:	cf 90       	pop	r12
    c2aa:	08 95       	ret
	count = 0;
	/* Clear file system object */
	memset(&fs, 0, sizeof(FATFS));
	res = f_mount(0, &fs);
	if (res != FR_OK) {
		printf("-E- f_mount pb: 0x%X\n\r", res);
    c2ac:	1f 92       	push	r1
    c2ae:	8f 93       	push	r24
    c2b0:	8e e8       	ldi	r24, 0x8E	; 142
    c2b2:	97 e2       	ldi	r25, 0x27	; 39
    c2b4:	9f 93       	push	r25
    c2b6:	8f 93       	push	r24
    c2b8:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
		return 0;
    c2bc:	0f 90       	pop	r0
    c2be:	0f 90       	pop	r0
    c2c0:	0f 90       	pop	r0
    c2c2:	0f 90       	pop	r0
    c2c4:	80 e0       	ldi	r24, 0x00	; 0
    c2c6:	e6 cf       	rjmp	.-52     	; 0xc294 <list_files+0xda>

0000c2c8 <change_color.part.1>:
		move_cursor(0, enc_b*step);
	}

	if(delta_step != 0)
	{
		step += delta_step;
    c2c8:	80 91 d7 31 	lds	r24, 0x31D7	; 0x8031d7 <cur_color>
    c2cc:	90 91 d8 31 	lds	r25, 0x31D8	; 0x8031d8 <cur_color+0x1>
    c2d0:	84 30       	cpi	r24, 0x04	; 4
    c2d2:	20 e1       	ldi	r18, 0x10	; 16
    c2d4:	92 07       	cpc	r25, r18
    c2d6:	a1 f0       	breq	.+40     	; 0xc300 <change_color.part.1+0x38>
    c2d8:	c0 f0       	brcs	.+48     	; 0xc30a <change_color.part.1+0x42>
    c2da:	87 30       	cpi	r24, 0x07	; 7
    c2dc:	20 ee       	ldi	r18, 0xE0	; 224
    c2de:	92 07       	cpc	r25, r18
    c2e0:	09 f4       	brne	.+2      	; 0xc2e4 <change_color.part.1+0x1c>
    c2e2:	53 c0       	rjmp	.+166    	; 0xc38a <change_color.part.1+0xc2>
    c2e4:	50 f5       	brcc	.+84     	; 0xc33a <change_color.part.1+0x72>
    c2e6:	81 15       	cp	r24, r1
    c2e8:	2f e1       	ldi	r18, 0x1F	; 31
    c2ea:	92 07       	cpc	r25, r18
    c2ec:	c9 f1       	breq	.+114    	; 0xc360 <change_color.part.1+0x98>
    c2ee:	88 3f       	cpi	r24, 0xF8	; 248
    c2f0:	2f e1       	ldi	r18, 0x1F	; 31
    c2f2:	92 07       	cpc	r25, r18
    c2f4:	09 f4       	brne	.+2      	; 0xc2f8 <change_color.part.1+0x30>
    c2f6:	63 c0       	rjmp	.+198    	; 0xc3be <change_color.part.1+0xf6>
    c2f8:	80 38       	cpi	r24, 0x80	; 128
    c2fa:	90 41       	sbci	r25, 0x10	; 16
    c2fc:	09 f4       	brne	.+2      	; 0xc300 <change_color.part.1+0x38>
    c2fe:	4c c0       	rjmp	.+152    	; 0xc398 <change_color.part.1+0xd0>
    c300:	10 92 d7 31 	sts	0x31D7, r1	; 0x8031d7 <cur_color>
    c304:	10 92 d8 31 	sts	0x31D8, r1	; 0x8031d8 <cur_color+0x1>
    c308:	08 95       	ret
    c30a:	80 38       	cpi	r24, 0x80	; 128
    c30c:	91 05       	cpc	r25, r1
    c30e:	09 f4       	brne	.+2      	; 0xc312 <change_color.part.1+0x4a>
    c310:	6b c0       	rjmp	.+214    	; 0xc3e8 <change_color.part.1+0x120>
    c312:	08 f4       	brcc	.+2      	; 0xc316 <change_color.part.1+0x4e>
    c314:	48 c0       	rjmp	.+144    	; 0xc3a6 <change_color.part.1+0xde>
    c316:	88 3f       	cpi	r24, 0xF8	; 248
    c318:	91 05       	cpc	r25, r1
    c31a:	81 f1       	breq	.+96     	; 0xc37c <change_color.part.1+0xb4>
    c31c:	81 15       	cp	r24, r1
    c31e:	20 e1       	ldi	r18, 0x10	; 16
    c320:	92 07       	cpc	r25, r18
    c322:	09 f4       	brne	.+2      	; 0xc326 <change_color.part.1+0x5e>
    c324:	5a c0       	rjmp	.+180    	; 0xc3da <change_color.part.1+0x112>
    c326:	84 38       	cpi	r24, 0x84	; 132
    c328:	91 05       	cpc	r25, r1
    c32a:	51 f7       	brne	.-44     	; 0xc300 <change_color.part.1+0x38>
    c32c:	88 ef       	ldi	r24, 0xF8	; 248
    c32e:	9f e1       	ldi	r25, 0x1F	; 31
    c330:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c334:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c338:	08 95       	ret
    c33a:	87 30       	cpi	r24, 0x07	; 7
    c33c:	2f ef       	ldi	r18, 0xFF	; 255
    c33e:	92 07       	cpc	r25, r18
    c340:	b1 f0       	breq	.+44     	; 0xc36e <change_color.part.1+0xa6>
    c342:	8f 3f       	cpi	r24, 0xFF	; 255
    c344:	2f ef       	ldi	r18, 0xFF	; 255
    c346:	92 07       	cpc	r25, r18
    c348:	09 f4       	brne	.+2      	; 0xc34c <change_color.part.1+0x84>
    c34a:	40 c0       	rjmp	.+128    	; 0xc3cc <change_color.part.1+0x104>
    c34c:	8f 3f       	cpi	r24, 0xFF	; 255
    c34e:	90 4e       	sbci	r25, 0xE0	; 224
    c350:	b9 f6       	brne	.-82     	; 0xc300 <change_color.part.1+0x38>
    c352:	84 e8       	ldi	r24, 0x84	; 132
    c354:	90 e0       	ldi	r25, 0x00	; 0
    c356:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c35a:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c35e:	08 95       	ret
    c360:	87 e0       	ldi	r24, 0x07	; 7
    c362:	90 ee       	ldi	r25, 0xE0	; 224
    c364:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c368:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c36c:	08 95       	ret
    c36e:	84 e0       	ldi	r24, 0x04	; 4
    c370:	90 e1       	ldi	r25, 0x10	; 16
    c372:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c376:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c37a:	08 95       	ret
    c37c:	80 e8       	ldi	r24, 0x80	; 128
    c37e:	90 e0       	ldi	r25, 0x00	; 0
    c380:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c384:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c388:	08 95       	ret
    c38a:	84 e0       	ldi	r24, 0x04	; 4
    c38c:	90 e0       	ldi	r25, 0x00	; 0
    c38e:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c392:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c396:	08 95       	ret
    c398:	87 e0       	ldi	r24, 0x07	; 7
    c39a:	9f ef       	ldi	r25, 0xFF	; 255
    c39c:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3a0:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3a4:	08 95       	ret
    c3a6:	00 97       	sbiw	r24, 0x00	; 0
    c3a8:	31 f1       	breq	.+76     	; 0xc3f6 <change_color.part.1+0x12e>
    c3aa:	04 97       	sbiw	r24, 0x04	; 4
    c3ac:	09 f0       	breq	.+2      	; 0xc3b0 <change_color.part.1+0xe8>
    c3ae:	a8 cf       	rjmp	.-176    	; 0xc300 <change_color.part.1+0x38>
    c3b0:	8f ef       	ldi	r24, 0xFF	; 255
    c3b2:	90 ee       	ldi	r25, 0xE0	; 224
    c3b4:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3b8:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3bc:	08 95       	ret
    c3be:	80 e8       	ldi	r24, 0x80	; 128
    c3c0:	90 e1       	ldi	r25, 0x10	; 16
    c3c2:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3c6:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3ca:	08 95       	ret
    c3cc:	88 ef       	ldi	r24, 0xF8	; 248
    c3ce:	90 e0       	ldi	r25, 0x00	; 0
    c3d0:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3d4:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3d8:	08 95       	ret
    c3da:	80 e0       	ldi	r24, 0x00	; 0
    c3dc:	9f e1       	ldi	r25, 0x1F	; 31
    c3de:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3e2:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3e6:	08 95       	ret
    c3e8:	80 e0       	ldi	r24, 0x00	; 0
    c3ea:	90 e1       	ldi	r25, 0x10	; 16
    c3ec:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3f0:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c3f4:	08 95       	ret
    c3f6:	8f ef       	ldi	r24, 0xFF	; 255
    c3f8:	9f ef       	ldi	r25, 0xFF	; 255
    c3fa:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    c3fe:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    c402:	08 95       	ret

0000c404 <clear_stat>:
    c404:	0f 93       	push	r16
    c406:	1f 93       	push	r17
    c408:	00 e0       	ldi	r16, 0x00	; 0
    c40a:	10 e0       	ldi	r17, 0x00	; 0
    c40c:	20 ef       	ldi	r18, 0xF0	; 240
    c40e:	30 e0       	ldi	r19, 0x00	; 0
    c410:	40 e4       	ldi	r20, 0x40	; 64
    c412:	51 e0       	ldi	r21, 0x01	; 1
    c414:	66 ee       	ldi	r22, 0xE6	; 230
    c416:	70 e0       	ldi	r23, 0x00	; 0
    c418:	80 e0       	ldi	r24, 0x00	; 0
    c41a:	90 e0       	ldi	r25, 0x00	; 0
    c41c:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    c420:	1f 91       	pop	r17
    c422:	0f 91       	pop	r16
    c424:	08 95       	ret

0000c426 <invert_line>:
    c426:	af 92       	push	r10
    c428:	bf 92       	push	r11
    c42a:	cf 92       	push	r12
    c42c:	df 92       	push	r13
    c42e:	ef 92       	push	r14
    c430:	ff 92       	push	r15
    c432:	0f 93       	push	r16
    c434:	1f 93       	push	r17
    c436:	cf 93       	push	r28
    c438:	df 93       	push	r29
    c43a:	ec 01       	movw	r28, r24
    c43c:	7b 01       	movw	r14, r22
    c43e:	8a 01       	movw	r16, r20
    c440:	59 01       	movw	r10, r18
    c442:	84 17       	cp	r24, r20
    c444:	95 07       	cpc	r25, r21
    c446:	09 f4       	brne	.+2      	; 0xc44a <invert_line+0x24>
    c448:	cf c0       	rjmp	.+414    	; 0xc5e8 <invert_line+0x1c2>
    c44a:	62 17       	cp	r22, r18
    c44c:	73 07       	cpc	r23, r19
    c44e:	59 f0       	breq	.+22     	; 0xc466 <invert_line+0x40>
    c450:	df 91       	pop	r29
    c452:	cf 91       	pop	r28
    c454:	1f 91       	pop	r17
    c456:	0f 91       	pop	r16
    c458:	ff 90       	pop	r15
    c45a:	ef 90       	pop	r14
    c45c:	df 90       	pop	r13
    c45e:	cf 90       	pop	r12
    c460:	bf 90       	pop	r11
    c462:	af 90       	pop	r10
    c464:	08 95       	ret
    c466:	48 17       	cp	r20, r24
    c468:	59 07       	cpc	r21, r25
    c46a:	d8 f5       	brcc	.+118    	; 0xc4e2 <invert_line+0xbc>
    c46c:	b7 01       	movw	r22, r14
    c46e:	c8 01       	movw	r24, r16
    c470:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c474:	84 30       	cpi	r24, 0x04	; 4
    c476:	20 e1       	ldi	r18, 0x10	; 16
    c478:	92 07       	cpc	r25, r18
    c47a:	09 f4       	brne	.+2      	; 0xc47e <invert_line+0x58>
    c47c:	a1 c0       	rjmp	.+322    	; 0xc5c0 <invert_line+0x19a>
    c47e:	85 30       	cpi	r24, 0x05	; 5
    c480:	20 e1       	ldi	r18, 0x10	; 16
    c482:	92 07       	cpc	r25, r18
    c484:	08 f4       	brcc	.+2      	; 0xc488 <invert_line+0x62>
    c486:	4d c0       	rjmp	.+154    	; 0xc522 <invert_line+0xfc>
    c488:	87 30       	cpi	r24, 0x07	; 7
    c48a:	20 ee       	ldi	r18, 0xE0	; 224
    c48c:	92 07       	cpc	r25, r18
    c48e:	09 f4       	brne	.+2      	; 0xc492 <invert_line+0x6c>
    c490:	a4 c1       	rjmp	.+840    	; 0xc7da <invert_line+0x3b4>
    c492:	08 f0       	brcs	.+2      	; 0xc496 <invert_line+0x70>
    c494:	71 c0       	rjmp	.+226    	; 0xc578 <invert_line+0x152>
    c496:	81 15       	cp	r24, r1
    c498:	2f e1       	ldi	r18, 0x1F	; 31
    c49a:	92 07       	cpc	r25, r18
    c49c:	09 f4       	brne	.+2      	; 0xc4a0 <invert_line+0x7a>
    c49e:	9a c1       	rjmp	.+820    	; 0xc7d4 <invert_line+0x3ae>
    c4a0:	88 3f       	cpi	r24, 0xF8	; 248
    c4a2:	2f e1       	ldi	r18, 0x1F	; 31
    c4a4:	92 07       	cpc	r25, r18
    c4a6:	09 f4       	brne	.+2      	; 0xc4aa <invert_line+0x84>
    c4a8:	33 c1       	rjmp	.+614    	; 0xc710 <invert_line+0x2ea>
    c4aa:	80 38       	cpi	r24, 0x80	; 128
    c4ac:	90 41       	sbci	r25, 0x10	; 16
    c4ae:	09 f0       	breq	.+2      	; 0xc4b2 <invert_line+0x8c>
    c4b0:	72 c0       	rjmp	.+228    	; 0xc596 <invert_line+0x170>
    c4b2:	48 ef       	ldi	r20, 0xF8	; 248
    c4b4:	5f e1       	ldi	r21, 0x1F	; 31
    c4b6:	71 c0       	rjmp	.+226    	; 0xc59a <invert_line+0x174>
    c4b8:	87 30       	cpi	r24, 0x07	; 7
    c4ba:	2f ef       	ldi	r18, 0xFF	; 255
    c4bc:	92 07       	cpc	r25, r18
    c4be:	09 f4       	brne	.+2      	; 0xc4c2 <invert_line+0x9c>
    c4c0:	6e c1       	rjmp	.+732    	; 0xc79e <invert_line+0x378>
    c4c2:	8f 3f       	cpi	r24, 0xFF	; 255
    c4c4:	2f ef       	ldi	r18, 0xFF	; 255
    c4c6:	92 07       	cpc	r25, r18
    c4c8:	09 f0       	breq	.+2      	; 0xc4cc <invert_line+0xa6>
    c4ca:	d5 c0       	rjmp	.+426    	; 0xc676 <invert_line+0x250>
    c4cc:	40 e0       	ldi	r20, 0x00	; 0
    c4ce:	50 e0       	ldi	r21, 0x00	; 0
    c4d0:	b7 01       	movw	r22, r14
    c4d2:	ce 01       	movw	r24, r28
    c4d4:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    c4d8:	21 96       	adiw	r28, 0x01	; 1
    c4da:	0c 17       	cp	r16, r28
    c4dc:	1d 07       	cpc	r17, r29
    c4de:	08 f4       	brcc	.+2      	; 0xc4e2 <invert_line+0xbc>
    c4e0:	b7 cf       	rjmp	.-146    	; 0xc450 <invert_line+0x2a>
    c4e2:	b7 01       	movw	r22, r14
    c4e4:	ce 01       	movw	r24, r28
    c4e6:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c4ea:	84 30       	cpi	r24, 0x04	; 4
    c4ec:	20 e1       	ldi	r18, 0x10	; 16
    c4ee:	92 07       	cpc	r25, r18
    c4f0:	09 f4       	brne	.+2      	; 0xc4f4 <invert_line+0xce>
    c4f2:	6d c1       	rjmp	.+730    	; 0xc7ce <invert_line+0x3a8>
    c4f4:	58 f1       	brcs	.+86     	; 0xc54c <invert_line+0x126>
    c4f6:	87 30       	cpi	r24, 0x07	; 7
    c4f8:	20 ee       	ldi	r18, 0xE0	; 224
    c4fa:	92 07       	cpc	r25, r18
    c4fc:	09 f4       	brne	.+2      	; 0xc500 <invert_line+0xda>
    c4fe:	64 c1       	rjmp	.+712    	; 0xc7c8 <invert_line+0x3a2>
    c500:	d8 f6       	brcc	.-74     	; 0xc4b8 <invert_line+0x92>
    c502:	81 15       	cp	r24, r1
    c504:	2f e1       	ldi	r18, 0x1F	; 31
    c506:	92 07       	cpc	r25, r18
    c508:	09 f4       	brne	.+2      	; 0xc50c <invert_line+0xe6>
    c50a:	5b c1       	rjmp	.+694    	; 0xc7c2 <invert_line+0x39c>
    c50c:	88 3f       	cpi	r24, 0xF8	; 248
    c50e:	2f e1       	ldi	r18, 0x1F	; 31
    c510:	92 07       	cpc	r25, r18
    c512:	09 f4       	brne	.+2      	; 0xc516 <invert_line+0xf0>
    c514:	fa c0       	rjmp	.+500    	; 0xc70a <invert_line+0x2e4>
    c516:	80 38       	cpi	r24, 0x80	; 128
    c518:	90 41       	sbci	r25, 0x10	; 16
    c51a:	c1 f6       	brne	.-80     	; 0xc4cc <invert_line+0xa6>
    c51c:	48 ef       	ldi	r20, 0xF8	; 248
    c51e:	5f e1       	ldi	r21, 0x1F	; 31
    c520:	d7 cf       	rjmp	.-82     	; 0xc4d0 <invert_line+0xaa>
    c522:	80 38       	cpi	r24, 0x80	; 128
    c524:	91 05       	cpc	r25, r1
    c526:	09 f4       	brne	.+2      	; 0xc52a <invert_line+0x104>
    c528:	49 c1       	rjmp	.+658    	; 0xc7bc <invert_line+0x396>
    c52a:	08 f4       	brcc	.+2      	; 0xc52e <invert_line+0x108>
    c52c:	4c c0       	rjmp	.+152    	; 0xc5c6 <invert_line+0x1a0>
    c52e:	88 3f       	cpi	r24, 0xF8	; 248
    c530:	91 05       	cpc	r25, r1
    c532:	09 f4       	brne	.+2      	; 0xc536 <invert_line+0x110>
    c534:	40 c1       	rjmp	.+640    	; 0xc7b6 <invert_line+0x390>
    c536:	81 15       	cp	r24, r1
    c538:	20 e1       	ldi	r18, 0x10	; 16
    c53a:	92 07       	cpc	r25, r18
    c53c:	09 f4       	brne	.+2      	; 0xc540 <invert_line+0x11a>
    c53e:	ee c0       	rjmp	.+476    	; 0xc71c <invert_line+0x2f6>
    c540:	84 38       	cpi	r24, 0x84	; 132
    c542:	91 05       	cpc	r25, r1
    c544:	41 f5       	brne	.+80     	; 0xc596 <invert_line+0x170>
    c546:	4f ef       	ldi	r20, 0xFF	; 255
    c548:	50 ee       	ldi	r21, 0xE0	; 224
    c54a:	27 c0       	rjmp	.+78     	; 0xc59a <invert_line+0x174>
    c54c:	80 38       	cpi	r24, 0x80	; 128
    c54e:	91 05       	cpc	r25, r1
    c550:	09 f4       	brne	.+2      	; 0xc554 <invert_line+0x12e>
    c552:	2b c1       	rjmp	.+598    	; 0xc7aa <invert_line+0x384>
    c554:	08 f4       	brcc	.+2      	; 0xc558 <invert_line+0x132>
    c556:	3f c0       	rjmp	.+126    	; 0xc5d6 <invert_line+0x1b0>
    c558:	88 3f       	cpi	r24, 0xF8	; 248
    c55a:	91 05       	cpc	r25, r1
    c55c:	09 f4       	brne	.+2      	; 0xc560 <invert_line+0x13a>
    c55e:	22 c1       	rjmp	.+580    	; 0xc7a4 <invert_line+0x37e>
    c560:	81 15       	cp	r24, r1
    c562:	20 e1       	ldi	r18, 0x10	; 16
    c564:	92 07       	cpc	r25, r18
    c566:	09 f4       	brne	.+2      	; 0xc56a <invert_line+0x144>
    c568:	d6 c0       	rjmp	.+428    	; 0xc716 <invert_line+0x2f0>
    c56a:	84 38       	cpi	r24, 0x84	; 132
    c56c:	91 05       	cpc	r25, r1
    c56e:	09 f0       	breq	.+2      	; 0xc572 <invert_line+0x14c>
    c570:	ad cf       	rjmp	.-166    	; 0xc4cc <invert_line+0xa6>
    c572:	4f ef       	ldi	r20, 0xFF	; 255
    c574:	50 ee       	ldi	r21, 0xE0	; 224
    c576:	ac cf       	rjmp	.-168    	; 0xc4d0 <invert_line+0xaa>
    c578:	87 30       	cpi	r24, 0x07	; 7
    c57a:	2f ef       	ldi	r18, 0xFF	; 255
    c57c:	92 07       	cpc	r25, r18
    c57e:	09 f4       	brne	.+2      	; 0xc582 <invert_line+0x15c>
    c580:	17 c1       	rjmp	.+558    	; 0xc7b0 <invert_line+0x38a>
    c582:	8f 3f       	cpi	r24, 0xFF	; 255
    c584:	2f ef       	ldi	r18, 0xFF	; 255
    c586:	92 07       	cpc	r25, r18
    c588:	31 f0       	breq	.+12     	; 0xc596 <invert_line+0x170>
    c58a:	8f 3f       	cpi	r24, 0xFF	; 255
    c58c:	90 4e       	sbci	r25, 0xE0	; 224
    c58e:	19 f4       	brne	.+6      	; 0xc596 <invert_line+0x170>
    c590:	44 e8       	ldi	r20, 0x84	; 132
    c592:	50 e0       	ldi	r21, 0x00	; 0
    c594:	02 c0       	rjmp	.+4      	; 0xc59a <invert_line+0x174>
    c596:	40 e0       	ldi	r20, 0x00	; 0
    c598:	50 e0       	ldi	r21, 0x00	; 0
    c59a:	b7 01       	movw	r22, r14
    c59c:	c8 01       	movw	r24, r16
    c59e:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    c5a2:	0f 5f       	subi	r16, 0xFF	; 255
    c5a4:	1f 4f       	sbci	r17, 0xFF	; 255
    c5a6:	c0 17       	cp	r28, r16
    c5a8:	d1 07       	cpc	r29, r17
    c5aa:	08 f4       	brcc	.+2      	; 0xc5ae <invert_line+0x188>
    c5ac:	51 cf       	rjmp	.-350    	; 0xc450 <invert_line+0x2a>
    c5ae:	b7 01       	movw	r22, r14
    c5b0:	c8 01       	movw	r24, r16
    c5b2:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c5b6:	84 30       	cpi	r24, 0x04	; 4
    c5b8:	20 e1       	ldi	r18, 0x10	; 16
    c5ba:	92 07       	cpc	r25, r18
    c5bc:	09 f0       	breq	.+2      	; 0xc5c0 <invert_line+0x19a>
    c5be:	5f cf       	rjmp	.-322    	; 0xc47e <invert_line+0x58>
    c5c0:	47 e0       	ldi	r20, 0x07	; 7
    c5c2:	5f ef       	ldi	r21, 0xFF	; 255
    c5c4:	ea cf       	rjmp	.-44     	; 0xc59a <invert_line+0x174>
    c5c6:	00 97       	sbiw	r24, 0x00	; 0
    c5c8:	09 f4       	brne	.+2      	; 0xc5cc <invert_line+0x1a6>
    c5ca:	ae c0       	rjmp	.+348    	; 0xc728 <invert_line+0x302>
    c5cc:	04 97       	sbiw	r24, 0x04	; 4
    c5ce:	19 f7       	brne	.-58     	; 0xc596 <invert_line+0x170>
    c5d0:	47 e0       	ldi	r20, 0x07	; 7
    c5d2:	50 ee       	ldi	r21, 0xE0	; 224
    c5d4:	e2 cf       	rjmp	.-60     	; 0xc59a <invert_line+0x174>
    c5d6:	00 97       	sbiw	r24, 0x00	; 0
    c5d8:	09 f4       	brne	.+2      	; 0xc5dc <invert_line+0x1b6>
    c5da:	a3 c0       	rjmp	.+326    	; 0xc722 <invert_line+0x2fc>
    c5dc:	04 97       	sbiw	r24, 0x04	; 4
    c5de:	09 f0       	breq	.+2      	; 0xc5e2 <invert_line+0x1bc>
    c5e0:	75 cf       	rjmp	.-278    	; 0xc4cc <invert_line+0xa6>
    c5e2:	47 e0       	ldi	r20, 0x07	; 7
    c5e4:	50 ee       	ldi	r21, 0xE0	; 224
    c5e6:	74 cf       	rjmp	.-280    	; 0xc4d0 <invert_line+0xaa>
    c5e8:	26 17       	cp	r18, r22
    c5ea:	37 07       	cpc	r19, r23
    c5ec:	08 f4       	brcc	.+2      	; 0xc5f0 <invert_line+0x1ca>
    c5ee:	4a c0       	rjmp	.+148    	; 0xc684 <invert_line+0x25e>
    c5f0:	6b 01       	movw	r12, r22
    c5f2:	22 c0       	rjmp	.+68     	; 0xc638 <invert_line+0x212>
    c5f4:	87 30       	cpi	r24, 0x07	; 7
    c5f6:	20 ee       	ldi	r18, 0xE0	; 224
    c5f8:	92 07       	cpc	r25, r18
    c5fa:	09 f4       	brne	.+2      	; 0xc5fe <invert_line+0x1d8>
    c5fc:	1b c1       	rjmp	.+566    	; 0xc834 <invert_line+0x40e>
    c5fe:	08 f0       	brcs	.+2      	; 0xc602 <invert_line+0x1dc>
    c600:	a7 c0       	rjmp	.+334    	; 0xc750 <invert_line+0x32a>
    c602:	81 15       	cp	r24, r1
    c604:	2f e1       	ldi	r18, 0x1F	; 31
    c606:	92 07       	cpc	r25, r18
    c608:	09 f4       	brne	.+2      	; 0xc60c <invert_line+0x1e6>
    c60a:	11 c1       	rjmp	.+546    	; 0xc82e <invert_line+0x408>
    c60c:	88 3f       	cpi	r24, 0xF8	; 248
    c60e:	2f e1       	ldi	r18, 0x1F	; 31
    c610:	92 07       	cpc	r25, r18
    c612:	09 f4       	brne	.+2      	; 0xc616 <invert_line+0x1f0>
    c614:	09 c1       	rjmp	.+530    	; 0xc828 <invert_line+0x402>
    c616:	80 38       	cpi	r24, 0x80	; 128
    c618:	90 41       	sbci	r25, 0x10	; 16
    c61a:	09 f4       	brne	.+2      	; 0xc61e <invert_line+0x1f8>
    c61c:	f0 c0       	rjmp	.+480    	; 0xc7fe <invert_line+0x3d8>
    c61e:	40 e0       	ldi	r20, 0x00	; 0
    c620:	50 e0       	ldi	r21, 0x00	; 0
    c622:	b6 01       	movw	r22, r12
    c624:	ce 01       	movw	r24, r28
    c626:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    c62a:	8f ef       	ldi	r24, 0xFF	; 255
    c62c:	c8 1a       	sub	r12, r24
    c62e:	d8 0a       	sbc	r13, r24
    c630:	ac 14       	cp	r10, r12
    c632:	bd 04       	cpc	r11, r13
    c634:	08 f4       	brcc	.+2      	; 0xc638 <invert_line+0x212>
    c636:	9d c0       	rjmp	.+314    	; 0xc772 <invert_line+0x34c>
    c638:	b6 01       	movw	r22, r12
    c63a:	ce 01       	movw	r24, r28
    c63c:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c640:	84 30       	cpi	r24, 0x04	; 4
    c642:	20 e1       	ldi	r18, 0x10	; 16
    c644:	92 07       	cpc	r25, r18
    c646:	09 f4       	brne	.+2      	; 0xc64a <invert_line+0x224>
    c648:	e3 c0       	rjmp	.+454    	; 0xc810 <invert_line+0x3ea>
    c64a:	a0 f6       	brcc	.-88     	; 0xc5f4 <invert_line+0x1ce>
    c64c:	80 38       	cpi	r24, 0x80	; 128
    c64e:	91 05       	cpc	r25, r1
    c650:	09 f4       	brne	.+2      	; 0xc654 <invert_line+0x22e>
    c652:	c6 c0       	rjmp	.+396    	; 0xc7e0 <invert_line+0x3ba>
    c654:	08 f4       	brcc	.+2      	; 0xc658 <invert_line+0x232>
    c656:	92 c0       	rjmp	.+292    	; 0xc77c <invert_line+0x356>
    c658:	88 3f       	cpi	r24, 0xF8	; 248
    c65a:	91 05       	cpc	r25, r1
    c65c:	09 f4       	brne	.+2      	; 0xc660 <invert_line+0x23a>
    c65e:	c9 c0       	rjmp	.+402    	; 0xc7f2 <invert_line+0x3cc>
    c660:	81 15       	cp	r24, r1
    c662:	20 e1       	ldi	r18, 0x10	; 16
    c664:	92 07       	cpc	r25, r18
    c666:	09 f4       	brne	.+2      	; 0xc66a <invert_line+0x244>
    c668:	c1 c0       	rjmp	.+386    	; 0xc7ec <invert_line+0x3c6>
    c66a:	84 38       	cpi	r24, 0x84	; 132
    c66c:	91 05       	cpc	r25, r1
    c66e:	b9 f6       	brne	.-82     	; 0xc61e <invert_line+0x1f8>
    c670:	4f ef       	ldi	r20, 0xFF	; 255
    c672:	50 ee       	ldi	r21, 0xE0	; 224
    c674:	d6 cf       	rjmp	.-84     	; 0xc622 <invert_line+0x1fc>
    c676:	8f 3f       	cpi	r24, 0xFF	; 255
    c678:	90 4e       	sbci	r25, 0xE0	; 224
    c67a:	09 f0       	breq	.+2      	; 0xc67e <invert_line+0x258>
    c67c:	27 cf       	rjmp	.-434    	; 0xc4cc <invert_line+0xa6>
    c67e:	44 e8       	ldi	r20, 0x84	; 132
    c680:	50 e0       	ldi	r21, 0x00	; 0
    c682:	26 cf       	rjmp	.-436    	; 0xc4d0 <invert_line+0xaa>
    c684:	69 01       	movw	r12, r18
    c686:	22 c0       	rjmp	.+68     	; 0xc6cc <invert_line+0x2a6>
    c688:	87 30       	cpi	r24, 0x07	; 7
    c68a:	20 ee       	ldi	r18, 0xE0	; 224
    c68c:	92 07       	cpc	r25, r18
    c68e:	09 f4       	brne	.+2      	; 0xc692 <invert_line+0x26c>
    c690:	c2 c0       	rjmp	.+388    	; 0xc816 <invert_line+0x3f0>
    c692:	08 f0       	brcs	.+2      	; 0xc696 <invert_line+0x270>
    c694:	4c c0       	rjmp	.+152    	; 0xc72e <invert_line+0x308>
    c696:	81 15       	cp	r24, r1
    c698:	2f e1       	ldi	r18, 0x1F	; 31
    c69a:	92 07       	cpc	r25, r18
    c69c:	09 f4       	brne	.+2      	; 0xc6a0 <invert_line+0x27a>
    c69e:	c1 c0       	rjmp	.+386    	; 0xc822 <invert_line+0x3fc>
    c6a0:	88 3f       	cpi	r24, 0xF8	; 248
    c6a2:	2f e1       	ldi	r18, 0x1F	; 31
    c6a4:	92 07       	cpc	r25, r18
    c6a6:	09 f4       	brne	.+2      	; 0xc6aa <invert_line+0x284>
    c6a8:	b9 c0       	rjmp	.+370    	; 0xc81c <invert_line+0x3f6>
    c6aa:	80 38       	cpi	r24, 0x80	; 128
    c6ac:	90 41       	sbci	r25, 0x10	; 16
    c6ae:	09 f4       	brne	.+2      	; 0xc6b2 <invert_line+0x28c>
    c6b0:	a9 c0       	rjmp	.+338    	; 0xc804 <invert_line+0x3de>
    c6b2:	40 e0       	ldi	r20, 0x00	; 0
    c6b4:	50 e0       	ldi	r21, 0x00	; 0
    c6b6:	b6 01       	movw	r22, r12
    c6b8:	ce 01       	movw	r24, r28
    c6ba:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    c6be:	8f ef       	ldi	r24, 0xFF	; 255
    c6c0:	c8 1a       	sub	r12, r24
    c6c2:	d8 0a       	sbc	r13, r24
    c6c4:	ec 14       	cp	r14, r12
    c6c6:	fd 04       	cpc	r15, r13
    c6c8:	08 f4       	brcc	.+2      	; 0xc6cc <invert_line+0x2a6>
    c6ca:	53 c0       	rjmp	.+166    	; 0xc772 <invert_line+0x34c>
    c6cc:	b6 01       	movw	r22, r12
    c6ce:	ce 01       	movw	r24, r28
    c6d0:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c6d4:	84 30       	cpi	r24, 0x04	; 4
    c6d6:	20 e1       	ldi	r18, 0x10	; 16
    c6d8:	92 07       	cpc	r25, r18
    c6da:	09 f4       	brne	.+2      	; 0xc6de <invert_line+0x2b8>
    c6dc:	8d c0       	rjmp	.+282    	; 0xc7f8 <invert_line+0x3d2>
    c6de:	a0 f6       	brcc	.-88     	; 0xc688 <invert_line+0x262>
    c6e0:	80 38       	cpi	r24, 0x80	; 128
    c6e2:	91 05       	cpc	r25, r1
    c6e4:	09 f4       	brne	.+2      	; 0xc6e8 <invert_line+0x2c2>
    c6e6:	b2 c0       	rjmp	.+356    	; 0xc84c <invert_line+0x426>
    c6e8:	08 f4       	brcc	.+2      	; 0xc6ec <invert_line+0x2c6>
    c6ea:	51 c0       	rjmp	.+162    	; 0xc78e <invert_line+0x368>
    c6ec:	88 3f       	cpi	r24, 0xF8	; 248
    c6ee:	91 05       	cpc	r25, r1
    c6f0:	09 f4       	brne	.+2      	; 0xc6f4 <invert_line+0x2ce>
    c6f2:	a9 c0       	rjmp	.+338    	; 0xc846 <invert_line+0x420>
    c6f4:	81 15       	cp	r24, r1
    c6f6:	20 e1       	ldi	r18, 0x10	; 16
    c6f8:	92 07       	cpc	r25, r18
    c6fa:	09 f4       	brne	.+2      	; 0xc6fe <invert_line+0x2d8>
    c6fc:	a1 c0       	rjmp	.+322    	; 0xc840 <invert_line+0x41a>
    c6fe:	84 38       	cpi	r24, 0x84	; 132
    c700:	91 05       	cpc	r25, r1
    c702:	b9 f6       	brne	.-82     	; 0xc6b2 <invert_line+0x28c>
    c704:	4f ef       	ldi	r20, 0xFF	; 255
    c706:	50 ee       	ldi	r21, 0xE0	; 224
    c708:	d6 cf       	rjmp	.-84     	; 0xc6b6 <invert_line+0x290>
    c70a:	40 e8       	ldi	r20, 0x80	; 128
    c70c:	50 e1       	ldi	r21, 0x10	; 16
    c70e:	e0 ce       	rjmp	.-576    	; 0xc4d0 <invert_line+0xaa>
    c710:	40 e8       	ldi	r20, 0x80	; 128
    c712:	50 e1       	ldi	r21, 0x10	; 16
    c714:	42 cf       	rjmp	.-380    	; 0xc59a <invert_line+0x174>
    c716:	40 e0       	ldi	r20, 0x00	; 0
    c718:	5f e1       	ldi	r21, 0x1F	; 31
    c71a:	da ce       	rjmp	.-588    	; 0xc4d0 <invert_line+0xaa>
    c71c:	40 e0       	ldi	r20, 0x00	; 0
    c71e:	5f e1       	ldi	r21, 0x1F	; 31
    c720:	3c cf       	rjmp	.-392    	; 0xc59a <invert_line+0x174>
    c722:	4f ef       	ldi	r20, 0xFF	; 255
    c724:	5f ef       	ldi	r21, 0xFF	; 255
    c726:	d4 ce       	rjmp	.-600    	; 0xc4d0 <invert_line+0xaa>
    c728:	4f ef       	ldi	r20, 0xFF	; 255
    c72a:	5f ef       	ldi	r21, 0xFF	; 255
    c72c:	36 cf       	rjmp	.-404    	; 0xc59a <invert_line+0x174>
    c72e:	87 30       	cpi	r24, 0x07	; 7
    c730:	2f ef       	ldi	r18, 0xFF	; 255
    c732:	92 07       	cpc	r25, r18
    c734:	09 f4       	brne	.+2      	; 0xc738 <invert_line+0x312>
    c736:	81 c0       	rjmp	.+258    	; 0xc83a <invert_line+0x414>
    c738:	8f 3f       	cpi	r24, 0xFF	; 255
    c73a:	2f ef       	ldi	r18, 0xFF	; 255
    c73c:	92 07       	cpc	r25, r18
    c73e:	09 f4       	brne	.+2      	; 0xc742 <invert_line+0x31c>
    c740:	b8 cf       	rjmp	.-144    	; 0xc6b2 <invert_line+0x28c>
    c742:	8f 3f       	cpi	r24, 0xFF	; 255
    c744:	90 4e       	sbci	r25, 0xE0	; 224
    c746:	09 f0       	breq	.+2      	; 0xc74a <invert_line+0x324>
    c748:	b4 cf       	rjmp	.-152    	; 0xc6b2 <invert_line+0x28c>
    c74a:	44 e8       	ldi	r20, 0x84	; 132
    c74c:	50 e0       	ldi	r21, 0x00	; 0
    c74e:	b3 cf       	rjmp	.-154    	; 0xc6b6 <invert_line+0x290>
    c750:	87 30       	cpi	r24, 0x07	; 7
    c752:	2f ef       	ldi	r18, 0xFF	; 255
    c754:	92 07       	cpc	r25, r18
    c756:	09 f4       	brne	.+2      	; 0xc75a <invert_line+0x334>
    c758:	58 c0       	rjmp	.+176    	; 0xc80a <invert_line+0x3e4>
    c75a:	8f 3f       	cpi	r24, 0xFF	; 255
    c75c:	2f ef       	ldi	r18, 0xFF	; 255
    c75e:	92 07       	cpc	r25, r18
    c760:	09 f4       	brne	.+2      	; 0xc764 <invert_line+0x33e>
    c762:	5d cf       	rjmp	.-326    	; 0xc61e <invert_line+0x1f8>
    c764:	8f 3f       	cpi	r24, 0xFF	; 255
    c766:	90 4e       	sbci	r25, 0xE0	; 224
    c768:	09 f0       	breq	.+2      	; 0xc76c <invert_line+0x346>
    c76a:	59 cf       	rjmp	.-334    	; 0xc61e <invert_line+0x1f8>
    c76c:	44 e8       	ldi	r20, 0x84	; 132
    c76e:	50 e0       	ldi	r21, 0x00	; 0
    c770:	58 cf       	rjmp	.-336    	; 0xc622 <invert_line+0x1fc>
    c772:	ea 14       	cp	r14, r10
    c774:	fb 04       	cpc	r15, r11
    c776:	09 f0       	breq	.+2      	; 0xc77a <invert_line+0x354>
    c778:	6b ce       	rjmp	.-810    	; 0xc450 <invert_line+0x2a>
    c77a:	b3 ce       	rjmp	.-666    	; 0xc4e2 <invert_line+0xbc>
    c77c:	00 97       	sbiw	r24, 0x00	; 0
    c77e:	09 f4       	brne	.+2      	; 0xc782 <invert_line+0x35c>
    c780:	68 c0       	rjmp	.+208    	; 0xc852 <invert_line+0x42c>
    c782:	04 97       	sbiw	r24, 0x04	; 4
    c784:	09 f0       	breq	.+2      	; 0xc788 <invert_line+0x362>
    c786:	4b cf       	rjmp	.-362    	; 0xc61e <invert_line+0x1f8>
    c788:	47 e0       	ldi	r20, 0x07	; 7
    c78a:	50 ee       	ldi	r21, 0xE0	; 224
    c78c:	4a cf       	rjmp	.-364    	; 0xc622 <invert_line+0x1fc>
    c78e:	00 97       	sbiw	r24, 0x00	; 0
    c790:	51 f1       	breq	.+84     	; 0xc7e6 <invert_line+0x3c0>
    c792:	04 97       	sbiw	r24, 0x04	; 4
    c794:	09 f0       	breq	.+2      	; 0xc798 <invert_line+0x372>
    c796:	8d cf       	rjmp	.-230    	; 0xc6b2 <invert_line+0x28c>
    c798:	47 e0       	ldi	r20, 0x07	; 7
    c79a:	50 ee       	ldi	r21, 0xE0	; 224
    c79c:	8c cf       	rjmp	.-232    	; 0xc6b6 <invert_line+0x290>
    c79e:	44 e0       	ldi	r20, 0x04	; 4
    c7a0:	50 e1       	ldi	r21, 0x10	; 16
    c7a2:	96 ce       	rjmp	.-724    	; 0xc4d0 <invert_line+0xaa>
    c7a4:	40 e8       	ldi	r20, 0x80	; 128
    c7a6:	50 e0       	ldi	r21, 0x00	; 0
    c7a8:	93 ce       	rjmp	.-730    	; 0xc4d0 <invert_line+0xaa>
    c7aa:	48 ef       	ldi	r20, 0xF8	; 248
    c7ac:	50 e0       	ldi	r21, 0x00	; 0
    c7ae:	90 ce       	rjmp	.-736    	; 0xc4d0 <invert_line+0xaa>
    c7b0:	44 e0       	ldi	r20, 0x04	; 4
    c7b2:	50 e1       	ldi	r21, 0x10	; 16
    c7b4:	f2 ce       	rjmp	.-540    	; 0xc59a <invert_line+0x174>
    c7b6:	40 e8       	ldi	r20, 0x80	; 128
    c7b8:	50 e0       	ldi	r21, 0x00	; 0
    c7ba:	ef ce       	rjmp	.-546    	; 0xc59a <invert_line+0x174>
    c7bc:	48 ef       	ldi	r20, 0xF8	; 248
    c7be:	50 e0       	ldi	r21, 0x00	; 0
    c7c0:	ec ce       	rjmp	.-552    	; 0xc59a <invert_line+0x174>
    c7c2:	40 e0       	ldi	r20, 0x00	; 0
    c7c4:	50 e1       	ldi	r21, 0x10	; 16
    c7c6:	84 ce       	rjmp	.-760    	; 0xc4d0 <invert_line+0xaa>
    c7c8:	44 e0       	ldi	r20, 0x04	; 4
    c7ca:	50 e0       	ldi	r21, 0x00	; 0
    c7cc:	81 ce       	rjmp	.-766    	; 0xc4d0 <invert_line+0xaa>
    c7ce:	47 e0       	ldi	r20, 0x07	; 7
    c7d0:	5f ef       	ldi	r21, 0xFF	; 255
    c7d2:	7e ce       	rjmp	.-772    	; 0xc4d0 <invert_line+0xaa>
    c7d4:	40 e0       	ldi	r20, 0x00	; 0
    c7d6:	50 e1       	ldi	r21, 0x10	; 16
    c7d8:	e0 ce       	rjmp	.-576    	; 0xc59a <invert_line+0x174>
    c7da:	44 e0       	ldi	r20, 0x04	; 4
    c7dc:	50 e0       	ldi	r21, 0x00	; 0
    c7de:	dd ce       	rjmp	.-582    	; 0xc59a <invert_line+0x174>
    c7e0:	48 ef       	ldi	r20, 0xF8	; 248
    c7e2:	50 e0       	ldi	r21, 0x00	; 0
    c7e4:	1e cf       	rjmp	.-452    	; 0xc622 <invert_line+0x1fc>
    c7e6:	4f ef       	ldi	r20, 0xFF	; 255
    c7e8:	5f ef       	ldi	r21, 0xFF	; 255
    c7ea:	65 cf       	rjmp	.-310    	; 0xc6b6 <invert_line+0x290>
    c7ec:	40 e0       	ldi	r20, 0x00	; 0
    c7ee:	5f e1       	ldi	r21, 0x1F	; 31
    c7f0:	18 cf       	rjmp	.-464    	; 0xc622 <invert_line+0x1fc>
    c7f2:	40 e8       	ldi	r20, 0x80	; 128
    c7f4:	50 e0       	ldi	r21, 0x00	; 0
    c7f6:	15 cf       	rjmp	.-470    	; 0xc622 <invert_line+0x1fc>
    c7f8:	47 e0       	ldi	r20, 0x07	; 7
    c7fa:	5f ef       	ldi	r21, 0xFF	; 255
    c7fc:	5c cf       	rjmp	.-328    	; 0xc6b6 <invert_line+0x290>
    c7fe:	48 ef       	ldi	r20, 0xF8	; 248
    c800:	5f e1       	ldi	r21, 0x1F	; 31
    c802:	0f cf       	rjmp	.-482    	; 0xc622 <invert_line+0x1fc>
    c804:	48 ef       	ldi	r20, 0xF8	; 248
    c806:	5f e1       	ldi	r21, 0x1F	; 31
    c808:	56 cf       	rjmp	.-340    	; 0xc6b6 <invert_line+0x290>
    c80a:	44 e0       	ldi	r20, 0x04	; 4
    c80c:	50 e1       	ldi	r21, 0x10	; 16
    c80e:	09 cf       	rjmp	.-494    	; 0xc622 <invert_line+0x1fc>
    c810:	47 e0       	ldi	r20, 0x07	; 7
    c812:	5f ef       	ldi	r21, 0xFF	; 255
    c814:	06 cf       	rjmp	.-500    	; 0xc622 <invert_line+0x1fc>
    c816:	44 e0       	ldi	r20, 0x04	; 4
    c818:	50 e0       	ldi	r21, 0x00	; 0
    c81a:	4d cf       	rjmp	.-358    	; 0xc6b6 <invert_line+0x290>
    c81c:	40 e8       	ldi	r20, 0x80	; 128
    c81e:	50 e1       	ldi	r21, 0x10	; 16
    c820:	4a cf       	rjmp	.-364    	; 0xc6b6 <invert_line+0x290>
    c822:	40 e0       	ldi	r20, 0x00	; 0
    c824:	50 e1       	ldi	r21, 0x10	; 16
    c826:	47 cf       	rjmp	.-370    	; 0xc6b6 <invert_line+0x290>
    c828:	40 e8       	ldi	r20, 0x80	; 128
    c82a:	50 e1       	ldi	r21, 0x10	; 16
    c82c:	fa ce       	rjmp	.-524    	; 0xc622 <invert_line+0x1fc>
    c82e:	40 e0       	ldi	r20, 0x00	; 0
    c830:	50 e1       	ldi	r21, 0x10	; 16
    c832:	f7 ce       	rjmp	.-530    	; 0xc622 <invert_line+0x1fc>
    c834:	44 e0       	ldi	r20, 0x04	; 4
    c836:	50 e0       	ldi	r21, 0x00	; 0
    c838:	f4 ce       	rjmp	.-536    	; 0xc622 <invert_line+0x1fc>
    c83a:	44 e0       	ldi	r20, 0x04	; 4
    c83c:	50 e1       	ldi	r21, 0x10	; 16
    c83e:	3b cf       	rjmp	.-394    	; 0xc6b6 <invert_line+0x290>
    c840:	40 e0       	ldi	r20, 0x00	; 0
    c842:	5f e1       	ldi	r21, 0x1F	; 31
    c844:	38 cf       	rjmp	.-400    	; 0xc6b6 <invert_line+0x290>
    c846:	40 e8       	ldi	r20, 0x80	; 128
    c848:	50 e0       	ldi	r21, 0x00	; 0
    c84a:	35 cf       	rjmp	.-406    	; 0xc6b6 <invert_line+0x290>
    c84c:	48 ef       	ldi	r20, 0xF8	; 248
    c84e:	50 e0       	ldi	r21, 0x00	; 0
    c850:	32 cf       	rjmp	.-412    	; 0xc6b6 <invert_line+0x290>
    c852:	4f ef       	ldi	r20, 0xFF	; 255
    c854:	5f ef       	ldi	r21, 0xFF	; 255
    c856:	e5 ce       	rjmp	.-566    	; 0xc622 <invert_line+0x1fc>

0000c858 <draw_cursor>:
    c858:	af 92       	push	r10
    c85a:	bf 92       	push	r11
    c85c:	cf 92       	push	r12
    c85e:	df 92       	push	r13
    c860:	ef 92       	push	r14
    c862:	ff 92       	push	r15
    c864:	0f 93       	push	r16
    c866:	1f 93       	push	r17
    c868:	cf 93       	push	r28
    c86a:	df 93       	push	r29
    c86c:	8c 01       	movw	r16, r24
    c86e:	eb 01       	movw	r28, r22
    c870:	05 97       	sbiw	r24, 0x05	; 5
    c872:	83 30       	cpi	r24, 0x03	; 3
    c874:	91 05       	cpc	r25, r1
    c876:	10 f4       	brcc	.+4      	; 0xc87c <draw_cursor+0x24>
    c878:	83 e0       	ldi	r24, 0x03	; 3
    c87a:	90 e0       	ldi	r25, 0x00	; 0
    c87c:	7e 01       	movw	r14, r28
    c87e:	25 e0       	ldi	r18, 0x05	; 5
    c880:	e2 1a       	sub	r14, r18
    c882:	f1 08       	sbc	r15, r1
    c884:	23 e0       	ldi	r18, 0x03	; 3
    c886:	e2 16       	cp	r14, r18
    c888:	f1 04       	cpc	r15, r1
    c88a:	18 f4       	brcc	.+6      	; 0xc892 <draw_cursor+0x3a>
    c88c:	43 e0       	ldi	r20, 0x03	; 3
    c88e:	e4 2e       	mov	r14, r20
    c890:	f1 2c       	mov	r15, r1
    c892:	68 01       	movw	r12, r16
    c894:	25 e0       	ldi	r18, 0x05	; 5
    c896:	c2 0e       	add	r12, r18
    c898:	d1 1c       	adc	r13, r1
    c89a:	2c e3       	ldi	r18, 0x3C	; 60
    c89c:	c2 16       	cp	r12, r18
    c89e:	21 e0       	ldi	r18, 0x01	; 1
    c8a0:	d2 06       	cpc	r13, r18
    c8a2:	20 f0       	brcs	.+8      	; 0xc8ac <draw_cursor+0x54>
    c8a4:	3c e3       	ldi	r19, 0x3C	; 60
    c8a6:	c3 2e       	mov	r12, r19
    c8a8:	dd 24       	eor	r13, r13
    c8aa:	d3 94       	inc	r13
    c8ac:	5e 01       	movw	r10, r28
    c8ae:	25 e0       	ldi	r18, 0x05	; 5
    c8b0:	a2 0e       	add	r10, r18
    c8b2:	b1 1c       	adc	r11, r1
    c8b4:	2c ed       	ldi	r18, 0xDC	; 220
    c8b6:	a2 16       	cp	r10, r18
    c8b8:	b1 04       	cpc	r11, r1
    c8ba:	18 f0       	brcs	.+6      	; 0xc8c2 <draw_cursor+0x6a>
    c8bc:	2c ed       	ldi	r18, 0xDC	; 220
    c8be:	a2 2e       	mov	r10, r18
    c8c0:	b1 2c       	mov	r11, r1
    c8c2:	9e 01       	movw	r18, r28
    c8c4:	a8 01       	movw	r20, r16
    c8c6:	43 50       	subi	r20, 0x03	; 3
    c8c8:	51 09       	sbc	r21, r1
    c8ca:	be 01       	movw	r22, r28
    c8cc:	ac dd       	rcall	.-1192   	; 0xc426 <invert_line>
    c8ce:	9e 01       	movw	r18, r28
    c8d0:	a6 01       	movw	r20, r12
    c8d2:	be 01       	movw	r22, r28
    c8d4:	c8 01       	movw	r24, r16
    c8d6:	03 96       	adiw	r24, 0x03	; 3
    c8d8:	a6 dd       	rcall	.-1204   	; 0xc426 <invert_line>
    c8da:	9e 01       	movw	r18, r28
    c8dc:	23 50       	subi	r18, 0x03	; 3
    c8de:	31 09       	sbc	r19, r1
    c8e0:	a8 01       	movw	r20, r16
    c8e2:	b7 01       	movw	r22, r14
    c8e4:	c8 01       	movw	r24, r16
    c8e6:	9f dd       	rcall	.-1218   	; 0xc426 <invert_line>
    c8e8:	95 01       	movw	r18, r10
    c8ea:	a8 01       	movw	r20, r16
    c8ec:	be 01       	movw	r22, r28
    c8ee:	6d 5f       	subi	r22, 0xFD	; 253
    c8f0:	7f 4f       	sbci	r23, 0xFF	; 255
    c8f2:	c8 01       	movw	r24, r16
    c8f4:	98 dd       	rcall	.-1232   	; 0xc426 <invert_line>
    c8f6:	be 01       	movw	r22, r28
    c8f8:	c8 01       	movw	r24, r16
    c8fa:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    c8fe:	84 30       	cpi	r24, 0x04	; 4
    c900:	20 e1       	ldi	r18, 0x10	; 16
    c902:	92 07       	cpc	r25, r18
    c904:	09 f4       	brne	.+2      	; 0xc908 <draw_cursor+0xb0>
    c906:	69 c0       	rjmp	.+210    	; 0xc9da <draw_cursor+0x182>
    c908:	b0 f0       	brcs	.+44     	; 0xc936 <draw_cursor+0xde>
    c90a:	87 30       	cpi	r24, 0x07	; 7
    c90c:	20 ee       	ldi	r18, 0xE0	; 224
    c90e:	92 07       	cpc	r25, r18
    c910:	09 f4       	brne	.+2      	; 0xc914 <draw_cursor+0xbc>
    c912:	52 c0       	rjmp	.+164    	; 0xc9b8 <draw_cursor+0x160>
    c914:	20 f5       	brcc	.+72     	; 0xc95e <draw_cursor+0x106>
    c916:	81 15       	cp	r24, r1
    c918:	2f e1       	ldi	r18, 0x1F	; 31
    c91a:	92 07       	cpc	r25, r18
    c91c:	71 f1       	breq	.+92     	; 0xc97a <draw_cursor+0x122>
    c91e:	88 3f       	cpi	r24, 0xF8	; 248
    c920:	2f e1       	ldi	r18, 0x1F	; 31
    c922:	92 07       	cpc	r25, r18
    c924:	09 f4       	brne	.+2      	; 0xc928 <draw_cursor+0xd0>
    c926:	56 c0       	rjmp	.+172    	; 0xc9d4 <draw_cursor+0x17c>
    c928:	80 38       	cpi	r24, 0x80	; 128
    c92a:	90 41       	sbci	r25, 0x10	; 16
    c92c:	09 f4       	brne	.+2      	; 0xc930 <draw_cursor+0xd8>
    c92e:	47 c0       	rjmp	.+142    	; 0xc9be <draw_cursor+0x166>
    c930:	40 e0       	ldi	r20, 0x00	; 0
    c932:	50 e0       	ldi	r21, 0x00	; 0
    c934:	24 c0       	rjmp	.+72     	; 0xc97e <draw_cursor+0x126>
    c936:	80 38       	cpi	r24, 0x80	; 128
    c938:	91 05       	cpc	r25, r1
    c93a:	09 f4       	brne	.+2      	; 0xc93e <draw_cursor+0xe6>
    c93c:	54 c0       	rjmp	.+168    	; 0xc9e6 <draw_cursor+0x18e>
    c93e:	08 f4       	brcc	.+2      	; 0xc942 <draw_cursor+0xea>
    c940:	41 c0       	rjmp	.+130    	; 0xc9c4 <draw_cursor+0x16c>
    c942:	88 3f       	cpi	r24, 0xF8	; 248
    c944:	91 05       	cpc	r25, r1
    c946:	a9 f1       	breq	.+106    	; 0xc9b2 <draw_cursor+0x15a>
    c948:	81 15       	cp	r24, r1
    c94a:	20 e1       	ldi	r18, 0x10	; 16
    c94c:	92 07       	cpc	r25, r18
    c94e:	09 f4       	brne	.+2      	; 0xc952 <draw_cursor+0xfa>
    c950:	47 c0       	rjmp	.+142    	; 0xc9e0 <draw_cursor+0x188>
    c952:	84 38       	cpi	r24, 0x84	; 132
    c954:	91 05       	cpc	r25, r1
    c956:	61 f7       	brne	.-40     	; 0xc930 <draw_cursor+0xd8>
    c958:	4f ef       	ldi	r20, 0xFF	; 255
    c95a:	50 ee       	ldi	r21, 0xE0	; 224
    c95c:	10 c0       	rjmp	.+32     	; 0xc97e <draw_cursor+0x126>
    c95e:	87 30       	cpi	r24, 0x07	; 7
    c960:	2f ef       	ldi	r18, 0xFF	; 255
    c962:	92 07       	cpc	r25, r18
    c964:	19 f1       	breq	.+70     	; 0xc9ac <draw_cursor+0x154>
    c966:	8f 3f       	cpi	r24, 0xFF	; 255
    c968:	2f ef       	ldi	r18, 0xFF	; 255
    c96a:	92 07       	cpc	r25, r18
    c96c:	09 f3       	breq	.-62     	; 0xc930 <draw_cursor+0xd8>
    c96e:	8f 3f       	cpi	r24, 0xFF	; 255
    c970:	90 4e       	sbci	r25, 0xE0	; 224
    c972:	f1 f6       	brne	.-68     	; 0xc930 <draw_cursor+0xd8>
    c974:	44 e8       	ldi	r20, 0x84	; 132
    c976:	50 e0       	ldi	r21, 0x00	; 0
    c978:	02 c0       	rjmp	.+4      	; 0xc97e <draw_cursor+0x126>
    c97a:	40 e0       	ldi	r20, 0x00	; 0
    c97c:	50 e1       	ldi	r21, 0x10	; 16
    c97e:	be 01       	movw	r22, r28
    c980:	c8 01       	movw	r24, r16
    c982:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    c986:	00 93 e2 31 	sts	0x31E2, r16	; 0x8031e2 <cur_x>
    c98a:	10 93 e3 31 	sts	0x31E3, r17	; 0x8031e3 <cur_x+0x1>
    c98e:	c0 93 d4 31 	sts	0x31D4, r28	; 0x8031d4 <cur_y>
    c992:	d0 93 d5 31 	sts	0x31D5, r29	; 0x8031d5 <cur_y+0x1>
    c996:	df 91       	pop	r29
    c998:	cf 91       	pop	r28
    c99a:	1f 91       	pop	r17
    c99c:	0f 91       	pop	r16
    c99e:	ff 90       	pop	r15
    c9a0:	ef 90       	pop	r14
    c9a2:	df 90       	pop	r13
    c9a4:	cf 90       	pop	r12
    c9a6:	bf 90       	pop	r11
    c9a8:	af 90       	pop	r10
    c9aa:	08 95       	ret
    c9ac:	44 e0       	ldi	r20, 0x04	; 4
    c9ae:	50 e1       	ldi	r21, 0x10	; 16
    c9b0:	e6 cf       	rjmp	.-52     	; 0xc97e <draw_cursor+0x126>
    c9b2:	40 e8       	ldi	r20, 0x80	; 128
    c9b4:	50 e0       	ldi	r21, 0x00	; 0
    c9b6:	e3 cf       	rjmp	.-58     	; 0xc97e <draw_cursor+0x126>
    c9b8:	44 e0       	ldi	r20, 0x04	; 4
    c9ba:	50 e0       	ldi	r21, 0x00	; 0
    c9bc:	e0 cf       	rjmp	.-64     	; 0xc97e <draw_cursor+0x126>
    c9be:	48 ef       	ldi	r20, 0xF8	; 248
    c9c0:	5f e1       	ldi	r21, 0x1F	; 31
    c9c2:	dd cf       	rjmp	.-70     	; 0xc97e <draw_cursor+0x126>
    c9c4:	00 97       	sbiw	r24, 0x00	; 0
    c9c6:	91 f0       	breq	.+36     	; 0xc9ec <draw_cursor+0x194>
    c9c8:	04 97       	sbiw	r24, 0x04	; 4
    c9ca:	09 f0       	breq	.+2      	; 0xc9ce <draw_cursor+0x176>
    c9cc:	b1 cf       	rjmp	.-158    	; 0xc930 <draw_cursor+0xd8>
    c9ce:	47 e0       	ldi	r20, 0x07	; 7
    c9d0:	50 ee       	ldi	r21, 0xE0	; 224
    c9d2:	d5 cf       	rjmp	.-86     	; 0xc97e <draw_cursor+0x126>
    c9d4:	40 e8       	ldi	r20, 0x80	; 128
    c9d6:	50 e1       	ldi	r21, 0x10	; 16
    c9d8:	d2 cf       	rjmp	.-92     	; 0xc97e <draw_cursor+0x126>
    c9da:	47 e0       	ldi	r20, 0x07	; 7
    c9dc:	5f ef       	ldi	r21, 0xFF	; 255
    c9de:	cf cf       	rjmp	.-98     	; 0xc97e <draw_cursor+0x126>
    c9e0:	40 e0       	ldi	r20, 0x00	; 0
    c9e2:	5f e1       	ldi	r21, 0x1F	; 31
    c9e4:	cc cf       	rjmp	.-104    	; 0xc97e <draw_cursor+0x126>
    c9e6:	48 ef       	ldi	r20, 0xF8	; 248
    c9e8:	50 e0       	ldi	r21, 0x00	; 0
    c9ea:	c9 cf       	rjmp	.-110    	; 0xc97e <draw_cursor+0x126>
    c9ec:	4f ef       	ldi	r20, 0xFF	; 255
    c9ee:	5f ef       	ldi	r21, 0xFF	; 255
    c9f0:	c6 cf       	rjmp	.-116    	; 0xc97e <draw_cursor+0x126>

0000c9f2 <update_status>:
    c9f2:	ef 92       	push	r14
    c9f4:	ff 92       	push	r15
    c9f6:	0f 93       	push	r16
    c9f8:	1f 93       	push	r17
    c9fa:	cf 93       	push	r28
    c9fc:	df 93       	push	r29
    c9fe:	00 d0       	rcall	.+0      	; 0xca00 <update_status+0xe>
    ca00:	1f 92       	push	r1
    ca02:	cd b7       	in	r28, 0x3d	; 61
    ca04:	de b7       	in	r29, 0x3e	; 62
    ca06:	00 e0       	ldi	r16, 0x00	; 0
    ca08:	10 e0       	ldi	r17, 0x00	; 0
    ca0a:	23 e1       	ldi	r18, 0x13	; 19
    ca0c:	30 e0       	ldi	r19, 0x00	; 0
    ca0e:	4f e3       	ldi	r20, 0x3F	; 63
    ca10:	51 e0       	ldi	r21, 0x01	; 1
    ca12:	66 ee       	ldi	r22, 0xE6	; 230
    ca14:	70 e0       	ldi	r23, 0x00	; 0
    ca16:	80 e0       	ldi	r24, 0x00	; 0
    ca18:	90 e0       	ldi	r25, 0x00	; 0
    ca1a:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    ca1e:	ee 24       	eor	r14, r14
    ca20:	ea 94       	dec	r14
    ca22:	fe 2c       	mov	r15, r14
    ca24:	2c eb       	ldi	r18, 0xBC	; 188
    ca26:	30 e2       	ldi	r19, 0x20	; 32
    ca28:	46 ee       	ldi	r20, 0xE6	; 230
    ca2a:	50 e0       	ldi	r21, 0x00	; 0
    ca2c:	65 e0       	ldi	r22, 0x05	; 5
    ca2e:	70 e0       	ldi	r23, 0x00	; 0
    ca30:	8f e5       	ldi	r24, 0x5F	; 95
    ca32:	98 e2       	ldi	r25, 0x28	; 40
    ca34:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    ca38:	4a e0       	ldi	r20, 0x0A	; 10
    ca3a:	be 01       	movw	r22, r28
    ca3c:	6f 5f       	subi	r22, 0xFF	; 255
    ca3e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca40:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    ca44:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    ca48:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__itoa_ncheck>
    ca4c:	2c eb       	ldi	r18, 0xBC	; 188
    ca4e:	30 e2       	ldi	r19, 0x20	; 32
    ca50:	46 ee       	ldi	r20, 0xE6	; 230
    ca52:	50 e0       	ldi	r21, 0x00	; 0
    ca54:	6d e1       	ldi	r22, 0x1D	; 29
    ca56:	70 e0       	ldi	r23, 0x00	; 0
    ca58:	83 e6       	ldi	r24, 0x63	; 99
    ca5a:	98 e2       	ldi	r25, 0x28	; 40
    ca5c:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    ca60:	2c eb       	ldi	r18, 0xBC	; 188
    ca62:	30 e2       	ldi	r19, 0x20	; 32
    ca64:	46 ee       	ldi	r20, 0xE6	; 230
    ca66:	50 e0       	ldi	r21, 0x00	; 0
    ca68:	6d e1       	ldi	r22, 0x1D	; 29
    ca6a:	70 e0       	ldi	r23, 0x00	; 0
    ca6c:	ce 01       	movw	r24, r28
    ca6e:	01 96       	adiw	r24, 0x01	; 1
    ca70:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    ca74:	2c eb       	ldi	r18, 0xBC	; 188
    ca76:	30 e2       	ldi	r19, 0x20	; 32
    ca78:	46 ee       	ldi	r20, 0xE6	; 230
    ca7a:	50 e0       	ldi	r21, 0x00	; 0
    ca7c:	6d e3       	ldi	r22, 0x3D	; 61
    ca7e:	70 e0       	ldi	r23, 0x00	; 0
    ca80:	89 e6       	ldi	r24, 0x69	; 105
    ca82:	98 e2       	ldi	r25, 0x28	; 40
    ca84:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    ca88:	4a e0       	ldi	r20, 0x0A	; 10
    ca8a:	be 01       	movw	r22, r28
    ca8c:	6f 5f       	subi	r22, 0xFF	; 255
    ca8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca90:	80 91 d4 31 	lds	r24, 0x31D4	; 0x8031d4 <cur_y>
    ca94:	90 91 d5 31 	lds	r25, 0x31D5	; 0x8031d5 <cur_y+0x1>
    ca98:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__itoa_ncheck>
    ca9c:	2c eb       	ldi	r18, 0xBC	; 188
    ca9e:	30 e2       	ldi	r19, 0x20	; 32
    caa0:	46 ee       	ldi	r20, 0xE6	; 230
    caa2:	50 e0       	ldi	r21, 0x00	; 0
    caa4:	65 e5       	ldi	r22, 0x55	; 85
    caa6:	70 e0       	ldi	r23, 0x00	; 0
    caa8:	83 e6       	ldi	r24, 0x63	; 99
    caaa:	98 e2       	ldi	r25, 0x28	; 40
    caac:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    cab0:	2c eb       	ldi	r18, 0xBC	; 188
    cab2:	30 e2       	ldi	r19, 0x20	; 32
    cab4:	46 ee       	ldi	r20, 0xE6	; 230
    cab6:	50 e0       	ldi	r21, 0x00	; 0
    cab8:	65 e5       	ldi	r22, 0x55	; 85
    caba:	70 e0       	ldi	r23, 0x00	; 0
    cabc:	ce 01       	movw	r24, r28
    cabe:	01 96       	adiw	r24, 0x01	; 1
    cac0:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    cac4:	80 91 e4 31 	lds	r24, 0x31E4	; 0x8031e4 <step>
    cac8:	4a e0       	ldi	r20, 0x0A	; 10
    caca:	be 01       	movw	r22, r28
    cacc:	6f 5f       	subi	r22, 0xFF	; 255
    cace:	7f 4f       	sbci	r23, 0xFF	; 255
    cad0:	90 e0       	ldi	r25, 0x00	; 0
    cad2:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__itoa_ncheck>
    cad6:	2c eb       	ldi	r18, 0xBC	; 188
    cad8:	30 e2       	ldi	r19, 0x20	; 32
    cada:	46 ee       	ldi	r20, 0xE6	; 230
    cadc:	50 e0       	ldi	r21, 0x00	; 0
    cade:	65 e7       	ldi	r22, 0x75	; 117
    cae0:	70 e0       	ldi	r23, 0x00	; 0
    cae2:	8d e6       	ldi	r24, 0x6D	; 109
    cae4:	98 e2       	ldi	r25, 0x28	; 40
    cae6:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    caea:	2c eb       	ldi	r18, 0xBC	; 188
    caec:	30 e2       	ldi	r19, 0x20	; 32
    caee:	46 ee       	ldi	r20, 0xE6	; 230
    caf0:	50 e0       	ldi	r21, 0x00	; 0
    caf2:	6d ee       	ldi	r22, 0xED	; 237
    caf4:	70 e0       	ldi	r23, 0x00	; 0
    caf6:	83 e6       	ldi	r24, 0x63	; 99
    caf8:	98 e2       	ldi	r25, 0x28	; 40
    cafa:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    cafe:	2c eb       	ldi	r18, 0xBC	; 188
    cb00:	30 e2       	ldi	r19, 0x20	; 32
    cb02:	46 ee       	ldi	r20, 0xE6	; 230
    cb04:	50 e0       	ldi	r21, 0x00	; 0
    cb06:	6d ee       	ldi	r22, 0xED	; 237
    cb08:	70 e0       	ldi	r23, 0x00	; 0
    cb0a:	ce 01       	movw	r24, r28
    cb0c:	01 96       	adiw	r24, 0x01	; 1
    cb0e:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <gfx_draw_string>
    cb12:	00 91 d7 31 	lds	r16, 0x31D7	; 0x8031d7 <cur_color>
    cb16:	10 91 d8 31 	lds	r17, 0x31D8	; 0x8031d8 <cur_color+0x1>
    cb1a:	28 e0       	ldi	r18, 0x08	; 8
    cb1c:	30 e0       	ldi	r19, 0x00	; 0
    cb1e:	48 e0       	ldi	r20, 0x08	; 8
    cb20:	50 e0       	ldi	r21, 0x00	; 0
    cb22:	66 ee       	ldi	r22, 0xE6	; 230
    cb24:	70 e0       	ldi	r23, 0x00	; 0
    cb26:	8d ea       	ldi	r24, 0xAD	; 173
    cb28:	90 e0       	ldi	r25, 0x00	; 0
    cb2a:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cb2e:	24 96       	adiw	r28, 0x04	; 4
    cb30:	cd bf       	out	0x3d, r28	; 61
    cb32:	de bf       	out	0x3e, r29	; 62
    cb34:	df 91       	pop	r29
    cb36:	cf 91       	pop	r28
    cb38:	1f 91       	pop	r17
    cb3a:	0f 91       	pop	r16
    cb3c:	ff 90       	pop	r15
    cb3e:	ef 90       	pop	r14
    cb40:	08 95       	ret

0000cb42 <init_sketch>:
    cb42:	0f 93       	push	r16
    cb44:	1f 93       	push	r17
    cb46:	00 e0       	ldi	r16, 0x00	; 0
    cb48:	10 e0       	ldi	r17, 0x00	; 0
    cb4a:	20 ef       	ldi	r18, 0xF0	; 240
    cb4c:	30 e0       	ldi	r19, 0x00	; 0
    cb4e:	40 e4       	ldi	r20, 0x40	; 64
    cb50:	51 e0       	ldi	r21, 0x01	; 1
    cb52:	60 e0       	ldi	r22, 0x00	; 0
    cb54:	70 e0       	ldi	r23, 0x00	; 0
    cb56:	80 e0       	ldi	r24, 0x00	; 0
    cb58:	90 e0       	ldi	r25, 0x00	; 0
    cb5a:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cb5e:	83 e0       	ldi	r24, 0x03	; 3
    cb60:	0e 94 14 70 	call	0xe028	; 0xe028 <gfx_ili9341_set_orientation>
    cb64:	0f ef       	ldi	r16, 0xFF	; 255
    cb66:	1f ef       	ldi	r17, 0xFF	; 255
    cb68:	21 e0       	ldi	r18, 0x01	; 1
    cb6a:	30 e0       	ldi	r19, 0x00	; 0
    cb6c:	4d e3       	ldi	r20, 0x3D	; 61
    cb6e:	51 e0       	ldi	r21, 0x01	; 1
    cb70:	62 e0       	ldi	r22, 0x02	; 2
    cb72:	70 e0       	ldi	r23, 0x00	; 0
    cb74:	82 e0       	ldi	r24, 0x02	; 2
    cb76:	90 e0       	ldi	r25, 0x00	; 0
    cb78:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cb7c:	21 e0       	ldi	r18, 0x01	; 1
    cb7e:	30 e0       	ldi	r19, 0x00	; 0
    cb80:	4d e3       	ldi	r20, 0x3D	; 61
    cb82:	51 e0       	ldi	r21, 0x01	; 1
    cb84:	6e ed       	ldi	r22, 0xDE	; 222
    cb86:	70 e0       	ldi	r23, 0x00	; 0
    cb88:	82 e0       	ldi	r24, 0x02	; 2
    cb8a:	90 e0       	ldi	r25, 0x00	; 0
    cb8c:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cb90:	2d ed       	ldi	r18, 0xDD	; 221
    cb92:	30 e0       	ldi	r19, 0x00	; 0
    cb94:	41 e0       	ldi	r20, 0x01	; 1
    cb96:	50 e0       	ldi	r21, 0x00	; 0
    cb98:	62 e0       	ldi	r22, 0x02	; 2
    cb9a:	70 e0       	ldi	r23, 0x00	; 0
    cb9c:	82 e0       	ldi	r24, 0x02	; 2
    cb9e:	90 e0       	ldi	r25, 0x00	; 0
    cba0:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cba4:	2d ed       	ldi	r18, 0xDD	; 221
    cba6:	30 e0       	ldi	r19, 0x00	; 0
    cba8:	41 e0       	ldi	r20, 0x01	; 1
    cbaa:	50 e0       	ldi	r21, 0x00	; 0
    cbac:	62 e0       	ldi	r22, 0x02	; 2
    cbae:	70 e0       	ldi	r23, 0x00	; 0
    cbb0:	8e e3       	ldi	r24, 0x3E	; 62
    cbb2:	91 e0       	ldi	r25, 0x01	; 1
    cbb4:	0e 94 e3 6e 	call	0xddc6	; 0xddc6 <gfx_generic_draw_filled_rect>
    cbb8:	80 ea       	ldi	r24, 0xA0	; 160
    cbba:	90 e0       	ldi	r25, 0x00	; 0
    cbbc:	80 93 e2 31 	sts	0x31E2, r24	; 0x8031e2 <cur_x>
    cbc0:	90 93 e3 31 	sts	0x31E3, r25	; 0x8031e3 <cur_x+0x1>
    cbc4:	88 e7       	ldi	r24, 0x78	; 120
    cbc6:	90 e0       	ldi	r25, 0x00	; 0
    cbc8:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <cur_y>
    cbcc:	90 93 d5 31 	sts	0x31D5, r25	; 0x8031d5 <cur_y+0x1>
    cbd0:	81 e0       	ldi	r24, 0x01	; 1
    cbd2:	80 93 e4 31 	sts	0x31E4, r24	; 0x8031e4 <step>
    cbd6:	10 92 e5 31 	sts	0x31E5, r1	; 0x8031e5 <style>
    cbda:	8f ef       	ldi	r24, 0xFF	; 255
    cbdc:	9f ef       	ldi	r25, 0xFF	; 255
    cbde:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    cbe2:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>
    cbe6:	28 e7       	ldi	r18, 0x78	; 120
    cbe8:	30 e0       	ldi	r19, 0x00	; 0
    cbea:	4d e9       	ldi	r20, 0x9D	; 157
    cbec:	50 e0       	ldi	r21, 0x00	; 0
    cbee:	68 e7       	ldi	r22, 0x78	; 120
    cbf0:	70 e0       	ldi	r23, 0x00	; 0
    cbf2:	8b e9       	ldi	r24, 0x9B	; 155
    cbf4:	90 e0       	ldi	r25, 0x00	; 0
    cbf6:	17 dc       	rcall	.-2002   	; 0xc426 <invert_line>
    cbf8:	28 e7       	ldi	r18, 0x78	; 120
    cbfa:	30 e0       	ldi	r19, 0x00	; 0
    cbfc:	45 ea       	ldi	r20, 0xA5	; 165
    cbfe:	50 e0       	ldi	r21, 0x00	; 0
    cc00:	68 e7       	ldi	r22, 0x78	; 120
    cc02:	70 e0       	ldi	r23, 0x00	; 0
    cc04:	83 ea       	ldi	r24, 0xA3	; 163
    cc06:	90 e0       	ldi	r25, 0x00	; 0
    cc08:	0e dc       	rcall	.-2020   	; 0xc426 <invert_line>
    cc0a:	25 e7       	ldi	r18, 0x75	; 117
    cc0c:	30 e0       	ldi	r19, 0x00	; 0
    cc0e:	40 ea       	ldi	r20, 0xA0	; 160
    cc10:	50 e0       	ldi	r21, 0x00	; 0
    cc12:	63 e7       	ldi	r22, 0x73	; 115
    cc14:	70 e0       	ldi	r23, 0x00	; 0
    cc16:	80 ea       	ldi	r24, 0xA0	; 160
    cc18:	90 e0       	ldi	r25, 0x00	; 0
    cc1a:	05 dc       	rcall	.-2038   	; 0xc426 <invert_line>
    cc1c:	2d e7       	ldi	r18, 0x7D	; 125
    cc1e:	30 e0       	ldi	r19, 0x00	; 0
    cc20:	40 ea       	ldi	r20, 0xA0	; 160
    cc22:	50 e0       	ldi	r21, 0x00	; 0
    cc24:	6b e7       	ldi	r22, 0x7B	; 123
    cc26:	70 e0       	ldi	r23, 0x00	; 0
    cc28:	80 ea       	ldi	r24, 0xA0	; 160
    cc2a:	90 e0       	ldi	r25, 0x00	; 0
    cc2c:	fc db       	rcall	.-2056   	; 0xc426 <invert_line>
    cc2e:	68 e7       	ldi	r22, 0x78	; 120
    cc30:	70 e0       	ldi	r23, 0x00	; 0
    cc32:	80 ea       	ldi	r24, 0xA0	; 160
    cc34:	90 e0       	ldi	r25, 0x00	; 0
    cc36:	0e 94 45 70 	call	0xe08a	; 0xe08a <gfx_ili9341_get_pixel>
    cc3a:	84 30       	cpi	r24, 0x04	; 4
    cc3c:	20 e1       	ldi	r18, 0x10	; 16
    cc3e:	92 07       	cpc	r25, r18
    cc40:	09 f4       	brne	.+2      	; 0xcc44 <init_sketch+0x102>
    cc42:	67 c0       	rjmp	.+206    	; 0xcd12 <init_sketch+0x1d0>
    cc44:	b0 f0       	brcs	.+44     	; 0xcc72 <init_sketch+0x130>
    cc46:	87 30       	cpi	r24, 0x07	; 7
    cc48:	20 ee       	ldi	r18, 0xE0	; 224
    cc4a:	92 07       	cpc	r25, r18
    cc4c:	09 f4       	brne	.+2      	; 0xcc50 <init_sketch+0x10e>
    cc4e:	50 c0       	rjmp	.+160    	; 0xccf0 <init_sketch+0x1ae>
    cc50:	20 f5       	brcc	.+72     	; 0xcc9a <init_sketch+0x158>
    cc52:	81 15       	cp	r24, r1
    cc54:	2f e1       	ldi	r18, 0x1F	; 31
    cc56:	92 07       	cpc	r25, r18
    cc58:	71 f1       	breq	.+92     	; 0xccb6 <init_sketch+0x174>
    cc5a:	88 3f       	cpi	r24, 0xF8	; 248
    cc5c:	2f e1       	ldi	r18, 0x1F	; 31
    cc5e:	92 07       	cpc	r25, r18
    cc60:	09 f4       	brne	.+2      	; 0xcc64 <init_sketch+0x122>
    cc62:	54 c0       	rjmp	.+168    	; 0xcd0c <init_sketch+0x1ca>
    cc64:	80 38       	cpi	r24, 0x80	; 128
    cc66:	90 41       	sbci	r25, 0x10	; 16
    cc68:	09 f4       	brne	.+2      	; 0xcc6c <init_sketch+0x12a>
    cc6a:	45 c0       	rjmp	.+138    	; 0xccf6 <init_sketch+0x1b4>
    cc6c:	40 e0       	ldi	r20, 0x00	; 0
    cc6e:	50 e0       	ldi	r21, 0x00	; 0
    cc70:	24 c0       	rjmp	.+72     	; 0xccba <init_sketch+0x178>
    cc72:	80 38       	cpi	r24, 0x80	; 128
    cc74:	91 05       	cpc	r25, r1
    cc76:	09 f4       	brne	.+2      	; 0xcc7a <init_sketch+0x138>
    cc78:	52 c0       	rjmp	.+164    	; 0xcd1e <init_sketch+0x1dc>
    cc7a:	08 f4       	brcc	.+2      	; 0xcc7e <init_sketch+0x13c>
    cc7c:	3f c0       	rjmp	.+126    	; 0xccfc <init_sketch+0x1ba>
    cc7e:	88 3f       	cpi	r24, 0xF8	; 248
    cc80:	91 05       	cpc	r25, r1
    cc82:	99 f1       	breq	.+102    	; 0xccea <init_sketch+0x1a8>
    cc84:	81 15       	cp	r24, r1
    cc86:	20 e1       	ldi	r18, 0x10	; 16
    cc88:	92 07       	cpc	r25, r18
    cc8a:	09 f4       	brne	.+2      	; 0xcc8e <init_sketch+0x14c>
    cc8c:	45 c0       	rjmp	.+138    	; 0xcd18 <init_sketch+0x1d6>
    cc8e:	84 38       	cpi	r24, 0x84	; 132
    cc90:	91 05       	cpc	r25, r1
    cc92:	61 f7       	brne	.-40     	; 0xcc6c <init_sketch+0x12a>
    cc94:	4f ef       	ldi	r20, 0xFF	; 255
    cc96:	50 ee       	ldi	r21, 0xE0	; 224
    cc98:	10 c0       	rjmp	.+32     	; 0xccba <init_sketch+0x178>
    cc9a:	87 30       	cpi	r24, 0x07	; 7
    cc9c:	2f ef       	ldi	r18, 0xFF	; 255
    cc9e:	92 07       	cpc	r25, r18
    cca0:	09 f1       	breq	.+66     	; 0xcce4 <init_sketch+0x1a2>
    cca2:	8f 3f       	cpi	r24, 0xFF	; 255
    cca4:	2f ef       	ldi	r18, 0xFF	; 255
    cca6:	92 07       	cpc	r25, r18
    cca8:	09 f3       	breq	.-62     	; 0xcc6c <init_sketch+0x12a>
    ccaa:	8f 3f       	cpi	r24, 0xFF	; 255
    ccac:	90 4e       	sbci	r25, 0xE0	; 224
    ccae:	f1 f6       	brne	.-68     	; 0xcc6c <init_sketch+0x12a>
    ccb0:	44 e8       	ldi	r20, 0x84	; 132
    ccb2:	50 e0       	ldi	r21, 0x00	; 0
    ccb4:	02 c0       	rjmp	.+4      	; 0xccba <init_sketch+0x178>
    ccb6:	40 e0       	ldi	r20, 0x00	; 0
    ccb8:	50 e1       	ldi	r21, 0x10	; 16
    ccba:	68 e7       	ldi	r22, 0x78	; 120
    ccbc:	70 e0       	ldi	r23, 0x00	; 0
    ccbe:	80 ea       	ldi	r24, 0xA0	; 160
    ccc0:	90 e0       	ldi	r25, 0x00	; 0
    ccc2:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <gfx_ili9341_draw_pixel>
    ccc6:	80 ea       	ldi	r24, 0xA0	; 160
    ccc8:	90 e0       	ldi	r25, 0x00	; 0
    ccca:	80 93 e2 31 	sts	0x31E2, r24	; 0x8031e2 <cur_x>
    ccce:	90 93 e3 31 	sts	0x31E3, r25	; 0x8031e3 <cur_x+0x1>
    ccd2:	88 e7       	ldi	r24, 0x78	; 120
    ccd4:	90 e0       	ldi	r25, 0x00	; 0
    ccd6:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <cur_y>
    ccda:	90 93 d5 31 	sts	0x31D5, r25	; 0x8031d5 <cur_y+0x1>
    ccde:	1f 91       	pop	r17
    cce0:	0f 91       	pop	r16
    cce2:	87 ce       	rjmp	.-754    	; 0xc9f2 <update_status>
    cce4:	44 e0       	ldi	r20, 0x04	; 4
    cce6:	50 e1       	ldi	r21, 0x10	; 16
    cce8:	e8 cf       	rjmp	.-48     	; 0xccba <init_sketch+0x178>
    ccea:	40 e8       	ldi	r20, 0x80	; 128
    ccec:	50 e0       	ldi	r21, 0x00	; 0
    ccee:	e5 cf       	rjmp	.-54     	; 0xccba <init_sketch+0x178>
    ccf0:	44 e0       	ldi	r20, 0x04	; 4
    ccf2:	50 e0       	ldi	r21, 0x00	; 0
    ccf4:	e2 cf       	rjmp	.-60     	; 0xccba <init_sketch+0x178>
    ccf6:	48 ef       	ldi	r20, 0xF8	; 248
    ccf8:	5f e1       	ldi	r21, 0x1F	; 31
    ccfa:	df cf       	rjmp	.-66     	; 0xccba <init_sketch+0x178>
    ccfc:	00 97       	sbiw	r24, 0x00	; 0
    ccfe:	91 f0       	breq	.+36     	; 0xcd24 <init_sketch+0x1e2>
    cd00:	04 97       	sbiw	r24, 0x04	; 4
    cd02:	09 f0       	breq	.+2      	; 0xcd06 <init_sketch+0x1c4>
    cd04:	b3 cf       	rjmp	.-154    	; 0xcc6c <init_sketch+0x12a>
    cd06:	47 e0       	ldi	r20, 0x07	; 7
    cd08:	50 ee       	ldi	r21, 0xE0	; 224
    cd0a:	d7 cf       	rjmp	.-82     	; 0xccba <init_sketch+0x178>
    cd0c:	40 e8       	ldi	r20, 0x80	; 128
    cd0e:	50 e1       	ldi	r21, 0x10	; 16
    cd10:	d4 cf       	rjmp	.-88     	; 0xccba <init_sketch+0x178>
    cd12:	47 e0       	ldi	r20, 0x07	; 7
    cd14:	5f ef       	ldi	r21, 0xFF	; 255
    cd16:	d1 cf       	rjmp	.-94     	; 0xccba <init_sketch+0x178>
    cd18:	40 e0       	ldi	r20, 0x00	; 0
    cd1a:	5f e1       	ldi	r21, 0x1F	; 31
    cd1c:	ce cf       	rjmp	.-100    	; 0xccba <init_sketch+0x178>
    cd1e:	48 ef       	ldi	r20, 0xF8	; 248
    cd20:	50 e0       	ldi	r21, 0x00	; 0
    cd22:	cb cf       	rjmp	.-106    	; 0xccba <init_sketch+0x178>
    cd24:	4f ef       	ldi	r20, 0xFF	; 255
    cd26:	5f ef       	ldi	r21, 0xFF	; 255
    cd28:	c8 cf       	rjmp	.-112    	; 0xccba <init_sketch+0x178>

0000cd2a <move_cursor>:
    cd2a:	0f 93       	push	r16
    cd2c:	1f 93       	push	r17
    cd2e:	08 2f       	mov	r16, r24
    cd30:	16 2f       	mov	r17, r22
    cd32:	60 91 d4 31 	lds	r22, 0x31D4	; 0x8031d4 <cur_y>
    cd36:	70 91 d5 31 	lds	r23, 0x31D5	; 0x8031d5 <cur_y+0x1>
    cd3a:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    cd3e:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    cd42:	8a dd       	rcall	.-1260   	; 0xc858 <draw_cursor>
    cd44:	80 91 e2 31 	lds	r24, 0x31E2	; 0x8031e2 <cur_x>
    cd48:	90 91 e3 31 	lds	r25, 0x31E3	; 0x8031e3 <cur_x+0x1>
    cd4c:	ac 01       	movw	r20, r24
    cd4e:	40 0f       	add	r20, r16
    cd50:	51 1d       	adc	r21, r1
    cd52:	07 fd       	sbrc	r16, 7
    cd54:	5a 95       	dec	r21
    cd56:	40 93 d9 31 	sts	0x31D9, r20	; 0x8031d9 <new_x>
    cd5a:	50 93 da 31 	sts	0x31DA, r21	; 0x8031da <new_x+0x1>
    cd5e:	60 91 d4 31 	lds	r22, 0x31D4	; 0x8031d4 <cur_y>
    cd62:	70 91 d5 31 	lds	r23, 0x31D5	; 0x8031d5 <cur_y+0x1>
    cd66:	9b 01       	movw	r18, r22
    cd68:	21 0f       	add	r18, r17
    cd6a:	31 1d       	adc	r19, r1
    cd6c:	17 fd       	sbrc	r17, 7
    cd6e:	3a 95       	dec	r19
    cd70:	20 93 dd 31 	sts	0x31DD, r18	; 0x8031dd <new_y>
    cd74:	30 93 de 31 	sts	0x31DE, r19	; 0x8031de <new_y+0x1>
    cd78:	46 30       	cpi	r20, 0x06	; 6
    cd7a:	51 05       	cpc	r21, r1
    cd7c:	8c f5       	brge	.+98     	; 0xcde0 <move_cursor+0xb6>
    cd7e:	46 e0       	ldi	r20, 0x06	; 6
    cd80:	50 e0       	ldi	r21, 0x00	; 0
    cd82:	40 93 d9 31 	sts	0x31D9, r20	; 0x8031d9 <new_x>
    cd86:	50 93 da 31 	sts	0x31DA, r21	; 0x8031da <new_x+0x1>
    cd8a:	26 30       	cpi	r18, 0x06	; 6
    cd8c:	31 05       	cpc	r19, r1
    cd8e:	ac f5       	brge	.+106    	; 0xcdfa <move_cursor+0xd0>
    cd90:	26 e0       	ldi	r18, 0x06	; 6
    cd92:	30 e0       	ldi	r19, 0x00	; 0
    cd94:	20 93 dd 31 	sts	0x31DD, r18	; 0x8031dd <new_y>
    cd98:	30 93 de 31 	sts	0x31DE, r19	; 0x8031de <new_y+0x1>
    cd9c:	00 91 d7 31 	lds	r16, 0x31D7	; 0x8031d7 <cur_color>
    cda0:	10 91 d8 31 	lds	r17, 0x31D8	; 0x8031d8 <cur_color+0x1>
    cda4:	0e 94 7e 6f 	call	0xdefc	; 0xdefc <gfx_generic_draw_line>
    cda8:	60 91 dd 31 	lds	r22, 0x31DD	; 0x8031dd <new_y>
    cdac:	70 91 de 31 	lds	r23, 0x31DE	; 0x8031de <new_y+0x1>
    cdb0:	80 91 d9 31 	lds	r24, 0x31D9	; 0x8031d9 <new_x>
    cdb4:	90 91 da 31 	lds	r25, 0x31DA	; 0x8031da <new_x+0x1>
    cdb8:	4f dd       	rcall	.-1378   	; 0xc858 <draw_cursor>
    cdba:	80 91 d9 31 	lds	r24, 0x31D9	; 0x8031d9 <new_x>
    cdbe:	90 91 da 31 	lds	r25, 0x31DA	; 0x8031da <new_x+0x1>
    cdc2:	80 93 e2 31 	sts	0x31E2, r24	; 0x8031e2 <cur_x>
    cdc6:	90 93 e3 31 	sts	0x31E3, r25	; 0x8031e3 <cur_x+0x1>
    cdca:	80 91 dd 31 	lds	r24, 0x31DD	; 0x8031dd <new_y>
    cdce:	90 91 de 31 	lds	r25, 0x31DE	; 0x8031de <new_y+0x1>
    cdd2:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <cur_y>
    cdd6:	90 93 d5 31 	sts	0x31D5, r25	; 0x8031d5 <cur_y+0x1>
    cdda:	1f 91       	pop	r17
    cddc:	0f 91       	pop	r16
    cdde:	09 ce       	rjmp	.-1006   	; 0xc9f2 <update_status>
    cde0:	4a 33       	cpi	r20, 0x3A	; 58
    cde2:	e1 e0       	ldi	r30, 0x01	; 1
    cde4:	5e 07       	cpc	r21, r30
    cde6:	8c f2       	brlt	.-94     	; 0xcd8a <move_cursor+0x60>
    cde8:	49 e3       	ldi	r20, 0x39	; 57
    cdea:	51 e0       	ldi	r21, 0x01	; 1
    cdec:	40 93 d9 31 	sts	0x31D9, r20	; 0x8031d9 <new_x>
    cdf0:	50 93 da 31 	sts	0x31DA, r21	; 0x8031da <new_x+0x1>
    cdf4:	26 30       	cpi	r18, 0x06	; 6
    cdf6:	31 05       	cpc	r19, r1
    cdf8:	5c f2       	brlt	.-106    	; 0xcd90 <move_cursor+0x66>
    cdfa:	2a 3d       	cpi	r18, 0xDA	; 218
    cdfc:	31 05       	cpc	r19, r1
    cdfe:	74 f2       	brlt	.-100    	; 0xcd9c <move_cursor+0x72>
    ce00:	29 ed       	ldi	r18, 0xD9	; 217
    ce02:	30 e0       	ldi	r19, 0x00	; 0
    ce04:	20 93 dd 31 	sts	0x31DD, r18	; 0x8031dd <new_y>
    ce08:	30 93 de 31 	sts	0x31DE, r19	; 0x8031de <new_y+0x1>
    ce0c:	c7 cf       	rjmp	.-114    	; 0xcd9c <move_cursor+0x72>

0000ce0e <sketch_loop>:
	gfx_draw_filled_rect(173, 230, 8, 8, cur_color);

}

int8_t sketch_loop(void)
{
    ce0e:	0f 93       	push	r16
    ce10:	1f 93       	push	r17
    ce12:	cf 93       	push	r28
    ce14:	df 93       	push	r29
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
	delta_step = 0;
	if((PB_ENC_R)&&(PB_ENC_L))
    ce16:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    ce1a:	98 2f       	mov	r25, r24
    ce1c:	90 72       	andi	r25, 0x20	; 32
    ce1e:	81 ff       	sbrs	r24, 1
    ce20:	20 c0       	rjmp	.+64     	; 0xce62 <sketch_loop+0x54>
    ce22:	85 fd       	sbrc	r24, 5
    ce24:	66 c0       	rjmp	.+204    	; 0xcef2 <sketch_loop+0xe4>
	}
	else
	{
		if(PB_ENC_R)
		{
			delta_color = 1;
    ce26:	d1 e0       	ldi	r29, 0x01	; 1
	extern int8_t pb, enc_a, enc_b;
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
	delta_step = 0;
    ce28:	c1 e0       	ldi	r28, 0x01	; 1
    ce2a:	99 23       	and	r25, r25
    ce2c:	f1 f0       	breq	.+60     	; 0xce6a <sketch_loop+0x5c>
		if(PB_ENC_L)
		{
			delta_step = 1;
		}
	}
	if(PB_L)
    ce2e:	84 fd       	sbrc	r24, 4
    ce30:	1f c0       	rjmp	.+62     	; 0xce70 <sketch_loop+0x62>

void update_sketch(int8_t delta_color, int8_t delta_step)
{
	extern int8_t enc_a, enc_b;
	
	if(enc_a != 0 || enc_b != 0)
    ce32:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <enc_a>
    ce36:	81 11       	cpse	r24, r1
    ce38:	3c c0       	rjmp	.+120    	; 0xceb2 <sketch_loop+0xa4>
    ce3a:	90 91 e6 31 	lds	r25, 0x31E6	; 0x8031e6 <enc_b>
    ce3e:	91 11       	cpse	r25, r1
    ce40:	38 c0       	rjmp	.+112    	; 0xceb2 <sketch_loop+0xa4>
	{
		move_cursor(enc_a*step, 0);
		move_cursor(0, enc_b*step);
	}

	if(delta_step != 0)
    ce42:	c1 11       	cpse	r28, r1
    ce44:	49 c0       	rjmp	.+146    	; 0xced8 <sketch_loop+0xca>
		if(step >10)
			step = 1;
		update_status();
	}

	if(delta_color != 0)
    ce46:	dd 23       	and	r29, r29
    ce48:	11 f0       	breq	.+4      	; 0xce4e <sketch_loop+0x40>
    ce4a:	3e da       	rcall	.-2948   	; 0xc2c8 <change_color.part.1>

	{
		change_color(delta_color);
		update_status();
    ce4c:	d2 dd       	rcall	.-1116   	; 0xc9f2 <update_status>
    ce4e:	10 92 d6 31 	sts	0x31D6, r1	; 0x8031d6 <enc_a>
			get_inputs();
		}
		mm_start();
	}
	update_sketch(delta_color,delta_step);
	enc_a = 0;
    ce52:	10 92 e6 31 	sts	0x31E6, r1	; 0x8031e6 <enc_b>
	enc_b = 0;
    ce56:	80 e0       	ldi	r24, 0x00	; 0
	delta_step = 0;
	delta_color = 0;
	
	return(0);
    ce58:	df 91       	pop	r29
    ce5a:	cf 91       	pop	r28
    ce5c:	1f 91       	pop	r17
    ce5e:	0f 91       	pop	r16
    ce60:	08 95       	ret
    ce62:	d0 e0       	ldi	r29, 0x00	; 0
//todo: get rid of globals
	extern int8_t pb, enc_a, enc_b;
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
    ce64:	c1 e0       	ldi	r28, 0x01	; 1
	delta_step = 0;
    ce66:	91 11       	cpse	r25, r1
    ce68:	e2 cf       	rjmp	.-60     	; 0xce2e <sketch_loop+0x20>
    ce6a:	c0 e0       	ldi	r28, 0x00	; 0
    ce6c:	84 ff       	sbrs	r24, 4
		if(PB_ENC_L)
		{
			delta_step = 1;
		}
	}
	if(PB_L)
    ce6e:	e1 cf       	rjmp	.-62     	; 0xce32 <sketch_loop+0x24>
    ce70:	8b ee       	ldi	r24, 0xEB	; 235
	{
		printf("Wait for PB_L to clear");
    ce72:	96 e2       	ldi	r25, 0x26	; 38
    ce74:	9f 93       	push	r25
    ce76:	8f 93       	push	r24
    ce78:	0e 94 90 81 	call	0x10320	; 0x10320 <printf>
    ce7c:	0e 94 3a 5b 	call	0xb674	; 0xb674 <get_inputs>
		get_inputs();
    ce80:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
		while(PB_L)
    ce84:	0f 90       	pop	r0
    ce86:	0f 90       	pop	r0
    ce88:	84 ff       	sbrs	r24, 4
    ce8a:	0d c0       	rjmp	.+26     	; 0xcea6 <sketch_loop+0x98>
    ce8c:	80 e0       	ldi	r24, 0x00	; 0
//todo: get rid of globals
	extern int8_t pb, enc_a, enc_b;
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
    ce8e:	90 e0       	ldi	r25, 0x00	; 0
    ce90:	01 96       	adiw	r24, 0x01	; 1
		barrier();
    ce92:	86 35       	cpi	r24, 0x56	; 86
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    ce94:	20 ed       	ldi	r18, 0xD0	; 208
    ce96:	92 07       	cpc	r25, r18
    ce98:	d9 f7       	brne	.-10     	; 0xce90 <sketch_loop+0x82>
    ce9a:	0e 94 3a 5b 	call	0xb674	; 0xb674 <get_inputs>
		printf("Wait for PB_L to clear");
		get_inputs();
		while(PB_L)
		{
			delay_ms(10);
			get_inputs();
    ce9e:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
	}
	if(PB_L)
	{
		printf("Wait for PB_L to clear");
		get_inputs();
		while(PB_L)
    cea2:	84 fd       	sbrc	r24, 4
    cea4:	f3 cf       	rjmp	.-26     	; 0xce8c <sketch_loop+0x7e>
    cea6:	0e 94 82 5b 	call	0xb704	; 0xb704 <mm_start>
		{
			delay_ms(10);
			get_inputs();
		}
		mm_start();
    ceaa:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <enc_a>

void update_sketch(int8_t delta_color, int8_t delta_step)
{
	extern int8_t enc_a, enc_b;
	
	if(enc_a != 0 || enc_b != 0)
    ceae:	88 23       	and	r24, r24
    ceb0:	21 f2       	breq	.-120    	; 0xce3a <sketch_loop+0x2c>
    ceb2:	90 91 e4 31 	lds	r25, 0x31E4	; 0x8031e4 <step>
	{
		move_cursor(enc_a*step, 0);
    ceb6:	60 e0       	ldi	r22, 0x00	; 0
    ceb8:	89 9f       	mul	r24, r25
    ceba:	80 2d       	mov	r24, r0
    cebc:	11 24       	eor	r1, r1
    cebe:	35 df       	rcall	.-406    	; 0xcd2a <move_cursor>
    cec0:	80 91 e6 31 	lds	r24, 0x31E6	; 0x8031e6 <enc_b>
		move_cursor(0, enc_b*step);
    cec4:	60 91 e4 31 	lds	r22, 0x31E4	; 0x8031e4 <step>
    cec8:	86 9f       	mul	r24, r22
    ceca:	60 2d       	mov	r22, r0
    cecc:	11 24       	eor	r1, r1
    cece:	80 e0       	ldi	r24, 0x00	; 0
    ced0:	2c df       	rcall	.-424    	; 0xcd2a <move_cursor>
    ced2:	cc 23       	and	r28, r28
	}

	if(delta_step != 0)
    ced4:	09 f4       	brne	.+2      	; 0xced8 <sketch_loop+0xca>
    ced6:	b7 cf       	rjmp	.-146    	; 0xce46 <sketch_loop+0x38>
    ced8:	80 91 e4 31 	lds	r24, 0x31E4	; 0x8031e4 <step>
	{
		step += delta_step;
    cedc:	91 e0       	ldi	r25, 0x01	; 1
    cede:	98 0f       	add	r25, r24
    cee0:	8a 50       	subi	r24, 0x0A	; 10
		if(step <1)
			step = 1;
		if(step >10)
    cee2:	86 3f       	cpi	r24, 0xF6	; 246
    cee4:	08 f0       	brcs	.+2      	; 0xcee8 <sketch_loop+0xda>
    cee6:	5b c0       	rjmp	.+182    	; 0xcf9e <sketch_loop+0x190>

	if(delta_step != 0)
	{
		step += delta_step;
		if(step <1)
			step = 1;
    cee8:	81 e0       	ldi	r24, 0x01	; 1
    ceea:	80 93 e4 31 	sts	0x31E4, r24	; 0x8031e4 <step>
		if(step >10)
			step = 1;
		update_status();
    ceee:	81 dd       	rcall	.-1278   	; 0xc9f2 <update_status>
    cef0:	aa cf       	rjmp	.-172    	; 0xce46 <sketch_loop+0x38>
    cef2:	00 e0       	ldi	r16, 0x00	; 0
}

void clear_scr(void)
{

	gfx_draw_filled_rect(0,0,ILI9341_DEFAULT_WIDTH,ILI9341_DEFAULT_HEIGHT, GFX_COLOR_BLACK);
    cef4:	10 e0       	ldi	r17, 0x00	; 0
    cef6:	20 ef       	ldi	r18, 0xF0	; 240
    cef8:	30 e0       	ldi	r19, 0x00	; 0
    cefa:	40 e4       	ldi	r20, 0x40	; 64
    cefc:	51 e0       	ldi	r21, 0x01	; 1
    cefe:	60 e0       	ldi	r22, 0x00	; 0
    cf00:	70 e0       	ldi	r23, 0x00	; 0
    cf02:	80 e0       	ldi	r24, 0x00	; 0
    cf04:	90 e0       	ldi	r25, 0x00	; 0
    cf06:	5f d7       	rcall	.+3774   	; 0xddc6 <gfx_generic_draw_filled_rect>
    cf08:	83 e0       	ldi	r24, 0x03	; 3
	gfx_set_orientation(GFX_FLIP_X | GFX_FLIP_Y);
    cf0a:	0e 94 14 70 	call	0xe028	; 0xe028 <gfx_ili9341_set_orientation>
    cf0e:	0f ef       	ldi	r16, 0xFF	; 255
/*! Generic implementation of gfx_draw_horizontal_line(). */
__always_inline static void gfx_generic_draw_horizontal_line(
		gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
		gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, length, 1, color);
    cf10:	1f ef       	ldi	r17, 0xFF	; 255
    cf12:	21 e0       	ldi	r18, 0x01	; 1
    cf14:	30 e0       	ldi	r19, 0x00	; 0
    cf16:	4d e3       	ldi	r20, 0x3D	; 61
    cf18:	51 e0       	ldi	r21, 0x01	; 1
    cf1a:	62 e0       	ldi	r22, 0x02	; 2
    cf1c:	70 e0       	ldi	r23, 0x00	; 0
    cf1e:	82 e0       	ldi	r24, 0x02	; 2
    cf20:	90 e0       	ldi	r25, 0x00	; 0
    cf22:	51 d7       	rcall	.+3746   	; 0xddc6 <gfx_generic_draw_filled_rect>
    cf24:	21 e0       	ldi	r18, 0x01	; 1
    cf26:	30 e0       	ldi	r19, 0x00	; 0
    cf28:	4d e3       	ldi	r20, 0x3D	; 61
    cf2a:	51 e0       	ldi	r21, 0x01	; 1
    cf2c:	6e ed       	ldi	r22, 0xDE	; 222
    cf2e:	70 e0       	ldi	r23, 0x00	; 0
    cf30:	82 e0       	ldi	r24, 0x02	; 2
    cf32:	90 e0       	ldi	r25, 0x00	; 0
    cf34:	48 d7       	rcall	.+3728   	; 0xddc6 <gfx_generic_draw_filled_rect>
    cf36:	2d ed       	ldi	r18, 0xDD	; 221

/*! Generic implementation of gfx_draw_vertical_line(). */
__always_inline static void gfx_generic_draw_vertical_line(gfx_coord_t x,
		gfx_coord_t y, gfx_coord_t length, gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, 1, length, color);
    cf38:	30 e0       	ldi	r19, 0x00	; 0
    cf3a:	41 e0       	ldi	r20, 0x01	; 1
    cf3c:	50 e0       	ldi	r21, 0x00	; 0
    cf3e:	62 e0       	ldi	r22, 0x02	; 2
    cf40:	70 e0       	ldi	r23, 0x00	; 0
    cf42:	82 e0       	ldi	r24, 0x02	; 2
    cf44:	90 e0       	ldi	r25, 0x00	; 0
    cf46:	3f d7       	rcall	.+3710   	; 0xddc6 <gfx_generic_draw_filled_rect>
    cf48:	2d ed       	ldi	r18, 0xDD	; 221
    cf4a:	30 e0       	ldi	r19, 0x00	; 0
    cf4c:	41 e0       	ldi	r20, 0x01	; 1
    cf4e:	50 e0       	ldi	r21, 0x00	; 0
    cf50:	62 e0       	ldi	r22, 0x02	; 2
    cf52:	70 e0       	ldi	r23, 0x00	; 0
    cf54:	8e e3       	ldi	r24, 0x3E	; 62
    cf56:	91 e0       	ldi	r25, 0x01	; 1
    cf58:	36 d7       	rcall	.+3692   	; 0xddc6 <gfx_generic_draw_filled_rect>
    cf5a:	80 ea       	ldi	r24, 0xA0	; 160
extern int16_t new_x, new_y;
void init_sketch(void)
{
	clear_scr();

	cur_x = 160;
    cf5c:	90 e0       	ldi	r25, 0x00	; 0
    cf5e:	80 93 e2 31 	sts	0x31E2, r24	; 0x8031e2 <cur_x>
    cf62:	90 93 e3 31 	sts	0x31E3, r25	; 0x8031e3 <cur_x+0x1>
    cf66:	88 e7       	ldi	r24, 0x78	; 120
	cur_y = 120;
    cf68:	90 e0       	ldi	r25, 0x00	; 0
    cf6a:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <cur_y>
    cf6e:	90 93 d5 31 	sts	0x31D5, r25	; 0x8031d5 <cur_y+0x1>
    cf72:	81 e0       	ldi	r24, 0x01	; 1
	step  = 1;
    cf74:	80 93 e4 31 	sts	0x31E4, r24	; 0x8031e4 <step>
    cf78:	10 92 e5 31 	sts	0x31E5, r1	; 0x8031e5 <style>
	style = 0;
    cf7c:	8f ef       	ldi	r24, 0xFF	; 255
	cur_color = GFX_COLOR_WHITE;
    cf7e:	9f ef       	ldi	r25, 0xFF	; 255
    cf80:	80 93 d7 31 	sts	0x31D7, r24	; 0x8031d7 <cur_color>
    cf84:	90 93 d8 31 	sts	0x31D8, r25	; 0x8031d8 <cur_color+0x1>

	draw_cursor(cur_x, cur_y);
    cf88:	68 e7       	ldi	r22, 0x78	; 120
    cf8a:	70 e0       	ldi	r23, 0x00	; 0
    cf8c:	80 ea       	ldi	r24, 0xA0	; 160
    cf8e:	90 e0       	ldi	r25, 0x00	; 0
    cf90:	63 dc       	rcall	.-1850   	; 0xc858 <draw_cursor>
	update_status();
    cf92:	2f dd       	rcall	.-1442   	; 0xc9f2 <update_status>
    cf94:	80 91 df 31 	lds	r24, 0x31DF	; 0x8031df <pb>
    cf98:	c0 e0       	ldi	r28, 0x00	; 0
	extern int8_t pb, enc_a, enc_b;
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
	delta_step = 0;
    cf9a:	d0 e0       	ldi	r29, 0x00	; 0
//todo: get rid of globals
	extern int8_t pb, enc_a, enc_b;
	int8_t delta_color;
	int8_t delta_step;

	delta_color = 0;
    cf9c:	48 cf       	rjmp	.-368    	; 0xce2e <sketch_loop+0x20>
    cf9e:	90 93 e4 31 	sts	0x31E4, r25	; 0x8031e4 <step>
		move_cursor(0, enc_b*step);
	}

	if(delta_step != 0)
	{
		step += delta_step;
    cfa2:	a5 cf       	rjmp	.-182    	; 0xceee <sketch_loop+0xe0>

0000cfa4 <ili9341_send_draw_limits>:
    cfa4:	cf 93       	push	r28
		*pixels = ILI9341_COLOR(red, green, blue);
		pixels++;
	}

	ili9341_deselect_chip();
}
    cfa6:	df 93       	push	r29
    cfa8:	cd b7       	in	r28, 0x3d	; 61
    cfaa:	de b7       	in	r29, 0x3e	; 62
    cfac:	2a 97       	sbiw	r28, 0x0a	; 10
    cfae:	cd bf       	out	0x3d, r28	; 61
    cfb0:	de bf       	out	0x3e, r29	; 62
    cfb2:	90 e1       	ldi	r25, 0x10	; 16
    cfb4:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    cfb8:	91 e0       	ldi	r25, 0x01	; 1
    cfba:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    cfbe:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    cfc2:	95 ff       	sbrs	r25, 5
    cfc4:	fc cf       	rjmp	.-8      	; 0xcfbe <ili9341_send_draw_limits+0x1a>
    cfc6:	9f b7       	in	r25, 0x3f	; 63
    cfc8:	9a 83       	std	Y+2, r25	; 0x02
    cfca:	f8 94       	cli
    cfcc:	9a 81       	ldd	r25, Y+2	; 0x02
    cfce:	20 e4       	ldi	r18, 0x40	; 64
    cfd0:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    cfd4:	2a e2       	ldi	r18, 0x2A	; 42
    cfd6:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    cfda:	9f bf       	out	0x3f, r25	; 63
    cfdc:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    cfe0:	96 ff       	sbrs	r25, 6
    cfe2:	fc cf       	rjmp	.-8      	; 0xcfdc <ili9341_send_draw_limits+0x38>
    cfe4:	90 e4       	ldi	r25, 0x40	; 64
    cfe6:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    cfea:	90 e1       	ldi	r25, 0x10	; 16
    cfec:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    cff0:	20 91 70 2d 	lds	r18, 0x2D70	; 0x802d70 <limit_start_x+0x1>
    cff4:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    cff8:	95 ff       	sbrs	r25, 5
    cffa:	fc cf       	rjmp	.-8      	; 0xcff4 <ili9341_send_draw_limits+0x50>
    cffc:	9f b7       	in	r25, 0x3f	; 63
    cffe:	9a 87       	std	Y+10, r25	; 0x0a
    d000:	f8 94       	cli
    d002:	9a 85       	ldd	r25, Y+10	; 0x0a
    d004:	30 e4       	ldi	r19, 0x40	; 64
    d006:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d00a:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d00e:	9f bf       	out	0x3f, r25	; 63
    d010:	20 91 6f 2d 	lds	r18, 0x2D6F	; 0x802d6f <limit_start_x>
    d014:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d018:	95 ff       	sbrs	r25, 5
    d01a:	fc cf       	rjmp	.-8      	; 0xd014 <ili9341_send_draw_limits+0x70>
    d01c:	9f b7       	in	r25, 0x3f	; 63
    d01e:	99 87       	std	Y+9, r25	; 0x09
    d020:	f8 94       	cli
    d022:	99 85       	ldd	r25, Y+9	; 0x09
    d024:	30 e4       	ldi	r19, 0x40	; 64
    d026:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d02a:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d02e:	9f bf       	out	0x3f, r25	; 63
    d030:	88 23       	and	r24, r24
    d032:	01 f1       	breq	.+64     	; 0xd074 <ili9341_send_draw_limits+0xd0>
    d034:	20 91 6c 2d 	lds	r18, 0x2D6C	; 0x802d6c <limit_end_x+0x1>
    d038:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d03c:	95 ff       	sbrs	r25, 5
    d03e:	fc cf       	rjmp	.-8      	; 0xd038 <ili9341_send_draw_limits+0x94>
    d040:	9f b7       	in	r25, 0x3f	; 63
    d042:	98 87       	std	Y+8, r25	; 0x08
    d044:	f8 94       	cli
    d046:	98 85       	ldd	r25, Y+8	; 0x08
    d048:	30 e4       	ldi	r19, 0x40	; 64
    d04a:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d04e:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d052:	9f bf       	out	0x3f, r25	; 63
    d054:	20 91 6b 2d 	lds	r18, 0x2D6B	; 0x802d6b <limit_end_x>
    d058:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d05c:	95 ff       	sbrs	r25, 5
    d05e:	fc cf       	rjmp	.-8      	; 0xd058 <ili9341_send_draw_limits+0xb4>
    d060:	9f b7       	in	r25, 0x3f	; 63
    d062:	9f 83       	std	Y+7, r25	; 0x07
    d064:	f8 94       	cli
    d066:	9f 81       	ldd	r25, Y+7	; 0x07
    d068:	30 e4       	ldi	r19, 0x40	; 64
    d06a:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d06e:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d072:	9f bf       	out	0x3f, r25	; 63
    d074:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d078:	96 ff       	sbrs	r25, 6
    d07a:	fc cf       	rjmp	.-8      	; 0xd074 <ili9341_send_draw_limits+0xd0>
    d07c:	90 e4       	ldi	r25, 0x40	; 64
    d07e:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d082:	91 e0       	ldi	r25, 0x01	; 1
    d084:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d088:	20 e1       	ldi	r18, 0x10	; 16
    d08a:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d08e:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d092:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d096:	95 ff       	sbrs	r25, 5
    d098:	fc cf       	rjmp	.-8      	; 0xd092 <ili9341_send_draw_limits+0xee>
    d09a:	9f b7       	in	r25, 0x3f	; 63
    d09c:	99 83       	std	Y+1, r25	; 0x01
    d09e:	f8 94       	cli
    d0a0:	99 81       	ldd	r25, Y+1	; 0x01
    d0a2:	20 e4       	ldi	r18, 0x40	; 64
    d0a4:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0a8:	2b e2       	ldi	r18, 0x2B	; 43
    d0aa:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d0ae:	9f bf       	out	0x3f, r25	; 63
    d0b0:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0b4:	96 ff       	sbrs	r25, 6
    d0b6:	fc cf       	rjmp	.-8      	; 0xd0b0 <ili9341_send_draw_limits+0x10c>
    d0b8:	90 e4       	ldi	r25, 0x40	; 64
    d0ba:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0be:	90 e1       	ldi	r25, 0x10	; 16
    d0c0:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d0c4:	20 91 6e 2d 	lds	r18, 0x2D6E	; 0x802d6e <limit_start_y+0x1>
    d0c8:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0cc:	95 ff       	sbrs	r25, 5
    d0ce:	fc cf       	rjmp	.-8      	; 0xd0c8 <ili9341_send_draw_limits+0x124>
    d0d0:	9f b7       	in	r25, 0x3f	; 63
    d0d2:	9e 83       	std	Y+6, r25	; 0x06
    d0d4:	f8 94       	cli
    d0d6:	9e 81       	ldd	r25, Y+6	; 0x06
    d0d8:	30 e4       	ldi	r19, 0x40	; 64
    d0da:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0de:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d0e2:	9f bf       	out	0x3f, r25	; 63
    d0e4:	20 91 6d 2d 	lds	r18, 0x2D6D	; 0x802d6d <limit_start_y>
    d0e8:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0ec:	95 ff       	sbrs	r25, 5
    d0ee:	fc cf       	rjmp	.-8      	; 0xd0e8 <ili9341_send_draw_limits+0x144>
    d0f0:	9f b7       	in	r25, 0x3f	; 63
    d0f2:	9d 83       	std	Y+5, r25	; 0x05
    d0f4:	f8 94       	cli
    d0f6:	9d 81       	ldd	r25, Y+5	; 0x05
    d0f8:	30 e4       	ldi	r19, 0x40	; 64
    d0fa:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d0fe:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d102:	9f bf       	out	0x3f, r25	; 63
    d104:	88 23       	and	r24, r24
    d106:	01 f1       	breq	.+64     	; 0xd148 <ili9341_send_draw_limits+0x1a4>
    d108:	90 91 6a 2d 	lds	r25, 0x2D6A	; 0x802d6a <limit_end_y+0x1>
    d10c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d110:	85 ff       	sbrs	r24, 5
    d112:	fc cf       	rjmp	.-8      	; 0xd10c <ili9341_send_draw_limits+0x168>
    d114:	8f b7       	in	r24, 0x3f	; 63
    d116:	8c 83       	std	Y+4, r24	; 0x04
    d118:	f8 94       	cli
    d11a:	8c 81       	ldd	r24, Y+4	; 0x04
    d11c:	20 e4       	ldi	r18, 0x40	; 64
    d11e:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d122:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d126:	8f bf       	out	0x3f, r24	; 63
    d128:	90 91 69 2d 	lds	r25, 0x2D69	; 0x802d69 <limit_end_y>
    d12c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d130:	85 ff       	sbrs	r24, 5
    d132:	fc cf       	rjmp	.-8      	; 0xd12c <ili9341_send_draw_limits+0x188>
    d134:	8f b7       	in	r24, 0x3f	; 63
    d136:	8b 83       	std	Y+3, r24	; 0x03
    d138:	f8 94       	cli
    d13a:	8b 81       	ldd	r24, Y+3	; 0x03
    d13c:	20 e4       	ldi	r18, 0x40	; 64
    d13e:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d142:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d146:	8f bf       	out	0x3f, r24	; 63
    d148:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d14c:	86 ff       	sbrs	r24, 6
    d14e:	fc cf       	rjmp	.-8      	; 0xd148 <ili9341_send_draw_limits+0x1a4>
    d150:	80 e4       	ldi	r24, 0x40	; 64
    d152:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d156:	81 e0       	ldi	r24, 0x01	; 1
    d158:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d15c:	2a 96       	adiw	r28, 0x0a	; 10
    d15e:	cd bf       	out	0x3d, r28	; 61
    d160:	de bf       	out	0x3e, r29	; 62
    d162:	df 91       	pop	r29
    d164:	cf 91       	pop	r28
    d166:	08 95       	ret

0000d168 <ili9341_set_top_left_limit>:
    d168:	cf 93       	push	r28
    d16a:	df 93       	push	r29
    d16c:	00 d0       	rcall	.+0      	; 0xd16e <ili9341_set_top_left_limit+0x6>
    d16e:	00 d0       	rcall	.+0      	; 0xd170 <ili9341_set_top_left_limit+0x8>
    d170:	cd b7       	in	r28, 0x3d	; 61
    d172:	de b7       	in	r29, 0x3e	; 62
    d174:	80 93 6f 2d 	sts	0x2D6F, r24	; 0x802d6f <limit_start_x>
    d178:	90 93 70 2d 	sts	0x2D70, r25	; 0x802d70 <limit_start_x+0x1>
    d17c:	60 93 6d 2d 	sts	0x2D6D, r22	; 0x802d6d <limit_start_y>
    d180:	70 93 6e 2d 	sts	0x2D6E, r23	; 0x802d6e <limit_start_y+0x1>
    d184:	80 e1       	ldi	r24, 0x10	; 16
    d186:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d18a:	81 e0       	ldi	r24, 0x01	; 1
    d18c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d190:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d194:	85 ff       	sbrs	r24, 5
    d196:	fc cf       	rjmp	.-8      	; 0xd190 <ili9341_set_top_left_limit+0x28>
    d198:	8f b7       	in	r24, 0x3f	; 63
    d19a:	8a 83       	std	Y+2, r24	; 0x02
    d19c:	f8 94       	cli
    d19e:	8a 81       	ldd	r24, Y+2	; 0x02
    d1a0:	90 e4       	ldi	r25, 0x40	; 64
    d1a2:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1a6:	9a e2       	ldi	r25, 0x2A	; 42
    d1a8:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d1ac:	8f bf       	out	0x3f, r24	; 63
    d1ae:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1b2:	86 ff       	sbrs	r24, 6
    d1b4:	fc cf       	rjmp	.-8      	; 0xd1ae <ili9341_set_top_left_limit+0x46>
    d1b6:	80 e4       	ldi	r24, 0x40	; 64
    d1b8:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1bc:	80 e1       	ldi	r24, 0x10	; 16
    d1be:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d1c2:	90 91 70 2d 	lds	r25, 0x2D70	; 0x802d70 <limit_start_x+0x1>
    d1c6:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1ca:	85 ff       	sbrs	r24, 5
    d1cc:	fc cf       	rjmp	.-8      	; 0xd1c6 <ili9341_set_top_left_limit+0x5e>
    d1ce:	8f b7       	in	r24, 0x3f	; 63
    d1d0:	8c 83       	std	Y+4, r24	; 0x04
    d1d2:	f8 94       	cli
    d1d4:	8c 81       	ldd	r24, Y+4	; 0x04
    d1d6:	20 e4       	ldi	r18, 0x40	; 64
    d1d8:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1dc:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d1e0:	8f bf       	out	0x3f, r24	; 63
    d1e2:	90 91 6f 2d 	lds	r25, 0x2D6F	; 0x802d6f <limit_start_x>
    d1e6:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1ea:	85 ff       	sbrs	r24, 5
    d1ec:	fc cf       	rjmp	.-8      	; 0xd1e6 <ili9341_set_top_left_limit+0x7e>
    d1ee:	8f b7       	in	r24, 0x3f	; 63
    d1f0:	8b 83       	std	Y+3, r24	; 0x03
    d1f2:	f8 94       	cli
    d1f4:	8b 81       	ldd	r24, Y+3	; 0x03
    d1f6:	20 e4       	ldi	r18, 0x40	; 64
    d1f8:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d1fc:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d200:	8f bf       	out	0x3f, r24	; 63
    d202:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d206:	86 ff       	sbrs	r24, 6
    d208:	fc cf       	rjmp	.-8      	; 0xd202 <ili9341_set_top_left_limit+0x9a>
    d20a:	80 e4       	ldi	r24, 0x40	; 64
    d20c:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d210:	81 e0       	ldi	r24, 0x01	; 1
    d212:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d216:	90 e1       	ldi	r25, 0x10	; 16
    d218:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d21c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d220:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d224:	85 ff       	sbrs	r24, 5
    d226:	fc cf       	rjmp	.-8      	; 0xd220 <ili9341_set_top_left_limit+0xb8>
    d228:	8f b7       	in	r24, 0x3f	; 63
    d22a:	89 83       	std	Y+1, r24	; 0x01
    d22c:	f8 94       	cli
    d22e:	89 81       	ldd	r24, Y+1	; 0x01
    d230:	90 e4       	ldi	r25, 0x40	; 64
    d232:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d236:	9b e2       	ldi	r25, 0x2B	; 43
    d238:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d23c:	8f bf       	out	0x3f, r24	; 63
    d23e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d242:	86 ff       	sbrs	r24, 6
    d244:	fc cf       	rjmp	.-8      	; 0xd23e <ili9341_set_top_left_limit+0xd6>
    d246:	80 e4       	ldi	r24, 0x40	; 64
    d248:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d24c:	80 e1       	ldi	r24, 0x10	; 16
    d24e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d252:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <limit_start_y+0x1>
    d256:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d25a:	85 ff       	sbrs	r24, 5
    d25c:	fc cf       	rjmp	.-8      	; 0xd256 <ili9341_set_top_left_limit+0xee>
    d25e:	8f b7       	in	r24, 0x3f	; 63
    d260:	8e 83       	std	Y+6, r24	; 0x06
    d262:	f8 94       	cli
    d264:	8e 81       	ldd	r24, Y+6	; 0x06
    d266:	20 e4       	ldi	r18, 0x40	; 64
    d268:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d26c:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d270:	8f bf       	out	0x3f, r24	; 63
    d272:	90 91 6d 2d 	lds	r25, 0x2D6D	; 0x802d6d <limit_start_y>
    d276:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d27a:	85 ff       	sbrs	r24, 5
    d27c:	fc cf       	rjmp	.-8      	; 0xd276 <ili9341_set_top_left_limit+0x10e>
    d27e:	8f b7       	in	r24, 0x3f	; 63
    d280:	8d 83       	std	Y+5, r24	; 0x05
    d282:	f8 94       	cli
    d284:	8d 81       	ldd	r24, Y+5	; 0x05
    d286:	20 e4       	ldi	r18, 0x40	; 64
    d288:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d28c:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d290:	8f bf       	out	0x3f, r24	; 63
    d292:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d296:	86 ff       	sbrs	r24, 6
    d298:	fc cf       	rjmp	.-8      	; 0xd292 <ili9341_set_top_left_limit+0x12a>
    d29a:	80 e4       	ldi	r24, 0x40	; 64
    d29c:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d2a0:	81 e0       	ldi	r24, 0x01	; 1
    d2a2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d2a6:	26 96       	adiw	r28, 0x06	; 6
    d2a8:	cd bf       	out	0x3d, r28	; 61
    d2aa:	de bf       	out	0x3e, r29	; 62
    d2ac:	df 91       	pop	r29
    d2ae:	cf 91       	pop	r28
    d2b0:	08 95       	ret

0000d2b2 <ili9341_set_bottom_right_limit>:
    d2b2:	80 93 6b 2d 	sts	0x2D6B, r24	; 0x802d6b <limit_end_x>
    d2b6:	90 93 6c 2d 	sts	0x2D6C, r25	; 0x802d6c <limit_end_x+0x1>
    d2ba:	60 93 69 2d 	sts	0x2D69, r22	; 0x802d69 <limit_end_y>
    d2be:	70 93 6a 2d 	sts	0x2D6A, r23	; 0x802d6a <limit_end_y+0x1>
    d2c2:	81 e0       	ldi	r24, 0x01	; 1
    d2c4:	6f ce       	rjmp	.-802    	; 0xcfa4 <ili9341_send_draw_limits>

0000d2c6 <ili9341_set_limits>:
    d2c6:	80 93 6f 2d 	sts	0x2D6F, r24	; 0x802d6f <limit_start_x>
    d2ca:	90 93 70 2d 	sts	0x2D70, r25	; 0x802d70 <limit_start_x+0x1>
    d2ce:	60 93 6d 2d 	sts	0x2D6D, r22	; 0x802d6d <limit_start_y>
    d2d2:	70 93 6e 2d 	sts	0x2D6E, r23	; 0x802d6e <limit_start_y+0x1>
    d2d6:	40 93 6b 2d 	sts	0x2D6B, r20	; 0x802d6b <limit_end_x>
    d2da:	50 93 6c 2d 	sts	0x2D6C, r21	; 0x802d6c <limit_end_x+0x1>
    d2de:	20 93 69 2d 	sts	0x2D69, r18	; 0x802d69 <limit_end_y>
    d2e2:	30 93 6a 2d 	sts	0x2D6A, r19	; 0x802d6a <limit_end_y+0x1>
    d2e6:	81 e0       	ldi	r24, 0x01	; 1
    d2e8:	5d ce       	rjmp	.-838    	; 0xcfa4 <ili9341_send_draw_limits>

0000d2ea <ili9341_read_gram>:
    d2ea:	cf 93       	push	r28
    d2ec:	df 93       	push	r29
    d2ee:	1f 92       	push	r1
    d2f0:	cd b7       	in	r28, 0x3d	; 61
    d2f2:	de b7       	in	r29, 0x3e	; 62
    d2f4:	80 e1       	ldi	r24, 0x10	; 16
    d2f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d2fa:	81 e0       	ldi	r24, 0x01	; 1
    d2fc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d300:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d304:	85 ff       	sbrs	r24, 5
    d306:	fc cf       	rjmp	.-8      	; 0xd300 <ili9341_read_gram+0x16>
    d308:	8f b7       	in	r24, 0x3f	; 63
    d30a:	89 83       	std	Y+1, r24	; 0x01
    d30c:	f8 94       	cli
    d30e:	89 81       	ldd	r24, Y+1	; 0x01
    d310:	90 e4       	ldi	r25, 0x40	; 64
    d312:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d316:	9e e2       	ldi	r25, 0x2E	; 46
    d318:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d31c:	8f bf       	out	0x3f, r24	; 63
    d31e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d322:	86 ff       	sbrs	r24, 6
    d324:	fc cf       	rjmp	.-8      	; 0xd31e <ili9341_read_gram+0x34>
    d326:	80 e4       	ldi	r24, 0x40	; 64
    d328:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d32c:	80 e1       	ldi	r24, 0x10	; 16
    d32e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d332:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d336:	80 61       	ori	r24, 0x10	; 16
    d338:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d33c:	8f ef       	ldi	r24, 0xFF	; 255
    d33e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d342:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d346:	87 ff       	sbrs	r24, 7
    d348:	fc cf       	rjmp	.-8      	; 0xd342 <ili9341_read_gram+0x58>
    d34a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d34e:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d352:	8f 7e       	andi	r24, 0xEF	; 239
    d354:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d358:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d35c:	80 61       	ori	r24, 0x10	; 16
    d35e:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d362:	8f ef       	ldi	r24, 0xFF	; 255
    d364:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d368:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d36c:	87 ff       	sbrs	r24, 7
    d36e:	fc cf       	rjmp	.-8      	; 0xd368 <ili9341_read_gram+0x7e>
    d370:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d374:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d378:	8f 7e       	andi	r24, 0xEF	; 239
    d37a:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d37e:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d382:	80 61       	ori	r24, 0x10	; 16
    d384:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d388:	8f ef       	ldi	r24, 0xFF	; 255
    d38a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d38e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d392:	87 ff       	sbrs	r24, 7
    d394:	fc cf       	rjmp	.-8      	; 0xd38e <ili9341_read_gram+0xa4>
    d396:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d39a:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d39e:	8f 7e       	andi	r24, 0xEF	; 239
    d3a0:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d3a4:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d3a8:	80 61       	ori	r24, 0x10	; 16
    d3aa:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d3ae:	8f ef       	ldi	r24, 0xFF	; 255
    d3b0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d3b4:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d3b8:	87 ff       	sbrs	r24, 7
    d3ba:	fc cf       	rjmp	.-8      	; 0xd3b4 <ili9341_read_gram+0xca>
    d3bc:	40 91 a0 09 	lds	r20, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d3c0:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d3c4:	8f 7e       	andi	r24, 0xEF	; 239
    d3c6:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    d3ca:	81 e0       	ldi	r24, 0x01	; 1
    d3cc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d3d0:	30 e0       	ldi	r19, 0x00	; 0
    d3d2:	22 0f       	add	r18, r18
    d3d4:	33 1f       	adc	r19, r19
    d3d6:	22 0f       	add	r18, r18
    d3d8:	33 1f       	adc	r19, r19
    d3da:	22 0f       	add	r18, r18
    d3dc:	33 1f       	adc	r19, r19
    d3de:	20 7e       	andi	r18, 0xE0	; 224
    d3e0:	37 70       	andi	r19, 0x07	; 7
    d3e2:	89 2f       	mov	r24, r25
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
    d3e6:	98 2f       	mov	r25, r24
    d3e8:	88 27       	eor	r24, r24
    d3ea:	88 27       	eor	r24, r24
    d3ec:	98 7f       	andi	r25, 0xF8	; 248
    d3ee:	82 2b       	or	r24, r18
    d3f0:	93 2b       	or	r25, r19
    d3f2:	24 2f       	mov	r18, r20
    d3f4:	26 95       	lsr	r18
    d3f6:	26 95       	lsr	r18
    d3f8:	26 95       	lsr	r18
    d3fa:	82 2b       	or	r24, r18
    d3fc:	98 27       	eor	r25, r24
    d3fe:	89 27       	eor	r24, r25
    d400:	98 27       	eor	r25, r24
    d402:	0f 90       	pop	r0
    d404:	df 91       	pop	r29
    d406:	cf 91       	pop	r28
    d408:	08 95       	ret

0000d40a <ili9341_write_gram>:
    d40a:	cf 93       	push	r28
    d40c:	df 93       	push	r29
    d40e:	00 d0       	rcall	.+0      	; 0xd410 <ili9341_write_gram+0x6>
    d410:	cd b7       	in	r28, 0x3d	; 61
    d412:	de b7       	in	r29, 0x3e	; 62
    d414:	20 e1       	ldi	r18, 0x10	; 16
    d416:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d41a:	21 e0       	ldi	r18, 0x01	; 1
    d41c:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d420:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d424:	25 ff       	sbrs	r18, 5
    d426:	fc cf       	rjmp	.-8      	; 0xd420 <ili9341_write_gram+0x16>
    d428:	2f b7       	in	r18, 0x3f	; 63
    d42a:	29 83       	std	Y+1, r18	; 0x01
    d42c:	f8 94       	cli
    d42e:	29 81       	ldd	r18, Y+1	; 0x01
    d430:	30 e4       	ldi	r19, 0x40	; 64
    d432:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d436:	3c e2       	ldi	r19, 0x2C	; 44
    d438:	30 93 a0 09 	sts	0x09A0, r19	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d43c:	2f bf       	out	0x3f, r18	; 63
    d43e:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d442:	26 ff       	sbrs	r18, 6
    d444:	fc cf       	rjmp	.-8      	; 0xd43e <ili9341_write_gram+0x34>
    d446:	20 e4       	ldi	r18, 0x40	; 64
    d448:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d44c:	20 e1       	ldi	r18, 0x10	; 16
    d44e:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d452:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d456:	25 ff       	sbrs	r18, 5
    d458:	fc cf       	rjmp	.-8      	; 0xd452 <ili9341_write_gram+0x48>
    d45a:	2f b7       	in	r18, 0x3f	; 63
    d45c:	2b 83       	std	Y+3, r18	; 0x03
    d45e:	f8 94       	cli
    d460:	2b 81       	ldd	r18, Y+3	; 0x03
    d462:	30 e4       	ldi	r19, 0x40	; 64
    d464:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d468:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d46c:	2f bf       	out	0x3f, r18	; 63
    d46e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d472:	85 ff       	sbrs	r24, 5
    d474:	fc cf       	rjmp	.-8      	; 0xd46e <ili9341_write_gram+0x64>
    d476:	8f b7       	in	r24, 0x3f	; 63
    d478:	8a 83       	std	Y+2, r24	; 0x02
    d47a:	f8 94       	cli
    d47c:	8a 81       	ldd	r24, Y+2	; 0x02
    d47e:	20 e4       	ldi	r18, 0x40	; 64
    d480:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d484:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d488:	8f bf       	out	0x3f, r24	; 63
    d48a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d48e:	86 ff       	sbrs	r24, 6
    d490:	fc cf       	rjmp	.-8      	; 0xd48a <ili9341_write_gram+0x80>
    d492:	80 e4       	ldi	r24, 0x40	; 64
    d494:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d498:	81 e0       	ldi	r24, 0x01	; 1
    d49a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d49e:	23 96       	adiw	r28, 0x03	; 3
    d4a0:	cd bf       	out	0x3d, r28	; 61
    d4a2:	de bf       	out	0x3e, r29	; 62
    d4a4:	df 91       	pop	r29
    d4a6:	cf 91       	pop	r28
    d4a8:	08 95       	ret

0000d4aa <ili9341_duplicate_pixel>:
    d4aa:	cf 92       	push	r12
    d4ac:	df 92       	push	r13
    d4ae:	ef 92       	push	r14
    d4b0:	ff 92       	push	r15
    d4b2:	cf 93       	push	r28
    d4b4:	df 93       	push	r29
    d4b6:	00 d0       	rcall	.+0      	; 0xd4b8 <ili9341_duplicate_pixel+0xe>
    d4b8:	cd b7       	in	r28, 0x3d	; 61
    d4ba:	de b7       	in	r29, 0x3e	; 62
    d4bc:	20 e1       	ldi	r18, 0x10	; 16
    d4be:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d4c2:	21 e0       	ldi	r18, 0x01	; 1
    d4c4:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d4c8:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d4cc:	25 ff       	sbrs	r18, 5
    d4ce:	fc cf       	rjmp	.-8      	; 0xd4c8 <ili9341_duplicate_pixel+0x1e>
    d4d0:	2f b7       	in	r18, 0x3f	; 63
    d4d2:	29 83       	std	Y+1, r18	; 0x01
    d4d4:	f8 94       	cli
    d4d6:	29 81       	ldd	r18, Y+1	; 0x01
    d4d8:	30 e4       	ldi	r19, 0x40	; 64
    d4da:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d4de:	3c e2       	ldi	r19, 0x2C	; 44
    d4e0:	30 93 a0 09 	sts	0x09A0, r19	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d4e4:	2f bf       	out	0x3f, r18	; 63
    d4e6:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d4ea:	26 ff       	sbrs	r18, 6
    d4ec:	fc cf       	rjmp	.-8      	; 0xd4e6 <ili9341_duplicate_pixel+0x3c>
    d4ee:	20 e4       	ldi	r18, 0x40	; 64
    d4f0:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d4f4:	20 e1       	ldi	r18, 0x10	; 16
    d4f6:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d4fa:	6a 01       	movw	r12, r20
    d4fc:	7b 01       	movw	r14, r22
    d4fe:	21 e0       	ldi	r18, 0x01	; 1
    d500:	c2 1a       	sub	r12, r18
    d502:	d1 08       	sbc	r13, r1
    d504:	e1 08       	sbc	r14, r1
    d506:	f1 08       	sbc	r15, r1
    d508:	45 2b       	or	r20, r21
    d50a:	46 2b       	or	r20, r22
    d50c:	47 2b       	or	r20, r23
    d50e:	31 f1       	breq	.+76     	; 0xd55c <ili9341_duplicate_pixel+0xb2>
    d510:	30 e4       	ldi	r19, 0x40	; 64
    d512:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d516:	25 ff       	sbrs	r18, 5
    d518:	fc cf       	rjmp	.-8      	; 0xd512 <ili9341_duplicate_pixel+0x68>
    d51a:	2f b7       	in	r18, 0x3f	; 63
    d51c:	2b 83       	std	Y+3, r18	; 0x03
    d51e:	f8 94       	cli
    d520:	2b 81       	ldd	r18, Y+3	; 0x03
    d522:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d526:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d52a:	2f bf       	out	0x3f, r18	; 63
    d52c:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d530:	25 ff       	sbrs	r18, 5
    d532:	fc cf       	rjmp	.-8      	; 0xd52c <ili9341_duplicate_pixel+0x82>
    d534:	2f b7       	in	r18, 0x3f	; 63
    d536:	2a 83       	std	Y+2, r18	; 0x02
    d538:	f8 94       	cli
    d53a:	2a 81       	ldd	r18, Y+2	; 0x02
    d53c:	30 93 a1 09 	sts	0x09A1, r19	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d540:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    d544:	2f bf       	out	0x3f, r18	; 63
    d546:	21 e0       	ldi	r18, 0x01	; 1
    d548:	c2 1a       	sub	r12, r18
    d54a:	d1 08       	sbc	r13, r1
    d54c:	e1 08       	sbc	r14, r1
    d54e:	f1 08       	sbc	r15, r1
    d550:	2f ef       	ldi	r18, 0xFF	; 255
    d552:	c2 16       	cp	r12, r18
    d554:	d2 06       	cpc	r13, r18
    d556:	e2 06       	cpc	r14, r18
    d558:	f2 06       	cpc	r15, r18
    d55a:	d9 f6       	brne	.-74     	; 0xd512 <ili9341_duplicate_pixel+0x68>
    d55c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d560:	86 ff       	sbrs	r24, 6
    d562:	fc cf       	rjmp	.-8      	; 0xd55c <ili9341_duplicate_pixel+0xb2>
    d564:	80 e4       	ldi	r24, 0x40	; 64
    d566:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d56a:	81 e0       	ldi	r24, 0x01	; 1
    d56c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d570:	23 96       	adiw	r28, 0x03	; 3
    d572:	cd bf       	out	0x3d, r28	; 61
    d574:	de bf       	out	0x3e, r29	; 62
    d576:	df 91       	pop	r29
    d578:	cf 91       	pop	r28
    d57a:	ff 90       	pop	r15
    d57c:	ef 90       	pop	r14
    d57e:	df 90       	pop	r13
    d580:	cf 90       	pop	r12
    d582:	08 95       	ret

0000d584 <ili9341_init>:
 * interface, and setting up the controller according to the manufacturer's
 * description. It also set up the screen orientation to the default state
 * (portrait).
 */
void ili9341_init(void)
{
    d584:	cf 92       	push	r12
    d586:	df 92       	push	r13
    d588:	ef 92       	push	r14
    d58a:	ff 92       	push	r15
    d58c:	0f 93       	push	r16
    d58e:	1f 93       	push	r17
    d590:	cf 93       	push	r28
    d592:	df 93       	push	r29
    d594:	cd b7       	in	r28, 0x3d	; 61
    d596:	de b7       	in	r29, 0x3e	; 62
    d598:	a2 97       	sbiw	r28, 0x22	; 34
    d59a:	cd bf       	out	0x3d, r28	; 61
    d59c:	de bf       	out	0x3e, r29	; 62
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

#if defined(CONF_ILI9341_USART_SPI)
	struct usart_spi_device device = {
    d59e:	19 82       	std	Y+1, r1	; 0x01
		.id = 0,
	};

	usart_spi_init(CONF_ILI9341_USART_SPI);
    d5a0:	80 ea       	ldi	r24, 0xA0	; 160
    d5a2:	99 e0       	ldi	r25, 0x09	; 9
    d5a4:	97 d7       	rcall	.+3886   	; 0xe4d4 <usart_spi_init>
	usart_spi_setup_device(CONF_ILI9341_USART_SPI, &device, spi_flags,
    d5a6:	c1 2c       	mov	r12, r1
    d5a8:	d1 2c       	mov	r13, r1
    d5aa:	76 01       	movw	r14, r12
    d5ac:	00 e0       	ldi	r16, 0x00	; 0
    d5ae:	12 e1       	ldi	r17, 0x12	; 18
    d5b0:	2a e7       	ldi	r18, 0x7A	; 122
    d5b2:	30 e0       	ldi	r19, 0x00	; 0
    d5b4:	40 e0       	ldi	r20, 0x00	; 0
    d5b6:	be 01       	movw	r22, r28
    d5b8:	6f 5f       	subi	r22, 0xFF	; 255
    d5ba:	7f 4f       	sbci	r23, 0xFF	; 255
    d5bc:	80 ea       	ldi	r24, 0xA0	; 160
    d5be:	99 e0       	ldi	r25, 0x09	; 9
    d5c0:	9e d7       	rcall	.+3900   	; 0xe4fe <usart_spi_setup_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d5c2:	80 e2       	ldi	r24, 0x20	; 32
    d5c4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d5c8:	80 e0       	ldi	r24, 0x00	; 0
    d5ca:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
    d5cc:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    d5ce:	86 35       	cpi	r24, 0x56	; 86
    d5d0:	20 ed       	ldi	r18, 0xD0	; 208
    d5d2:	92 07       	cpc	r25, r18
    d5d4:	d9 f7       	brne	.-10     	; 0xd5cc <ili9341_init+0x48>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d5d6:	80 e2       	ldi	r24, 0x20	; 32
    d5d8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d5dc:	80 e0       	ldi	r24, 0x00	; 0
    d5de:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
    d5e0:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    d5e2:	86 35       	cpi	r24, 0x56	; 86
    d5e4:	20 ed       	ldi	r18, 0xD0	; 208
    d5e6:	92 07       	cpc	r25, r18
    d5e8:	d9 f7       	brne	.-10     	; 0xd5e0 <ili9341_init+0x5c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d5ea:	80 e2       	ldi	r24, 0x20	; 32
    d5ec:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d5f0:	81 e0       	ldi	r24, 0x01	; 1
    d5f2:	95 e3       	ldi	r25, 0x35	; 53
    d5f4:	ac e0       	ldi	r26, 0x0C	; 12
    d5f6:	b0 e0       	ldi	r27, 0x00	; 0
		barrier();
    d5f8:	01 97       	sbiw	r24, 0x01	; 1
    d5fa:	a1 09       	sbc	r26, r1
    d5fc:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    d5fe:	e1 f7       	brne	.-8      	; 0xd5f8 <ili9341_init+0x74>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d600:	80 e1       	ldi	r24, 0x10	; 16
    d602:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d606:	81 e0       	ldi	r24, 0x01	; 1
    d608:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d60c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d610:	85 ff       	sbrs	r24, 5
    d612:	fc cf       	rjmp	.-8      	; 0xd60c <ili9341_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d614:	8f b7       	in	r24, 0x3f	; 63
    d616:	8e 87       	std	Y+14, r24	; 0x0e
	cpu_irq_disable();
    d618:	f8 94       	cli
	return flags;
    d61a:	8e 85       	ldd	r24, Y+14	; 0x0e
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d61c:	90 e4       	ldi	r25, 0x40	; 64
    d61e:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d622:	91 e1       	ldi	r25, 0x11	; 17
    d624:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d628:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d62a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d62e:	86 ff       	sbrs	r24, 6
    d630:	fc cf       	rjmp	.-8      	; 0xd62a <ili9341_init+0xa6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d632:	80 e4       	ldi	r24, 0x40	; 64
    d634:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d638:	80 e1       	ldi	r24, 0x10	; 16
    d63a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d63e:	81 e0       	ldi	r24, 0x01	; 1
    d640:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d644:	81 e0       	ldi	r24, 0x01	; 1
    d646:	95 e3       	ldi	r25, 0x35	; 53
    d648:	ac e0       	ldi	r26, 0x0C	; 12
    d64a:	b0 e0       	ldi	r27, 0x00	; 0
		barrier();
    d64c:	01 97       	sbiw	r24, 0x01	; 1
    d64e:	a1 09       	sbc	r26, r1
    d650:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    d652:	e1 f7       	brne	.-8      	; 0xd64c <ili9341_init+0xc8>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d654:	80 e1       	ldi	r24, 0x10	; 16
    d656:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d65a:	81 e0       	ldi	r24, 0x01	; 1
    d65c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d660:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d664:	85 ff       	sbrs	r24, 5
    d666:	fc cf       	rjmp	.-8      	; 0xd660 <ili9341_init+0xdc>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d668:	8f b7       	in	r24, 0x3f	; 63
    d66a:	8d 87       	std	Y+13, r24	; 0x0d
	cpu_irq_disable();
    d66c:	f8 94       	cli
	return flags;
    d66e:	8d 85       	ldd	r24, Y+13	; 0x0d
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d670:	90 e4       	ldi	r25, 0x40	; 64
    d672:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d676:	99 e2       	ldi	r25, 0x29	; 41
    d678:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d67c:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d67e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d682:	86 ff       	sbrs	r24, 6
    d684:	fc cf       	rjmp	.-8      	; 0xd67e <ili9341_init+0xfa>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d686:	80 e4       	ldi	r24, 0x40	; 64
    d688:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d68c:	90 e1       	ldi	r25, 0x10	; 16
    d68e:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    d692:	81 e0       	ldi	r24, 0x01	; 1
    d694:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d698:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d69c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d6a0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d6a4:	85 ff       	sbrs	r24, 5
    d6a6:	fc cf       	rjmp	.-8      	; 0xd6a0 <ili9341_init+0x11c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d6a8:	8f b7       	in	r24, 0x3f	; 63
    d6aa:	8c 87       	std	Y+12, r24	; 0x0c
	cpu_irq_disable();
    d6ac:	f8 94       	cli
	return flags;
    d6ae:	8c 85       	ldd	r24, Y+12	; 0x0c
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d6b0:	90 e4       	ldi	r25, 0x40	; 64
    d6b2:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d6b6:	9d ec       	ldi	r25, 0xCD	; 205
    d6b8:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d6bc:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d6be:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d6c2:	86 ff       	sbrs	r24, 6
    d6c4:	fc cf       	rjmp	.-8      	; 0xd6be <ili9341_init+0x13a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d6c6:	80 e4       	ldi	r24, 0x40	; 64
    d6c8:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d6cc:	80 e1       	ldi	r24, 0x10	; 16
    d6ce:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d6d2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d6d6:	85 ff       	sbrs	r24, 5
    d6d8:	fc cf       	rjmp	.-8      	; 0xd6d2 <ili9341_init+0x14e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d6da:	8f b7       	in	r24, 0x3f	; 63
    d6dc:	8a a3       	std	Y+34, r24	; 0x22
	cpu_irq_disable();
    d6de:	f8 94       	cli
	return flags;
    d6e0:	8a a1       	ldd	r24, Y+34	; 0x22
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d6e2:	90 e4       	ldi	r25, 0x40	; 64
    d6e4:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d6e8:	99 e3       	ldi	r25, 0x39	; 57
    d6ea:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d6ee:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d6f0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d6f4:	85 ff       	sbrs	r24, 5
    d6f6:	fc cf       	rjmp	.-8      	; 0xd6f0 <ili9341_init+0x16c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d6f8:	8f b7       	in	r24, 0x3f	; 63
    d6fa:	89 a3       	std	Y+33, r24	; 0x21
	cpu_irq_disable();
    d6fc:	f8 94       	cli
	return flags;
    d6fe:	89 a1       	ldd	r24, Y+33	; 0x21
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d700:	90 e4       	ldi	r25, 0x40	; 64
    d702:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d706:	9c e2       	ldi	r25, 0x2C	; 44
    d708:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d70c:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d70e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d712:	85 ff       	sbrs	r24, 5
    d714:	fc cf       	rjmp	.-8      	; 0xd70e <ili9341_init+0x18a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d716:	8f b7       	in	r24, 0x3f	; 63
    d718:	88 a3       	std	Y+32, r24	; 0x20
	cpu_irq_disable();
    d71a:	f8 94       	cli
	return flags;
    d71c:	88 a1       	ldd	r24, Y+32	; 0x20
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d71e:	90 e4       	ldi	r25, 0x40	; 64
    d720:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d724:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d728:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d72a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d72e:	85 ff       	sbrs	r24, 5
    d730:	fc cf       	rjmp	.-8      	; 0xd72a <ili9341_init+0x1a6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d732:	8f b7       	in	r24, 0x3f	; 63
    d734:	8f 8f       	std	Y+31, r24	; 0x1f
	cpu_irq_disable();
    d736:	f8 94       	cli
	return flags;
    d738:	8f 8d       	ldd	r24, Y+31	; 0x1f
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d73a:	90 e4       	ldi	r25, 0x40	; 64
    d73c:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d740:	94 e3       	ldi	r25, 0x34	; 52
    d742:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d746:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d748:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d74c:	85 ff       	sbrs	r24, 5
    d74e:	fc cf       	rjmp	.-8      	; 0xd748 <ili9341_init+0x1c4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d750:	8f b7       	in	r24, 0x3f	; 63
    d752:	8e 8f       	std	Y+30, r24	; 0x1e
	cpu_irq_disable();
    d754:	f8 94       	cli
	return flags;
    d756:	8e 8d       	ldd	r24, Y+30	; 0x1e
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d758:	90 e4       	ldi	r25, 0x40	; 64
    d75a:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d75e:	92 e0       	ldi	r25, 0x02	; 2
    d760:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d764:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d766:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d76a:	86 ff       	sbrs	r24, 6
    d76c:	fc cf       	rjmp	.-8      	; 0xd766 <ili9341_init+0x1e2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d76e:	80 e4       	ldi	r24, 0x40	; 64
    d770:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d774:	81 e0       	ldi	r24, 0x01	; 1
    d776:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d77a:	90 e1       	ldi	r25, 0x10	; 16
    d77c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d780:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d784:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d788:	85 ff       	sbrs	r24, 5
    d78a:	fc cf       	rjmp	.-8      	; 0xd784 <ili9341_init+0x200>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d78c:	8f b7       	in	r24, 0x3f	; 63
    d78e:	8b 87       	std	Y+11, r24	; 0x0b
	cpu_irq_disable();
    d790:	f8 94       	cli
	return flags;
    d792:	8b 85       	ldd	r24, Y+11	; 0x0b
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d794:	90 e4       	ldi	r25, 0x40	; 64
    d796:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d79a:	9f ec       	ldi	r25, 0xCF	; 207
    d79c:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d7a0:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d7a2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d7a6:	86 ff       	sbrs	r24, 6
    d7a8:	fc cf       	rjmp	.-8      	; 0xd7a2 <ili9341_init+0x21e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d7aa:	80 e4       	ldi	r24, 0x40	; 64
    d7ac:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d7b0:	80 e1       	ldi	r24, 0x10	; 16
    d7b2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d7b6:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d7ba:	85 ff       	sbrs	r24, 5
    d7bc:	fc cf       	rjmp	.-8      	; 0xd7b6 <ili9341_init+0x232>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d7be:	8f b7       	in	r24, 0x3f	; 63
    d7c0:	8d 8f       	std	Y+29, r24	; 0x1d
	cpu_irq_disable();
    d7c2:	f8 94       	cli
	return flags;
    d7c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d7c6:	90 e4       	ldi	r25, 0x40	; 64
    d7c8:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d7cc:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d7d0:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d7d2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d7d6:	85 ff       	sbrs	r24, 5
    d7d8:	fc cf       	rjmp	.-8      	; 0xd7d2 <ili9341_init+0x24e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d7da:	8f b7       	in	r24, 0x3f	; 63
    d7dc:	8c 8f       	std	Y+28, r24	; 0x1c
	cpu_irq_disable();
    d7de:	f8 94       	cli
	return flags;
    d7e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d7e2:	90 e4       	ldi	r25, 0x40	; 64
    d7e4:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d7e8:	9a ea       	ldi	r25, 0xAA	; 170
    d7ea:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d7ee:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d7f0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d7f4:	85 ff       	sbrs	r24, 5
    d7f6:	fc cf       	rjmp	.-8      	; 0xd7f0 <ili9341_init+0x26c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d7f8:	8f b7       	in	r24, 0x3f	; 63
    d7fa:	8b 8f       	std	Y+27, r24	; 0x1b
	cpu_irq_disable();
    d7fc:	f8 94       	cli
	return flags;
    d7fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d800:	90 e4       	ldi	r25, 0x40	; 64
    d802:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d806:	90 eb       	ldi	r25, 0xB0	; 176
    d808:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d80c:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d80e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d812:	86 ff       	sbrs	r24, 6
    d814:	fc cf       	rjmp	.-8      	; 0xd80e <ili9341_init+0x28a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d816:	80 e4       	ldi	r24, 0x40	; 64
    d818:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d81c:	81 e0       	ldi	r24, 0x01	; 1
    d81e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d822:	90 e1       	ldi	r25, 0x10	; 16
    d824:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d828:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d82c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d830:	85 ff       	sbrs	r24, 5
    d832:	fc cf       	rjmp	.-8      	; 0xd82c <ili9341_init+0x2a8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d834:	8f b7       	in	r24, 0x3f	; 63
    d836:	8a 87       	std	Y+10, r24	; 0x0a
	cpu_irq_disable();
    d838:	f8 94       	cli
	return flags;
    d83a:	8a 85       	ldd	r24, Y+10	; 0x0a
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d83c:	90 e4       	ldi	r25, 0x40	; 64
    d83e:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d842:	97 ef       	ldi	r25, 0xF7	; 247
    d844:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d848:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d84a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d84e:	86 ff       	sbrs	r24, 6
    d850:	fc cf       	rjmp	.-8      	; 0xd84a <ili9341_init+0x2c6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d852:	80 e4       	ldi	r24, 0x40	; 64
    d854:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d858:	80 e1       	ldi	r24, 0x10	; 16
    d85a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d85e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d862:	85 ff       	sbrs	r24, 5
    d864:	fc cf       	rjmp	.-8      	; 0xd85e <ili9341_init+0x2da>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d866:	8f b7       	in	r24, 0x3f	; 63
    d868:	8a 8f       	std	Y+26, r24	; 0x1a
	cpu_irq_disable();
    d86a:	f8 94       	cli
	return flags;
    d86c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d86e:	90 e4       	ldi	r25, 0x40	; 64
    d870:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d874:	90 e2       	ldi	r25, 0x20	; 32
    d876:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d87a:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d87c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d880:	86 ff       	sbrs	r24, 6
    d882:	fc cf       	rjmp	.-8      	; 0xd87c <ili9341_init+0x2f8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d884:	80 e4       	ldi	r24, 0x40	; 64
    d886:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d88a:	81 e0       	ldi	r24, 0x01	; 1
    d88c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d890:	90 e1       	ldi	r25, 0x10	; 16
    d892:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d896:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d89a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d89e:	85 ff       	sbrs	r24, 5
    d8a0:	fc cf       	rjmp	.-8      	; 0xd89a <ili9341_init+0x316>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d8a2:	8f b7       	in	r24, 0x3f	; 63
    d8a4:	89 87       	std	Y+9, r24	; 0x09
	cpu_irq_disable();
    d8a6:	f8 94       	cli
	return flags;
    d8a8:	89 85       	ldd	r24, Y+9	; 0x09
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d8aa:	90 e4       	ldi	r25, 0x40	; 64
    d8ac:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d8b0:	90 ec       	ldi	r25, 0xC0	; 192
    d8b2:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d8b6:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d8b8:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d8bc:	86 ff       	sbrs	r24, 6
    d8be:	fc cf       	rjmp	.-8      	; 0xd8b8 <ili9341_init+0x334>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d8c0:	80 e4       	ldi	r24, 0x40	; 64
    d8c2:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d8c6:	80 e1       	ldi	r24, 0x10	; 16
    d8c8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d8cc:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d8d0:	85 ff       	sbrs	r24, 5
    d8d2:	fc cf       	rjmp	.-8      	; 0xd8cc <ili9341_init+0x348>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d8d4:	8f b7       	in	r24, 0x3f	; 63
    d8d6:	89 8f       	std	Y+25, r24	; 0x19
	cpu_irq_disable();
    d8d8:	f8 94       	cli
	return flags;
    d8da:	89 8d       	ldd	r24, Y+25	; 0x19
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d8dc:	90 e4       	ldi	r25, 0x40	; 64
    d8de:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d8e2:	95 e2       	ldi	r25, 0x25	; 37
    d8e4:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d8e8:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d8ea:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d8ee:	86 ff       	sbrs	r24, 6
    d8f0:	fc cf       	rjmp	.-8      	; 0xd8ea <ili9341_init+0x366>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d8f2:	80 e4       	ldi	r24, 0x40	; 64
    d8f4:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d8f8:	81 e0       	ldi	r24, 0x01	; 1
    d8fa:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d8fe:	90 e1       	ldi	r25, 0x10	; 16
    d900:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d904:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d908:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d90c:	85 ff       	sbrs	r24, 5
    d90e:	fc cf       	rjmp	.-8      	; 0xd908 <ili9341_init+0x384>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d910:	8f b7       	in	r24, 0x3f	; 63
    d912:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    d914:	f8 94       	cli
	return flags;
    d916:	88 85       	ldd	r24, Y+8	; 0x08
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d918:	90 e4       	ldi	r25, 0x40	; 64
    d91a:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d91e:	91 ec       	ldi	r25, 0xC1	; 193
    d920:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d924:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d926:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d92a:	86 ff       	sbrs	r24, 6
    d92c:	fc cf       	rjmp	.-8      	; 0xd926 <ili9341_init+0x3a2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d92e:	80 e4       	ldi	r24, 0x40	; 64
    d930:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d934:	80 e1       	ldi	r24, 0x10	; 16
    d936:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d93a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d93e:	85 ff       	sbrs	r24, 5
    d940:	fc cf       	rjmp	.-8      	; 0xd93a <ili9341_init+0x3b6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d942:	8f b7       	in	r24, 0x3f	; 63
    d944:	88 8f       	std	Y+24, r24	; 0x18
	cpu_irq_disable();
    d946:	f8 94       	cli
	return flags;
    d948:	88 8d       	ldd	r24, Y+24	; 0x18
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d94a:	90 e4       	ldi	r25, 0x40	; 64
    d94c:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d950:	91 e1       	ldi	r25, 0x11	; 17
    d952:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d956:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d958:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d95c:	86 ff       	sbrs	r24, 6
    d95e:	fc cf       	rjmp	.-8      	; 0xd958 <ili9341_init+0x3d4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d960:	80 e4       	ldi	r24, 0x40	; 64
    d962:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d966:	81 e0       	ldi	r24, 0x01	; 1
    d968:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d96c:	90 e1       	ldi	r25, 0x10	; 16
    d96e:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d972:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d976:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d97a:	85 ff       	sbrs	r24, 5
    d97c:	fc cf       	rjmp	.-8      	; 0xd976 <ili9341_init+0x3f2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d97e:	8f b7       	in	r24, 0x3f	; 63
    d980:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    d982:	f8 94       	cli
	return flags;
    d984:	8f 81       	ldd	r24, Y+7	; 0x07
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d986:	90 e4       	ldi	r25, 0x40	; 64
    d988:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d98c:	95 ec       	ldi	r25, 0xC5	; 197
    d98e:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d992:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d994:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d998:	86 ff       	sbrs	r24, 6
    d99a:	fc cf       	rjmp	.-8      	; 0xd994 <ili9341_init+0x410>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d99c:	80 e4       	ldi	r24, 0x40	; 64
    d99e:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    d9a2:	80 e1       	ldi	r24, 0x10	; 16
    d9a4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d9a8:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    d9ac:	85 ff       	sbrs	r24, 5
    d9ae:	fc cf       	rjmp	.-8      	; 0xd9a8 <ili9341_init+0x424>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d9b0:	8f b7       	in	r24, 0x3f	; 63
    d9b2:	8f 8b       	std	Y+23, r24	; 0x17
	cpu_irq_disable();
    d9b4:	f8 94       	cli
	return flags;
    d9b6:	8f 89       	ldd	r24, Y+23	; 0x17
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d9b8:	90 e4       	ldi	r25, 0x40	; 64
    d9ba:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d9be:	9c e5       	ldi	r25, 0x5C	; 92
    d9c0:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d9c4:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    d9c6:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d9ca:	85 ff       	sbrs	r24, 5
    d9cc:	fc cf       	rjmp	.-8      	; 0xd9c6 <ili9341_init+0x442>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d9ce:	8f b7       	in	r24, 0x3f	; 63
    d9d0:	8e 8b       	std	Y+22, r24	; 0x16
	cpu_irq_disable();
    d9d2:	f8 94       	cli
	return flags;
    d9d4:	8e 89       	ldd	r24, Y+22	; 0x16
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d9d6:	90 e4       	ldi	r25, 0x40	; 64
    d9d8:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    d9dc:	9c e4       	ldi	r25, 0x4C	; 76
    d9de:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d9e2:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    d9e4:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    d9e8:	86 ff       	sbrs	r24, 6
    d9ea:	fc cf       	rjmp	.-8      	; 0xd9e4 <ili9341_init+0x460>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    d9ec:	80 e4       	ldi	r24, 0x40	; 64
    d9ee:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    d9f2:	81 e0       	ldi	r24, 0x01	; 1
    d9f4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    d9f8:	90 e1       	ldi	r25, 0x10	; 16
    d9fa:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    d9fe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    da02:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    da06:	85 ff       	sbrs	r24, 5
    da08:	fc cf       	rjmp	.-8      	; 0xda02 <ili9341_init+0x47e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    da0a:	8f b7       	in	r24, 0x3f	; 63
    da0c:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    da0e:	f8 94       	cli
	return flags;
    da10:	8e 81       	ldd	r24, Y+6	; 0x06
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da12:	90 e4       	ldi	r25, 0x40	; 64
    da14:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    da18:	97 ec       	ldi	r25, 0xC7	; 199
    da1a:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    da1e:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    da20:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    da24:	86 ff       	sbrs	r24, 6
    da26:	fc cf       	rjmp	.-8      	; 0xda20 <ili9341_init+0x49c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da28:	80 e4       	ldi	r24, 0x40	; 64
    da2a:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    da2e:	80 e1       	ldi	r24, 0x10	; 16
    da30:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    da34:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    da38:	85 ff       	sbrs	r24, 5
    da3a:	fc cf       	rjmp	.-8      	; 0xda34 <ili9341_init+0x4b0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    da3c:	8f b7       	in	r24, 0x3f	; 63
    da3e:	8d 8b       	std	Y+21, r24	; 0x15
	cpu_irq_disable();
    da40:	f8 94       	cli
	return flags;
    da42:	8d 89       	ldd	r24, Y+21	; 0x15
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da44:	90 e4       	ldi	r25, 0x40	; 64
    da46:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    da4a:	94 e9       	ldi	r25, 0x94	; 148
    da4c:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    da50:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    da52:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    da56:	86 ff       	sbrs	r24, 6
    da58:	fc cf       	rjmp	.-8      	; 0xda52 <ili9341_init+0x4ce>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da5a:	80 e4       	ldi	r24, 0x40	; 64
    da5c:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    da60:	81 e0       	ldi	r24, 0x01	; 1
    da62:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    da66:	90 e1       	ldi	r25, 0x10	; 16
    da68:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    da6c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    da70:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    da74:	85 ff       	sbrs	r24, 5
    da76:	fc cf       	rjmp	.-8      	; 0xda70 <ili9341_init+0x4ec>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    da78:	8f b7       	in	r24, 0x3f	; 63
    da7a:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    da7c:	f8 94       	cli
	return flags;
    da7e:	8d 81       	ldd	r24, Y+5	; 0x05
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da80:	90 e4       	ldi	r25, 0x40	; 64
    da82:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    da86:	98 ee       	ldi	r25, 0xE8	; 232
    da88:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    da8c:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    da8e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    da92:	86 ff       	sbrs	r24, 6
    da94:	fc cf       	rjmp	.-8      	; 0xda8e <ili9341_init+0x50a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    da96:	80 e4       	ldi	r24, 0x40	; 64
    da98:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    da9c:	80 e1       	ldi	r24, 0x10	; 16
    da9e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    daa2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    daa6:	85 ff       	sbrs	r24, 5
    daa8:	fc cf       	rjmp	.-8      	; 0xdaa2 <ili9341_init+0x51e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    daaa:	8f b7       	in	r24, 0x3f	; 63
    daac:	8c 8b       	std	Y+20, r24	; 0x14
	cpu_irq_disable();
    daae:	f8 94       	cli
	return flags;
    dab0:	8c 89       	ldd	r24, Y+20	; 0x14
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dab2:	90 e4       	ldi	r25, 0x40	; 64
    dab4:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dab8:	95 e8       	ldi	r25, 0x85	; 133
    daba:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dabe:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dac0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    dac4:	85 ff       	sbrs	r24, 5
    dac6:	fc cf       	rjmp	.-8      	; 0xdac0 <ili9341_init+0x53c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dac8:	8f b7       	in	r24, 0x3f	; 63
    daca:	8b 8b       	std	Y+19, r24	; 0x13
	cpu_irq_disable();
    dacc:	f8 94       	cli
	return flags;
    dace:	8b 89       	ldd	r24, Y+19	; 0x13
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dad0:	90 e4       	ldi	r25, 0x40	; 64
    dad2:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dad6:	91 e0       	ldi	r25, 0x01	; 1
    dad8:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dadc:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dade:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    dae2:	85 ff       	sbrs	r24, 5
    dae4:	fc cf       	rjmp	.-8      	; 0xdade <ili9341_init+0x55a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dae6:	8f b7       	in	r24, 0x3f	; 63
    dae8:	8a 8b       	std	Y+18, r24	; 0x12
	cpu_irq_disable();
    daea:	f8 94       	cli
	return flags;
    daec:	8a 89       	ldd	r24, Y+18	; 0x12
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    daee:	90 e4       	ldi	r25, 0x40	; 64
    daf0:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    daf4:	98 e7       	ldi	r25, 0x78	; 120
    daf6:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dafa:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dafc:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    db00:	86 ff       	sbrs	r24, 6
    db02:	fc cf       	rjmp	.-8      	; 0xdafc <ili9341_init+0x578>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db04:	80 e4       	ldi	r24, 0x40	; 64
    db06:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    db0a:	81 e0       	ldi	r24, 0x01	; 1
    db0c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    db10:	90 e1       	ldi	r25, 0x10	; 16
    db12:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    db16:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    db1a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    db1e:	85 ff       	sbrs	r24, 5
    db20:	fc cf       	rjmp	.-8      	; 0xdb1a <ili9341_init+0x596>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    db22:	8f b7       	in	r24, 0x3f	; 63
    db24:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    db26:	f8 94       	cli
	return flags;
    db28:	8c 81       	ldd	r24, Y+4	; 0x04
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db2a:	90 e4       	ldi	r25, 0x40	; 64
    db2c:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    db30:	9a ee       	ldi	r25, 0xEA	; 234
    db32:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    db36:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    db38:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    db3c:	86 ff       	sbrs	r24, 6
    db3e:	fc cf       	rjmp	.-8      	; 0xdb38 <ili9341_init+0x5b4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db40:	80 e4       	ldi	r24, 0x40	; 64
    db42:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    db46:	80 e1       	ldi	r24, 0x10	; 16
    db48:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    db4c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    db50:	85 ff       	sbrs	r24, 5
    db52:	fc cf       	rjmp	.-8      	; 0xdb4c <ili9341_init+0x5c8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    db54:	8f b7       	in	r24, 0x3f	; 63
    db56:	89 8b       	std	Y+17, r24	; 0x11
	cpu_irq_disable();
    db58:	f8 94       	cli
	return flags;
    db5a:	89 89       	ldd	r24, Y+17	; 0x11
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db5c:	90 e4       	ldi	r25, 0x40	; 64
    db5e:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    db62:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    db66:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    db68:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    db6c:	85 ff       	sbrs	r24, 5
    db6e:	fc cf       	rjmp	.-8      	; 0xdb68 <ili9341_init+0x5e4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    db70:	8f b7       	in	r24, 0x3f	; 63
    db72:	88 8b       	std	Y+16, r24	; 0x10
	cpu_irq_disable();
    db74:	f8 94       	cli
	return flags;
    db76:	88 89       	ldd	r24, Y+16	; 0x10
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db78:	90 e4       	ldi	r25, 0x40	; 64
    db7a:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    db7e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    db82:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    db84:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    db88:	86 ff       	sbrs	r24, 6
    db8a:	fc cf       	rjmp	.-8      	; 0xdb84 <ili9341_init+0x600>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    db8c:	80 e4       	ldi	r24, 0x40	; 64
    db8e:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    db92:	81 e0       	ldi	r24, 0x01	; 1
    db94:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    db98:	90 e1       	ldi	r25, 0x10	; 16
    db9a:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    db9e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dba2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dba6:	85 ff       	sbrs	r24, 5
    dba8:	fc cf       	rjmp	.-8      	; 0xdba2 <ili9341_init+0x61e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dbaa:	8f b7       	in	r24, 0x3f	; 63
    dbac:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    dbae:	f8 94       	cli
	return flags;
    dbb0:	8b 81       	ldd	r24, Y+3	; 0x03
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dbb2:	90 e4       	ldi	r25, 0x40	; 64
    dbb4:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dbb8:	9a e3       	ldi	r25, 0x3A	; 58
    dbba:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dbbe:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dbc0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dbc4:	86 ff       	sbrs	r24, 6
    dbc6:	fc cf       	rjmp	.-8      	; 0xdbc0 <ili9341_init+0x63c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dbc8:	80 e4       	ldi	r24, 0x40	; 64
    dbca:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    dbce:	80 e1       	ldi	r24, 0x10	; 16
    dbd0:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dbd4:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dbd8:	85 ff       	sbrs	r24, 5
    dbda:	fc cf       	rjmp	.-8      	; 0xdbd4 <ili9341_init+0x650>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dbdc:	8f b7       	in	r24, 0x3f	; 63
    dbde:	8f 87       	std	Y+15, r24	; 0x0f
	cpu_irq_disable();
    dbe0:	f8 94       	cli
	return flags;
    dbe2:	8f 85       	ldd	r24, Y+15	; 0x0f
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dbe4:	90 e4       	ldi	r25, 0x40	; 64
    dbe6:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dbea:	95 e0       	ldi	r25, 0x05	; 5
    dbec:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dbf0:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dbf2:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dbf6:	86 ff       	sbrs	r24, 6
    dbf8:	fc cf       	rjmp	.-8      	; 0xdbf2 <ili9341_init+0x66e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dbfa:	80 e4       	ldi	r24, 0x40	; 64
    dbfc:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    dc00:	81 e0       	ldi	r24, 0x01	; 1
    dc02:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    dc06:	90 e1       	ldi	r25, 0x10	; 16
    dc08:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    dc0c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dc10:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dc14:	85 ff       	sbrs	r24, 5
    dc16:	fc cf       	rjmp	.-8      	; 0xdc10 <ili9341_init+0x68c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dc18:	8f b7       	in	r24, 0x3f	; 63
    dc1a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    dc1c:	f8 94       	cli
	return flags;
    dc1e:	89 81       	ldd	r24, Y+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dc20:	90 e4       	ldi	r25, 0x40	; 64
    dc22:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dc26:	96 e3       	ldi	r25, 0x36	; 54
    dc28:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dc2c:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dc2e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dc32:	86 ff       	sbrs	r24, 6
    dc34:	fc cf       	rjmp	.-8      	; 0xdc2e <ili9341_init+0x6aa>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dc36:	80 e4       	ldi	r24, 0x40	; 64
    dc38:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    dc3c:	80 e1       	ldi	r24, 0x10	; 16
    dc3e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dc42:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dc46:	85 ff       	sbrs	r24, 5
    dc48:	fc cf       	rjmp	.-8      	; 0xdc42 <ili9341_init+0x6be>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dc4a:	8f b7       	in	r24, 0x3f	; 63
    dc4c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    dc4e:	f8 94       	cli
	return flags;
    dc50:	8a 81       	ldd	r24, Y+2	; 0x02
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dc52:	90 e4       	ldi	r25, 0x40	; 64
    dc54:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dc58:	98 e2       	ldi	r25, 0x28	; 40
    dc5a:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dc5e:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dc60:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dc64:	86 ff       	sbrs	r24, 6
    dc66:	fc cf       	rjmp	.-8      	; 0xdc60 <ili9341_init+0x6dc>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dc68:	80 e4       	ldi	r24, 0x40	; 64
    dc6a:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    dc6e:	81 e0       	ldi	r24, 0x01	; 1
    dc70:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
	limit_start_x = start_x;
    dc74:	10 92 6f 2d 	sts	0x2D6F, r1	; 0x802d6f <limit_start_x>
    dc78:	10 92 70 2d 	sts	0x2D70, r1	; 0x802d70 <limit_start_x+0x1>
	limit_start_y = start_y;
    dc7c:	10 92 6d 2d 	sts	0x2D6D, r1	; 0x802d6d <limit_start_y>
    dc80:	10 92 6e 2d 	sts	0x2D6E, r1	; 0x802d6e <limit_start_y+0x1>
	limit_end_x = end_x;
    dc84:	80 e4       	ldi	r24, 0x40	; 64
    dc86:	91 e0       	ldi	r25, 0x01	; 1
    dc88:	80 93 6b 2d 	sts	0x2D6B, r24	; 0x802d6b <limit_end_x>
    dc8c:	90 93 6c 2d 	sts	0x2D6C, r25	; 0x802d6c <limit_end_x+0x1>
	limit_end_y = end_y;
    dc90:	80 ef       	ldi	r24, 0xF0	; 240
    dc92:	90 e0       	ldi	r25, 0x00	; 0
    dc94:	80 93 69 2d 	sts	0x2D69, r24	; 0x802d69 <limit_end_y>
    dc98:	90 93 6a 2d 	sts	0x2D6A, r25	; 0x802d6a <limit_end_y+0x1>

	ili9341_send_draw_limits(true);
    dc9c:	81 e0       	ldi	r24, 0x01	; 1
    dc9e:	82 d9       	rcall	.-3324   	; 0xcfa4 <ili9341_send_draw_limits>
	/* Send commands to exit standby mode */
	ili9341_exit_standby();

	/* Write all the controller registers with correct values */
	ili9341_controller_init_registers();
}
    dca0:	a2 96       	adiw	r28, 0x22	; 34
    dca2:	cd bf       	out	0x3d, r28	; 61
    dca4:	de bf       	out	0x3e, r29	; 62
    dca6:	df 91       	pop	r29
    dca8:	cf 91       	pop	r28
    dcaa:	1f 91       	pop	r17
    dcac:	0f 91       	pop	r16
    dcae:	ff 90       	pop	r15
    dcb0:	ef 90       	pop	r14
    dcb2:	df 90       	pop	r13
    dcb4:	cf 90       	pop	r12
    dcb6:	08 95       	ret

0000dcb8 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
    dcb8:	cf 93       	push	r28
    dcba:	df 93       	push	r29
    dcbc:	1f 92       	push	r1
    dcbe:	1f 92       	push	r1
    dcc0:	cd b7       	in	r28, 0x3d	; 61
    dcc2:	de b7       	in	r29, 0x3e	; 62
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
    dcc4:	95 e0       	ldi	r25, 0x05	; 5
    dcc6:	89 27       	eor	r24, r25

	if (flags & ILI9341_FLIP_X) {
    dcc8:	80 fd       	sbrc	r24, 0
    dcca:	46 c0       	rjmp	.+140    	; 0xdd58 <ili9341_set_orientation+0xa0>
    dccc:	98 e6       	ldi	r25, 0x68	; 104
    dcce:	48 ee       	ldi	r20, 0xE8	; 232
    dcd0:	38 ec       	ldi	r19, 0xC8	; 200
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
	uint8_t madctl = 0x48;
    dcd2:	28 e4       	ldi	r18, 0x48	; 72

	if (flags & ILI9341_FLIP_X) {
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
    dcd4:	81 ff       	sbrs	r24, 1
    dcd6:	02 c0       	rjmp	.+4      	; 0xdcdc <ili9341_set_orientation+0x24>
    dcd8:	94 2f       	mov	r25, r20
		madctl |= 1 << 7;
    dcda:	23 2f       	mov	r18, r19
	}

	if (flags & ILI9341_SWITCH_XY) {
    dcdc:	82 ff       	sbrs	r24, 2
    dcde:	92 2f       	mov	r25, r18
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    dce0:	80 e1       	ldi	r24, 0x10	; 16
    dce2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    dce6:	81 e0       	ldi	r24, 0x01	; 1
    dce8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dcec:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dcf0:	85 ff       	sbrs	r24, 5
    dcf2:	fc cf       	rjmp	.-8      	; 0xdcec <ili9341_set_orientation+0x34>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dcf4:	8f b7       	in	r24, 0x3f	; 63
    dcf6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    dcf8:	f8 94       	cli
	return flags;
    dcfa:	89 81       	ldd	r24, Y+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dcfc:	20 e4       	ldi	r18, 0x40	; 64
    dcfe:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dd02:	26 e3       	ldi	r18, 0x36	; 54
    dd04:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd08:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dd0a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dd0e:	86 ff       	sbrs	r24, 6
    dd10:	fc cf       	rjmp	.-8      	; 0xdd0a <ili9341_set_orientation+0x52>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dd12:	80 e4       	ldi	r24, 0x40	; 64
    dd14:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    dd18:	80 e1       	ldi	r24, 0x10	; 16
    dd1a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    dd1e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_send_byte(uint8_t data)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_data_register_is_empty(CONF_ILI9341_USART_SPI)) {
    dd22:	85 ff       	sbrs	r24, 5
    dd24:	fc cf       	rjmp	.-8      	; 0xdd1e <ili9341_set_orientation+0x66>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dd26:	8f b7       	in	r24, 0x3f	; 63
    dd28:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    dd2a:	f8 94       	cli
	return flags;
    dd2c:	8a 81       	ldd	r24, Y+2	; 0x02
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dd2e:	20 e4       	ldi	r18, 0x40	; 64
    dd30:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    dd34:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd38:	8f bf       	out	0x3f, r24	; 63
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    dd3a:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
#if defined(CONF_ILI9341_USART_SPI)
#  if XMEGA
	while (!usart_tx_is_complete(CONF_ILI9341_USART_SPI)) {
    dd3e:	86 ff       	sbrs	r24, 6
    dd40:	fc cf       	rjmp	.-8      	; 0xdd3a <ili9341_set_orientation+0x82>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    dd42:	80 e4       	ldi	r24, 0x40	; 64
    dd44:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    dd48:	81 e0       	ldi	r24, 0x01	; 1
    dd4a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
	ili9341_send_byte(madctl);
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();
}
    dd4e:	0f 90       	pop	r0
    dd50:	0f 90       	pop	r0
    dd52:	df 91       	pop	r29
    dd54:	cf 91       	pop	r28
    dd56:	08 95       	ret
    dd58:	98 e2       	ldi	r25, 0x28	; 40
    dd5a:	48 ea       	ldi	r20, 0xA8	; 168
    dd5c:	38 e8       	ldi	r19, 0x88	; 136

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;

	if (flags & ILI9341_FLIP_X) {
		madctl &= ~(1 << 6);
    dd5e:	28 e0       	ldi	r18, 0x08	; 8
    dd60:	b9 cf       	rjmp	.-142    	; 0xdcd4 <ili9341_set_orientation+0x1c>

0000dd62 <gfx_set_clipping>:
}

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
    dd62:	97 fd       	sbrc	r25, 7
    dd64:	28 c0       	rjmp	.+80     	; 0xddb6 <gfx_set_clipping+0x54>
    dd66:	fb 01       	movw	r30, r22
    dd68:	77 fd       	sbrc	r23, 7
    dd6a:	2a c0       	rjmp	.+84     	; 0xddc0 <gfx_set_clipping+0x5e>
    dd6c:	60 91 c2 31 	lds	r22, 0x31C2	; 0x8031c2 <gfx_width>
    dd70:	70 91 c3 31 	lds	r23, 0x31C3	; 0x8031c3 <gfx_width+0x1>
    dd74:	46 17       	cp	r20, r22
    dd76:	57 07       	cpc	r21, r23
    dd78:	1c f0       	brlt	.+6      	; 0xdd80 <gfx_set_clipping+0x1e>
    dd7a:	ab 01       	movw	r20, r22
    dd7c:	41 50       	subi	r20, 0x01	; 1
    dd7e:	51 09       	sbc	r21, r1
    dd80:	60 91 cc 31 	lds	r22, 0x31CC	; 0x8031cc <gfx_height>
    dd84:	70 91 cd 31 	lds	r23, 0x31CD	; 0x8031cd <gfx_height+0x1>
    dd88:	26 17       	cp	r18, r22
    dd8a:	37 07       	cpc	r19, r23
    dd8c:	1c f0       	brlt	.+6      	; 0xdd94 <gfx_set_clipping+0x32>
    dd8e:	9b 01       	movw	r18, r22
    dd90:	21 50       	subi	r18, 0x01	; 1
    dd92:	31 09       	sbc	r19, r1
    dd94:	80 93 c4 31 	sts	0x31C4, r24	; 0x8031c4 <gfx_min_x>
    dd98:	90 93 c5 31 	sts	0x31C5, r25	; 0x8031c5 <gfx_min_x+0x1>
    dd9c:	e0 93 c8 31 	sts	0x31C8, r30	; 0x8031c8 <gfx_min_y>
    dda0:	f0 93 c9 31 	sts	0x31C9, r31	; 0x8031c9 <gfx_min_y+0x1>
    dda4:	40 93 c6 31 	sts	0x31C6, r20	; 0x8031c6 <gfx_max_x>
    dda8:	50 93 c7 31 	sts	0x31C7, r21	; 0x8031c7 <gfx_max_x+0x1>
    ddac:	20 93 ca 31 	sts	0x31CA, r18	; 0x8031ca <gfx_max_y>
    ddb0:	30 93 cb 31 	sts	0x31CB, r19	; 0x8031cb <gfx_max_y+0x1>
    ddb4:	08 95       	ret
    ddb6:	80 e0       	ldi	r24, 0x00	; 0
    ddb8:	90 e0       	ldi	r25, 0x00	; 0
    ddba:	fb 01       	movw	r30, r22
    ddbc:	77 ff       	sbrs	r23, 7
    ddbe:	d6 cf       	rjmp	.-84     	; 0xdd6c <gfx_set_clipping+0xa>
    ddc0:	e0 e0       	ldi	r30, 0x00	; 0
    ddc2:	f0 e0       	ldi	r31, 0x00	; 0
    ddc4:	d3 cf       	rjmp	.-90     	; 0xdd6c <gfx_set_clipping+0xa>

0000ddc6 <gfx_generic_draw_filled_rect>:

/* This function is documented in gfx.h */
void gfx_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
    ddc6:	af 92       	push	r10
    ddc8:	bf 92       	push	r11
    ddca:	cf 92       	push	r12
    ddcc:	df 92       	push	r13
    ddce:	ef 92       	push	r14
    ddd0:	ff 92       	push	r15
    ddd2:	0f 93       	push	r16
    ddd4:	1f 93       	push	r17
    ddd6:	cf 93       	push	r28
    ddd8:	df 93       	push	r29
    ddda:	ea 01       	movw	r28, r20
    dddc:	79 01       	movw	r14, r18
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
    ddde:	20 97       	sbiw	r28, 0x00	; 0
    dde0:	09 f4       	brne	.+2      	; 0xdde4 <gfx_generic_draw_filled_rect+0x1e>
    dde2:	6f c0       	rjmp	.+222    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
    dde4:	23 2b       	or	r18, r19
    dde6:	09 f4       	brne	.+2      	; 0xddea <gfx_generic_draw_filled_rect+0x24>
    dde8:	6c c0       	rjmp	.+216    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
    ddea:	57 fd       	sbrc	r21, 7
    ddec:	7e c0       	rjmp	.+252    	; 0xdeea <gfx_generic_draw_filled_rect+0x124>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
    ddee:	f7 fc       	sbrc	r15, 7
    ddf0:	73 c0       	rjmp	.+230    	; 0xded8 <gfx_generic_draw_filled_rect+0x112>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
    ddf2:	e0 91 c6 31 	lds	r30, 0x31C6	; 0x8031c6 <gfx_max_x>
    ddf6:	f0 91 c7 31 	lds	r31, 0x31C7	; 0x8031c7 <gfx_max_x+0x1>
    ddfa:	e8 17       	cp	r30, r24
    ddfc:	f9 07       	cpc	r31, r25
    ddfe:	0c f4       	brge	.+2      	; 0xde02 <gfx_generic_draw_filled_rect+0x3c>
    de00:	60 c0       	rjmp	.+192    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
    de02:	a0 91 ca 31 	lds	r26, 0x31CA	; 0x8031ca <gfx_max_y>
    de06:	b0 91 cb 31 	lds	r27, 0x31CB	; 0x8031cb <gfx_max_y+0x1>
    de0a:	a6 17       	cp	r26, r22
    de0c:	b7 07       	cpc	r27, r23
    de0e:	0c f4       	brge	.+2      	; 0xde12 <gfx_generic_draw_filled_rect+0x4c>
    de10:	58 c0       	rjmp	.+176    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
			((x + width) <= gfx_min_x) ||
    de12:	ac 01       	movw	r20, r24
    de14:	4c 0f       	add	r20, r28
    de16:	5d 1f       	adc	r21, r29
    de18:	20 91 c4 31 	lds	r18, 0x31C4	; 0x8031c4 <gfx_min_x>
    de1c:	30 91 c5 31 	lds	r19, 0x31C5	; 0x8031c5 <gfx_min_x+0x1>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
    de20:	24 17       	cp	r18, r20
    de22:	35 07       	cpc	r19, r21
    de24:	0c f0       	brlt	.+2      	; 0xde28 <gfx_generic_draw_filled_rect+0x62>
    de26:	4d c0       	rjmp	.+154    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
			((x + width) <= gfx_min_x) ||
			((y + height) <= gfx_min_y)) {
    de28:	5b 01       	movw	r10, r22
    de2a:	ae 0c       	add	r10, r14
    de2c:	bf 1c       	adc	r11, r15
    de2e:	c0 90 c8 31 	lds	r12, 0x31C8	; 0x8031c8 <gfx_min_y>
    de32:	d0 90 c9 31 	lds	r13, 0x31C9	; 0x8031c9 <gfx_min_y+0x1>
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
			((x + width) <= gfx_min_x) ||
    de36:	ca 14       	cp	r12, r10
    de38:	db 04       	cpc	r13, r11
    de3a:	0c f0       	brlt	.+2      	; 0xde3e <gfx_generic_draw_filled_rect+0x78>
    de3c:	42 c0       	rjmp	.+132    	; 0xdec2 <gfx_generic_draw_filled_rect+0xfc>
			((y + height) <= gfx_min_y)) {
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
    de3e:	82 17       	cp	r24, r18
    de40:	93 07       	cpc	r25, r19
    de42:	4c f4       	brge	.+18     	; 0xde56 <gfx_generic_draw_filled_rect+0x90>
		width -= gfx_min_x - x;
    de44:	a9 01       	movw	r20, r18
    de46:	48 1b       	sub	r20, r24
    de48:	59 0b       	sbc	r21, r25
    de4a:	c4 1b       	sub	r28, r20
    de4c:	d5 0b       	sbc	r29, r21
    de4e:	a9 01       	movw	r20, r18
    de50:	4c 0f       	add	r20, r28
    de52:	5d 1f       	adc	r21, r29
    de54:	c9 01       	movw	r24, r18
		x = gfx_min_x;
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
    de56:	6c 15       	cp	r22, r12
    de58:	7d 05       	cpc	r23, r13
    de5a:	4c f4       	brge	.+18     	; 0xde6e <gfx_generic_draw_filled_rect+0xa8>
		height -= gfx_min_y - y;
    de5c:	96 01       	movw	r18, r12
    de5e:	26 1b       	sub	r18, r22
    de60:	37 0b       	sbc	r19, r23
    de62:	e2 1a       	sub	r14, r18
    de64:	f3 0a       	sbc	r15, r19
    de66:	56 01       	movw	r10, r12
    de68:	ae 0c       	add	r10, r14
    de6a:	bf 1c       	adc	r11, r15
    de6c:	b6 01       	movw	r22, r12
		y = gfx_min_y;
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
    de6e:	41 50       	subi	r20, 0x01	; 1
    de70:	51 09       	sbc	r21, r1
	y2 = y + height - 1;
    de72:	95 01       	movw	r18, r10
    de74:	21 50       	subi	r18, 0x01	; 1
    de76:	31 09       	sbc	r19, r1

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
    de78:	e4 17       	cp	r30, r20
    de7a:	f5 07       	cpc	r31, r21
    de7c:	2c f4       	brge	.+10     	; 0xde88 <gfx_generic_draw_filled_rect+0xc2>
		x2 = gfx_max_x;
		width = x2 - x + 1;
    de7e:	ef 01       	movw	r28, r30
    de80:	c8 1b       	sub	r28, r24
    de82:	d9 0b       	sbc	r29, r25
    de84:	21 96       	adiw	r28, 0x01	; 1
    de86:	af 01       	movw	r20, r30
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
    de88:	a2 17       	cp	r26, r18
    de8a:	b3 07       	cpc	r27, r19
    de8c:	3c f4       	brge	.+14     	; 0xde9c <gfx_generic_draw_filled_rect+0xd6>
		y2 = gfx_max_y;
		height = y2 - y + 1;
    de8e:	7d 01       	movw	r14, r26
    de90:	e6 1a       	sub	r14, r22
    de92:	f7 0a       	sbc	r15, r23
    de94:	2f ef       	ldi	r18, 0xFF	; 255
    de96:	e2 1a       	sub	r14, r18
    de98:	f2 0a       	sbc	r15, r18
    de9a:	9d 01       	movw	r18, r26
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
    de9c:	14 da       	rcall	.-3032   	; 0xd2c6 <ili9341_set_limits>
	gfx_duplicate_pixel(color, (uint32_t)width * height);
    de9e:	9e 01       	movw	r18, r28
    dea0:	d7 01       	movw	r26, r14
    dea2:	0e 94 85 7f 	call	0xff0a	; 0xff0a <__mulhisi3>
    dea6:	ab 01       	movw	r20, r22
    dea8:	bc 01       	movw	r22, r24
    deaa:	c8 01       	movw	r24, r16
}
    deac:	df 91       	pop	r29
    deae:	cf 91       	pop	r28
    deb0:	1f 91       	pop	r17
    deb2:	0f 91       	pop	r16
    deb4:	ff 90       	pop	r15
    deb6:	ef 90       	pop	r14
    deb8:	df 90       	pop	r13
    deba:	cf 90       	pop	r12
    debc:	bf 90       	pop	r11
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
	gfx_duplicate_pixel(color, (uint32_t)width * height);
    debe:	af 90       	pop	r10
    dec0:	f4 ca       	rjmp	.-2584   	; 0xd4aa <ili9341_duplicate_pixel>
}
    dec2:	df 91       	pop	r29
    dec4:	cf 91       	pop	r28
    dec6:	1f 91       	pop	r17
    dec8:	0f 91       	pop	r16
    deca:	ff 90       	pop	r15
    decc:	ef 90       	pop	r14
    dece:	df 90       	pop	r13
    ded0:	cf 90       	pop	r12
    ded2:	bf 90       	pop	r11
    ded4:	af 90       	pop	r10
    ded6:	08 95       	ret
		x -= width - 1;
	}

	if (height < 0) {
		height = -height;
		y -= height - 1;
    ded8:	97 01       	movw	r18, r14
    deda:	20 95       	com	r18
    dedc:	30 95       	com	r19
    dede:	62 1b       	sub	r22, r18
    dee0:	73 0b       	sbc	r23, r19
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
		height = -height;
    dee2:	f1 94       	neg	r15
    dee4:	e1 94       	neg	r14
    dee6:	f1 08       	sbc	r15, r1
    dee8:	84 cf       	rjmp	.-248    	; 0xddf2 <gfx_generic_draw_filled_rect+0x2c>
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
		width = -width;
		x -= width - 1;
    deea:	9a 01       	movw	r18, r20
    deec:	20 95       	com	r18
    deee:	30 95       	com	r19
    def0:	82 1b       	sub	r24, r18
    def2:	93 0b       	sbc	r25, r19
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
		width = -width;
    def4:	d1 95       	neg	r29
    def6:	c1 95       	neg	r28
    def8:	d1 09       	sbc	r29, r1
    defa:	79 cf       	rjmp	.-270    	; 0xddee <gfx_generic_draw_filled_rect+0x28>

0000defc <gfx_generic_draw_line>:
	gfx_duplicate_pixel(color, (uint32_t)width * height);
}

void gfx_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2, gfx_color_t color)
{
    defc:	2f 92       	push	r2
    defe:	3f 92       	push	r3
    df00:	4f 92       	push	r4
    df02:	5f 92       	push	r5
    df04:	6f 92       	push	r6
    df06:	7f 92       	push	r7
    df08:	8f 92       	push	r8
    df0a:	9f 92       	push	r9
    df0c:	af 92       	push	r10
    df0e:	bf 92       	push	r11
    df10:	cf 92       	push	r12
    df12:	df 92       	push	r13
    df14:	ef 92       	push	r14
    df16:	ff 92       	push	r15
    df18:	0f 93       	push	r16
    df1a:	1f 93       	push	r17
    df1c:	cf 93       	push	r28
    df1e:	df 93       	push	r29
    df20:	ec 01       	movw	r28, r24
    df22:	7b 01       	movw	r14, r22
    df24:	18 01       	movw	r2, r16
	/* Compute deltas, ie. "width" and "height" of line, then
	 * compute x and y direction, and make deltas positive for later use.
	 * Start off assuming direction is positive, ie. right and down.
	 */
	xinc = 1;
	dx = x2 - x1;
    df26:	5a 01       	movw	r10, r20
    df28:	a8 1a       	sub	r10, r24
    df2a:	b9 0a       	sbc	r11, r25
	if (dx < 0) {
    df2c:	b7 fc       	sbrc	r11, 7
    df2e:	6a c0       	rjmp	.+212    	; 0xe004 <gfx_generic_draw_line+0x108>

	/* Compute deltas, ie. "width" and "height" of line, then
	 * compute x and y direction, and make deltas positive for later use.
	 * Start off assuming direction is positive, ie. right and down.
	 */
	xinc = 1;
    df30:	44 24       	eor	r4, r4
    df32:	43 94       	inc	r4
    df34:	51 2c       	mov	r5, r1
		xinc = -1;
		dx = -dx;
	}

	yinc = 1;
	dy = y2 - y1;
    df36:	69 01       	movw	r12, r18
    df38:	ce 18       	sub	r12, r14
    df3a:	df 08       	sbc	r13, r15
	if (dy < 0) {
    df3c:	d7 fc       	sbrc	r13, 7
    df3e:	6d c0       	rjmp	.+218    	; 0xe01a <gfx_generic_draw_line+0x11e>
	if (dx < 0) {
		xinc = -1;
		dx = -dx;
	}

	yinc = 1;
    df40:	66 24       	eor	r6, r6
    df42:	63 94       	inc	r6
    df44:	71 2c       	mov	r7, r1
	}

	/* Set up current point and prepare bottom right corner of draw area.*/
	x = x1;
	y = y1;
	gfx_set_bottom_right_limit(gfx_width - 1, gfx_height - 1);
    df46:	60 91 cc 31 	lds	r22, 0x31CC	; 0x8031cc <gfx_height>
    df4a:	70 91 cd 31 	lds	r23, 0x31CD	; 0x8031cd <gfx_height+0x1>
    df4e:	61 50       	subi	r22, 0x01	; 1
    df50:	71 09       	sbc	r23, r1
    df52:	80 91 c2 31 	lds	r24, 0x31C2	; 0x8031c2 <gfx_width>
    df56:	90 91 c3 31 	lds	r25, 0x31C3	; 0x8031c3 <gfx_width+0x1>
    df5a:	01 97       	sbiw	r24, 0x01	; 1
    df5c:	aa d9       	rcall	.-3244   	; 0xd2b2 <ili9341_set_bottom_right_limit>

	/*
	 * A "flat" line (dx>dy) is handled differently from a "steep"
	 * line (dx<dy).
	 */
	if (dx > dy) {
    df5e:	ca 14       	cp	r12, r10
    df60:	db 04       	cpc	r13, r11
    df62:	ac f5       	brge	.+106    	; 0xdfce <gfx_generic_draw_line+0xd2>
		gfx_coord_t i;
		int16_t e = dx >> 1;
    df64:	85 01       	movw	r16, r10
    df66:	15 95       	asr	r17
    df68:	07 95       	ror	r16

		/* Walk along X, draw pixel, and step Y when required. */
		for (i = 0; i <= dx; ++i) {
    df6a:	81 2c       	mov	r8, r1
    df6c:	91 2c       	mov	r9, r1
    df6e:	08 c0       	rjmp	.+16     	; 0xdf80 <gfx_generic_draw_line+0x84>
				e += dx;
				y += yinc;
			}

			/* Walk one step along X.*/
			x += xinc;
    df70:	c4 0d       	add	r28, r4
    df72:	d5 1d       	adc	r29, r5
	if (dx > dy) {
		gfx_coord_t i;
		int16_t e = dx >> 1;

		/* Walk along X, draw pixel, and step Y when required. */
		for (i = 0; i <= dx; ++i) {
    df74:	8f ef       	ldi	r24, 0xFF	; 255
    df76:	88 1a       	sub	r8, r24
    df78:	98 0a       	sbc	r9, r24
    df7a:	a8 14       	cp	r10, r8
    df7c:	b9 04       	cpc	r11, r9
    df7e:	a4 f0       	brlt	.+40     	; 0xdfa8 <gfx_generic_draw_line+0xac>
			gfx_draw_line_pixel(x, y, color);
    df80:	a1 01       	movw	r20, r2
    df82:	b7 01       	movw	r22, r14
    df84:	ce 01       	movw	r24, r28
    df86:	cd d0       	rcall	.+410    	; 0xe122 <gfx_ili9341_draw_line_pixel>

			/* Update fractional part ("error"),
			 * and step Y when it crosses 0.
			 */
			e -= dy;
    df88:	0c 19       	sub	r16, r12
    df8a:	1d 09       	sbc	r17, r13
			if (e < 0) {
    df8c:	17 ff       	sbrs	r17, 7
    df8e:	f0 cf       	rjmp	.-32     	; 0xdf70 <gfx_generic_draw_line+0x74>
				e += dx;
    df90:	0a 0d       	add	r16, r10
    df92:	1b 1d       	adc	r17, r11
				y += yinc;
    df94:	e6 0c       	add	r14, r6
    df96:	f7 1c       	adc	r15, r7
			}

			/* Walk one step along X.*/
			x += xinc;
    df98:	c4 0d       	add	r28, r4
    df9a:	d5 1d       	adc	r29, r5
	if (dx > dy) {
		gfx_coord_t i;
		int16_t e = dx >> 1;

		/* Walk along X, draw pixel, and step Y when required. */
		for (i = 0; i <= dx; ++i) {
    df9c:	8f ef       	ldi	r24, 0xFF	; 255
    df9e:	88 1a       	sub	r8, r24
    dfa0:	98 0a       	sbc	r9, r24
    dfa2:	a8 14       	cp	r10, r8
    dfa4:	b9 04       	cpc	r11, r9
    dfa6:	64 f7       	brge	.-40     	; 0xdf80 <gfx_generic_draw_line+0x84>

			/* Walk one step along Y. */
			y += yinc;
		}
	}
}
    dfa8:	df 91       	pop	r29
    dfaa:	cf 91       	pop	r28
    dfac:	1f 91       	pop	r17
    dfae:	0f 91       	pop	r16
    dfb0:	ff 90       	pop	r15
    dfb2:	ef 90       	pop	r14
    dfb4:	df 90       	pop	r13
    dfb6:	cf 90       	pop	r12
    dfb8:	bf 90       	pop	r11
    dfba:	af 90       	pop	r10
    dfbc:	9f 90       	pop	r9
    dfbe:	8f 90       	pop	r8
    dfc0:	7f 90       	pop	r7
    dfc2:	6f 90       	pop	r6
    dfc4:	5f 90       	pop	r5
    dfc6:	4f 90       	pop	r4
    dfc8:	3f 90       	pop	r3
    dfca:	2f 90       	pop	r2
    dfcc:	08 95       	ret
			/* Walk one step along X.*/
			x += xinc;
		}
	} else {
		gfx_coord_t i;
		int16_t e = dy >> 1;
    dfce:	86 01       	movw	r16, r12
    dfd0:	15 95       	asr	r17
    dfd2:	07 95       	ror	r16

		/* Walk along Y, draw pixel, and step X when required. */
		for (i = 0; i <= dy; ++i) {
    dfd4:	81 2c       	mov	r8, r1
    dfd6:	91 2c       	mov	r9, r1
    dfd8:	08 c0       	rjmp	.+16     	; 0xdfea <gfx_generic_draw_line+0xee>
				e += dy;
				x += xinc;
			}

			/* Walk one step along Y. */
			y += yinc;
    dfda:	e6 0c       	add	r14, r6
    dfdc:	f7 1c       	adc	r15, r7
	} else {
		gfx_coord_t i;
		int16_t e = dy >> 1;

		/* Walk along Y, draw pixel, and step X when required. */
		for (i = 0; i <= dy; ++i) {
    dfde:	8f ef       	ldi	r24, 0xFF	; 255
    dfe0:	88 1a       	sub	r8, r24
    dfe2:	98 0a       	sbc	r9, r24
    dfe4:	c8 14       	cp	r12, r8
    dfe6:	d9 04       	cpc	r13, r9
    dfe8:	fc f2       	brlt	.-66     	; 0xdfa8 <gfx_generic_draw_line+0xac>
			gfx_draw_line_pixel(x, y, color);
    dfea:	a1 01       	movw	r20, r2
    dfec:	b7 01       	movw	r22, r14
    dfee:	ce 01       	movw	r24, r28
    dff0:	98 d0       	rcall	.+304    	; 0xe122 <gfx_ili9341_draw_line_pixel>

			/* Update fractional part ("error"),
			 * and step X when it crosses 0.
			 */
			e -= dx;
    dff2:	0a 19       	sub	r16, r10
    dff4:	1b 09       	sbc	r17, r11
			if (e < 0) {
    dff6:	17 ff       	sbrs	r17, 7
    dff8:	f0 cf       	rjmp	.-32     	; 0xdfda <gfx_generic_draw_line+0xde>
				e += dy;
    dffa:	0c 0d       	add	r16, r12
    dffc:	1d 1d       	adc	r17, r13
				x += xinc;
    dffe:	c4 0d       	add	r28, r4
    e000:	d5 1d       	adc	r29, r5
    e002:	eb cf       	rjmp	.-42     	; 0xdfda <gfx_generic_draw_line+0xde>
	 */
	xinc = 1;
	dx = x2 - x1;
	if (dx < 0) {
		xinc = -1;
		dx = -dx;
    e004:	b1 94       	neg	r11
    e006:	a1 94       	neg	r10
    e008:	b1 08       	sbc	r11, r1
	 * Start off assuming direction is positive, ie. right and down.
	 */
	xinc = 1;
	dx = x2 - x1;
	if (dx < 0) {
		xinc = -1;
    e00a:	44 24       	eor	r4, r4
    e00c:	4a 94       	dec	r4
    e00e:	54 2c       	mov	r5, r4
		dx = -dx;
	}

	yinc = 1;
	dy = y2 - y1;
    e010:	69 01       	movw	r12, r18
    e012:	ce 18       	sub	r12, r14
    e014:	df 08       	sbc	r13, r15
	if (dy < 0) {
    e016:	d7 fe       	sbrs	r13, 7
    e018:	93 cf       	rjmp	.-218    	; 0xdf40 <gfx_generic_draw_line+0x44>
		yinc = -1;
		dy = -dy;
    e01a:	d1 94       	neg	r13
    e01c:	c1 94       	neg	r12
    e01e:	d1 08       	sbc	r13, r1
	}

	yinc = 1;
	dy = y2 - y1;
	if (dy < 0) {
		yinc = -1;
    e020:	66 24       	eor	r6, r6
    e022:	6a 94       	dec	r6
    e024:	76 2c       	mov	r7, r6
    e026:	8f cf       	rjmp	.-226    	; 0xdf46 <gfx_generic_draw_line+0x4a>

0000e028 <gfx_ili9341_set_orientation>:
}

gfx_color_t gfx_ili9341_color(uint8_t r, uint8_t g, uint8_t b)
{
	return GFX_COLOR(r, g, b);
}
    e028:	cf 93       	push	r28
    e02a:	c8 2f       	mov	r28, r24
    e02c:	45 de       	rcall	.-886    	; 0xdcb8 <ili9341_set_orientation>
    e02e:	c2 fd       	sbrc	r28, 2
    e030:	16 c0       	rjmp	.+44     	; 0xe05e <gfx_ili9341_set_orientation+0x36>
    e032:	80 e4       	ldi	r24, 0x40	; 64
    e034:	91 e0       	ldi	r25, 0x01	; 1
    e036:	80 93 c2 31 	sts	0x31C2, r24	; 0x8031c2 <gfx_width>
    e03a:	90 93 c3 31 	sts	0x31C3, r25	; 0x8031c3 <gfx_width+0x1>
    e03e:	80 ef       	ldi	r24, 0xF0	; 240
    e040:	90 e0       	ldi	r25, 0x00	; 0
    e042:	80 93 cc 31 	sts	0x31CC, r24	; 0x8031cc <gfx_height>
    e046:	90 93 cd 31 	sts	0x31CD, r25	; 0x8031cd <gfx_height+0x1>
    e04a:	4f e3       	ldi	r20, 0x3F	; 63
    e04c:	51 e0       	ldi	r21, 0x01	; 1
    e04e:	2f ee       	ldi	r18, 0xEF	; 239
    e050:	30 e0       	ldi	r19, 0x00	; 0
    e052:	60 e0       	ldi	r22, 0x00	; 0
    e054:	70 e0       	ldi	r23, 0x00	; 0
    e056:	80 e0       	ldi	r24, 0x00	; 0
    e058:	90 e0       	ldi	r25, 0x00	; 0
    e05a:	cf 91       	pop	r28
    e05c:	82 ce       	rjmp	.-764    	; 0xdd62 <gfx_set_clipping>
    e05e:	80 ef       	ldi	r24, 0xF0	; 240
    e060:	90 e0       	ldi	r25, 0x00	; 0
    e062:	80 93 c2 31 	sts	0x31C2, r24	; 0x8031c2 <gfx_width>
    e066:	90 93 c3 31 	sts	0x31C3, r25	; 0x8031c3 <gfx_width+0x1>
    e06a:	80 e4       	ldi	r24, 0x40	; 64
    e06c:	91 e0       	ldi	r25, 0x01	; 1
    e06e:	80 93 cc 31 	sts	0x31CC, r24	; 0x8031cc <gfx_height>
    e072:	90 93 cd 31 	sts	0x31CD, r25	; 0x8031cd <gfx_height+0x1>
    e076:	4f ee       	ldi	r20, 0xEF	; 239
    e078:	50 e0       	ldi	r21, 0x00	; 0
    e07a:	2f e3       	ldi	r18, 0x3F	; 63
    e07c:	31 e0       	ldi	r19, 0x01	; 1
    e07e:	60 e0       	ldi	r22, 0x00	; 0
    e080:	70 e0       	ldi	r23, 0x00	; 0
    e082:	80 e0       	ldi	r24, 0x00	; 0
    e084:	90 e0       	ldi	r25, 0x00	; 0
    e086:	cf 91       	pop	r28
    e088:	6c ce       	rjmp	.-808    	; 0xdd62 <gfx_set_clipping>

0000e08a <gfx_ili9341_get_pixel>:
gfx_color_t gfx_ili9341_get_pixel(gfx_coord_t x, gfx_coord_t y)
{
	gfx_color_t color;

#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
    e08a:	40 91 c4 31 	lds	r20, 0x31C4	; 0x8031c4 <gfx_min_x>
    e08e:	50 91 c5 31 	lds	r21, 0x31C5	; 0x8031c5 <gfx_min_x+0x1>
    e092:	84 17       	cp	r24, r20
    e094:	95 07       	cpc	r25, r21
    e096:	1c f4       	brge	.+6      	; 0xe09e <gfx_ili9341_get_pixel+0x14>
	/* Set up draw area and read the three bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
	color = ili9341_read_gram();

	return color;
}
    e098:	80 e0       	ldi	r24, 0x00	; 0
    e09a:	90 e2       	ldi	r25, 0x20	; 32
    e09c:	08 95       	ret
gfx_color_t gfx_ili9341_get_pixel(gfx_coord_t x, gfx_coord_t y)
{
	gfx_color_t color;

#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
    e09e:	20 91 c6 31 	lds	r18, 0x31C6	; 0x8031c6 <gfx_max_x>
    e0a2:	30 91 c7 31 	lds	r19, 0x31C7	; 0x8031c7 <gfx_max_x+0x1>
    e0a6:	28 17       	cp	r18, r24
    e0a8:	39 07       	cpc	r19, r25
    e0aa:	b4 f3       	brlt	.-20     	; 0xe098 <gfx_ili9341_get_pixel+0xe>
    e0ac:	20 91 c8 31 	lds	r18, 0x31C8	; 0x8031c8 <gfx_min_y>
    e0b0:	30 91 c9 31 	lds	r19, 0x31C9	; 0x8031c9 <gfx_min_y+0x1>
    e0b4:	62 17       	cp	r22, r18
    e0b6:	73 07       	cpc	r23, r19
    e0b8:	7c f3       	brlt	.-34     	; 0xe098 <gfx_ili9341_get_pixel+0xe>
			(y < gfx_min_y) || (y > gfx_max_y)) {
    e0ba:	20 91 ca 31 	lds	r18, 0x31CA	; 0x8031ca <gfx_max_y>
    e0be:	30 91 cb 31 	lds	r19, 0x31CB	; 0x8031cb <gfx_max_y+0x1>
    e0c2:	26 17       	cp	r18, r22
    e0c4:	37 07       	cpc	r19, r23
    e0c6:	44 f3       	brlt	.-48     	; 0xe098 <gfx_ili9341_get_pixel+0xe>
		return GFX_COLOR_INVALID;
	}
#endif

	/* Set up draw area and read the three bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
    e0c8:	9b 01       	movw	r18, r22
    e0ca:	ac 01       	movw	r20, r24
    e0cc:	fc d8       	rcall	.-3592   	; 0xd2c6 <ili9341_set_limits>
	color = ili9341_read_gram();
    e0ce:	0d c9       	rjmp	.-3558   	; 0xd2ea <ili9341_read_gram>

0000e0d0 <gfx_ili9341_draw_pixel>:
    e0d0:	cf 93       	push	r28

	return color;
}

void gfx_ili9341_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
    e0d2:	df 93       	push	r29
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
    e0d4:	e0 91 c4 31 	lds	r30, 0x31C4	; 0x8031c4 <gfx_min_x>
    e0d8:	f0 91 c5 31 	lds	r31, 0x31C5	; 0x8031c5 <gfx_min_x+0x1>
    e0dc:	8e 17       	cp	r24, r30
    e0de:	9f 07       	cpc	r25, r31
    e0e0:	ac f0       	brlt	.+42     	; 0xe10c <gfx_ili9341_draw_pixel+0x3c>
    e0e2:	20 91 c6 31 	lds	r18, 0x31C6	; 0x8031c6 <gfx_max_x>
    e0e6:	30 91 c7 31 	lds	r19, 0x31C7	; 0x8031c7 <gfx_max_x+0x1>
    e0ea:	28 17       	cp	r18, r24
    e0ec:	39 07       	cpc	r19, r25
    e0ee:	74 f0       	brlt	.+28     	; 0xe10c <gfx_ili9341_draw_pixel+0x3c>
    e0f0:	20 91 c8 31 	lds	r18, 0x31C8	; 0x8031c8 <gfx_min_y>
    e0f4:	30 91 c9 31 	lds	r19, 0x31C9	; 0x8031c9 <gfx_min_y+0x1>
    e0f8:	62 17       	cp	r22, r18
    e0fa:	73 07       	cpc	r23, r19
    e0fc:	3c f0       	brlt	.+14     	; 0xe10c <gfx_ili9341_draw_pixel+0x3c>
			(y < gfx_min_y) || (y > gfx_max_y)) {
    e0fe:	20 91 ca 31 	lds	r18, 0x31CA	; 0x8031ca <gfx_max_y>
    e102:	30 91 cb 31 	lds	r19, 0x31CB	; 0x8031cb <gfx_max_y+0x1>
    e106:	26 17       	cp	r18, r22
    e108:	37 07       	cpc	r19, r23
    e10a:	1c f4       	brge	.+6      	; 0xe112 <gfx_ili9341_draw_pixel+0x42>
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
	ili9341_write_gram(color);
}
    e10c:	df 91       	pop	r29
    e10e:	cf 91       	pop	r28
    e110:	08 95       	ret
    e112:	ea 01       	movw	r28, r20
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
    e114:	9b 01       	movw	r18, r22
    e116:	ac 01       	movw	r20, r24
    e118:	d6 d8       	rcall	.-3668   	; 0xd2c6 <ili9341_set_limits>
	ili9341_write_gram(color);
    e11a:	ce 01       	movw	r24, r28
}
    e11c:	df 91       	pop	r29
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
	ili9341_write_gram(color);
    e11e:	cf 91       	pop	r28
    e120:	74 c9       	rjmp	.-3352   	; 0xd40a <ili9341_write_gram>

0000e122 <gfx_ili9341_draw_line_pixel>:
}

void gfx_ili9341_draw_line_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_color_t color)
{
    e122:	cf 93       	push	r28
    e124:	df 93       	push	r29
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
    e126:	20 91 c4 31 	lds	r18, 0x31C4	; 0x8031c4 <gfx_min_x>
    e12a:	30 91 c5 31 	lds	r19, 0x31C5	; 0x8031c5 <gfx_min_x+0x1>
    e12e:	82 17       	cp	r24, r18
    e130:	93 07       	cpc	r25, r19
    e132:	ac f0       	brlt	.+42     	; 0xe15e <gfx_ili9341_draw_line_pixel+0x3c>
    e134:	20 91 c6 31 	lds	r18, 0x31C6	; 0x8031c6 <gfx_max_x>
    e138:	30 91 c7 31 	lds	r19, 0x31C7	; 0x8031c7 <gfx_max_x+0x1>
    e13c:	28 17       	cp	r18, r24
    e13e:	39 07       	cpc	r19, r25
    e140:	74 f0       	brlt	.+28     	; 0xe15e <gfx_ili9341_draw_line_pixel+0x3c>
    e142:	20 91 c8 31 	lds	r18, 0x31C8	; 0x8031c8 <gfx_min_y>
    e146:	30 91 c9 31 	lds	r19, 0x31C9	; 0x8031c9 <gfx_min_y+0x1>
    e14a:	62 17       	cp	r22, r18
    e14c:	73 07       	cpc	r23, r19
    e14e:	3c f0       	brlt	.+14     	; 0xe15e <gfx_ili9341_draw_line_pixel+0x3c>
			(y < gfx_min_y) || (y > gfx_max_y)) {
    e150:	20 91 ca 31 	lds	r18, 0x31CA	; 0x8031ca <gfx_max_y>
    e154:	30 91 cb 31 	lds	r19, 0x31CB	; 0x8031cb <gfx_max_y+0x1>
    e158:	26 17       	cp	r18, r22
    e15a:	37 07       	cpc	r19, r23
    e15c:	1c f4       	brge	.+6      	; 0xe164 <gfx_ili9341_draw_line_pixel+0x42>

	/* Set up top left corner of area and write the two bytes of */
	/* pixel data.  Bottom left corner is already set to max_x/y. */
	gfx_set_top_left_limit(x, y);
	ili9341_write_gram(color);
}
    e15e:	df 91       	pop	r29
    e160:	cf 91       	pop	r28
    e162:	08 95       	ret
    e164:	ea 01       	movw	r28, r20
	}
#endif

	/* Set up top left corner of area and write the two bytes of */
	/* pixel data.  Bottom left corner is already set to max_x/y. */
	gfx_set_top_left_limit(x, y);
    e166:	00 d8       	rcall	.-4096   	; 0xd168 <ili9341_set_top_left_limit>
	ili9341_write_gram(color);
    e168:	ce 01       	movw	r24, r28
}
    e16a:	df 91       	pop	r29
    e16c:	cf 91       	pop	r28
#endif

	/* Set up top left corner of area and write the two bytes of */
	/* pixel data.  Bottom left corner is already set to max_x/y. */
	gfx_set_top_left_limit(x, y);
	ili9341_write_gram(color);
    e16e:	4d c9       	rjmp	.-3430   	; 0xd40a <ili9341_write_gram>

0000e170 <gfx_ili9341_init>:
}

void gfx_ili9341_init(void)
{
    e170:	0f 93       	push	r16
    e172:	1f 93       	push	r17
	/* initialize globals */
	gfx_width = ILI9341_DEFAULT_WIDTH;
    e174:	80 e4       	ldi	r24, 0x40	; 64
    e176:	91 e0       	ldi	r25, 0x01	; 1
    e178:	80 93 c2 31 	sts	0x31C2, r24	; 0x8031c2 <gfx_width>
    e17c:	90 93 c3 31 	sts	0x31C3, r25	; 0x8031c3 <gfx_width+0x1>
	gfx_height = ILI9341_DEFAULT_HEIGHT;
    e180:	80 ef       	ldi	r24, 0xF0	; 240
    e182:	90 e0       	ldi	r25, 0x00	; 0
    e184:	80 93 cc 31 	sts	0x31CC, r24	; 0x8031cc <gfx_height>
    e188:	90 93 cd 31 	sts	0x31CD, r25	; 0x8031cd <gfx_height+0x1>

	ili9341_init();
    e18c:	fb d9       	rcall	.-3082   	; 0xd584 <ili9341_init>
    e18e:	88 e0       	ldi	r24, 0x08	; 8
    e190:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	ili9341_backlight_on();

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
    e194:	20 91 cc 31 	lds	r18, 0x31CC	; 0x8031cc <gfx_height>
    e198:	30 91 cd 31 	lds	r19, 0x31CD	; 0x8031cd <gfx_height+0x1>
    e19c:	40 91 c2 31 	lds	r20, 0x31C2	; 0x8031c2 <gfx_width>
    e1a0:	50 91 c3 31 	lds	r21, 0x31C3	; 0x8031c3 <gfx_width+0x1>
    e1a4:	60 e0       	ldi	r22, 0x00	; 0
    e1a6:	70 e0       	ldi	r23, 0x00	; 0
    e1a8:	80 e0       	ldi	r24, 0x00	; 0
    e1aa:	90 e0       	ldi	r25, 0x00	; 0
    e1ac:	da dd       	rcall	.-1100   	; 0xdd62 <gfx_set_clipping>

	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
    e1ae:	20 91 cc 31 	lds	r18, 0x31CC	; 0x8031cc <gfx_height>
    e1b2:	30 91 cd 31 	lds	r19, 0x31CD	; 0x8031cd <gfx_height+0x1>
    e1b6:	40 91 c2 31 	lds	r20, 0x31C2	; 0x8031c2 <gfx_width>
    e1ba:	50 91 c3 31 	lds	r21, 0x31C3	; 0x8031c3 <gfx_width+0x1>
    e1be:	00 e0       	ldi	r16, 0x00	; 0
    e1c0:	10 e0       	ldi	r17, 0x00	; 0
    e1c2:	60 e0       	ldi	r22, 0x00	; 0
    e1c4:	70 e0       	ldi	r23, 0x00	; 0
    e1c6:	80 e0       	ldi	r24, 0x00	; 0
    e1c8:	90 e0       	ldi	r25, 0x00	; 0
    e1ca:	fd dd       	rcall	.-1030   	; 0xddc6 <gfx_generic_draw_filled_rect>
			GFX_COLOR_BLACK);
}
    e1cc:	1f 91       	pop	r17
    e1ce:	0f 91       	pop	r16
    e1d0:	08 95       	ret

0000e1d2 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    e1d2:	ef 92       	push	r14
    e1d4:	ff 92       	push	r15
    e1d6:	0f 93       	push	r16
    e1d8:	1f 93       	push	r17
    e1da:	cf 93       	push	r28
    e1dc:	df 93       	push	r29
    e1de:	1f 92       	push	r1
    e1e0:	cd b7       	in	r28, 0x3d	; 61
    e1e2:	de b7       	in	r29, 0x3e	; 62
    e1e4:	8c 01       	movw	r16, r24
    e1e6:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    e1e8:	00 97       	sbiw	r24, 0x00	; 0
    e1ea:	09 f4       	brne	.+2      	; 0xe1ee <usart_init_spi+0x1c>
    e1ec:	d7 c0       	rjmp	.+430    	; 0xe39c <usart_init_spi+0x1ca>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    e1ee:	80 3c       	cpi	r24, 0xC0	; 192
    e1f0:	91 05       	cpc	r25, r1
    e1f2:	09 f4       	brne	.+2      	; 0xe1f6 <usart_init_spi+0x24>
    e1f4:	2f c1       	rjmp	.+606    	; 0xe454 <usart_init_spi+0x282>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    e1f6:	81 15       	cp	r24, r1
    e1f8:	94 40       	sbci	r25, 0x04	; 4
    e1fa:	09 f4       	brne	.+2      	; 0xe1fe <usart_init_spi+0x2c>
    e1fc:	2f c1       	rjmp	.+606    	; 0xe45c <usart_init_spi+0x28a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    e1fe:	00 38       	cpi	r16, 0x80	; 128
    e200:	81 e0       	ldi	r24, 0x01	; 1
    e202:	18 07       	cpc	r17, r24
    e204:	09 f4       	brne	.+2      	; 0xe208 <usart_init_spi+0x36>
    e206:	2e c1       	rjmp	.+604    	; 0xe464 <usart_init_spi+0x292>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    e208:	01 15       	cp	r16, r1
    e20a:	e1 e0       	ldi	r30, 0x01	; 1
    e20c:	1e 07       	cpc	r17, r30
    e20e:	09 f4       	brne	.+2      	; 0xe212 <usart_init_spi+0x40>
    e210:	2d c1       	rjmp	.+602    	; 0xe46c <usart_init_spi+0x29a>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    e212:	00 38       	cpi	r16, 0x80	; 128
    e214:	f3 e0       	ldi	r31, 0x03	; 3
    e216:	1f 07       	cpc	r17, r31
    e218:	09 f4       	brne	.+2      	; 0xe21c <usart_init_spi+0x4a>
    e21a:	2c c1       	rjmp	.+600    	; 0xe474 <usart_init_spi+0x2a2>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    e21c:	01 15       	cp	r16, r1
    e21e:	22 e0       	ldi	r18, 0x02	; 2
    e220:	12 07       	cpc	r17, r18
    e222:	09 f4       	brne	.+2      	; 0xe226 <usart_init_spi+0x54>
    e224:	2b c1       	rjmp	.+598    	; 0xe47c <usart_init_spi+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    e226:	01 15       	cp	r16, r1
    e228:	88 e0       	ldi	r24, 0x08	; 8
    e22a:	18 07       	cpc	r17, r24
    e22c:	09 f4       	brne	.+2      	; 0xe230 <usart_init_spi+0x5e>
    e22e:	2a c1       	rjmp	.+596    	; 0xe484 <usart_init_spi+0x2b2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    e230:	01 15       	cp	r16, r1
    e232:	e9 e0       	ldi	r30, 0x09	; 9
    e234:	1e 07       	cpc	r17, r30
    e236:	09 f4       	brne	.+2      	; 0xe23a <usart_init_spi+0x68>
    e238:	29 c1       	rjmp	.+594    	; 0xe48c <usart_init_spi+0x2ba>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    e23a:	01 15       	cp	r16, r1
    e23c:	fa e0       	ldi	r31, 0x0A	; 10
    e23e:	1f 07       	cpc	r17, r31
    e240:	09 f4       	brne	.+2      	; 0xe244 <usart_init_spi+0x72>
    e242:	28 c1       	rjmp	.+592    	; 0xe494 <usart_init_spi+0x2c2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    e244:	01 15       	cp	r16, r1
    e246:	2b e0       	ldi	r18, 0x0B	; 11
    e248:	12 07       	cpc	r17, r18
    e24a:	09 f4       	brne	.+2      	; 0xe24e <usart_init_spi+0x7c>
    e24c:	27 c1       	rjmp	.+590    	; 0xe49c <usart_init_spi+0x2ca>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    e24e:	00 34       	cpi	r16, 0x40	; 64
    e250:	88 e0       	ldi	r24, 0x08	; 8
    e252:	18 07       	cpc	r17, r24
    e254:	09 f4       	brne	.+2      	; 0xe258 <usart_init_spi+0x86>
    e256:	26 c1       	rjmp	.+588    	; 0xe4a4 <usart_init_spi+0x2d2>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    e258:	00 39       	cpi	r16, 0x90	; 144
    e25a:	e8 e0       	ldi	r30, 0x08	; 8
    e25c:	1e 07       	cpc	r17, r30
    e25e:	09 f4       	brne	.+2      	; 0xe262 <usart_init_spi+0x90>
    e260:	25 c1       	rjmp	.+586    	; 0xe4ac <usart_init_spi+0x2da>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    e262:	00 3c       	cpi	r16, 0xC0	; 192
    e264:	f8 e0       	ldi	r31, 0x08	; 8
    e266:	1f 07       	cpc	r17, r31
    e268:	09 f4       	brne	.+2      	; 0xe26c <usart_init_spi+0x9a>
    e26a:	e8 c0       	rjmp	.+464    	; 0xe43c <usart_init_spi+0x26a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    e26c:	00 3c       	cpi	r16, 0xC0	; 192
    e26e:	29 e0       	ldi	r18, 0x09	; 9
    e270:	12 07       	cpc	r17, r18
    e272:	09 f4       	brne	.+2      	; 0xe276 <usart_init_spi+0xa4>
    e274:	e7 c0       	rjmp	.+462    	; 0xe444 <usart_init_spi+0x272>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    e276:	00 3a       	cpi	r16, 0xA0	; 160
    e278:	88 e0       	ldi	r24, 0x08	; 8
    e27a:	18 07       	cpc	r17, r24
    e27c:	09 f4       	brne	.+2      	; 0xe280 <usart_init_spi+0xae>
    e27e:	aa c0       	rjmp	.+340    	; 0xe3d4 <usart_init_spi+0x202>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    e280:	00 3a       	cpi	r16, 0xA0	; 160
    e282:	f9 e0       	ldi	r31, 0x09	; 9
    e284:	1f 07       	cpc	r17, r31
    e286:	09 f4       	brne	.+2      	; 0xe28a <usart_init_spi+0xb8>
    e288:	15 c1       	rjmp	.+554    	; 0xe4b4 <usart_init_spi+0x2e2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    e28a:	00 3a       	cpi	r16, 0xA0	; 160
    e28c:	fa e0       	ldi	r31, 0x0A	; 10
    e28e:	1f 07       	cpc	r17, r31
    e290:	09 f4       	brne	.+2      	; 0xe294 <usart_init_spi+0xc2>
    e292:	1c c1       	rjmp	.+568    	; 0xe4cc <usart_init_spi+0x2fa>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    e294:	00 38       	cpi	r16, 0x80	; 128
    e296:	24 e0       	ldi	r18, 0x04	; 4
    e298:	12 07       	cpc	r17, r18
    e29a:	09 f4       	brne	.+2      	; 0xe29e <usart_init_spi+0xcc>
    e29c:	7c c0       	rjmp	.+248    	; 0xe396 <usart_init_spi+0x1c4>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    e29e:	00 3a       	cpi	r16, 0xA0	; 160
    e2a0:	84 e0       	ldi	r24, 0x04	; 4
    e2a2:	18 07       	cpc	r17, r24
    e2a4:	09 f4       	brne	.+2      	; 0xe2a8 <usart_init_spi+0xd6>
    e2a6:	d2 c0       	rjmp	.+420    	; 0xe44c <usart_init_spi+0x27a>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    e2a8:	f8 01       	movw	r30, r16
    e2aa:	84 81       	ldd	r24, Z+4	; 0x04
    e2ac:	8f 7e       	andi	r24, 0xEF	; 239
    e2ae:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    e2b0:	fb 01       	movw	r30, r22
    e2b2:	24 81       	ldd	r18, Z+4	; 0x04
    e2b4:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    e2b6:	00 3a       	cpi	r16, 0xA0	; 160
    e2b8:	f8 e0       	ldi	r31, 0x08	; 8
    e2ba:	1f 07       	cpc	r17, r31
    e2bc:	09 f4       	brne	.+2      	; 0xe2c0 <usart_init_spi+0xee>
    e2be:	95 c0       	rjmp	.+298    	; 0xe3ea <usart_init_spi+0x218>
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    e2c0:	00 3a       	cpi	r16, 0xA0	; 160
    e2c2:	89 e0       	ldi	r24, 0x09	; 9
    e2c4:	18 07       	cpc	r17, r24
    e2c6:	09 f0       	breq	.+2      	; 0xe2ca <usart_init_spi+0xf8>
    e2c8:	70 c0       	rjmp	.+224    	; 0xe3aa <usart_init_spi+0x1d8>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    e2ca:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    e2ce:	84 fd       	sbrc	r24, 4
    e2d0:	b1 c0       	rjmp	.+354    	; 0xe434 <usart_init_spi+0x262>
    e2d2:	81 e0       	ldi	r24, 0x01	; 1
    e2d4:	90 e0       	ldi	r25, 0x00	; 0
    e2d6:	32 e0       	ldi	r19, 0x02	; 2
    e2d8:	a0 e6       	ldi	r26, 0x60	; 96
    e2da:	b6 e0       	ldi	r27, 0x06	; 6
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    e2dc:	11 96       	adiw	r26, 0x01	; 1
    e2de:	3c 93       	st	X, r19
    e2e0:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    e2e2:	22 30       	cpi	r18, 0x02	; 2
    e2e4:	08 f4       	brcc	.+2      	; 0xe2e8 <usart_init_spi+0x116>
    e2e6:	74 c0       	rjmp	.+232    	; 0xe3d0 <usart_init_spi+0x1fe>
    e2e8:	40 e0       	ldi	r20, 0x00	; 0
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    e2ea:	fd 01       	movw	r30, r26
    e2ec:	70 96       	adiw	r30, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    e2ee:	e8 0f       	add	r30, r24
    e2f0:	f9 1f       	adc	r31, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e2f2:	8f b7       	in	r24, 0x3f	; 63
    e2f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    e2f6:	f8 94       	cli
	return flags;
    e2f8:	29 81       	ldd	r18, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    e2fa:	90 81       	ld	r25, Z
    e2fc:	97 70       	andi	r25, 0x07	; 7
    e2fe:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    e300:	80 81       	ld	r24, Z
    e302:	84 2b       	or	r24, r20
    e304:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e306:	2f bf       	out	0x3f, r18	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    e308:	15 96       	adiw	r26, 0x05	; 5
    e30a:	3c 93       	st	X, r19
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    e30c:	f8 01       	movw	r30, r16
    e30e:	85 81       	ldd	r24, Z+5	; 0x05
    e310:	80 6c       	ori	r24, 0xC0	; 192
    e312:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    e314:	f7 01       	movw	r30, r14
    e316:	84 81       	ldd	r24, Z+4	; 0x04
    e318:	8d 7f       	andi	r24, 0xFD	; 253
		usart->CTRLC |= USART_UCPHA_bm;
    e31a:	f8 01       	movw	r30, r16
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    e31c:	81 30       	cpi	r24, 0x01	; 1
    e31e:	09 f4       	brne	.+2      	; 0xe322 <usart_init_spi+0x150>
    e320:	82 c0       	rjmp	.+260    	; 0xe426 <usart_init_spi+0x254>
		usart->CTRLC |= USART_UCPHA_bm;
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    e322:	85 81       	ldd	r24, Z+5	; 0x05
    e324:	8d 7f       	andi	r24, 0xFD	; 253
    e326:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    e328:	f7 01       	movw	r30, r14
    e32a:	85 81       	ldd	r24, Z+5	; 0x05
		(usart)->CTRLC |= USART_DORD_bm;
    e32c:	f8 01       	movw	r30, r16
	if (opt->spimode == 1 || opt->spimode == 3) {
		usart->CTRLC |= USART_UCPHA_bm;
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
	}
	if (opt->data_order) {
    e32e:	88 23       	and	r24, r24
    e330:	09 f4       	brne	.+2      	; 0xe334 <usart_init_spi+0x162>
    e332:	75 c0       	rjmp	.+234    	; 0xe41e <usart_init_spi+0x24c>
		(usart)->CTRLC |= USART_DORD_bm;
    e334:	85 81       	ldd	r24, Z+5	; 0x05
    e336:	84 60       	ori	r24, 0x04	; 4
    e338:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    e33a:	f7 01       	movw	r30, r14
    e33c:	80 81       	ld	r24, Z
    e33e:	91 81       	ldd	r25, Z+1	; 0x01
    e340:	a2 81       	ldd	r26, Z+2	; 0x02
    e342:	b3 81       	ldd	r27, Z+3	; 0x03
{
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    e344:	81 15       	cp	r24, r1
    e346:	f4 e2       	ldi	r31, 0x24	; 36
    e348:	9f 07       	cpc	r25, r31
    e34a:	f4 ef       	ldi	r31, 0xF4	; 244
    e34c:	af 07       	cpc	r26, r31
    e34e:	b1 05       	cpc	r27, r1
    e350:	08 f0       	brcs	.+2      	; 0xe354 <usart_init_spi+0x182>
    e352:	6d c0       	rjmp	.+218    	; 0xe42e <usart_init_spi+0x25c>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    e354:	9c 01       	movw	r18, r24
    e356:	ad 01       	movw	r20, r26
    e358:	22 0f       	add	r18, r18
    e35a:	33 1f       	adc	r19, r19
    e35c:	44 1f       	adc	r20, r20
    e35e:	55 1f       	adc	r21, r21
    e360:	60 e0       	ldi	r22, 0x00	; 0
    e362:	78 e4       	ldi	r23, 0x48	; 72
    e364:	88 ee       	ldi	r24, 0xE8	; 232
    e366:	91 e0       	ldi	r25, 0x01	; 1
    e368:	0e 94 5c 7f 	call	0xfeb8	; 0xfeb8 <__udivmodsi4>
    e36c:	21 50       	subi	r18, 0x01	; 1
    e36e:	31 09       	sbc	r19, r1
    e370:	83 2f       	mov	r24, r19
    e372:	8f 70       	andi	r24, 0x0F	; 15
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    e374:	f8 01       	movw	r30, r16
    e376:	87 83       	std	Z+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    e378:	26 83       	std	Z+6, r18	; 0x06
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    e37a:	84 81       	ldd	r24, Z+4	; 0x04
    e37c:	88 60       	ori	r24, 0x08	; 8
    e37e:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    e380:	84 81       	ldd	r24, Z+4	; 0x04
    e382:	80 61       	ori	r24, 0x10	; 16
    e384:	84 83       	std	Z+4, r24	; 0x04
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    e386:	0f 90       	pop	r0
    e388:	df 91       	pop	r29
    e38a:	cf 91       	pop	r28
    e38c:	1f 91       	pop	r17
    e38e:	0f 91       	pop	r16
    e390:	ff 90       	pop	r15
    e392:	ef 90       	pop	r14
    e394:	08 95       	ret
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    e396:	60 e4       	ldi	r22, 0x40	; 64
    e398:	83 e0       	ldi	r24, 0x03	; 3
    e39a:	c6 d1       	rcall	.+908    	; 0xe728 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    e39c:	f8 01       	movw	r30, r16
    e39e:	84 81       	ldd	r24, Z+4	; 0x04
    e3a0:	8f 7e       	andi	r24, 0xEF	; 239
    e3a2:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    e3a4:	f7 01       	movw	r30, r14
    e3a6:	24 81       	ldd	r18, Z+4	; 0x04
    e3a8:	22 50       	subi	r18, 0x02	; 2
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    e3aa:	00 3a       	cpi	r16, 0xA0	; 160
    e3ac:	ea e0       	ldi	r30, 0x0A	; 10
    e3ae:	1e 07       	cpc	r17, r30
    e3b0:	31 f5       	brne	.+76     	; 0xe3fe <usart_init_spi+0x22c>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    e3b2:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    e3b6:	84 ff       	sbrs	r24, 4
    e3b8:	2c c0       	rjmp	.+88     	; 0xe412 <usart_init_spi+0x240>
    e3ba:	85 e0       	ldi	r24, 0x05	; 5
    e3bc:	90 e0       	ldi	r25, 0x00	; 0
    e3be:	30 e2       	ldi	r19, 0x20	; 32
    e3c0:	a0 e8       	ldi	r26, 0x80	; 128
    e3c2:	b6 e0       	ldi	r27, 0x06	; 6
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    e3c4:	11 96       	adiw	r26, 0x01	; 1
    e3c6:	3c 93       	st	X, r19
    e3c8:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    e3ca:	22 30       	cpi	r18, 0x02	; 2
    e3cc:	08 f0       	brcs	.+2      	; 0xe3d0 <usart_init_spi+0x1fe>
    e3ce:	8c cf       	rjmp	.-232    	; 0xe2e8 <usart_init_spi+0x116>
    e3d0:	40 e4       	ldi	r20, 0x40	; 64
    e3d2:	8b cf       	rjmp	.-234    	; 0xe2ea <usart_init_spi+0x118>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    e3d4:	60 e1       	ldi	r22, 0x10	; 16
    e3d6:	83 e0       	ldi	r24, 0x03	; 3
    e3d8:	a7 d1       	rcall	.+846    	; 0xe728 <sysclk_enable_module>
    e3da:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    e3de:	8f 7e       	andi	r24, 0xEF	; 239
    e3e0:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    e3e4:	f7 01       	movw	r30, r14
    e3e6:	24 81       	ldd	r18, Z+4	; 0x04
    e3e8:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    e3ea:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    e3ee:	84 fd       	sbrc	r24, 4
    e3f0:	0c c0       	rjmp	.+24     	; 0xe40a <usart_init_spi+0x238>
    e3f2:	81 e0       	ldi	r24, 0x01	; 1
    e3f4:	90 e0       	ldi	r25, 0x00	; 0
    e3f6:	32 e0       	ldi	r19, 0x02	; 2
    e3f8:	a0 e4       	ldi	r26, 0x40	; 64
    e3fa:	b6 e0       	ldi	r27, 0x06	; 6
    e3fc:	6f cf       	rjmp	.-290    	; 0xe2dc <usart_init_spi+0x10a>
    e3fe:	a0 e0       	ldi	r26, 0x00	; 0
    e400:	b6 e0       	ldi	r27, 0x06	; 6
    e402:	31 e0       	ldi	r19, 0x01	; 1
    e404:	80 e0       	ldi	r24, 0x00	; 0
    e406:	90 e0       	ldi	r25, 0x00	; 0
    e408:	69 cf       	rjmp	.-302    	; 0xe2dc <usart_init_spi+0x10a>
    e40a:	85 e0       	ldi	r24, 0x05	; 5
    e40c:	90 e0       	ldi	r25, 0x00	; 0
    e40e:	30 e2       	ldi	r19, 0x20	; 32
    e410:	f3 cf       	rjmp	.-26     	; 0xe3f8 <usart_init_spi+0x226>
    e412:	81 e0       	ldi	r24, 0x01	; 1
    e414:	90 e0       	ldi	r25, 0x00	; 0
    e416:	32 e0       	ldi	r19, 0x02	; 2
    e418:	a0 e8       	ldi	r26, 0x80	; 128
    e41a:	b6 e0       	ldi	r27, 0x06	; 6
    e41c:	5f cf       	rjmp	.-322    	; 0xe2dc <usart_init_spi+0x10a>
		usart->CTRLC &= ~USART_UCPHA_bm;
	}
	if (opt->data_order) {
		(usart)->CTRLC |= USART_DORD_bm;
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    e41e:	85 81       	ldd	r24, Z+5	; 0x05
    e420:	8b 7f       	andi	r24, 0xFB	; 251
    e422:	85 83       	std	Z+5, r24	; 0x05
    e424:	8a cf       	rjmp	.-236    	; 0xe33a <usart_init_spi+0x168>
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
		usart->CTRLC |= USART_UCPHA_bm;
    e426:	85 81       	ldd	r24, Z+5	; 0x05
    e428:	82 60       	ori	r24, 0x02	; 2
    e42a:	85 83       	std	Z+5, r24	; 0x05
    e42c:	7d cf       	rjmp	.-262    	; 0xe328 <usart_init_spi+0x156>
{
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    e42e:	20 e0       	ldi	r18, 0x00	; 0
    e430:	80 e0       	ldi	r24, 0x00	; 0
    e432:	a0 cf       	rjmp	.-192    	; 0xe374 <usart_init_spi+0x1a2>
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    e434:	85 e0       	ldi	r24, 0x05	; 5
    e436:	90 e0       	ldi	r25, 0x00	; 0
    e438:	30 e2       	ldi	r19, 0x20	; 32
    e43a:	4e cf       	rjmp	.-356    	; 0xe2d8 <usart_init_spi+0x106>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    e43c:	68 e0       	ldi	r22, 0x08	; 8
    e43e:	83 e0       	ldi	r24, 0x03	; 3
    e440:	73 d1       	rcall	.+742    	; 0xe728 <sysclk_enable_module>
    e442:	ac cf       	rjmp	.-168    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    e444:	68 e0       	ldi	r22, 0x08	; 8
    e446:	84 e0       	ldi	r24, 0x04	; 4
    e448:	6f d1       	rcall	.+734    	; 0xe728 <sysclk_enable_module>
    e44a:	a8 cf       	rjmp	.-176    	; 0xe39c <usart_init_spi+0x1ca>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    e44c:	60 e4       	ldi	r22, 0x40	; 64
    e44e:	85 e0       	ldi	r24, 0x05	; 5
    e450:	6b d1       	rcall	.+726    	; 0xe728 <sysclk_enable_module>
    e452:	a4 cf       	rjmp	.-184    	; 0xe39c <usart_init_spi+0x1ca>
	if (module == NULL) {
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    e454:	60 e1       	ldi	r22, 0x10	; 16
    e456:	80 e0       	ldi	r24, 0x00	; 0
    e458:	67 d1       	rcall	.+718    	; 0xe728 <sysclk_enable_module>
    e45a:	a0 cf       	rjmp	.-192    	; 0xe39c <usart_init_spi+0x1ca>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    e45c:	64 e0       	ldi	r22, 0x04	; 4
    e45e:	80 e0       	ldi	r24, 0x00	; 0
    e460:	63 d1       	rcall	.+710    	; 0xe728 <sysclk_enable_module>
    e462:	9c cf       	rjmp	.-200    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    e464:	62 e0       	ldi	r22, 0x02	; 2
    e466:	80 e0       	ldi	r24, 0x00	; 0
    e468:	5f d1       	rcall	.+702    	; 0xe728 <sysclk_enable_module>
    e46a:	98 cf       	rjmp	.-208    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    e46c:	61 e0       	ldi	r22, 0x01	; 1
    e46e:	80 e0       	ldi	r24, 0x00	; 0
    e470:	5b d1       	rcall	.+694    	; 0xe728 <sysclk_enable_module>
    e472:	94 cf       	rjmp	.-216    	; 0xe39c <usart_init_spi+0x1ca>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    e474:	61 e0       	ldi	r22, 0x01	; 1
    e476:	81 e0       	ldi	r24, 0x01	; 1
    e478:	57 d1       	rcall	.+686    	; 0xe728 <sysclk_enable_module>
    e47a:	90 cf       	rjmp	.-224    	; 0xe39c <usart_init_spi+0x1ca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    e47c:	62 e0       	ldi	r22, 0x02	; 2
    e47e:	81 e0       	ldi	r24, 0x01	; 1
    e480:	53 d1       	rcall	.+678    	; 0xe728 <sysclk_enable_module>
    e482:	8c cf       	rjmp	.-232    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    e484:	61 e0       	ldi	r22, 0x01	; 1
    e486:	83 e0       	ldi	r24, 0x03	; 3
    e488:	4f d1       	rcall	.+670    	; 0xe728 <sysclk_enable_module>
    e48a:	88 cf       	rjmp	.-240    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    e48c:	61 e0       	ldi	r22, 0x01	; 1
    e48e:	84 e0       	ldi	r24, 0x04	; 4
    e490:	4b d1       	rcall	.+662    	; 0xe728 <sysclk_enable_module>
    e492:	84 cf       	rjmp	.-248    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    e494:	61 e0       	ldi	r22, 0x01	; 1
    e496:	85 e0       	ldi	r24, 0x05	; 5
    e498:	47 d1       	rcall	.+654    	; 0xe728 <sysclk_enable_module>
    e49a:	80 cf       	rjmp	.-256    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    e49c:	61 e0       	ldi	r22, 0x01	; 1
    e49e:	86 e0       	ldi	r24, 0x06	; 6
    e4a0:	43 d1       	rcall	.+646    	; 0xe728 <sysclk_enable_module>
    e4a2:	7c cf       	rjmp	.-264    	; 0xe39c <usart_init_spi+0x1ca>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    e4a4:	62 e0       	ldi	r22, 0x02	; 2
    e4a6:	83 e0       	ldi	r24, 0x03	; 3
    e4a8:	3f d1       	rcall	.+638    	; 0xe728 <sysclk_enable_module>
    e4aa:	78 cf       	rjmp	.-272    	; 0xe39c <usart_init_spi+0x1ca>
    e4ac:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    e4ae:	83 e0       	ldi	r24, 0x03	; 3
    e4b0:	3b d1       	rcall	.+630    	; 0xe728 <sysclk_enable_module>
    e4b2:	74 cf       	rjmp	.-280    	; 0xe39c <usart_init_spi+0x1ca>
    e4b4:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    e4b6:	84 e0       	ldi	r24, 0x04	; 4
    e4b8:	37 d1       	rcall	.+622    	; 0xe728 <sysclk_enable_module>
    e4ba:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    e4be:	8f 7e       	andi	r24, 0xEF	; 239
    e4c0:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
    e4c4:	f7 01       	movw	r30, r14
    e4c6:	24 81       	ldd	r18, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    e4c8:	22 50       	subi	r18, 0x02	; 2
    e4ca:	ff ce       	rjmp	.-514    	; 0xe2ca <usart_init_spi+0xf8>
    e4cc:	60 e1       	ldi	r22, 0x10	; 16
    e4ce:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    e4d0:	2b d1       	rcall	.+598    	; 0xe728 <sysclk_enable_module>
    e4d2:	64 cf       	rjmp	.-312    	; 0xe39c <usart_init_spi+0x1ca>

0000e4d4 <usart_spi_init>:
#include "sysclk.h"

void usart_spi_init(USART_t *usart)
{
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    e4d4:	80 3a       	cpi	r24, 0xA0	; 160
    e4d6:	28 e0       	ldi	r18, 0x08	; 8
    e4d8:	92 07       	cpc	r25, r18
    e4da:	59 f0       	breq	.+22     	; 0xe4f2 <usart_spi_init+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    e4dc:	80 3a       	cpi	r24, 0xA0	; 160
    e4de:	29 e0       	ldi	r18, 0x09	; 9
    e4e0:	92 07       	cpc	r25, r18
    e4e2:	51 f0       	breq	.+20     	; 0xe4f8 <usart_spi_init+0x24>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	else
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    e4e4:	80 3a       	cpi	r24, 0xA0	; 160
    e4e6:	9a 40       	sbci	r25, 0x0A	; 10
    e4e8:	09 f0       	breq	.+2      	; 0xe4ec <usart_spi_init+0x18>
    e4ea:	08 95       	ret
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    e4ec:	60 e1       	ldi	r22, 0x10	; 16
    e4ee:	85 e0       	ldi	r24, 0x05	; 5
    e4f0:	1b c1       	rjmp	.+566    	; 0xe728 <sysclk_enable_module>

void usart_spi_init(USART_t *usart)
{
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    e4f2:	60 e1       	ldi	r22, 0x10	; 16
    e4f4:	83 e0       	ldi	r24, 0x03	; 3
    e4f6:	18 c1       	rjmp	.+560    	; 0xe728 <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    e4f8:	60 e1       	ldi	r22, 0x10	; 16
    e4fa:	84 e0       	ldi	r24, 0x04	; 4
    e4fc:	15 c1       	rjmp	.+554    	; 0xe728 <sysclk_enable_module>

0000e4fe <usart_spi_setup_device>:
}

void usart_spi_setup_device(USART_t *usart, struct usart_spi_device *device,
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
    e4fe:	0f 93       	push	r16
    e500:	1f 93       	push	r17
    e502:	cf 93       	push	r28
    e504:	df 93       	push	r29
    e506:	00 d0       	rcall	.+0      	; 0xe508 <usart_spi_setup_device+0xa>
    e508:	00 d0       	rcall	.+0      	; 0xe50a <usart_spi_setup_device+0xc>
    e50a:	cd b7       	in	r28, 0x3d	; 61
    e50c:	de b7       	in	r29, 0x3e	; 62
	usart_spi_options_t opt;
	opt.baudrate=baud_rate;
    e50e:	09 83       	std	Y+1, r16	; 0x01
    e510:	1a 83       	std	Y+2, r17	; 0x02
    e512:	2b 83       	std	Y+3, r18	; 0x03
    e514:	3c 83       	std	Y+4, r19	; 0x04
	opt.spimode=flags;
    e516:	4d 83       	std	Y+5, r20	; 0x05
	opt.data_order=false;
    e518:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(usart, &opt);
    e51a:	be 01       	movw	r22, r28
    e51c:	6f 5f       	subi	r22, 0xFF	; 255
    e51e:	7f 4f       	sbci	r23, 0xFF	; 255
    e520:	58 de       	rcall	.-848    	; 0xe1d2 <usart_init_spi>
}
    e522:	26 96       	adiw	r28, 0x06	; 6
    e524:	cd bf       	out	0x3d, r28	; 61
    e526:	de bf       	out	0x3e, r29	; 62
    e528:	df 91       	pop	r29
    e52a:	cf 91       	pop	r28
    e52c:	1f 91       	pop	r17
    e52e:	0f 91       	pop	r16
    e530:	08 95       	ret

0000e532 <usart_spi_write_packet>:

status_code_t usart_spi_write_packet(USART_t *usart,const uint8_t *data, size_t len)
{
    e532:	fc 01       	movw	r30, r24
	size_t i=0;
	while(len) {
    e534:	41 15       	cp	r20, r1
    e536:	51 05       	cpc	r21, r1
    e538:	89 f0       	breq	.+34     	; 0xe55c <usart_spi_write_packet+0x2a>
    e53a:	db 01       	movw	r26, r22
    e53c:	46 0f       	add	r20, r22
    e53e:	57 1f       	adc	r21, r23
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    e540:	20 e4       	ldi	r18, 0x40	; 64
		usart_spi_transmit(usart,*(data+i));
    e542:	9d 91       	ld	r25, X+
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    e544:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    e546:	85 ff       	sbrs	r24, 5
    e548:	fd cf       	rjmp	.-6      	; 0xe544 <usart_spi_write_packet+0x12>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    e54a:	90 83       	st	Z, r25
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    e54c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    e54e:	86 ff       	sbrs	r24, 6
    e550:	fd cf       	rjmp	.-6      	; 0xe54c <usart_spi_write_packet+0x1a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    e552:	21 83       	std	Z+1, r18	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    e554:	80 81       	ld	r24, Z
}

status_code_t usart_spi_write_packet(USART_t *usart,const uint8_t *data, size_t len)
{
	size_t i=0;
	while(len) {
    e556:	a4 17       	cp	r26, r20
    e558:	b5 07       	cpc	r27, r21
    e55a:	99 f7       	brne	.-26     	; 0xe542 <usart_spi_write_packet+0x10>
		usart_spi_transmit(usart,*(data+i));
		len--;
		i++;
	}
	return STATUS_OK;
}
    e55c:	80 e0       	ldi	r24, 0x00	; 0
    e55e:	08 95       	ret

0000e560 <usart_spi_read_packet>:

status_code_t usart_spi_read_packet(USART_t *usart, uint8_t *data, size_t len)
{
    e560:	fc 01       	movw	r30, r24
    e562:	db 01       	movw	r26, r22
	while(len) {
    e564:	41 15       	cp	r20, r1
    e566:	51 05       	cpc	r21, r1
    e568:	89 f0       	breq	.+34     	; 0xe58c <usart_spi_read_packet+0x2c>
    e56a:	46 0f       	add	r20, r22
    e56c:	57 1f       	adc	r21, r23
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    e56e:	2f ef       	ldi	r18, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    e570:	90 e4       	ldi	r25, 0x40	; 64
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    e572:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    e574:	85 ff       	sbrs	r24, 5
    e576:	fd cf       	rjmp	.-6      	; 0xe572 <usart_spi_read_packet+0x12>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    e578:	20 83       	st	Z, r18
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    e57a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    e57c:	86 ff       	sbrs	r24, 6
    e57e:	fd cf       	rjmp	.-6      	; 0xe57a <usart_spi_read_packet+0x1a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    e580:	91 83       	std	Z+1, r25	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    e582:	80 81       	ld	r24, Z
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
    e584:	8d 93       	st	X+, r24
	return STATUS_OK;
}

status_code_t usart_spi_read_packet(USART_t *usart, uint8_t *data, size_t len)
{
	while(len) {
    e586:	a4 17       	cp	r26, r20
    e588:	b5 07       	cpc	r27, r21
    e58a:	99 f7       	brne	.-26     	; 0xe572 <usart_spi_read_packet+0x12>
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    e58c:	80 e0       	ldi	r24, 0x00	; 0
    e58e:	08 95       	ret

0000e590 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    e590:	fb 01       	movw	r30, r22
    e592:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    e594:	e8 2f       	mov	r30, r24
    e596:	e6 95       	lsr	r30
    e598:	e6 95       	lsr	r30
    e59a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    e59c:	40 e2       	ldi	r20, 0x20	; 32
    e59e:	e4 9f       	mul	r30, r20
    e5a0:	f0 01       	movw	r30, r0
    e5a2:	11 24       	eor	r1, r1
    e5a4:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    e5a6:	87 70       	andi	r24, 0x07	; 7
    e5a8:	21 e0       	ldi	r18, 0x01	; 1
    e5aa:	30 e0       	ldi	r19, 0x00	; 0
    e5ac:	a9 01       	movw	r20, r18
    e5ae:	02 c0       	rjmp	.+4      	; 0xe5b4 <usart_spi_select_device+0x24>
    e5b0:	44 0f       	add	r20, r20
    e5b2:	55 1f       	adc	r21, r21
    e5b4:	8a 95       	dec	r24
    e5b6:	e2 f7       	brpl	.-8      	; 0xe5b0 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    e5b8:	46 83       	std	Z+6, r20	; 0x06
    e5ba:	08 95       	ret

0000e5bc <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    e5bc:	fb 01       	movw	r30, r22
    e5be:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    e5c0:	e8 2f       	mov	r30, r24
    e5c2:	e6 95       	lsr	r30
    e5c4:	e6 95       	lsr	r30
    e5c6:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    e5c8:	40 e2       	ldi	r20, 0x20	; 32
    e5ca:	e4 9f       	mul	r30, r20
    e5cc:	f0 01       	movw	r30, r0
    e5ce:	11 24       	eor	r1, r1
    e5d0:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    e5d2:	87 70       	andi	r24, 0x07	; 7
    e5d4:	21 e0       	ldi	r18, 0x01	; 1
    e5d6:	30 e0       	ldi	r19, 0x00	; 0
    e5d8:	a9 01       	movw	r20, r18
    e5da:	02 c0       	rjmp	.+4      	; 0xe5e0 <usart_spi_deselect_device+0x24>
    e5dc:	44 0f       	add	r20, r20
    e5de:	55 1f       	adc	r21, r21
    e5e0:	8a 95       	dec	r24
    e5e2:	e2 f7       	brpl	.-8      	; 0xe5dc <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    e5e4:	45 83       	std	Z+5, r20	; 0x05
    e5e6:	08 95       	ret

0000e5e8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    e5e8:	fc 01       	movw	r30, r24
    e5ea:	26 2f       	mov	r18, r22
    e5ec:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e5ee:	60 fd       	sbrc	r22, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e5f0:	50 8b       	std	Z+16, r21	; 0x10
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e5f2:	21 fd       	sbrc	r18, 1
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e5f4:	51 8b       	std	Z+17, r21	; 0x11
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e5f6:	22 fd       	sbrc	r18, 2
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e5f8:	52 8b       	std	Z+18, r21	; 0x12
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e5fa:	23 fd       	sbrc	r18, 3
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e5fc:	53 8b       	std	Z+19, r21	; 0x13
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e5fe:	24 fd       	sbrc	r18, 4
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e600:	54 8b       	std	Z+20, r21	; 0x14
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e602:	25 fd       	sbrc	r18, 5
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e604:	55 8b       	std	Z+21, r21	; 0x15
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e606:	26 fd       	sbrc	r18, 6
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e608:	56 8b       	std	Z+22, r21	; 0x16
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    e60a:	22 0f       	add	r18, r18
    e60c:	23 2f       	mov	r18, r19
    e60e:	22 1f       	adc	r18, r18
    e610:	33 0b       	sbc	r19, r19
    e612:	23 2b       	or	r18, r19
    e614:	09 f0       	breq	.+2      	; 0xe618 <ioport_configure_port_pin+0x30>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    e616:	57 8b       	std	Z+23, r21	; 0x17
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    e618:	40 ff       	sbrs	r20, 0
    e61a:	05 c0       	rjmp	.+10     	; 0xe626 <ioport_configure_port_pin+0x3e>
		if (flags & IOPORT_INIT_HIGH) {
    e61c:	41 fd       	sbrc	r20, 1
    e61e:	05 c0       	rjmp	.+10     	; 0xe62a <ioport_configure_port_pin+0x42>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    e620:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    e622:	61 83       	std	Z+1, r22	; 0x01
    e624:	08 95       	ret
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    e626:	62 83       	std	Z+2, r22	; 0x02
    e628:	08 95       	ret
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    e62a:	65 83       	std	Z+5, r22	; 0x05
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    e62c:	61 83       	std	Z+1, r22	; 0x01
    e62e:	08 95       	ret

0000e630 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    e630:	cf 93       	push	r28
    e632:	df 93       	push	r29
    e634:	cd b7       	in	r28, 0x3d	; 61
    e636:	de b7       	in	r29, 0x3e	; 62
    e638:	28 97       	sbiw	r28, 0x08	; 8
    e63a:	cd bf       	out	0x3d, r28	; 61
    e63c:	de bf       	out	0x3e, r29	; 62
    e63e:	47 e0       	ldi	r20, 0x07	; 7
    e640:	50 e0       	ldi	r21, 0x00	; 0
    e642:	6f ef       	ldi	r22, 0xFF	; 255
    e644:	70 e0       	ldi	r23, 0x00	; 0
    e646:	80 e7       	ldi	r24, 0x70	; 112
    e648:	90 e0       	ldi	r25, 0x00	; 0
    e64a:	0e 94 9c 80 	call	0x10138	; 0x10138 <memset>
    e64e:	6c e1       	ldi	r22, 0x1C	; 28
    e650:	70 e0       	ldi	r23, 0x00	; 0
    e652:	82 e0       	ldi	r24, 0x02	; 2
    e654:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <nvm_read_byte>
    e658:	8c 83       	std	Y+4, r24	; 0x04
    e65a:	6d e1       	ldi	r22, 0x1D	; 29
    e65c:	70 e0       	ldi	r23, 0x00	; 0
    e65e:	82 e0       	ldi	r24, 0x02	; 2
    e660:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <nvm_read_byte>
    e664:	8b 83       	std	Y+3, r24	; 0x03
    e666:	8b 81       	ldd	r24, Y+3	; 0x03
    e668:	9c 81       	ldd	r25, Y+4	; 0x04
    e66a:	8f 3f       	cpi	r24, 0xFF	; 255
    e66c:	2f ef       	ldi	r18, 0xFF	; 255
    e66e:	92 07       	cpc	r25, r18
    e670:	09 f4       	brne	.+2      	; 0xe674 <sysclk_init+0x44>
    e672:	55 c0       	rjmp	.+170    	; 0xe71e <sysclk_init+0xee>
    e674:	89 83       	std	Y+1, r24	; 0x01
    e676:	9a 83       	std	Y+2, r25	; 0x02
    e678:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x700062>
    e67c:	8a 81       	ldd	r24, Y+2	; 0x02
    e67e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__TEXT_REGION_LENGTH__+0x700063>
    e682:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    e686:	84 fd       	sbrc	r24, 4
    e688:	11 c0       	rjmp	.+34     	; 0xe6ac <sysclk_init+0x7c>
    e68a:	8f b7       	in	r24, 0x3f	; 63
    e68c:	8d 83       	std	Y+5, r24	; 0x05
    e68e:	f8 94       	cli
    e690:	9d 81       	ldd	r25, Y+5	; 0x05
    e692:	80 e1       	ldi	r24, 0x10	; 16
    e694:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    e698:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e69c:	80 61       	ori	r24, 0x10	; 16
    e69e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e6a2:	9f bf       	out	0x3f, r25	; 63
    e6a4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    e6a8:	84 ff       	sbrs	r24, 4
    e6aa:	fc cf       	rjmp	.-8      	; 0xe6a4 <sysclk_init+0x74>
    e6ac:	64 e0       	ldi	r22, 0x04	; 4
    e6ae:	80 e4       	ldi	r24, 0x40	; 64
    e6b0:	90 e0       	ldi	r25, 0x00	; 0
    e6b2:	0e 94 82 7b 	call	0xf704	; 0xf704 <ccp_write_io>
    e6b6:	8f b7       	in	r24, 0x3f	; 63
    e6b8:	8f 83       	std	Y+7, r24	; 0x07
    e6ba:	f8 94       	cli
    e6bc:	9f 81       	ldd	r25, Y+7	; 0x07
    e6be:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e6c2:	84 60       	ori	r24, 0x04	; 4
    e6c4:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e6c8:	9f bf       	out	0x3f, r25	; 63
    e6ca:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    e6ce:	82 ff       	sbrs	r24, 2
    e6d0:	fc cf       	rjmp	.-8      	; 0xe6ca <sysclk_init+0x9a>
    e6d2:	8f b7       	in	r24, 0x3f	; 63
    e6d4:	88 87       	std	Y+8, r24	; 0x08
    e6d6:	f8 94       	cli
    e6d8:	98 85       	ldd	r25, Y+8	; 0x08
    e6da:	80 91 56 00 	lds	r24, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    e6de:	8e 7f       	andi	r24, 0xFE	; 254
    e6e0:	80 93 56 00 	sts	0x0056, r24	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    e6e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
    e6e8:	81 60       	ori	r24, 0x01	; 1
    e6ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
    e6ee:	9f bf       	out	0x3f, r25	; 63
    e6f0:	8f b7       	in	r24, 0x3f	; 63
    e6f2:	8e 83       	std	Y+6, r24	; 0x06
    e6f4:	f8 94       	cli
    e6f6:	9e 81       	ldd	r25, Y+6	; 0x06
    e6f8:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e6fc:	84 60       	ori	r24, 0x04	; 4
    e6fe:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e702:	9f bf       	out	0x3f, r25	; 63
    e704:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    e708:	82 ff       	sbrs	r24, 2
    e70a:	fc cf       	rjmp	.-8      	; 0xe704 <sysclk_init+0xd4>
    e70c:	85 e0       	ldi	r24, 0x05	; 5
    e70e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    e712:	28 96       	adiw	r28, 0x08	; 8
    e714:	cd bf       	out	0x3d, r28	; 61
    e716:	de bf       	out	0x3e, r29	; 62
    e718:	df 91       	pop	r29
    e71a:	cf 91       	pop	r28
    e71c:	08 95       	ret
    e71e:	80 e4       	ldi	r24, 0x40	; 64
    e720:	93 e2       	ldi	r25, 0x23	; 35
    e722:	8b 83       	std	Y+3, r24	; 0x03
    e724:	9c 83       	std	Y+4, r25	; 0x04
    e726:	a6 cf       	rjmp	.-180    	; 0xe674 <sysclk_init+0x44>

0000e728 <sysclk_enable_module>:
    e728:	cf 93       	push	r28
    e72a:	df 93       	push	r29
    e72c:	1f 92       	push	r1
    e72e:	cd b7       	in	r28, 0x3d	; 61
    e730:	de b7       	in	r29, 0x3e	; 62
    e732:	9f b7       	in	r25, 0x3f	; 63
    e734:	99 83       	std	Y+1, r25	; 0x01
    e736:	f8 94       	cli
    e738:	99 81       	ldd	r25, Y+1	; 0x01
    e73a:	e8 2f       	mov	r30, r24
    e73c:	f0 e0       	ldi	r31, 0x00	; 0
    e73e:	e0 59       	subi	r30, 0x90	; 144
    e740:	ff 4f       	sbci	r31, 0xFF	; 255
    e742:	60 95       	com	r22
    e744:	80 81       	ld	r24, Z
    e746:	68 23       	and	r22, r24
    e748:	60 83       	st	Z, r22
    e74a:	9f bf       	out	0x3f, r25	; 63
    e74c:	0f 90       	pop	r0
    e74e:	df 91       	pop	r29
    e750:	cf 91       	pop	r28
    e752:	08 95       	ret

0000e754 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    e754:	cf 93       	push	r28
    e756:	df 93       	push	r29
    e758:	00 d0       	rcall	.+0      	; 0xe75a <sysclk_enable_usb+0x6>
    e75a:	cd b7       	in	r28, 0x3d	; 61
    e75c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    e75e:	86 30       	cpi	r24, 0x06	; 6
    e760:	09 f4       	brne	.+2      	; 0xe764 <sysclk_enable_usb+0x10>
    e762:	40 c0       	rjmp	.+128    	; 0xe7e4 <sysclk_enable_usb+0x90>
    e764:	63 e0       	ldi	r22, 0x03	; 3

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e766:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    e76a:	81 fd       	sbrc	r24, 1
    e76c:	28 c0       	rjmp	.+80     	; 0xe7be <sysclk_enable_usb+0x6a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e76e:	8f b7       	in	r24, 0x3f	; 63
    e770:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    e772:	f8 94       	cli
	return flags;
    e774:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e776:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    e77a:	82 60       	ori	r24, 0x02	; 2
    e77c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e780:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e782:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    e786:	81 ff       	sbrs	r24, 1
    e788:	fc cf       	rjmp	.-8      	; 0xe782 <sysclk_enable_usb+0x2e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e78a:	8f b7       	in	r24, 0x3f	; 63
    e78c:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    e78e:	f8 94       	cli
	return flags;
    e790:	9b 81       	ldd	r25, Y+3	; 0x03
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    e792:	80 91 56 00 	lds	r24, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    e796:	89 7f       	andi	r24, 0xF9	; 249
    e798:	80 93 56 00 	sts	0x0056, r24	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    e79c:	80 e8       	ldi	r24, 0x80	; 128
    e79e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
			DFLLRC32M.COMP2 = 0xBB;
    e7a2:	8b eb       	ldi	r24, 0xBB	; 187
    e7a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x700066>
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    e7a8:	80 91 56 00 	lds	r24, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    e7ac:	84 60       	ori	r24, 0x04	; 4
    e7ae:	80 93 56 00 	sts	0x0056, r24	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    e7b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    e7b6:	81 60       	ori	r24, 0x01	; 1
    e7b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e7bc:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    e7be:	84 e4       	ldi	r24, 0x44	; 68
    e7c0:	90 e0       	ldi	r25, 0x00	; 0
    e7c2:	a0 d7       	rcall	.+3904   	; 0xf704 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e7c4:	8f b7       	in	r24, 0x3f	; 63
    e7c6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    e7c8:	f8 94       	cli
	return flags;
    e7ca:	99 81       	ldd	r25, Y+1	; 0x01

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    e7cc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    e7d0:	8f 7b       	andi	r24, 0xBF	; 191
    e7d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e7d6:	9f bf       	out	0x3f, r25	; 63
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
}
    e7d8:	23 96       	adiw	r28, 0x03	; 3
    e7da:	cd bf       	out	0x3d, r28	; 61
    e7dc:	de bf       	out	0x3e, r29	; 62
    e7de:	df 91       	pop	r29
    e7e0:	cf 91       	pop	r28
    e7e2:	08 95       	ret

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    e7e4:	6b e1       	ldi	r22, 0x1B	; 27
    e7e6:	bf cf       	rjmp	.-130    	; 0xe766 <sysclk_enable_usb+0x12>

0000e7e8 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
    e7e8:	4f 92       	push	r4
    e7ea:	5f 92       	push	r5
    e7ec:	6f 92       	push	r6
    e7ee:	7f 92       	push	r7
    e7f0:	8f 92       	push	r8
    e7f2:	9f 92       	push	r9
    e7f4:	af 92       	push	r10
    e7f6:	bf 92       	push	r11
    e7f8:	cf 92       	push	r12
    e7fa:	df 92       	push	r13
    e7fc:	ef 92       	push	r14
    e7fe:	ff 92       	push	r15
    e800:	0f 93       	push	r16
    e802:	1f 93       	push	r17
    e804:	cf 93       	push	r28
    e806:	df 93       	push	r29
    e808:	d8 2e       	mov	r13, r24
    e80a:	76 2e       	mov	r7, r22
    e80c:	67 2e       	mov	r6, r23
    e80e:	d4 2f       	mov	r29, r20
    e810:	c5 2f       	mov	r28, r21
    e812:	59 01       	movw	r10, r18
	if (bg_color != GFX_COLOR_TRANSPARENT) {
    e814:	00 3f       	cpi	r16, 0xF0	; 240
    e816:	8e e1       	ldi	r24, 0x1E	; 30
    e818:	18 07       	cpc	r17, r24
    e81a:	51 f0       	breq	.+20     	; 0xe830 <gfx_draw_char+0x48>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
    e81c:	f9 01       	movw	r30, r18
    e81e:	24 81       	ldd	r18, Z+4	; 0x04
    e820:	30 e0       	ldi	r19, 0x00	; 0
    e822:	43 81       	ldd	r20, Z+3	; 0x03
    e824:	50 e0       	ldi	r21, 0x00	; 0
    e826:	6d 2f       	mov	r22, r29
    e828:	7c 2f       	mov	r23, r28
    e82a:	87 2d       	mov	r24, r7
    e82c:	96 2d       	mov	r25, r6
    e82e:	cb da       	rcall	.-2666   	; 0xddc6 <gfx_generic_draw_filled_rect>
	}

	switch (font->type) {
    e830:	f5 01       	movw	r30, r10
    e832:	80 81       	ld	r24, Z
    e834:	88 23       	and	r24, r24
    e836:	89 f0       	breq	.+34     	; 0xe85a <gfx_draw_char+0x72>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    e838:	df 91       	pop	r29
    e83a:	cf 91       	pop	r28
    e83c:	1f 91       	pop	r17
    e83e:	0f 91       	pop	r16
    e840:	ff 90       	pop	r15
    e842:	ef 90       	pop	r14
    e844:	df 90       	pop	r13
    e846:	cf 90       	pop	r12
    e848:	bf 90       	pop	r11
    e84a:	af 90       	pop	r10
    e84c:	9f 90       	pop	r9
    e84e:	8f 90       	pop	r8
    e850:	7f 90       	pop	r7
    e852:	6f 90       	pop	r6
    e854:	5f 90       	pop	r5
    e856:	4f 90       	pop	r4
    e858:	08 95       	ret
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    e85a:	43 81       	ldd	r20, Z+3	; 0x03
    e85c:	24 2f       	mov	r18, r20
    e85e:	26 95       	lsr	r18
    e860:	26 95       	lsr	r18
    e862:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    e864:	84 2f       	mov	r24, r20
    e866:	87 70       	andi	r24, 0x07	; 7
    e868:	09 f0       	breq	.+2      	; 0xe86c <gfx_draw_char+0x84>
		char_row_size++;
    e86a:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    e86c:	f5 01       	movw	r30, r10
    e86e:	44 80       	ldd	r4, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    e870:	8d 2d       	mov	r24, r13
    e872:	90 e0       	ldi	r25, 0x00	; 0
    e874:	35 81       	ldd	r19, Z+5	; 0x05
    e876:	83 1b       	sub	r24, r19
    e878:	91 09       	sbc	r25, r1
    e87a:	24 9d       	mul	r18, r4
    e87c:	90 01       	movw	r18, r0
    e87e:	11 24       	eor	r1, r1
    e880:	82 9f       	mul	r24, r18
    e882:	b0 01       	movw	r22, r0
    e884:	83 9f       	mul	r24, r19
    e886:	70 0d       	add	r23, r0
    e888:	92 9f       	mul	r25, r18
    e88a:	70 0d       	add	r23, r0
    e88c:	11 24       	eor	r1, r1
    e88e:	81 80       	ldd	r8, Z+1	; 0x01
    e890:	92 80       	ldd	r9, Z+2	; 0x02
    e892:	86 0e       	add	r8, r22
    e894:	97 1e       	adc	r9, r23
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    e896:	54 2e       	mov	r5, r20

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;
    e898:	cd 2e       	mov	r12, r29
    e89a:	dc 2e       	mov	r13, r28

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    e89c:	55 20       	and	r5, r5
    e89e:	f9 f0       	breq	.+62     	; 0xe8de <gfx_draw_char+0xf6>
    e8a0:	07 2d       	mov	r16, r7
    e8a2:	16 2d       	mov	r17, r6
    e8a4:	d0 e0       	ldi	r29, 0x00	; 0
    e8a6:	c0 e0       	ldi	r28, 0x00	; 0
    e8a8:	06 c0       	rjmp	.+12     	; 0xe8b6 <gfx_draw_char+0xce>

			if ((glyph_byte & 0x80)) {
				gfx_draw_pixel(inc_x, inc_y, color);
			}

			inc_x += 1;
    e8aa:	0f 5f       	subi	r16, 0xFF	; 255
    e8ac:	1f 4f       	sbci	r17, 0xFF	; 255
			glyph_byte <<= 1;
    e8ae:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    e8b0:	cf 5f       	subi	r28, 0xFF	; 255
    e8b2:	c5 15       	cp	r28, r5
    e8b4:	a1 f0       	breq	.+40     	; 0xe8de <gfx_draw_char+0xf6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    e8b6:	8c 2f       	mov	r24, r28
    e8b8:	87 70       	andi	r24, 0x07	; 7
    e8ba:	29 f4       	brne	.+10     	; 0xe8c6 <gfx_draw_char+0xde>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    e8bc:	f4 01       	movw	r30, r8
    e8be:	d4 91       	lpm	r29, Z
				glyph_data++;
    e8c0:	ff ef       	ldi	r31, 0xFF	; 255
    e8c2:	8f 1a       	sub	r8, r31
    e8c4:	9f 0a       	sbc	r9, r31
			}

			if ((glyph_byte & 0x80)) {
    e8c6:	d7 ff       	sbrs	r29, 7
    e8c8:	f0 cf       	rjmp	.-32     	; 0xe8aa <gfx_draw_char+0xc2>
				gfx_draw_pixel(inc_x, inc_y, color);
    e8ca:	a7 01       	movw	r20, r14
    e8cc:	b6 01       	movw	r22, r12
    e8ce:	c8 01       	movw	r24, r16
    e8d0:	ff db       	rcall	.-2050   	; 0xe0d0 <gfx_ili9341_draw_pixel>
			}

			inc_x += 1;
    e8d2:	0f 5f       	subi	r16, 0xFF	; 255
    e8d4:	1f 4f       	sbci	r17, 0xFF	; 255
			glyph_byte <<= 1;
    e8d6:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    e8d8:	cf 5f       	subi	r28, 0xFF	; 255
    e8da:	c5 11       	cpse	r28, r5
    e8dc:	ec cf       	rjmp	.-40     	; 0xe8b6 <gfx_draw_char+0xce>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    e8de:	8f ef       	ldi	r24, 0xFF	; 255
    e8e0:	c8 1a       	sub	r12, r24
    e8e2:	d8 0a       	sbc	r13, r24
		inc_x = x;
		rows_left--;
    e8e4:	4a 94       	dec	r4
	} while (rows_left > 0);
    e8e6:	44 20       	and	r4, r4
    e8e8:	09 f4       	brne	.+2      	; 0xe8ec <gfx_draw_char+0x104>
    e8ea:	a6 cf       	rjmp	.-180    	; 0xe838 <gfx_draw_char+0x50>
    e8ec:	f5 01       	movw	r30, r10
    e8ee:	53 80       	ldd	r5, Z+3	; 0x03
    e8f0:	d5 cf       	rjmp	.-86     	; 0xe89c <gfx_draw_char+0xb4>

0000e8f2 <gfx_draw_string>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
    e8f2:	2f 92       	push	r2
    e8f4:	3f 92       	push	r3
    e8f6:	4f 92       	push	r4
    e8f8:	5f 92       	push	r5
    e8fa:	6f 92       	push	r6
    e8fc:	7f 92       	push	r7
    e8fe:	8f 92       	push	r8
    e900:	9f 92       	push	r9
    e902:	af 92       	push	r10
    e904:	bf 92       	push	r11
    e906:	cf 92       	push	r12
    e908:	df 92       	push	r13
    e90a:	ef 92       	push	r14
    e90c:	ff 92       	push	r15
    e90e:	0f 93       	push	r16
    e910:	1f 93       	push	r17
    e912:	cf 93       	push	r28
    e914:	df 93       	push	r29
    e916:	cd b7       	in	r28, 0x3d	; 61
    e918:	de b7       	in	r29, 0x3e	; 62
    e91a:	2a 97       	sbiw	r28, 0x0a	; 10
    e91c:	cd bf       	out	0x3d, r28	; 61
    e91e:	de bf       	out	0x3e, r29	; 62
    e920:	8d 83       	std	Y+5, r24	; 0x05
    e922:	9e 83       	std	Y+6, r25	; 0x06
    e924:	6f 83       	std	Y+7, r22	; 0x07
    e926:	78 87       	std	Y+8, r23	; 0x08
    e928:	4b 83       	std	Y+3, r20	; 0x03
    e92a:	5c 83       	std	Y+4, r21	; 0x04
    e92c:	69 01       	movw	r12, r18
    e92e:	09 83       	std	Y+1, r16	; 0x01
    e930:	1a 83       	std	Y+2, r17	; 0x02
    e932:	37 01       	movw	r6, r14
    e934:	fc 01       	movw	r30, r24
    e936:	31 96       	adiw	r30, 0x01	; 1
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
    e938:	81 91       	ld	r24, Z+
    e93a:	81 11       	cpse	r24, r1
    e93c:	fd cf       	rjmp	.-6      	; 0xe938 <gfx_draw_string+0x46>
	} else if (text_pos & TEXT_POS_RIGHT) {
		x -= bounding_x;
	}

	/* Need to draw each line of the text paragraph individually */
	while (*str != '\0') {
    e93e:	ed 81       	ldd	r30, Y+5	; 0x05
    e940:	fe 81       	ldd	r31, Y+6	; 0x06
    e942:	80 81       	ld	r24, Z
    e944:	88 23       	and	r24, r24
    e946:	09 f4       	brne	.+2      	; 0xe94a <gfx_draw_string+0x58>
    e948:	9e c0       	rjmp	.+316    	; 0xea86 <gfx_draw_string+0x194>
    e94a:	f6 01       	movw	r30, r12
    e94c:	24 80       	ldd	r2, Z+4	; 0x04
    e94e:	ad 80       	ldd	r10, Y+5	; 0x05
    e950:	be 80       	ldd	r11, Y+6	; 0x06
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
    e952:	f5 01       	movw	r30, r10
    e954:	04 c0       	rjmp	.+8      	; 0xe95e <gfx_draw_string+0x6c>
				str++;
				break;
			} else if (*str != '\r') {
				curr_line_width += font->width;
			}
		} while (*(++str) != '\0');
    e956:	80 81       	ld	r24, Z
    e958:	88 23       	and	r24, r24
    e95a:	09 f4       	brne	.+2      	; 0xe95e <gfx_draw_string+0x6c>
    e95c:	aa c0       	rjmp	.+340    	; 0xeab2 <gfx_draw_string+0x1c0>
    e95e:	df 01       	movw	r26, r30
    e960:	31 96       	adiw	r30, 0x01	; 1
		gfx_coord_t curr_line_x = x;
		gfx_coord_t curr_line_width = 0;

		/* Determine width of current line in the the paragraph */
		do {
			if (*str == '\n') {
    e962:	8c 91       	ld	r24, X
    e964:	8a 30       	cpi	r24, 0x0A	; 10
    e966:	b9 f7       	brne	.-18     	; 0xe956 <gfx_draw_string+0x64>
				str++;
    e968:	ed 83       	std	Y+5, r30	; 0x05
    e96a:	fe 83       	std	Y+6, r31	; 0x06
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
    e96c:	ef 80       	ldd	r14, Y+7	; 0x07
    e96e:	f8 84       	ldd	r15, Y+8	; 0x08
    e970:	22 2d       	mov	r18, r2
    e972:	18 c0       	rjmp	.+48     	; 0xe9a4 <gfx_draw_string+0xb2>
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
	if (bg_color != GFX_COLOR_TRANSPARENT) {
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
    e974:	30 e0       	ldi	r19, 0x00	; 0
    e976:	f6 01       	movw	r30, r12
    e978:	43 81       	ldd	r20, Z+3	; 0x03
    e97a:	50 e0       	ldi	r21, 0x00	; 0
    e97c:	8c 01       	movw	r16, r24
    e97e:	6b 81       	ldd	r22, Y+3	; 0x03
    e980:	7c 81       	ldd	r23, Y+4	; 0x04
    e982:	c7 01       	movw	r24, r14
    e984:	20 da       	rcall	.-3008   	; 0xddc6 <gfx_generic_draw_filled_rect>
    e986:	f6 01       	movw	r30, r12
    e988:	24 80       	ldd	r2, Z+4	; 0x04
	}

	switch (font->type) {
    e98a:	f6 01       	movw	r30, r12
    e98c:	80 81       	ld	r24, Z
    e98e:	88 23       	and	r24, r24
    e990:	e9 f0       	breq	.+58     	; 0xe9cc <gfx_draw_string+0xda>
    e992:	33 80       	ldd	r3, Z+3	; 0x03
    e994:	22 2d       	mov	r18, r2
						font, bg_color, text_color);

				/* Step to the next character display X
				 * coordinate
				 */
				curr_line_x += font->width;
    e996:	e3 0c       	add	r14, r3
    e998:	f1 1c       	adc	r15, r1
			}
		} while (*(++curr_line_text) != '\0');
    e99a:	f5 01       	movw	r30, r10
    e99c:	80 81       	ld	r24, Z
    e99e:	88 23       	and	r24, r24
    e9a0:	09 f4       	brne	.+2      	; 0xe9a4 <gfx_draw_string+0xb2>
    e9a2:	62 c0       	rjmp	.+196    	; 0xea68 <gfx_draw_string+0x176>

		/* Draw current line to the display with the calculated
		 * coordinates
		 */
		do {
			if (*curr_line_text == '\n') {
    e9a4:	f5 01       	movw	r30, r10
    e9a6:	31 91       	ld	r19, Z+
    e9a8:	5f 01       	movw	r10, r30
    e9aa:	39 87       	std	Y+9, r19	; 0x09
    e9ac:	3a 30       	cpi	r19, 0x0A	; 10
    e9ae:	09 f4       	brne	.+2      	; 0xe9b2 <gfx_draw_string+0xc0>
    e9b0:	5b c0       	rjmp	.+182    	; 0xea68 <gfx_draw_string+0x176>
				break;
			} else if (*curr_line_text != '\r') {
    e9b2:	3d 30       	cpi	r19, 0x0D	; 13
    e9b4:	91 f3       	breq	.-28     	; 0xe99a <gfx_draw_string+0xa8>
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
	if (bg_color != GFX_COLOR_TRANSPARENT) {
    e9b6:	89 81       	ldd	r24, Y+1	; 0x01
    e9b8:	9a 81       	ldd	r25, Y+2	; 0x02
    e9ba:	80 3f       	cpi	r24, 0xF0	; 240
    e9bc:	ee e1       	ldi	r30, 0x1E	; 30
    e9be:	9e 07       	cpc	r25, r30
    e9c0:	c9 f6       	brne	.-78     	; 0xe974 <gfx_draw_string+0x82>
    e9c2:	22 2e       	mov	r2, r18
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
	}

	switch (font->type) {
    e9c4:	f6 01       	movw	r30, r12
    e9c6:	80 81       	ld	r24, Z
    e9c8:	81 11       	cpse	r24, r1
    e9ca:	e3 cf       	rjmp	.-58     	; 0xe992 <gfx_draw_string+0xa0>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    e9cc:	f6 01       	movw	r30, r12
    e9ce:	43 81       	ldd	r20, Z+3	; 0x03
    e9d0:	24 2f       	mov	r18, r20
    e9d2:	26 95       	lsr	r18
    e9d4:	26 95       	lsr	r18
    e9d6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    e9d8:	84 2f       	mov	r24, r20
    e9da:	87 70       	andi	r24, 0x07	; 7
    e9dc:	09 f0       	breq	.+2      	; 0xe9e0 <gfx_draw_string+0xee>
		char_row_size++;
    e9de:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    e9e0:	f9 85       	ldd	r31, Y+9	; 0x09
    e9e2:	8f 2f       	mov	r24, r31
    e9e4:	90 e0       	ldi	r25, 0x00	; 0
    e9e6:	f6 01       	movw	r30, r12
    e9e8:	35 81       	ldd	r19, Z+5	; 0x05
    e9ea:	83 1b       	sub	r24, r19
    e9ec:	91 09       	sbc	r25, r1
    e9ee:	22 9d       	mul	r18, r2
    e9f0:	90 01       	movw	r18, r0
    e9f2:	11 24       	eor	r1, r1
    e9f4:	82 9f       	mul	r24, r18
    e9f6:	b0 01       	movw	r22, r0
    e9f8:	83 9f       	mul	r24, r19
    e9fa:	70 0d       	add	r23, r0
    e9fc:	92 9f       	mul	r25, r18
    e9fe:	70 0d       	add	r23, r0
    ea00:	11 24       	eor	r1, r1
    ea02:	01 81       	ldd	r16, Z+1	; 0x01
    ea04:	12 81       	ldd	r17, Z+2	; 0x02
    ea06:	06 0f       	add	r16, r22
    ea08:	17 1f       	adc	r17, r23
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    ea0a:	34 2e       	mov	r3, r20
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    ea0c:	8b 80       	ldd	r8, Y+3	; 0x03
    ea0e:	9c 80       	ldd	r9, Y+4	; 0x04

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    ea10:	33 20       	and	r3, r3
    ea12:	09 f1       	breq	.+66     	; 0xea56 <gfx_draw_string+0x164>
    ea14:	27 01       	movw	r4, r14
    ea16:	1a 86       	std	Y+10, r1	; 0x0a
    ea18:	19 86       	std	Y+9, r1	; 0x09
    ea1a:	0b c0       	rjmp	.+22     	; 0xea32 <gfx_draw_string+0x140>

			if ((glyph_byte & 0x80)) {
				gfx_draw_pixel(inc_x, inc_y, color);
			}

			inc_x += 1;
    ea1c:	3f ef       	ldi	r19, 0xFF	; 255
    ea1e:	43 1a       	sub	r4, r19
    ea20:	53 0a       	sbc	r5, r19
			glyph_byte <<= 1;
    ea22:	8a 85       	ldd	r24, Y+10	; 0x0a
    ea24:	88 0f       	add	r24, r24
    ea26:	8a 87       	std	Y+10, r24	; 0x0a

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    ea28:	99 85       	ldd	r25, Y+9	; 0x09
    ea2a:	9f 5f       	subi	r25, 0xFF	; 255
    ea2c:	99 87       	std	Y+9, r25	; 0x09
    ea2e:	93 15       	cp	r25, r3
    ea30:	81 f0       	breq	.+32     	; 0xea52 <gfx_draw_string+0x160>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    ea32:	89 85       	ldd	r24, Y+9	; 0x09
    ea34:	87 70       	andi	r24, 0x07	; 7
    ea36:	29 f4       	brne	.+10     	; 0xea42 <gfx_draw_string+0x150>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    ea38:	f8 01       	movw	r30, r16
    ea3a:	f4 91       	lpm	r31, Z
    ea3c:	fa 87       	std	Y+10, r31	; 0x0a
				glyph_data++;
    ea3e:	0f 5f       	subi	r16, 0xFF	; 255
    ea40:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    ea42:	2a 85       	ldd	r18, Y+10	; 0x0a
    ea44:	27 ff       	sbrs	r18, 7
    ea46:	ea cf       	rjmp	.-44     	; 0xea1c <gfx_draw_string+0x12a>
				gfx_draw_pixel(inc_x, inc_y, color);
    ea48:	a3 01       	movw	r20, r6
    ea4a:	b4 01       	movw	r22, r8
    ea4c:	c2 01       	movw	r24, r4
    ea4e:	40 db       	rcall	.-2432   	; 0xe0d0 <gfx_ili9341_draw_pixel>
    ea50:	e5 cf       	rjmp	.-54     	; 0xea1c <gfx_draw_string+0x12a>
    ea52:	f6 01       	movw	r30, r12
    ea54:	33 80       	ldd	r3, Z+3	; 0x03

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    ea56:	ff ef       	ldi	r31, 0xFF	; 255
    ea58:	8f 1a       	sub	r8, r31
    ea5a:	9f 0a       	sbc	r9, r31
		inc_x = x;
		rows_left--;
    ea5c:	2a 94       	dec	r2
	} while (rows_left > 0);
    ea5e:	21 10       	cpse	r2, r1
    ea60:	d7 cf       	rjmp	.-82     	; 0xea10 <gfx_draw_string+0x11e>
    ea62:	f6 01       	movw	r30, r12
    ea64:	24 81       	ldd	r18, Z+4	; 0x04
    ea66:	97 cf       	rjmp	.-210    	; 0xe996 <gfx_draw_string+0xa4>
    ea68:	22 2e       	mov	r2, r18
		} while (*(++curr_line_text) != '\0');

		/* Step to the next Y line coordinate for the next line in
		 * paragraph
		 */
		y += font->height + 1;
    ea6a:	82 2f       	mov	r24, r18
    ea6c:	90 e0       	ldi	r25, 0x00	; 0
    ea6e:	01 96       	adiw	r24, 0x01	; 1
    ea70:	2b 81       	ldd	r18, Y+3	; 0x03
    ea72:	3c 81       	ldd	r19, Y+4	; 0x04
    ea74:	28 0f       	add	r18, r24
    ea76:	39 1f       	adc	r19, r25
    ea78:	2b 83       	std	Y+3, r18	; 0x03
    ea7a:	3c 83       	std	Y+4, r19	; 0x04
	} else if (text_pos & TEXT_POS_RIGHT) {
		x -= bounding_x;
	}

	/* Need to draw each line of the text paragraph individually */
	while (*str != '\0') {
    ea7c:	ed 81       	ldd	r30, Y+5	; 0x05
    ea7e:	fe 81       	ldd	r31, Y+6	; 0x06
    ea80:	80 81       	ld	r24, Z
    ea82:	81 11       	cpse	r24, r1
    ea84:	64 cf       	rjmp	.-312    	; 0xe94e <gfx_draw_string+0x5c>
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
	gfx_draw_string_aligned(str, x, y, font, bg_color, text_color,
			TEXT_POS_LEFT, TEXT_ALIGN_LEFT);
}
    ea86:	2a 96       	adiw	r28, 0x0a	; 10
    ea88:	cd bf       	out	0x3d, r28	; 61
    ea8a:	de bf       	out	0x3e, r29	; 62
    ea8c:	df 91       	pop	r29
    ea8e:	cf 91       	pop	r28
    ea90:	1f 91       	pop	r17
    ea92:	0f 91       	pop	r16
    ea94:	ff 90       	pop	r15
    ea96:	ef 90       	pop	r14
    ea98:	df 90       	pop	r13
    ea9a:	cf 90       	pop	r12
    ea9c:	bf 90       	pop	r11
    ea9e:	af 90       	pop	r10
    eaa0:	9f 90       	pop	r9
    eaa2:	8f 90       	pop	r8
    eaa4:	7f 90       	pop	r7
    eaa6:	6f 90       	pop	r6
    eaa8:	5f 90       	pop	r5
    eaaa:	4f 90       	pop	r4
    eaac:	3f 90       	pop	r3
    eaae:	2f 90       	pop	r2
    eab0:	08 95       	ret
    eab2:	ed 83       	std	Y+5, r30	; 0x05
    eab4:	fe 83       	std	Y+6, r31	; 0x06
    eab6:	5a cf       	rjmp	.-332    	; 0xe96c <gfx_draw_string+0x7a>

0000eab8 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
    eab8:	1f 92       	push	r1
    eaba:	0f 92       	push	r0
    eabc:	0f b6       	in	r0, 0x3f	; 63
    eabe:	0f 92       	push	r0
    eac0:	11 24       	eor	r1, r1
    eac2:	0b b6       	in	r0, 0x3b	; 59
    eac4:	0f 92       	push	r0
    eac6:	2f 93       	push	r18
    eac8:	3f 93       	push	r19
    eaca:	4f 93       	push	r20
    eacc:	5f 93       	push	r21
    eace:	6f 93       	push	r22
    ead0:	7f 93       	push	r23
    ead2:	8f 93       	push	r24
    ead4:	9f 93       	push	r25
    ead6:	af 93       	push	r26
    ead8:	bf 93       	push	r27
    eada:	ef 93       	push	r30
    eadc:	ff 93       	push	r31
	if (ac_aca_callback) {
    eade:	e0 91 71 2d 	lds	r30, 0x2D71	; 0x802d71 <ac_aca_callback>
    eae2:	f0 91 72 2d 	lds	r31, 0x2D72	; 0x802d72 <ac_aca_callback+0x1>
    eae6:	30 97       	sbiw	r30, 0x00	; 0
    eae8:	49 f0       	breq	.+18     	; 0xeafc <__vector_68+0x44>
		if (ACA.STATUS & AC_AC0STATE_bm) {
    eaea:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
    eaee:	84 fd       	sbrc	r24, 4
    eaf0:	18 c0       	rjmp	.+48     	; 0xeb22 <__vector_68+0x6a>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
    eaf2:	40 e8       	ldi	r20, 0x80	; 128
    eaf4:	60 e0       	ldi	r22, 0x00	; 0
    eaf6:	80 e8       	ldi	r24, 0x80	; 128
    eaf8:	93 e0       	ldi	r25, 0x03	; 3
    eafa:	19 95       	eicall
		}
	}
}
    eafc:	ff 91       	pop	r31
    eafe:	ef 91       	pop	r30
    eb00:	bf 91       	pop	r27
    eb02:	af 91       	pop	r26
    eb04:	9f 91       	pop	r25
    eb06:	8f 91       	pop	r24
    eb08:	7f 91       	pop	r23
    eb0a:	6f 91       	pop	r22
    eb0c:	5f 91       	pop	r21
    eb0e:	4f 91       	pop	r20
    eb10:	3f 91       	pop	r19
    eb12:	2f 91       	pop	r18
    eb14:	0f 90       	pop	r0
    eb16:	0b be       	out	0x3b, r0	; 59
    eb18:	0f 90       	pop	r0
    eb1a:	0f be       	out	0x3f, r0	; 63
    eb1c:	0f 90       	pop	r0
    eb1e:	1f 90       	pop	r1
    eb20:	18 95       	reti
 */
ISR(ACA_AC0_vect)
{
	if (ac_aca_callback) {
		if (ACA.STATUS & AC_AC0STATE_bm) {
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
    eb22:	40 e0       	ldi	r20, 0x00	; 0
    eb24:	60 e0       	ldi	r22, 0x00	; 0
    eb26:	80 e8       	ldi	r24, 0x80	; 128
    eb28:	93 e0       	ldi	r25, 0x03	; 3
    eb2a:	19 95       	eicall
    eb2c:	e7 cf       	rjmp	.-50     	; 0xeafc <__vector_68+0x44>

0000eb2e <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
    eb2e:	1f 92       	push	r1
    eb30:	0f 92       	push	r0
    eb32:	0f b6       	in	r0, 0x3f	; 63
    eb34:	0f 92       	push	r0
    eb36:	11 24       	eor	r1, r1
    eb38:	0b b6       	in	r0, 0x3b	; 59
    eb3a:	0f 92       	push	r0
    eb3c:	2f 93       	push	r18
    eb3e:	3f 93       	push	r19
    eb40:	4f 93       	push	r20
    eb42:	5f 93       	push	r21
    eb44:	6f 93       	push	r22
    eb46:	7f 93       	push	r23
    eb48:	8f 93       	push	r24
    eb4a:	9f 93       	push	r25
    eb4c:	af 93       	push	r26
    eb4e:	bf 93       	push	r27
    eb50:	ef 93       	push	r30
    eb52:	ff 93       	push	r31
	if (ac_aca_callback) {
    eb54:	e0 91 71 2d 	lds	r30, 0x2D71	; 0x802d71 <ac_aca_callback>
    eb58:	f0 91 72 2d 	lds	r31, 0x2D72	; 0x802d72 <ac_aca_callback+0x1>
    eb5c:	30 97       	sbiw	r30, 0x00	; 0
    eb5e:	49 f0       	breq	.+18     	; 0xeb72 <__vector_69+0x44>
		if (ACA.STATUS & AC_AC1STATE_bm) {
    eb60:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
    eb64:	85 fd       	sbrc	r24, 5
    eb66:	18 c0       	rjmp	.+48     	; 0xeb98 <__vector_69+0x6a>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
    eb68:	40 e8       	ldi	r20, 0x80	; 128
    eb6a:	61 e0       	ldi	r22, 0x01	; 1
    eb6c:	80 e8       	ldi	r24, 0x80	; 128
    eb6e:	93 e0       	ldi	r25, 0x03	; 3
    eb70:	19 95       	eicall
		}
	}
}
    eb72:	ff 91       	pop	r31
    eb74:	ef 91       	pop	r30
    eb76:	bf 91       	pop	r27
    eb78:	af 91       	pop	r26
    eb7a:	9f 91       	pop	r25
    eb7c:	8f 91       	pop	r24
    eb7e:	7f 91       	pop	r23
    eb80:	6f 91       	pop	r22
    eb82:	5f 91       	pop	r21
    eb84:	4f 91       	pop	r20
    eb86:	3f 91       	pop	r19
    eb88:	2f 91       	pop	r18
    eb8a:	0f 90       	pop	r0
    eb8c:	0b be       	out	0x3b, r0	; 59
    eb8e:	0f 90       	pop	r0
    eb90:	0f be       	out	0x3f, r0	; 63
    eb92:	0f 90       	pop	r0
    eb94:	1f 90       	pop	r1
    eb96:	18 95       	reti
 */
ISR(ACA_AC1_vect)
{
	if (ac_aca_callback) {
		if (ACA.STATUS & AC_AC1STATE_bm) {
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
    eb98:	40 e0       	ldi	r20, 0x00	; 0
    eb9a:	61 e0       	ldi	r22, 0x01	; 1
    eb9c:	80 e8       	ldi	r24, 0x80	; 128
    eb9e:	93 e0       	ldi	r25, 0x03	; 3
    eba0:	19 95       	eicall
    eba2:	e7 cf       	rjmp	.-50     	; 0xeb72 <__vector_69+0x44>

0000eba4 <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
    eba4:	1f 92       	push	r1
    eba6:	0f 92       	push	r0
    eba8:	0f b6       	in	r0, 0x3f	; 63
    ebaa:	0f 92       	push	r0
    ebac:	11 24       	eor	r1, r1
    ebae:	0b b6       	in	r0, 0x3b	; 59
    ebb0:	0f 92       	push	r0
    ebb2:	2f 93       	push	r18
    ebb4:	3f 93       	push	r19
    ebb6:	4f 93       	push	r20
    ebb8:	5f 93       	push	r21
    ebba:	6f 93       	push	r22
    ebbc:	7f 93       	push	r23
    ebbe:	8f 93       	push	r24
    ebc0:	9f 93       	push	r25
    ebc2:	af 93       	push	r26
    ebc4:	bf 93       	push	r27
    ebc6:	ef 93       	push	r30
    ebc8:	ff 93       	push	r31
	if (ac_aca_callback) {
    ebca:	e0 91 71 2d 	lds	r30, 0x2D71	; 0x802d71 <ac_aca_callback>
    ebce:	f0 91 72 2d 	lds	r31, 0x2D72	; 0x802d72 <ac_aca_callback+0x1>
    ebd2:	30 97       	sbiw	r30, 0x00	; 0
    ebd4:	39 f0       	breq	.+14     	; 0xebe4 <__vector_70+0x40>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
    ebd6:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
    ebda:	40 7c       	andi	r20, 0xC0	; 192
    ebdc:	60 e0       	ldi	r22, 0x00	; 0
    ebde:	80 e8       	ldi	r24, 0x80	; 128
    ebe0:	93 e0       	ldi	r25, 0x03	; 3
    ebe2:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
    ebe4:	ff 91       	pop	r31
    ebe6:	ef 91       	pop	r30
    ebe8:	bf 91       	pop	r27
    ebea:	af 91       	pop	r26
    ebec:	9f 91       	pop	r25
    ebee:	8f 91       	pop	r24
    ebf0:	7f 91       	pop	r23
    ebf2:	6f 91       	pop	r22
    ebf4:	5f 91       	pop	r21
    ebf6:	4f 91       	pop	r20
    ebf8:	3f 91       	pop	r19
    ebfa:	2f 91       	pop	r18
    ebfc:	0f 90       	pop	r0
    ebfe:	0b be       	out	0x3b, r0	; 59
    ec00:	0f 90       	pop	r0
    ec02:	0f be       	out	0x3f, r0	; 63
    ec04:	0f 90       	pop	r0
    ec06:	1f 90       	pop	r1
    ec08:	18 95       	reti

0000ec0a <__vector_14>:
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    ec0a:	1f 92       	push	r1
    ec0c:	0f 92       	push	r0
    ec0e:	0f b6       	in	r0, 0x3f	; 63
    ec10:	0f 92       	push	r0
    ec12:	11 24       	eor	r1, r1
    ec14:	0b b6       	in	r0, 0x3b	; 59
    ec16:	0f 92       	push	r0
    ec18:	2f 93       	push	r18
    ec1a:	3f 93       	push	r19
    ec1c:	4f 93       	push	r20
    ec1e:	5f 93       	push	r21
    ec20:	6f 93       	push	r22
    ec22:	7f 93       	push	r23
    ec24:	8f 93       	push	r24
    ec26:	9f 93       	push	r25
    ec28:	af 93       	push	r26
    ec2a:	bf 93       	push	r27
    ec2c:	ef 93       	push	r30
    ec2e:	ff 93       	push	r31
    ec30:	e0 91 a9 2d 	lds	r30, 0x2DA9	; 0x802da9 <tc_tcc0_ovf_callback>
    ec34:	f0 91 aa 2d 	lds	r31, 0x2DAA	; 0x802daa <tc_tcc0_ovf_callback+0x1>
    ec38:	30 97       	sbiw	r30, 0x00	; 0
    ec3a:	09 f0       	breq	.+2      	; 0xec3e <__vector_14+0x34>
    ec3c:	19 95       	eicall
    ec3e:	ff 91       	pop	r31
    ec40:	ef 91       	pop	r30
    ec42:	bf 91       	pop	r27
    ec44:	af 91       	pop	r26
    ec46:	9f 91       	pop	r25
    ec48:	8f 91       	pop	r24
    ec4a:	7f 91       	pop	r23
    ec4c:	6f 91       	pop	r22
    ec4e:	5f 91       	pop	r21
    ec50:	4f 91       	pop	r20
    ec52:	3f 91       	pop	r19
    ec54:	2f 91       	pop	r18
    ec56:	0f 90       	pop	r0
    ec58:	0b be       	out	0x3b, r0	; 59
    ec5a:	0f 90       	pop	r0
    ec5c:	0f be       	out	0x3f, r0	; 63
    ec5e:	0f 90       	pop	r0
    ec60:	1f 90       	pop	r1
    ec62:	18 95       	reti

0000ec64 <__vector_15>:
    ec64:	1f 92       	push	r1
    ec66:	0f 92       	push	r0
    ec68:	0f b6       	in	r0, 0x3f	; 63
    ec6a:	0f 92       	push	r0
    ec6c:	11 24       	eor	r1, r1
    ec6e:	0b b6       	in	r0, 0x3b	; 59
    ec70:	0f 92       	push	r0
    ec72:	2f 93       	push	r18
    ec74:	3f 93       	push	r19
    ec76:	4f 93       	push	r20
    ec78:	5f 93       	push	r21
    ec7a:	6f 93       	push	r22
    ec7c:	7f 93       	push	r23
    ec7e:	8f 93       	push	r24
    ec80:	9f 93       	push	r25
    ec82:	af 93       	push	r26
    ec84:	bf 93       	push	r27
    ec86:	ef 93       	push	r30
    ec88:	ff 93       	push	r31
    ec8a:	e0 91 a7 2d 	lds	r30, 0x2DA7	; 0x802da7 <tc_tcc0_err_callback>
    ec8e:	f0 91 a8 2d 	lds	r31, 0x2DA8	; 0x802da8 <tc_tcc0_err_callback+0x1>
    ec92:	30 97       	sbiw	r30, 0x00	; 0
    ec94:	09 f0       	breq	.+2      	; 0xec98 <__vector_15+0x34>
    ec96:	19 95       	eicall
    ec98:	ff 91       	pop	r31
    ec9a:	ef 91       	pop	r30
    ec9c:	bf 91       	pop	r27
    ec9e:	af 91       	pop	r26
    eca0:	9f 91       	pop	r25
    eca2:	8f 91       	pop	r24
    eca4:	7f 91       	pop	r23
    eca6:	6f 91       	pop	r22
    eca8:	5f 91       	pop	r21
    ecaa:	4f 91       	pop	r20
    ecac:	3f 91       	pop	r19
    ecae:	2f 91       	pop	r18
    ecb0:	0f 90       	pop	r0
    ecb2:	0b be       	out	0x3b, r0	; 59
    ecb4:	0f 90       	pop	r0
    ecb6:	0f be       	out	0x3f, r0	; 63
    ecb8:	0f 90       	pop	r0
    ecba:	1f 90       	pop	r1
    ecbc:	18 95       	reti

0000ecbe <__vector_16>:
    ecbe:	1f 92       	push	r1
    ecc0:	0f 92       	push	r0
    ecc2:	0f b6       	in	r0, 0x3f	; 63
    ecc4:	0f 92       	push	r0
    ecc6:	11 24       	eor	r1, r1
    ecc8:	0b b6       	in	r0, 0x3b	; 59
    ecca:	0f 92       	push	r0
    eccc:	2f 93       	push	r18
    ecce:	3f 93       	push	r19
    ecd0:	4f 93       	push	r20
    ecd2:	5f 93       	push	r21
    ecd4:	6f 93       	push	r22
    ecd6:	7f 93       	push	r23
    ecd8:	8f 93       	push	r24
    ecda:	9f 93       	push	r25
    ecdc:	af 93       	push	r26
    ecde:	bf 93       	push	r27
    ece0:	ef 93       	push	r30
    ece2:	ff 93       	push	r31
    ece4:	e0 91 a5 2d 	lds	r30, 0x2DA5	; 0x802da5 <tc_tcc0_cca_callback>
    ece8:	f0 91 a6 2d 	lds	r31, 0x2DA6	; 0x802da6 <tc_tcc0_cca_callback+0x1>
    ecec:	30 97       	sbiw	r30, 0x00	; 0
    ecee:	09 f0       	breq	.+2      	; 0xecf2 <__vector_16+0x34>
    ecf0:	19 95       	eicall
    ecf2:	ff 91       	pop	r31
    ecf4:	ef 91       	pop	r30
    ecf6:	bf 91       	pop	r27
    ecf8:	af 91       	pop	r26
    ecfa:	9f 91       	pop	r25
    ecfc:	8f 91       	pop	r24
    ecfe:	7f 91       	pop	r23
    ed00:	6f 91       	pop	r22
    ed02:	5f 91       	pop	r21
    ed04:	4f 91       	pop	r20
    ed06:	3f 91       	pop	r19
    ed08:	2f 91       	pop	r18
    ed0a:	0f 90       	pop	r0
    ed0c:	0b be       	out	0x3b, r0	; 59
    ed0e:	0f 90       	pop	r0
    ed10:	0f be       	out	0x3f, r0	; 63
    ed12:	0f 90       	pop	r0
    ed14:	1f 90       	pop	r1
    ed16:	18 95       	reti

0000ed18 <__vector_17>:
    ed18:	1f 92       	push	r1
    ed1a:	0f 92       	push	r0
    ed1c:	0f b6       	in	r0, 0x3f	; 63
    ed1e:	0f 92       	push	r0
    ed20:	11 24       	eor	r1, r1
    ed22:	0b b6       	in	r0, 0x3b	; 59
    ed24:	0f 92       	push	r0
    ed26:	2f 93       	push	r18
    ed28:	3f 93       	push	r19
    ed2a:	4f 93       	push	r20
    ed2c:	5f 93       	push	r21
    ed2e:	6f 93       	push	r22
    ed30:	7f 93       	push	r23
    ed32:	8f 93       	push	r24
    ed34:	9f 93       	push	r25
    ed36:	af 93       	push	r26
    ed38:	bf 93       	push	r27
    ed3a:	ef 93       	push	r30
    ed3c:	ff 93       	push	r31
    ed3e:	e0 91 a3 2d 	lds	r30, 0x2DA3	; 0x802da3 <tc_tcc0_ccb_callback>
    ed42:	f0 91 a4 2d 	lds	r31, 0x2DA4	; 0x802da4 <tc_tcc0_ccb_callback+0x1>
    ed46:	30 97       	sbiw	r30, 0x00	; 0
    ed48:	09 f0       	breq	.+2      	; 0xed4c <__vector_17+0x34>
    ed4a:	19 95       	eicall
    ed4c:	ff 91       	pop	r31
    ed4e:	ef 91       	pop	r30
    ed50:	bf 91       	pop	r27
    ed52:	af 91       	pop	r26
    ed54:	9f 91       	pop	r25
    ed56:	8f 91       	pop	r24
    ed58:	7f 91       	pop	r23
    ed5a:	6f 91       	pop	r22
    ed5c:	5f 91       	pop	r21
    ed5e:	4f 91       	pop	r20
    ed60:	3f 91       	pop	r19
    ed62:	2f 91       	pop	r18
    ed64:	0f 90       	pop	r0
    ed66:	0b be       	out	0x3b, r0	; 59
    ed68:	0f 90       	pop	r0
    ed6a:	0f be       	out	0x3f, r0	; 63
    ed6c:	0f 90       	pop	r0
    ed6e:	1f 90       	pop	r1
    ed70:	18 95       	reti

0000ed72 <__vector_18>:
    ed72:	1f 92       	push	r1
    ed74:	0f 92       	push	r0
    ed76:	0f b6       	in	r0, 0x3f	; 63
    ed78:	0f 92       	push	r0
    ed7a:	11 24       	eor	r1, r1
    ed7c:	0b b6       	in	r0, 0x3b	; 59
    ed7e:	0f 92       	push	r0
    ed80:	2f 93       	push	r18
    ed82:	3f 93       	push	r19
    ed84:	4f 93       	push	r20
    ed86:	5f 93       	push	r21
    ed88:	6f 93       	push	r22
    ed8a:	7f 93       	push	r23
    ed8c:	8f 93       	push	r24
    ed8e:	9f 93       	push	r25
    ed90:	af 93       	push	r26
    ed92:	bf 93       	push	r27
    ed94:	ef 93       	push	r30
    ed96:	ff 93       	push	r31
    ed98:	e0 91 a1 2d 	lds	r30, 0x2DA1	; 0x802da1 <tc_tcc0_ccc_callback>
    ed9c:	f0 91 a2 2d 	lds	r31, 0x2DA2	; 0x802da2 <tc_tcc0_ccc_callback+0x1>
    eda0:	30 97       	sbiw	r30, 0x00	; 0
    eda2:	09 f0       	breq	.+2      	; 0xeda6 <__vector_18+0x34>
    eda4:	19 95       	eicall
    eda6:	ff 91       	pop	r31
    eda8:	ef 91       	pop	r30
    edaa:	bf 91       	pop	r27
    edac:	af 91       	pop	r26
    edae:	9f 91       	pop	r25
    edb0:	8f 91       	pop	r24
    edb2:	7f 91       	pop	r23
    edb4:	6f 91       	pop	r22
    edb6:	5f 91       	pop	r21
    edb8:	4f 91       	pop	r20
    edba:	3f 91       	pop	r19
    edbc:	2f 91       	pop	r18
    edbe:	0f 90       	pop	r0
    edc0:	0b be       	out	0x3b, r0	; 59
    edc2:	0f 90       	pop	r0
    edc4:	0f be       	out	0x3f, r0	; 63
    edc6:	0f 90       	pop	r0
    edc8:	1f 90       	pop	r1
    edca:	18 95       	reti

0000edcc <__vector_19>:
    edcc:	1f 92       	push	r1
    edce:	0f 92       	push	r0
    edd0:	0f b6       	in	r0, 0x3f	; 63
    edd2:	0f 92       	push	r0
    edd4:	11 24       	eor	r1, r1
    edd6:	0b b6       	in	r0, 0x3b	; 59
    edd8:	0f 92       	push	r0
    edda:	2f 93       	push	r18
    eddc:	3f 93       	push	r19
    edde:	4f 93       	push	r20
    ede0:	5f 93       	push	r21
    ede2:	6f 93       	push	r22
    ede4:	7f 93       	push	r23
    ede6:	8f 93       	push	r24
    ede8:	9f 93       	push	r25
    edea:	af 93       	push	r26
    edec:	bf 93       	push	r27
    edee:	ef 93       	push	r30
    edf0:	ff 93       	push	r31
    edf2:	e0 91 9f 2d 	lds	r30, 0x2D9F	; 0x802d9f <tc_tcc0_ccd_callback>
    edf6:	f0 91 a0 2d 	lds	r31, 0x2DA0	; 0x802da0 <tc_tcc0_ccd_callback+0x1>
    edfa:	30 97       	sbiw	r30, 0x00	; 0
    edfc:	09 f0       	breq	.+2      	; 0xee00 <__vector_19+0x34>
    edfe:	19 95       	eicall
    ee00:	ff 91       	pop	r31
    ee02:	ef 91       	pop	r30
    ee04:	bf 91       	pop	r27
    ee06:	af 91       	pop	r26
    ee08:	9f 91       	pop	r25
    ee0a:	8f 91       	pop	r24
    ee0c:	7f 91       	pop	r23
    ee0e:	6f 91       	pop	r22
    ee10:	5f 91       	pop	r21
    ee12:	4f 91       	pop	r20
    ee14:	3f 91       	pop	r19
    ee16:	2f 91       	pop	r18
    ee18:	0f 90       	pop	r0
    ee1a:	0b be       	out	0x3b, r0	; 59
    ee1c:	0f 90       	pop	r0
    ee1e:	0f be       	out	0x3f, r0	; 63
    ee20:	0f 90       	pop	r0
    ee22:	1f 90       	pop	r1
    ee24:	18 95       	reti

0000ee26 <__vector_20>:
    ee26:	1f 92       	push	r1
    ee28:	0f 92       	push	r0
    ee2a:	0f b6       	in	r0, 0x3f	; 63
    ee2c:	0f 92       	push	r0
    ee2e:	11 24       	eor	r1, r1
    ee30:	0b b6       	in	r0, 0x3b	; 59
    ee32:	0f 92       	push	r0
    ee34:	2f 93       	push	r18
    ee36:	3f 93       	push	r19
    ee38:	4f 93       	push	r20
    ee3a:	5f 93       	push	r21
    ee3c:	6f 93       	push	r22
    ee3e:	7f 93       	push	r23
    ee40:	8f 93       	push	r24
    ee42:	9f 93       	push	r25
    ee44:	af 93       	push	r26
    ee46:	bf 93       	push	r27
    ee48:	ef 93       	push	r30
    ee4a:	ff 93       	push	r31
    ee4c:	e0 91 9d 2d 	lds	r30, 0x2D9D	; 0x802d9d <tc_tcc1_ovf_callback>
    ee50:	f0 91 9e 2d 	lds	r31, 0x2D9E	; 0x802d9e <tc_tcc1_ovf_callback+0x1>
    ee54:	30 97       	sbiw	r30, 0x00	; 0
    ee56:	09 f0       	breq	.+2      	; 0xee5a <__vector_20+0x34>
    ee58:	19 95       	eicall
    ee5a:	ff 91       	pop	r31
    ee5c:	ef 91       	pop	r30
    ee5e:	bf 91       	pop	r27
    ee60:	af 91       	pop	r26
    ee62:	9f 91       	pop	r25
    ee64:	8f 91       	pop	r24
    ee66:	7f 91       	pop	r23
    ee68:	6f 91       	pop	r22
    ee6a:	5f 91       	pop	r21
    ee6c:	4f 91       	pop	r20
    ee6e:	3f 91       	pop	r19
    ee70:	2f 91       	pop	r18
    ee72:	0f 90       	pop	r0
    ee74:	0b be       	out	0x3b, r0	; 59
    ee76:	0f 90       	pop	r0
    ee78:	0f be       	out	0x3f, r0	; 63
    ee7a:	0f 90       	pop	r0
    ee7c:	1f 90       	pop	r1
    ee7e:	18 95       	reti

0000ee80 <__vector_21>:
    ee80:	1f 92       	push	r1
    ee82:	0f 92       	push	r0
    ee84:	0f b6       	in	r0, 0x3f	; 63
    ee86:	0f 92       	push	r0
    ee88:	11 24       	eor	r1, r1
    ee8a:	0b b6       	in	r0, 0x3b	; 59
    ee8c:	0f 92       	push	r0
    ee8e:	2f 93       	push	r18
    ee90:	3f 93       	push	r19
    ee92:	4f 93       	push	r20
    ee94:	5f 93       	push	r21
    ee96:	6f 93       	push	r22
    ee98:	7f 93       	push	r23
    ee9a:	8f 93       	push	r24
    ee9c:	9f 93       	push	r25
    ee9e:	af 93       	push	r26
    eea0:	bf 93       	push	r27
    eea2:	ef 93       	push	r30
    eea4:	ff 93       	push	r31
    eea6:	e0 91 9b 2d 	lds	r30, 0x2D9B	; 0x802d9b <tc_tcc1_err_callback>
    eeaa:	f0 91 9c 2d 	lds	r31, 0x2D9C	; 0x802d9c <tc_tcc1_err_callback+0x1>
    eeae:	30 97       	sbiw	r30, 0x00	; 0
    eeb0:	09 f0       	breq	.+2      	; 0xeeb4 <__vector_21+0x34>
    eeb2:	19 95       	eicall
    eeb4:	ff 91       	pop	r31
    eeb6:	ef 91       	pop	r30
    eeb8:	bf 91       	pop	r27
    eeba:	af 91       	pop	r26
    eebc:	9f 91       	pop	r25
    eebe:	8f 91       	pop	r24
    eec0:	7f 91       	pop	r23
    eec2:	6f 91       	pop	r22
    eec4:	5f 91       	pop	r21
    eec6:	4f 91       	pop	r20
    eec8:	3f 91       	pop	r19
    eeca:	2f 91       	pop	r18
    eecc:	0f 90       	pop	r0
    eece:	0b be       	out	0x3b, r0	; 59
    eed0:	0f 90       	pop	r0
    eed2:	0f be       	out	0x3f, r0	; 63
    eed4:	0f 90       	pop	r0
    eed6:	1f 90       	pop	r1
    eed8:	18 95       	reti

0000eeda <__vector_22>:
    eeda:	1f 92       	push	r1
    eedc:	0f 92       	push	r0
    eede:	0f b6       	in	r0, 0x3f	; 63
    eee0:	0f 92       	push	r0
    eee2:	11 24       	eor	r1, r1
    eee4:	0b b6       	in	r0, 0x3b	; 59
    eee6:	0f 92       	push	r0
    eee8:	2f 93       	push	r18
    eeea:	3f 93       	push	r19
    eeec:	4f 93       	push	r20
    eeee:	5f 93       	push	r21
    eef0:	6f 93       	push	r22
    eef2:	7f 93       	push	r23
    eef4:	8f 93       	push	r24
    eef6:	9f 93       	push	r25
    eef8:	af 93       	push	r26
    eefa:	bf 93       	push	r27
    eefc:	ef 93       	push	r30
    eefe:	ff 93       	push	r31
    ef00:	e0 91 99 2d 	lds	r30, 0x2D99	; 0x802d99 <tc_tcc1_cca_callback>
    ef04:	f0 91 9a 2d 	lds	r31, 0x2D9A	; 0x802d9a <tc_tcc1_cca_callback+0x1>
    ef08:	30 97       	sbiw	r30, 0x00	; 0
    ef0a:	09 f0       	breq	.+2      	; 0xef0e <__vector_22+0x34>
    ef0c:	19 95       	eicall
    ef0e:	ff 91       	pop	r31
    ef10:	ef 91       	pop	r30
    ef12:	bf 91       	pop	r27
    ef14:	af 91       	pop	r26
    ef16:	9f 91       	pop	r25
    ef18:	8f 91       	pop	r24
    ef1a:	7f 91       	pop	r23
    ef1c:	6f 91       	pop	r22
    ef1e:	5f 91       	pop	r21
    ef20:	4f 91       	pop	r20
    ef22:	3f 91       	pop	r19
    ef24:	2f 91       	pop	r18
    ef26:	0f 90       	pop	r0
    ef28:	0b be       	out	0x3b, r0	; 59
    ef2a:	0f 90       	pop	r0
    ef2c:	0f be       	out	0x3f, r0	; 63
    ef2e:	0f 90       	pop	r0
    ef30:	1f 90       	pop	r1
    ef32:	18 95       	reti

0000ef34 <__vector_23>:
    ef34:	1f 92       	push	r1
    ef36:	0f 92       	push	r0
    ef38:	0f b6       	in	r0, 0x3f	; 63
    ef3a:	0f 92       	push	r0
    ef3c:	11 24       	eor	r1, r1
    ef3e:	0b b6       	in	r0, 0x3b	; 59
    ef40:	0f 92       	push	r0
    ef42:	2f 93       	push	r18
    ef44:	3f 93       	push	r19
    ef46:	4f 93       	push	r20
    ef48:	5f 93       	push	r21
    ef4a:	6f 93       	push	r22
    ef4c:	7f 93       	push	r23
    ef4e:	8f 93       	push	r24
    ef50:	9f 93       	push	r25
    ef52:	af 93       	push	r26
    ef54:	bf 93       	push	r27
    ef56:	ef 93       	push	r30
    ef58:	ff 93       	push	r31
    ef5a:	e0 91 97 2d 	lds	r30, 0x2D97	; 0x802d97 <tc_tcc1_ccb_callback>
    ef5e:	f0 91 98 2d 	lds	r31, 0x2D98	; 0x802d98 <tc_tcc1_ccb_callback+0x1>
    ef62:	30 97       	sbiw	r30, 0x00	; 0
    ef64:	09 f0       	breq	.+2      	; 0xef68 <__vector_23+0x34>
    ef66:	19 95       	eicall
    ef68:	ff 91       	pop	r31
    ef6a:	ef 91       	pop	r30
    ef6c:	bf 91       	pop	r27
    ef6e:	af 91       	pop	r26
    ef70:	9f 91       	pop	r25
    ef72:	8f 91       	pop	r24
    ef74:	7f 91       	pop	r23
    ef76:	6f 91       	pop	r22
    ef78:	5f 91       	pop	r21
    ef7a:	4f 91       	pop	r20
    ef7c:	3f 91       	pop	r19
    ef7e:	2f 91       	pop	r18
    ef80:	0f 90       	pop	r0
    ef82:	0b be       	out	0x3b, r0	; 59
    ef84:	0f 90       	pop	r0
    ef86:	0f be       	out	0x3f, r0	; 63
    ef88:	0f 90       	pop	r0
    ef8a:	1f 90       	pop	r1
    ef8c:	18 95       	reti

0000ef8e <__vector_77>:
    ef8e:	1f 92       	push	r1
    ef90:	0f 92       	push	r0
    ef92:	0f b6       	in	r0, 0x3f	; 63
    ef94:	0f 92       	push	r0
    ef96:	11 24       	eor	r1, r1
    ef98:	0b b6       	in	r0, 0x3b	; 59
    ef9a:	0f 92       	push	r0
    ef9c:	2f 93       	push	r18
    ef9e:	3f 93       	push	r19
    efa0:	4f 93       	push	r20
    efa2:	5f 93       	push	r21
    efa4:	6f 93       	push	r22
    efa6:	7f 93       	push	r23
    efa8:	8f 93       	push	r24
    efaa:	9f 93       	push	r25
    efac:	af 93       	push	r26
    efae:	bf 93       	push	r27
    efb0:	ef 93       	push	r30
    efb2:	ff 93       	push	r31
    efb4:	e0 91 95 2d 	lds	r30, 0x2D95	; 0x802d95 <tc_tcd0_ovf_callback>
    efb8:	f0 91 96 2d 	lds	r31, 0x2D96	; 0x802d96 <tc_tcd0_ovf_callback+0x1>
    efbc:	30 97       	sbiw	r30, 0x00	; 0
    efbe:	09 f0       	breq	.+2      	; 0xefc2 <__vector_77+0x34>
    efc0:	19 95       	eicall
    efc2:	ff 91       	pop	r31
    efc4:	ef 91       	pop	r30
    efc6:	bf 91       	pop	r27
    efc8:	af 91       	pop	r26
    efca:	9f 91       	pop	r25
    efcc:	8f 91       	pop	r24
    efce:	7f 91       	pop	r23
    efd0:	6f 91       	pop	r22
    efd2:	5f 91       	pop	r21
    efd4:	4f 91       	pop	r20
    efd6:	3f 91       	pop	r19
    efd8:	2f 91       	pop	r18
    efda:	0f 90       	pop	r0
    efdc:	0b be       	out	0x3b, r0	; 59
    efde:	0f 90       	pop	r0
    efe0:	0f be       	out	0x3f, r0	; 63
    efe2:	0f 90       	pop	r0
    efe4:	1f 90       	pop	r1
    efe6:	18 95       	reti

0000efe8 <__vector_78>:
    efe8:	1f 92       	push	r1
    efea:	0f 92       	push	r0
    efec:	0f b6       	in	r0, 0x3f	; 63
    efee:	0f 92       	push	r0
    eff0:	11 24       	eor	r1, r1
    eff2:	0b b6       	in	r0, 0x3b	; 59
    eff4:	0f 92       	push	r0
    eff6:	2f 93       	push	r18
    eff8:	3f 93       	push	r19
    effa:	4f 93       	push	r20
    effc:	5f 93       	push	r21
    effe:	6f 93       	push	r22
    f000:	7f 93       	push	r23
    f002:	8f 93       	push	r24
    f004:	9f 93       	push	r25
    f006:	af 93       	push	r26
    f008:	bf 93       	push	r27
    f00a:	ef 93       	push	r30
    f00c:	ff 93       	push	r31
    f00e:	e0 91 93 2d 	lds	r30, 0x2D93	; 0x802d93 <tc_tcd0_err_callback>
    f012:	f0 91 94 2d 	lds	r31, 0x2D94	; 0x802d94 <tc_tcd0_err_callback+0x1>
    f016:	30 97       	sbiw	r30, 0x00	; 0
    f018:	09 f0       	breq	.+2      	; 0xf01c <__vector_78+0x34>
    f01a:	19 95       	eicall
    f01c:	ff 91       	pop	r31
    f01e:	ef 91       	pop	r30
    f020:	bf 91       	pop	r27
    f022:	af 91       	pop	r26
    f024:	9f 91       	pop	r25
    f026:	8f 91       	pop	r24
    f028:	7f 91       	pop	r23
    f02a:	6f 91       	pop	r22
    f02c:	5f 91       	pop	r21
    f02e:	4f 91       	pop	r20
    f030:	3f 91       	pop	r19
    f032:	2f 91       	pop	r18
    f034:	0f 90       	pop	r0
    f036:	0b be       	out	0x3b, r0	; 59
    f038:	0f 90       	pop	r0
    f03a:	0f be       	out	0x3f, r0	; 63
    f03c:	0f 90       	pop	r0
    f03e:	1f 90       	pop	r1
    f040:	18 95       	reti

0000f042 <__vector_79>:
    f042:	1f 92       	push	r1
    f044:	0f 92       	push	r0
    f046:	0f b6       	in	r0, 0x3f	; 63
    f048:	0f 92       	push	r0
    f04a:	11 24       	eor	r1, r1
    f04c:	0b b6       	in	r0, 0x3b	; 59
    f04e:	0f 92       	push	r0
    f050:	2f 93       	push	r18
    f052:	3f 93       	push	r19
    f054:	4f 93       	push	r20
    f056:	5f 93       	push	r21
    f058:	6f 93       	push	r22
    f05a:	7f 93       	push	r23
    f05c:	8f 93       	push	r24
    f05e:	9f 93       	push	r25
    f060:	af 93       	push	r26
    f062:	bf 93       	push	r27
    f064:	ef 93       	push	r30
    f066:	ff 93       	push	r31
    f068:	e0 91 91 2d 	lds	r30, 0x2D91	; 0x802d91 <tc_tcd0_cca_callback>
    f06c:	f0 91 92 2d 	lds	r31, 0x2D92	; 0x802d92 <tc_tcd0_cca_callback+0x1>
    f070:	30 97       	sbiw	r30, 0x00	; 0
    f072:	09 f0       	breq	.+2      	; 0xf076 <__vector_79+0x34>
    f074:	19 95       	eicall
    f076:	ff 91       	pop	r31
    f078:	ef 91       	pop	r30
    f07a:	bf 91       	pop	r27
    f07c:	af 91       	pop	r26
    f07e:	9f 91       	pop	r25
    f080:	8f 91       	pop	r24
    f082:	7f 91       	pop	r23
    f084:	6f 91       	pop	r22
    f086:	5f 91       	pop	r21
    f088:	4f 91       	pop	r20
    f08a:	3f 91       	pop	r19
    f08c:	2f 91       	pop	r18
    f08e:	0f 90       	pop	r0
    f090:	0b be       	out	0x3b, r0	; 59
    f092:	0f 90       	pop	r0
    f094:	0f be       	out	0x3f, r0	; 63
    f096:	0f 90       	pop	r0
    f098:	1f 90       	pop	r1
    f09a:	18 95       	reti

0000f09c <__vector_80>:
    f09c:	1f 92       	push	r1
    f09e:	0f 92       	push	r0
    f0a0:	0f b6       	in	r0, 0x3f	; 63
    f0a2:	0f 92       	push	r0
    f0a4:	11 24       	eor	r1, r1
    f0a6:	0b b6       	in	r0, 0x3b	; 59
    f0a8:	0f 92       	push	r0
    f0aa:	2f 93       	push	r18
    f0ac:	3f 93       	push	r19
    f0ae:	4f 93       	push	r20
    f0b0:	5f 93       	push	r21
    f0b2:	6f 93       	push	r22
    f0b4:	7f 93       	push	r23
    f0b6:	8f 93       	push	r24
    f0b8:	9f 93       	push	r25
    f0ba:	af 93       	push	r26
    f0bc:	bf 93       	push	r27
    f0be:	ef 93       	push	r30
    f0c0:	ff 93       	push	r31
    f0c2:	e0 91 8f 2d 	lds	r30, 0x2D8F	; 0x802d8f <tc_tcd0_ccb_callback>
    f0c6:	f0 91 90 2d 	lds	r31, 0x2D90	; 0x802d90 <tc_tcd0_ccb_callback+0x1>
    f0ca:	30 97       	sbiw	r30, 0x00	; 0
    f0cc:	09 f0       	breq	.+2      	; 0xf0d0 <__vector_80+0x34>
    f0ce:	19 95       	eicall
    f0d0:	ff 91       	pop	r31
    f0d2:	ef 91       	pop	r30
    f0d4:	bf 91       	pop	r27
    f0d6:	af 91       	pop	r26
    f0d8:	9f 91       	pop	r25
    f0da:	8f 91       	pop	r24
    f0dc:	7f 91       	pop	r23
    f0de:	6f 91       	pop	r22
    f0e0:	5f 91       	pop	r21
    f0e2:	4f 91       	pop	r20
    f0e4:	3f 91       	pop	r19
    f0e6:	2f 91       	pop	r18
    f0e8:	0f 90       	pop	r0
    f0ea:	0b be       	out	0x3b, r0	; 59
    f0ec:	0f 90       	pop	r0
    f0ee:	0f be       	out	0x3f, r0	; 63
    f0f0:	0f 90       	pop	r0
    f0f2:	1f 90       	pop	r1
    f0f4:	18 95       	reti

0000f0f6 <__vector_81>:
    f0f6:	1f 92       	push	r1
    f0f8:	0f 92       	push	r0
    f0fa:	0f b6       	in	r0, 0x3f	; 63
    f0fc:	0f 92       	push	r0
    f0fe:	11 24       	eor	r1, r1
    f100:	0b b6       	in	r0, 0x3b	; 59
    f102:	0f 92       	push	r0
    f104:	2f 93       	push	r18
    f106:	3f 93       	push	r19
    f108:	4f 93       	push	r20
    f10a:	5f 93       	push	r21
    f10c:	6f 93       	push	r22
    f10e:	7f 93       	push	r23
    f110:	8f 93       	push	r24
    f112:	9f 93       	push	r25
    f114:	af 93       	push	r26
    f116:	bf 93       	push	r27
    f118:	ef 93       	push	r30
    f11a:	ff 93       	push	r31
    f11c:	e0 91 8d 2d 	lds	r30, 0x2D8D	; 0x802d8d <tc_tcd0_ccc_callback>
    f120:	f0 91 8e 2d 	lds	r31, 0x2D8E	; 0x802d8e <tc_tcd0_ccc_callback+0x1>
    f124:	30 97       	sbiw	r30, 0x00	; 0
    f126:	09 f0       	breq	.+2      	; 0xf12a <__vector_81+0x34>
    f128:	19 95       	eicall
    f12a:	ff 91       	pop	r31
    f12c:	ef 91       	pop	r30
    f12e:	bf 91       	pop	r27
    f130:	af 91       	pop	r26
    f132:	9f 91       	pop	r25
    f134:	8f 91       	pop	r24
    f136:	7f 91       	pop	r23
    f138:	6f 91       	pop	r22
    f13a:	5f 91       	pop	r21
    f13c:	4f 91       	pop	r20
    f13e:	3f 91       	pop	r19
    f140:	2f 91       	pop	r18
    f142:	0f 90       	pop	r0
    f144:	0b be       	out	0x3b, r0	; 59
    f146:	0f 90       	pop	r0
    f148:	0f be       	out	0x3f, r0	; 63
    f14a:	0f 90       	pop	r0
    f14c:	1f 90       	pop	r1
    f14e:	18 95       	reti

0000f150 <__vector_82>:
    f150:	1f 92       	push	r1
    f152:	0f 92       	push	r0
    f154:	0f b6       	in	r0, 0x3f	; 63
    f156:	0f 92       	push	r0
    f158:	11 24       	eor	r1, r1
    f15a:	0b b6       	in	r0, 0x3b	; 59
    f15c:	0f 92       	push	r0
    f15e:	2f 93       	push	r18
    f160:	3f 93       	push	r19
    f162:	4f 93       	push	r20
    f164:	5f 93       	push	r21
    f166:	6f 93       	push	r22
    f168:	7f 93       	push	r23
    f16a:	8f 93       	push	r24
    f16c:	9f 93       	push	r25
    f16e:	af 93       	push	r26
    f170:	bf 93       	push	r27
    f172:	ef 93       	push	r30
    f174:	ff 93       	push	r31
    f176:	e0 91 8b 2d 	lds	r30, 0x2D8B	; 0x802d8b <tc_tcd0_ccd_callback>
    f17a:	f0 91 8c 2d 	lds	r31, 0x2D8C	; 0x802d8c <tc_tcd0_ccd_callback+0x1>
    f17e:	30 97       	sbiw	r30, 0x00	; 0
    f180:	09 f0       	breq	.+2      	; 0xf184 <__vector_82+0x34>
    f182:	19 95       	eicall
    f184:	ff 91       	pop	r31
    f186:	ef 91       	pop	r30
    f188:	bf 91       	pop	r27
    f18a:	af 91       	pop	r26
    f18c:	9f 91       	pop	r25
    f18e:	8f 91       	pop	r24
    f190:	7f 91       	pop	r23
    f192:	6f 91       	pop	r22
    f194:	5f 91       	pop	r21
    f196:	4f 91       	pop	r20
    f198:	3f 91       	pop	r19
    f19a:	2f 91       	pop	r18
    f19c:	0f 90       	pop	r0
    f19e:	0b be       	out	0x3b, r0	; 59
    f1a0:	0f 90       	pop	r0
    f1a2:	0f be       	out	0x3f, r0	; 63
    f1a4:	0f 90       	pop	r0
    f1a6:	1f 90       	pop	r1
    f1a8:	18 95       	reti

0000f1aa <__vector_47>:
    f1aa:	1f 92       	push	r1
    f1ac:	0f 92       	push	r0
    f1ae:	0f b6       	in	r0, 0x3f	; 63
    f1b0:	0f 92       	push	r0
    f1b2:	11 24       	eor	r1, r1
    f1b4:	0b b6       	in	r0, 0x3b	; 59
    f1b6:	0f 92       	push	r0
    f1b8:	2f 93       	push	r18
    f1ba:	3f 93       	push	r19
    f1bc:	4f 93       	push	r20
    f1be:	5f 93       	push	r21
    f1c0:	6f 93       	push	r22
    f1c2:	7f 93       	push	r23
    f1c4:	8f 93       	push	r24
    f1c6:	9f 93       	push	r25
    f1c8:	af 93       	push	r26
    f1ca:	bf 93       	push	r27
    f1cc:	ef 93       	push	r30
    f1ce:	ff 93       	push	r31
    f1d0:	e0 91 89 2d 	lds	r30, 0x2D89	; 0x802d89 <tc_tce0_ovf_callback>
    f1d4:	f0 91 8a 2d 	lds	r31, 0x2D8A	; 0x802d8a <tc_tce0_ovf_callback+0x1>
    f1d8:	30 97       	sbiw	r30, 0x00	; 0
    f1da:	09 f0       	breq	.+2      	; 0xf1de <__vector_47+0x34>
    f1dc:	19 95       	eicall
    f1de:	ff 91       	pop	r31
    f1e0:	ef 91       	pop	r30
    f1e2:	bf 91       	pop	r27
    f1e4:	af 91       	pop	r26
    f1e6:	9f 91       	pop	r25
    f1e8:	8f 91       	pop	r24
    f1ea:	7f 91       	pop	r23
    f1ec:	6f 91       	pop	r22
    f1ee:	5f 91       	pop	r21
    f1f0:	4f 91       	pop	r20
    f1f2:	3f 91       	pop	r19
    f1f4:	2f 91       	pop	r18
    f1f6:	0f 90       	pop	r0
    f1f8:	0b be       	out	0x3b, r0	; 59
    f1fa:	0f 90       	pop	r0
    f1fc:	0f be       	out	0x3f, r0	; 63
    f1fe:	0f 90       	pop	r0
    f200:	1f 90       	pop	r1
    f202:	18 95       	reti

0000f204 <__vector_48>:
    f204:	1f 92       	push	r1
    f206:	0f 92       	push	r0
    f208:	0f b6       	in	r0, 0x3f	; 63
    f20a:	0f 92       	push	r0
    f20c:	11 24       	eor	r1, r1
    f20e:	0b b6       	in	r0, 0x3b	; 59
    f210:	0f 92       	push	r0
    f212:	2f 93       	push	r18
    f214:	3f 93       	push	r19
    f216:	4f 93       	push	r20
    f218:	5f 93       	push	r21
    f21a:	6f 93       	push	r22
    f21c:	7f 93       	push	r23
    f21e:	8f 93       	push	r24
    f220:	9f 93       	push	r25
    f222:	af 93       	push	r26
    f224:	bf 93       	push	r27
    f226:	ef 93       	push	r30
    f228:	ff 93       	push	r31
    f22a:	e0 91 87 2d 	lds	r30, 0x2D87	; 0x802d87 <tc_tce0_err_callback>
    f22e:	f0 91 88 2d 	lds	r31, 0x2D88	; 0x802d88 <tc_tce0_err_callback+0x1>
    f232:	30 97       	sbiw	r30, 0x00	; 0
    f234:	09 f0       	breq	.+2      	; 0xf238 <__vector_48+0x34>
    f236:	19 95       	eicall
    f238:	ff 91       	pop	r31
    f23a:	ef 91       	pop	r30
    f23c:	bf 91       	pop	r27
    f23e:	af 91       	pop	r26
    f240:	9f 91       	pop	r25
    f242:	8f 91       	pop	r24
    f244:	7f 91       	pop	r23
    f246:	6f 91       	pop	r22
    f248:	5f 91       	pop	r21
    f24a:	4f 91       	pop	r20
    f24c:	3f 91       	pop	r19
    f24e:	2f 91       	pop	r18
    f250:	0f 90       	pop	r0
    f252:	0b be       	out	0x3b, r0	; 59
    f254:	0f 90       	pop	r0
    f256:	0f be       	out	0x3f, r0	; 63
    f258:	0f 90       	pop	r0
    f25a:	1f 90       	pop	r1
    f25c:	18 95       	reti

0000f25e <__vector_49>:
    f25e:	1f 92       	push	r1
    f260:	0f 92       	push	r0
    f262:	0f b6       	in	r0, 0x3f	; 63
    f264:	0f 92       	push	r0
    f266:	11 24       	eor	r1, r1
    f268:	0b b6       	in	r0, 0x3b	; 59
    f26a:	0f 92       	push	r0
    f26c:	2f 93       	push	r18
    f26e:	3f 93       	push	r19
    f270:	4f 93       	push	r20
    f272:	5f 93       	push	r21
    f274:	6f 93       	push	r22
    f276:	7f 93       	push	r23
    f278:	8f 93       	push	r24
    f27a:	9f 93       	push	r25
    f27c:	af 93       	push	r26
    f27e:	bf 93       	push	r27
    f280:	ef 93       	push	r30
    f282:	ff 93       	push	r31
    f284:	e0 91 85 2d 	lds	r30, 0x2D85	; 0x802d85 <tc_tce0_cca_callback>
    f288:	f0 91 86 2d 	lds	r31, 0x2D86	; 0x802d86 <tc_tce0_cca_callback+0x1>
    f28c:	30 97       	sbiw	r30, 0x00	; 0
    f28e:	09 f0       	breq	.+2      	; 0xf292 <__vector_49+0x34>
    f290:	19 95       	eicall
    f292:	ff 91       	pop	r31
    f294:	ef 91       	pop	r30
    f296:	bf 91       	pop	r27
    f298:	af 91       	pop	r26
    f29a:	9f 91       	pop	r25
    f29c:	8f 91       	pop	r24
    f29e:	7f 91       	pop	r23
    f2a0:	6f 91       	pop	r22
    f2a2:	5f 91       	pop	r21
    f2a4:	4f 91       	pop	r20
    f2a6:	3f 91       	pop	r19
    f2a8:	2f 91       	pop	r18
    f2aa:	0f 90       	pop	r0
    f2ac:	0b be       	out	0x3b, r0	; 59
    f2ae:	0f 90       	pop	r0
    f2b0:	0f be       	out	0x3f, r0	; 63
    f2b2:	0f 90       	pop	r0
    f2b4:	1f 90       	pop	r1
    f2b6:	18 95       	reti

0000f2b8 <__vector_50>:
    f2b8:	1f 92       	push	r1
    f2ba:	0f 92       	push	r0
    f2bc:	0f b6       	in	r0, 0x3f	; 63
    f2be:	0f 92       	push	r0
    f2c0:	11 24       	eor	r1, r1
    f2c2:	0b b6       	in	r0, 0x3b	; 59
    f2c4:	0f 92       	push	r0
    f2c6:	2f 93       	push	r18
    f2c8:	3f 93       	push	r19
    f2ca:	4f 93       	push	r20
    f2cc:	5f 93       	push	r21
    f2ce:	6f 93       	push	r22
    f2d0:	7f 93       	push	r23
    f2d2:	8f 93       	push	r24
    f2d4:	9f 93       	push	r25
    f2d6:	af 93       	push	r26
    f2d8:	bf 93       	push	r27
    f2da:	ef 93       	push	r30
    f2dc:	ff 93       	push	r31
    f2de:	e0 91 83 2d 	lds	r30, 0x2D83	; 0x802d83 <tc_tce0_ccb_callback>
    f2e2:	f0 91 84 2d 	lds	r31, 0x2D84	; 0x802d84 <tc_tce0_ccb_callback+0x1>
    f2e6:	30 97       	sbiw	r30, 0x00	; 0
    f2e8:	09 f0       	breq	.+2      	; 0xf2ec <__vector_50+0x34>
    f2ea:	19 95       	eicall
    f2ec:	ff 91       	pop	r31
    f2ee:	ef 91       	pop	r30
    f2f0:	bf 91       	pop	r27
    f2f2:	af 91       	pop	r26
    f2f4:	9f 91       	pop	r25
    f2f6:	8f 91       	pop	r24
    f2f8:	7f 91       	pop	r23
    f2fa:	6f 91       	pop	r22
    f2fc:	5f 91       	pop	r21
    f2fe:	4f 91       	pop	r20
    f300:	3f 91       	pop	r19
    f302:	2f 91       	pop	r18
    f304:	0f 90       	pop	r0
    f306:	0b be       	out	0x3b, r0	; 59
    f308:	0f 90       	pop	r0
    f30a:	0f be       	out	0x3f, r0	; 63
    f30c:	0f 90       	pop	r0
    f30e:	1f 90       	pop	r1
    f310:	18 95       	reti

0000f312 <__vector_51>:
    f312:	1f 92       	push	r1
    f314:	0f 92       	push	r0
    f316:	0f b6       	in	r0, 0x3f	; 63
    f318:	0f 92       	push	r0
    f31a:	11 24       	eor	r1, r1
    f31c:	0b b6       	in	r0, 0x3b	; 59
    f31e:	0f 92       	push	r0
    f320:	2f 93       	push	r18
    f322:	3f 93       	push	r19
    f324:	4f 93       	push	r20
    f326:	5f 93       	push	r21
    f328:	6f 93       	push	r22
    f32a:	7f 93       	push	r23
    f32c:	8f 93       	push	r24
    f32e:	9f 93       	push	r25
    f330:	af 93       	push	r26
    f332:	bf 93       	push	r27
    f334:	ef 93       	push	r30
    f336:	ff 93       	push	r31
    f338:	e0 91 81 2d 	lds	r30, 0x2D81	; 0x802d81 <tc_tce0_ccc_callback>
    f33c:	f0 91 82 2d 	lds	r31, 0x2D82	; 0x802d82 <tc_tce0_ccc_callback+0x1>
    f340:	30 97       	sbiw	r30, 0x00	; 0
    f342:	09 f0       	breq	.+2      	; 0xf346 <__vector_51+0x34>
    f344:	19 95       	eicall
    f346:	ff 91       	pop	r31
    f348:	ef 91       	pop	r30
    f34a:	bf 91       	pop	r27
    f34c:	af 91       	pop	r26
    f34e:	9f 91       	pop	r25
    f350:	8f 91       	pop	r24
    f352:	7f 91       	pop	r23
    f354:	6f 91       	pop	r22
    f356:	5f 91       	pop	r21
    f358:	4f 91       	pop	r20
    f35a:	3f 91       	pop	r19
    f35c:	2f 91       	pop	r18
    f35e:	0f 90       	pop	r0
    f360:	0b be       	out	0x3b, r0	; 59
    f362:	0f 90       	pop	r0
    f364:	0f be       	out	0x3f, r0	; 63
    f366:	0f 90       	pop	r0
    f368:	1f 90       	pop	r1
    f36a:	18 95       	reti

0000f36c <__vector_52>:
    f36c:	1f 92       	push	r1
    f36e:	0f 92       	push	r0
    f370:	0f b6       	in	r0, 0x3f	; 63
    f372:	0f 92       	push	r0
    f374:	11 24       	eor	r1, r1
    f376:	0b b6       	in	r0, 0x3b	; 59
    f378:	0f 92       	push	r0
    f37a:	2f 93       	push	r18
    f37c:	3f 93       	push	r19
    f37e:	4f 93       	push	r20
    f380:	5f 93       	push	r21
    f382:	6f 93       	push	r22
    f384:	7f 93       	push	r23
    f386:	8f 93       	push	r24
    f388:	9f 93       	push	r25
    f38a:	af 93       	push	r26
    f38c:	bf 93       	push	r27
    f38e:	ef 93       	push	r30
    f390:	ff 93       	push	r31
    f392:	e0 91 7f 2d 	lds	r30, 0x2D7F	; 0x802d7f <tc_tce0_ccd_callback>
    f396:	f0 91 80 2d 	lds	r31, 0x2D80	; 0x802d80 <tc_tce0_ccd_callback+0x1>
    f39a:	30 97       	sbiw	r30, 0x00	; 0
    f39c:	09 f0       	breq	.+2      	; 0xf3a0 <__vector_52+0x34>
    f39e:	19 95       	eicall
    f3a0:	ff 91       	pop	r31
    f3a2:	ef 91       	pop	r30
    f3a4:	bf 91       	pop	r27
    f3a6:	af 91       	pop	r26
    f3a8:	9f 91       	pop	r25
    f3aa:	8f 91       	pop	r24
    f3ac:	7f 91       	pop	r23
    f3ae:	6f 91       	pop	r22
    f3b0:	5f 91       	pop	r21
    f3b2:	4f 91       	pop	r20
    f3b4:	3f 91       	pop	r19
    f3b6:	2f 91       	pop	r18
    f3b8:	0f 90       	pop	r0
    f3ba:	0b be       	out	0x3b, r0	; 59
    f3bc:	0f 90       	pop	r0
    f3be:	0f be       	out	0x3f, r0	; 63
    f3c0:	0f 90       	pop	r0
    f3c2:	1f 90       	pop	r1
    f3c4:	18 95       	reti

0000f3c6 <__vector_108>:
    f3c6:	1f 92       	push	r1
    f3c8:	0f 92       	push	r0
    f3ca:	0f b6       	in	r0, 0x3f	; 63
    f3cc:	0f 92       	push	r0
    f3ce:	11 24       	eor	r1, r1
    f3d0:	0b b6       	in	r0, 0x3b	; 59
    f3d2:	0f 92       	push	r0
    f3d4:	2f 93       	push	r18
    f3d6:	3f 93       	push	r19
    f3d8:	4f 93       	push	r20
    f3da:	5f 93       	push	r21
    f3dc:	6f 93       	push	r22
    f3de:	7f 93       	push	r23
    f3e0:	8f 93       	push	r24
    f3e2:	9f 93       	push	r25
    f3e4:	af 93       	push	r26
    f3e6:	bf 93       	push	r27
    f3e8:	ef 93       	push	r30
    f3ea:	ff 93       	push	r31
    f3ec:	e0 91 7d 2d 	lds	r30, 0x2D7D	; 0x802d7d <tc_tcf0_ovf_callback>
    f3f0:	f0 91 7e 2d 	lds	r31, 0x2D7E	; 0x802d7e <tc_tcf0_ovf_callback+0x1>
    f3f4:	30 97       	sbiw	r30, 0x00	; 0
    f3f6:	09 f0       	breq	.+2      	; 0xf3fa <__vector_108+0x34>
    f3f8:	19 95       	eicall
    f3fa:	ff 91       	pop	r31
    f3fc:	ef 91       	pop	r30
    f3fe:	bf 91       	pop	r27
    f400:	af 91       	pop	r26
    f402:	9f 91       	pop	r25
    f404:	8f 91       	pop	r24
    f406:	7f 91       	pop	r23
    f408:	6f 91       	pop	r22
    f40a:	5f 91       	pop	r21
    f40c:	4f 91       	pop	r20
    f40e:	3f 91       	pop	r19
    f410:	2f 91       	pop	r18
    f412:	0f 90       	pop	r0
    f414:	0b be       	out	0x3b, r0	; 59
    f416:	0f 90       	pop	r0
    f418:	0f be       	out	0x3f, r0	; 63
    f41a:	0f 90       	pop	r0
    f41c:	1f 90       	pop	r1
    f41e:	18 95       	reti

0000f420 <__vector_109>:
    f420:	1f 92       	push	r1
    f422:	0f 92       	push	r0
    f424:	0f b6       	in	r0, 0x3f	; 63
    f426:	0f 92       	push	r0
    f428:	11 24       	eor	r1, r1
    f42a:	0b b6       	in	r0, 0x3b	; 59
    f42c:	0f 92       	push	r0
    f42e:	2f 93       	push	r18
    f430:	3f 93       	push	r19
    f432:	4f 93       	push	r20
    f434:	5f 93       	push	r21
    f436:	6f 93       	push	r22
    f438:	7f 93       	push	r23
    f43a:	8f 93       	push	r24
    f43c:	9f 93       	push	r25
    f43e:	af 93       	push	r26
    f440:	bf 93       	push	r27
    f442:	ef 93       	push	r30
    f444:	ff 93       	push	r31
    f446:	e0 91 7b 2d 	lds	r30, 0x2D7B	; 0x802d7b <tc_tcf0_err_callback>
    f44a:	f0 91 7c 2d 	lds	r31, 0x2D7C	; 0x802d7c <tc_tcf0_err_callback+0x1>
    f44e:	30 97       	sbiw	r30, 0x00	; 0
    f450:	09 f0       	breq	.+2      	; 0xf454 <__vector_109+0x34>
    f452:	19 95       	eicall
    f454:	ff 91       	pop	r31
    f456:	ef 91       	pop	r30
    f458:	bf 91       	pop	r27
    f45a:	af 91       	pop	r26
    f45c:	9f 91       	pop	r25
    f45e:	8f 91       	pop	r24
    f460:	7f 91       	pop	r23
    f462:	6f 91       	pop	r22
    f464:	5f 91       	pop	r21
    f466:	4f 91       	pop	r20
    f468:	3f 91       	pop	r19
    f46a:	2f 91       	pop	r18
    f46c:	0f 90       	pop	r0
    f46e:	0b be       	out	0x3b, r0	; 59
    f470:	0f 90       	pop	r0
    f472:	0f be       	out	0x3f, r0	; 63
    f474:	0f 90       	pop	r0
    f476:	1f 90       	pop	r1
    f478:	18 95       	reti

0000f47a <__vector_110>:
    f47a:	1f 92       	push	r1
    f47c:	0f 92       	push	r0
    f47e:	0f b6       	in	r0, 0x3f	; 63
    f480:	0f 92       	push	r0
    f482:	11 24       	eor	r1, r1
    f484:	0b b6       	in	r0, 0x3b	; 59
    f486:	0f 92       	push	r0
    f488:	2f 93       	push	r18
    f48a:	3f 93       	push	r19
    f48c:	4f 93       	push	r20
    f48e:	5f 93       	push	r21
    f490:	6f 93       	push	r22
    f492:	7f 93       	push	r23
    f494:	8f 93       	push	r24
    f496:	9f 93       	push	r25
    f498:	af 93       	push	r26
    f49a:	bf 93       	push	r27
    f49c:	ef 93       	push	r30
    f49e:	ff 93       	push	r31
    f4a0:	e0 91 79 2d 	lds	r30, 0x2D79	; 0x802d79 <tc_tcf0_cca_callback>
    f4a4:	f0 91 7a 2d 	lds	r31, 0x2D7A	; 0x802d7a <tc_tcf0_cca_callback+0x1>
    f4a8:	30 97       	sbiw	r30, 0x00	; 0
    f4aa:	09 f0       	breq	.+2      	; 0xf4ae <__vector_110+0x34>
    f4ac:	19 95       	eicall
    f4ae:	ff 91       	pop	r31
    f4b0:	ef 91       	pop	r30
    f4b2:	bf 91       	pop	r27
    f4b4:	af 91       	pop	r26
    f4b6:	9f 91       	pop	r25
    f4b8:	8f 91       	pop	r24
    f4ba:	7f 91       	pop	r23
    f4bc:	6f 91       	pop	r22
    f4be:	5f 91       	pop	r21
    f4c0:	4f 91       	pop	r20
    f4c2:	3f 91       	pop	r19
    f4c4:	2f 91       	pop	r18
    f4c6:	0f 90       	pop	r0
    f4c8:	0b be       	out	0x3b, r0	; 59
    f4ca:	0f 90       	pop	r0
    f4cc:	0f be       	out	0x3f, r0	; 63
    f4ce:	0f 90       	pop	r0
    f4d0:	1f 90       	pop	r1
    f4d2:	18 95       	reti

0000f4d4 <__vector_111>:
    f4d4:	1f 92       	push	r1
    f4d6:	0f 92       	push	r0
    f4d8:	0f b6       	in	r0, 0x3f	; 63
    f4da:	0f 92       	push	r0
    f4dc:	11 24       	eor	r1, r1
    f4de:	0b b6       	in	r0, 0x3b	; 59
    f4e0:	0f 92       	push	r0
    f4e2:	2f 93       	push	r18
    f4e4:	3f 93       	push	r19
    f4e6:	4f 93       	push	r20
    f4e8:	5f 93       	push	r21
    f4ea:	6f 93       	push	r22
    f4ec:	7f 93       	push	r23
    f4ee:	8f 93       	push	r24
    f4f0:	9f 93       	push	r25
    f4f2:	af 93       	push	r26
    f4f4:	bf 93       	push	r27
    f4f6:	ef 93       	push	r30
    f4f8:	ff 93       	push	r31
    f4fa:	e0 91 77 2d 	lds	r30, 0x2D77	; 0x802d77 <tc_tcf0_ccb_callback>
    f4fe:	f0 91 78 2d 	lds	r31, 0x2D78	; 0x802d78 <tc_tcf0_ccb_callback+0x1>
    f502:	30 97       	sbiw	r30, 0x00	; 0
    f504:	09 f0       	breq	.+2      	; 0xf508 <__vector_111+0x34>
    f506:	19 95       	eicall
    f508:	ff 91       	pop	r31
    f50a:	ef 91       	pop	r30
    f50c:	bf 91       	pop	r27
    f50e:	af 91       	pop	r26
    f510:	9f 91       	pop	r25
    f512:	8f 91       	pop	r24
    f514:	7f 91       	pop	r23
    f516:	6f 91       	pop	r22
    f518:	5f 91       	pop	r21
    f51a:	4f 91       	pop	r20
    f51c:	3f 91       	pop	r19
    f51e:	2f 91       	pop	r18
    f520:	0f 90       	pop	r0
    f522:	0b be       	out	0x3b, r0	; 59
    f524:	0f 90       	pop	r0
    f526:	0f be       	out	0x3f, r0	; 63
    f528:	0f 90       	pop	r0
    f52a:	1f 90       	pop	r1
    f52c:	18 95       	reti

0000f52e <__vector_112>:
    f52e:	1f 92       	push	r1
    f530:	0f 92       	push	r0
    f532:	0f b6       	in	r0, 0x3f	; 63
    f534:	0f 92       	push	r0
    f536:	11 24       	eor	r1, r1
    f538:	0b b6       	in	r0, 0x3b	; 59
    f53a:	0f 92       	push	r0
    f53c:	2f 93       	push	r18
    f53e:	3f 93       	push	r19
    f540:	4f 93       	push	r20
    f542:	5f 93       	push	r21
    f544:	6f 93       	push	r22
    f546:	7f 93       	push	r23
    f548:	8f 93       	push	r24
    f54a:	9f 93       	push	r25
    f54c:	af 93       	push	r26
    f54e:	bf 93       	push	r27
    f550:	ef 93       	push	r30
    f552:	ff 93       	push	r31
    f554:	e0 91 75 2d 	lds	r30, 0x2D75	; 0x802d75 <tc_tcf0_ccc_callback>
    f558:	f0 91 76 2d 	lds	r31, 0x2D76	; 0x802d76 <tc_tcf0_ccc_callback+0x1>
    f55c:	30 97       	sbiw	r30, 0x00	; 0
    f55e:	09 f0       	breq	.+2      	; 0xf562 <__vector_112+0x34>
    f560:	19 95       	eicall
    f562:	ff 91       	pop	r31
    f564:	ef 91       	pop	r30
    f566:	bf 91       	pop	r27
    f568:	af 91       	pop	r26
    f56a:	9f 91       	pop	r25
    f56c:	8f 91       	pop	r24
    f56e:	7f 91       	pop	r23
    f570:	6f 91       	pop	r22
    f572:	5f 91       	pop	r21
    f574:	4f 91       	pop	r20
    f576:	3f 91       	pop	r19
    f578:	2f 91       	pop	r18
    f57a:	0f 90       	pop	r0
    f57c:	0b be       	out	0x3b, r0	; 59
    f57e:	0f 90       	pop	r0
    f580:	0f be       	out	0x3f, r0	; 63
    f582:	0f 90       	pop	r0
    f584:	1f 90       	pop	r1
    f586:	18 95       	reti

0000f588 <__vector_113>:
    f588:	1f 92       	push	r1
    f58a:	0f 92       	push	r0
    f58c:	0f b6       	in	r0, 0x3f	; 63
    f58e:	0f 92       	push	r0
    f590:	11 24       	eor	r1, r1
    f592:	0b b6       	in	r0, 0x3b	; 59
    f594:	0f 92       	push	r0
    f596:	2f 93       	push	r18
    f598:	3f 93       	push	r19
    f59a:	4f 93       	push	r20
    f59c:	5f 93       	push	r21
    f59e:	6f 93       	push	r22
    f5a0:	7f 93       	push	r23
    f5a2:	8f 93       	push	r24
    f5a4:	9f 93       	push	r25
    f5a6:	af 93       	push	r26
    f5a8:	bf 93       	push	r27
    f5aa:	ef 93       	push	r30
    f5ac:	ff 93       	push	r31
    f5ae:	e0 91 73 2d 	lds	r30, 0x2D73	; 0x802d73 <tc_tcf0_ccd_callback>
    f5b2:	f0 91 74 2d 	lds	r31, 0x2D74	; 0x802d74 <tc_tcf0_ccd_callback+0x1>
    f5b6:	30 97       	sbiw	r30, 0x00	; 0
    f5b8:	09 f0       	breq	.+2      	; 0xf5bc <__vector_113+0x34>
    f5ba:	19 95       	eicall
    f5bc:	ff 91       	pop	r31
    f5be:	ef 91       	pop	r30
    f5c0:	bf 91       	pop	r27
    f5c2:	af 91       	pop	r26
    f5c4:	9f 91       	pop	r25
    f5c6:	8f 91       	pop	r24
    f5c8:	7f 91       	pop	r23
    f5ca:	6f 91       	pop	r22
    f5cc:	5f 91       	pop	r21
    f5ce:	4f 91       	pop	r20
    f5d0:	3f 91       	pop	r19
    f5d2:	2f 91       	pop	r18
    f5d4:	0f 90       	pop	r0
    f5d6:	0b be       	out	0x3b, r0	; 59
    f5d8:	0f 90       	pop	r0
    f5da:	0f be       	out	0x3f, r0	; 63
    f5dc:	0f 90       	pop	r0
    f5de:	1f 90       	pop	r1
    f5e0:	18 95       	reti

0000f5e2 <tc_enable>:
    f5e2:	1f 93       	push	r17
    f5e4:	cf 93       	push	r28
    f5e6:	df 93       	push	r29
    f5e8:	1f 92       	push	r1
    f5ea:	1f 92       	push	r1
    f5ec:	cd b7       	in	r28, 0x3d	; 61
    f5ee:	de b7       	in	r29, 0x3e	; 62
    f5f0:	2f b7       	in	r18, 0x3f	; 63
    f5f2:	2a 83       	std	Y+2, r18	; 0x02
    f5f4:	f8 94       	cli
    f5f6:	1a 81       	ldd	r17, Y+2	; 0x02
    f5f8:	81 15       	cp	r24, r1
    f5fa:	28 e0       	ldi	r18, 0x08	; 8
    f5fc:	92 07       	cpc	r25, r18
    f5fe:	c1 f0       	breq	.+48     	; 0xf630 <tc_enable+0x4e>
    f600:	80 34       	cpi	r24, 0x40	; 64
    f602:	28 e0       	ldi	r18, 0x08	; 8
    f604:	92 07       	cpc	r25, r18
    f606:	09 f4       	brne	.+2      	; 0xf60a <tc_enable+0x28>
    f608:	44 c0       	rjmp	.+136    	; 0xf692 <tc_enable+0xb0>
    f60a:	81 15       	cp	r24, r1
    f60c:	29 e0       	ldi	r18, 0x09	; 9
    f60e:	92 07       	cpc	r25, r18
    f610:	09 f4       	brne	.+2      	; 0xf614 <tc_enable+0x32>
    f612:	38 c0       	rjmp	.+112    	; 0xf684 <tc_enable+0xa2>
    f614:	81 15       	cp	r24, r1
    f616:	2a e0       	ldi	r18, 0x0A	; 10
    f618:	92 07       	cpc	r25, r18
    f61a:	69 f1       	breq	.+90     	; 0xf676 <tc_enable+0x94>
    f61c:	81 15       	cp	r24, r1
    f61e:	9b 40       	sbci	r25, 0x0B	; 11
    f620:	19 f1       	breq	.+70     	; 0xf668 <tc_enable+0x86>
    f622:	1f bf       	out	0x3f, r17	; 63
    f624:	0f 90       	pop	r0
    f626:	0f 90       	pop	r0
    f628:	df 91       	pop	r29
    f62a:	cf 91       	pop	r28
    f62c:	1f 91       	pop	r17
    f62e:	08 95       	ret
    f630:	61 e0       	ldi	r22, 0x01	; 1
    f632:	83 e0       	ldi	r24, 0x03	; 3
    f634:	79 d8       	rcall	.-3854   	; 0xe728 <sysclk_enable_module>
    f636:	64 e0       	ldi	r22, 0x04	; 4
    f638:	83 e0       	ldi	r24, 0x03	; 3
    f63a:	76 d8       	rcall	.-3860   	; 0xe728 <sysclk_enable_module>
    f63c:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    f640:	8f 3f       	cpi	r24, 0xFF	; 255
    f642:	89 f0       	breq	.+34     	; 0xf666 <tc_enable+0x84>
    f644:	8f b7       	in	r24, 0x3f	; 63
    f646:	89 83       	std	Y+1, r24	; 0x01
    f648:	f8 94       	cli
    f64a:	99 81       	ldd	r25, Y+1	; 0x01
    f64c:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <sleepmgr_locks+0x1>
    f650:	8f 5f       	subi	r24, 0xFF	; 255
    f652:	80 93 cf 31 	sts	0x31CF, r24	; 0x8031cf <sleepmgr_locks+0x1>
    f656:	9f bf       	out	0x3f, r25	; 63
    f658:	1f bf       	out	0x3f, r17	; 63
    f65a:	0f 90       	pop	r0
    f65c:	0f 90       	pop	r0
    f65e:	df 91       	pop	r29
    f660:	cf 91       	pop	r28
    f662:	1f 91       	pop	r17
    f664:	08 95       	ret
    f666:	ff cf       	rjmp	.-2      	; 0xf666 <tc_enable+0x84>
    f668:	61 e0       	ldi	r22, 0x01	; 1
    f66a:	86 e0       	ldi	r24, 0x06	; 6
    f66c:	5d d8       	rcall	.-3910   	; 0xe728 <sysclk_enable_module>
    f66e:	64 e0       	ldi	r22, 0x04	; 4
    f670:	86 e0       	ldi	r24, 0x06	; 6
    f672:	5a d8       	rcall	.-3916   	; 0xe728 <sysclk_enable_module>
    f674:	e3 cf       	rjmp	.-58     	; 0xf63c <tc_enable+0x5a>
    f676:	61 e0       	ldi	r22, 0x01	; 1
    f678:	85 e0       	ldi	r24, 0x05	; 5
    f67a:	56 d8       	rcall	.-3924   	; 0xe728 <sysclk_enable_module>
    f67c:	64 e0       	ldi	r22, 0x04	; 4
    f67e:	85 e0       	ldi	r24, 0x05	; 5
    f680:	53 d8       	rcall	.-3930   	; 0xe728 <sysclk_enable_module>
    f682:	dc cf       	rjmp	.-72     	; 0xf63c <tc_enable+0x5a>
    f684:	61 e0       	ldi	r22, 0x01	; 1
    f686:	84 e0       	ldi	r24, 0x04	; 4
    f688:	4f d8       	rcall	.-3938   	; 0xe728 <sysclk_enable_module>
    f68a:	64 e0       	ldi	r22, 0x04	; 4
    f68c:	84 e0       	ldi	r24, 0x04	; 4
    f68e:	4c d8       	rcall	.-3944   	; 0xe728 <sysclk_enable_module>
    f690:	d5 cf       	rjmp	.-86     	; 0xf63c <tc_enable+0x5a>
    f692:	62 e0       	ldi	r22, 0x02	; 2
    f694:	ce cf       	rjmp	.-100    	; 0xf632 <tc_enable+0x50>

0000f696 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    f696:	81 15       	cp	r24, r1
    f698:	28 e0       	ldi	r18, 0x08	; 8
    f69a:	92 07       	cpc	r25, r18
    f69c:	d1 f0       	breq	.+52     	; 0xf6d2 <tc_set_overflow_interrupt_callback+0x3c>
		tc_tcc0_ovf_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    f69e:	80 34       	cpi	r24, 0x40	; 64
    f6a0:	28 e0       	ldi	r18, 0x08	; 8
    f6a2:	92 07       	cpc	r25, r18
    f6a4:	d9 f0       	breq	.+54     	; 0xf6dc <tc_set_overflow_interrupt_callback+0x46>
		tc_tcc1_ovf_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    f6a6:	81 15       	cp	r24, r1
    f6a8:	29 e0       	ldi	r18, 0x09	; 9
    f6aa:	92 07       	cpc	r25, r18
    f6ac:	e1 f0       	breq	.+56     	; 0xf6e6 <tc_set_overflow_interrupt_callback+0x50>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    f6ae:	81 15       	cp	r24, r1
    f6b0:	2a e0       	ldi	r18, 0x0A	; 10
    f6b2:	92 07       	cpc	r25, r18
    f6b4:	49 f0       	breq	.+18     	; 0xf6c8 <tc_set_overflow_interrupt_callback+0x32>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    f6b6:	81 15       	cp	r24, r1
    f6b8:	9b 40       	sbci	r25, 0x0B	; 11
    f6ba:	09 f0       	breq	.+2      	; 0xf6be <tc_set_overflow_interrupt_callback+0x28>
    f6bc:	08 95       	ret
		tc_tcf0_ovf_callback = callback;
    f6be:	60 93 7d 2d 	sts	0x2D7D, r22	; 0x802d7d <tc_tcf0_ovf_callback>
    f6c2:	70 93 7e 2d 	sts	0x2D7E, r23	; 0x802d7e <tc_tcf0_ovf_callback+0x1>
    f6c6:	08 95       	ret
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ovf_callback = callback;
    f6c8:	60 93 89 2d 	sts	0x2D89, r22	; 0x802d89 <tc_tce0_ovf_callback>
    f6cc:	70 93 8a 2d 	sts	0x2D8A, r23	; 0x802d8a <tc_tce0_ovf_callback+0x1>
    f6d0:	08 95       	ret
void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ovf_callback = callback;
    f6d2:	60 93 a9 2d 	sts	0x2DA9, r22	; 0x802da9 <tc_tcc0_ovf_callback>
    f6d6:	70 93 aa 2d 	sts	0x2DAA, r23	; 0x802daa <tc_tcc0_ovf_callback+0x1>
    f6da:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ovf_callback = callback;
    f6dc:	60 93 9d 2d 	sts	0x2D9D, r22	; 0x802d9d <tc_tcc1_ovf_callback>
    f6e0:	70 93 9e 2d 	sts	0x2D9E, r23	; 0x802d9e <tc_tcc1_ovf_callback+0x1>
    f6e4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ovf_callback = callback;
    f6e6:	60 93 95 2d 	sts	0x2D95, r22	; 0x802d95 <tc_tcd0_ovf_callback>
    f6ea:	70 93 96 2d 	sts	0x2D96, r23	; 0x802d96 <tc_tcd0_ovf_callback+0x1>
    f6ee:	08 95       	ret

0000f6f0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    f6f0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    f6f4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    f6f6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    f6f8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    f6fc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    f6fe:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    f702:	08 95       	ret

0000f704 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    f704:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    f706:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    f708:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    f70a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    f70c:	60 83       	st	Z, r22
	ret                             // Return to caller
    f70e:	08 95       	ret

0000f710 <main>:
volatile uint8_t audio_en =0;


int main(void)
{
	init_board();
    f710:	0e 94 f2 58 	call	0xb1e4	; 0xb1e4 <init_board>

	init_sketch();
    f714:	0e 94 a1 65 	call	0xcb42	; 0xcb42 <init_sketch>
	master_mode = MODE_SKETCH;
    f718:	82 e0       	ldi	r24, 0x02	; 2
    f71a:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <master_mode>
	
	while (true) 
	{
		get_inputs();
    f71e:	0e 94 3a 5b 	call	0xb674	; 0xb674 <get_inputs>
		if(master_mode == MODE_MENU)
    f722:	80 91 e0 31 	lds	r24, 0x31E0	; 0x8031e0 <master_mode>
    f726:	88 23       	and	r24, r24
    f728:	91 f0       	breq	.+36     	; 0xf74e <main+0x3e>
		{
			mm_loop();
		}
		if(master_mode == MODE_SUB_MENU)
    f72a:	81 30       	cpi	r24, 0x01	; 1
    f72c:	b1 f0       	breq	.+44     	; 0xf75a <main+0x4a>
		{
			sm_loop();
		}
		if(master_mode == MODE_SKETCH)
    f72e:	82 30       	cpi	r24, 0x02	; 2
    f730:	d1 f0       	breq	.+52     	; 0xf766 <main+0x56>
uint8_t master_mode;
volatile uint8_t audio_en =0;


int main(void)
{
    f732:	8b ea       	ldi	r24, 0xAB	; 171
    f734:	96 e4       	ldi	r25, 0x46	; 70
    f736:	a0 e1       	ldi	r26, 0x10	; 16
    f738:	b0 e0       	ldi	r27, 0x00	; 0
		barrier();
    f73a:	01 97       	sbiw	r24, 0x01	; 1
    f73c:	a1 09       	sbc	r26, r1
    f73e:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    f740:	e1 f7       	brne	.-8      	; 0xf73a <main+0x2a>
	init_sketch();
	master_mode = MODE_SKETCH;
	
	while (true) 
	{
		get_inputs();
    f742:	0e 94 3a 5b 	call	0xb674	; 0xb674 <get_inputs>
		if(master_mode == MODE_MENU)
    f746:	80 91 e0 31 	lds	r24, 0x31E0	; 0x8031e0 <master_mode>
    f74a:	81 11       	cpse	r24, r1
    f74c:	ee cf       	rjmp	.-36     	; 0xf72a <main+0x1a>
		{
			mm_loop();
    f74e:	0e 94 c3 5b 	call	0xb786	; 0xb786 <mm_loop>
    f752:	80 91 e0 31 	lds	r24, 0x31E0	; 0x8031e0 <master_mode>
		}
		if(master_mode == MODE_SUB_MENU)
    f756:	81 30       	cpi	r24, 0x01	; 1
    f758:	51 f7       	brne	.-44     	; 0xf72e <main+0x1e>
		{
			sm_loop();
    f75a:	0e 94 5f 5d 	call	0xbabe	; 0xbabe <sm_loop>
    f75e:	80 91 e0 31 	lds	r24, 0x31E0	; 0x8031e0 <master_mode>
		}
		if(master_mode == MODE_SKETCH)
    f762:	82 30       	cpi	r24, 0x02	; 2
    f764:	31 f7       	brne	.-52     	; 0xf732 <main+0x22>
		{
			sketch_loop();
    f766:	0e 94 07 67 	call	0xce0e	; 0xce0e <sketch_loop>
    f76a:	e3 cf       	rjmp	.-58     	; 0xf732 <main+0x22>

0000f76c <vfprintf>:
    f76c:	2f 92       	push	r2
    f76e:	3f 92       	push	r3
    f770:	4f 92       	push	r4
    f772:	5f 92       	push	r5
    f774:	6f 92       	push	r6
    f776:	7f 92       	push	r7
    f778:	8f 92       	push	r8
    f77a:	9f 92       	push	r9
    f77c:	af 92       	push	r10
    f77e:	bf 92       	push	r11
    f780:	cf 92       	push	r12
    f782:	df 92       	push	r13
    f784:	ef 92       	push	r14
    f786:	ff 92       	push	r15
    f788:	0f 93       	push	r16
    f78a:	1f 93       	push	r17
    f78c:	cf 93       	push	r28
    f78e:	df 93       	push	r29
    f790:	cd b7       	in	r28, 0x3d	; 61
    f792:	de b7       	in	r29, 0x3e	; 62
    f794:	60 97       	sbiw	r28, 0x10	; 16
    f796:	cd bf       	out	0x3d, r28	; 61
    f798:	de bf       	out	0x3e, r29	; 62
    f79a:	7c 01       	movw	r14, r24
    f79c:	1b 01       	movw	r2, r22
    f79e:	6a 01       	movw	r12, r20
    f7a0:	fc 01       	movw	r30, r24
    f7a2:	16 82       	std	Z+6, r1	; 0x06
    f7a4:	17 82       	std	Z+7, r1	; 0x07
    f7a6:	83 81       	ldd	r24, Z+3	; 0x03
    f7a8:	81 ff       	sbrs	r24, 1
    f7aa:	2a c3       	rjmp	.+1620   	; 0xfe00 <vfprintf+0x694>
    f7ac:	9e 01       	movw	r18, r28
    f7ae:	2f 5f       	subi	r18, 0xFF	; 255
    f7b0:	3f 4f       	sbci	r19, 0xFF	; 255
    f7b2:	39 01       	movw	r6, r18
    f7b4:	f7 01       	movw	r30, r14
    f7b6:	93 81       	ldd	r25, Z+3	; 0x03
    f7b8:	f1 01       	movw	r30, r2
    f7ba:	93 fd       	sbrc	r25, 3
    f7bc:	85 91       	lpm	r24, Z+
    f7be:	93 ff       	sbrs	r25, 3
    f7c0:	81 91       	ld	r24, Z+
    f7c2:	1f 01       	movw	r2, r30
    f7c4:	88 23       	and	r24, r24
    f7c6:	09 f4       	brne	.+2      	; 0xf7ca <vfprintf+0x5e>
    f7c8:	17 c3       	rjmp	.+1582   	; 0xfdf8 <vfprintf+0x68c>
    f7ca:	85 32       	cpi	r24, 0x25	; 37
    f7cc:	39 f4       	brne	.+14     	; 0xf7dc <vfprintf+0x70>
    f7ce:	93 fd       	sbrc	r25, 3
    f7d0:	85 91       	lpm	r24, Z+
    f7d2:	93 ff       	sbrs	r25, 3
    f7d4:	81 91       	ld	r24, Z+
    f7d6:	1f 01       	movw	r2, r30
    f7d8:	85 32       	cpi	r24, 0x25	; 37
    f7da:	31 f4       	brne	.+12     	; 0xf7e8 <vfprintf+0x7c>
    f7dc:	b7 01       	movw	r22, r14
    f7de:	90 e0       	ldi	r25, 0x00	; 0
    f7e0:	63 d5       	rcall	.+2758   	; 0x102a8 <fputc>
    f7e2:	56 01       	movw	r10, r12
    f7e4:	65 01       	movw	r12, r10
    f7e6:	e6 cf       	rjmp	.-52     	; 0xf7b4 <vfprintf+0x48>
    f7e8:	10 e0       	ldi	r17, 0x00	; 0
    f7ea:	51 2c       	mov	r5, r1
    f7ec:	91 2c       	mov	r9, r1
    f7ee:	ff e1       	ldi	r31, 0x1F	; 31
    f7f0:	f9 15       	cp	r31, r9
    f7f2:	d8 f0       	brcs	.+54     	; 0xf82a <vfprintf+0xbe>
    f7f4:	8b 32       	cpi	r24, 0x2B	; 43
    f7f6:	79 f0       	breq	.+30     	; 0xf816 <vfprintf+0xaa>
    f7f8:	38 f4       	brcc	.+14     	; 0xf808 <vfprintf+0x9c>
    f7fa:	80 32       	cpi	r24, 0x20	; 32
    f7fc:	79 f0       	breq	.+30     	; 0xf81c <vfprintf+0xb0>
    f7fe:	83 32       	cpi	r24, 0x23	; 35
    f800:	a1 f4       	brne	.+40     	; 0xf82a <vfprintf+0xbe>
    f802:	f9 2d       	mov	r31, r9
    f804:	f0 61       	ori	r31, 0x10	; 16
    f806:	2e c0       	rjmp	.+92     	; 0xf864 <vfprintf+0xf8>
    f808:	8d 32       	cpi	r24, 0x2D	; 45
    f80a:	61 f0       	breq	.+24     	; 0xf824 <vfprintf+0xb8>
    f80c:	80 33       	cpi	r24, 0x30	; 48
    f80e:	69 f4       	brne	.+26     	; 0xf82a <vfprintf+0xbe>
    f810:	29 2d       	mov	r18, r9
    f812:	21 60       	ori	r18, 0x01	; 1
    f814:	2d c0       	rjmp	.+90     	; 0xf870 <vfprintf+0x104>
    f816:	39 2d       	mov	r19, r9
    f818:	32 60       	ori	r19, 0x02	; 2
    f81a:	93 2e       	mov	r9, r19
    f81c:	89 2d       	mov	r24, r9
    f81e:	84 60       	ori	r24, 0x04	; 4
    f820:	98 2e       	mov	r9, r24
    f822:	2a c0       	rjmp	.+84     	; 0xf878 <vfprintf+0x10c>
    f824:	e9 2d       	mov	r30, r9
    f826:	e8 60       	ori	r30, 0x08	; 8
    f828:	15 c0       	rjmp	.+42     	; 0xf854 <vfprintf+0xe8>
    f82a:	97 fc       	sbrc	r9, 7
    f82c:	2d c0       	rjmp	.+90     	; 0xf888 <vfprintf+0x11c>
    f82e:	20 ed       	ldi	r18, 0xD0	; 208
    f830:	28 0f       	add	r18, r24
    f832:	2a 30       	cpi	r18, 0x0A	; 10
    f834:	88 f4       	brcc	.+34     	; 0xf858 <vfprintf+0xec>
    f836:	96 fe       	sbrs	r9, 6
    f838:	06 c0       	rjmp	.+12     	; 0xf846 <vfprintf+0xda>
    f83a:	3a e0       	ldi	r19, 0x0A	; 10
    f83c:	13 9f       	mul	r17, r19
    f83e:	20 0d       	add	r18, r0
    f840:	11 24       	eor	r1, r1
    f842:	12 2f       	mov	r17, r18
    f844:	19 c0       	rjmp	.+50     	; 0xf878 <vfprintf+0x10c>
    f846:	8a e0       	ldi	r24, 0x0A	; 10
    f848:	58 9e       	mul	r5, r24
    f84a:	20 0d       	add	r18, r0
    f84c:	11 24       	eor	r1, r1
    f84e:	52 2e       	mov	r5, r18
    f850:	e9 2d       	mov	r30, r9
    f852:	e0 62       	ori	r30, 0x20	; 32
    f854:	9e 2e       	mov	r9, r30
    f856:	10 c0       	rjmp	.+32     	; 0xf878 <vfprintf+0x10c>
    f858:	8e 32       	cpi	r24, 0x2E	; 46
    f85a:	31 f4       	brne	.+12     	; 0xf868 <vfprintf+0xfc>
    f85c:	96 fc       	sbrc	r9, 6
    f85e:	cc c2       	rjmp	.+1432   	; 0xfdf8 <vfprintf+0x68c>
    f860:	f9 2d       	mov	r31, r9
    f862:	f0 64       	ori	r31, 0x40	; 64
    f864:	9f 2e       	mov	r9, r31
    f866:	08 c0       	rjmp	.+16     	; 0xf878 <vfprintf+0x10c>
    f868:	8c 36       	cpi	r24, 0x6C	; 108
    f86a:	21 f4       	brne	.+8      	; 0xf874 <vfprintf+0x108>
    f86c:	29 2d       	mov	r18, r9
    f86e:	20 68       	ori	r18, 0x80	; 128
    f870:	92 2e       	mov	r9, r18
    f872:	02 c0       	rjmp	.+4      	; 0xf878 <vfprintf+0x10c>
    f874:	88 36       	cpi	r24, 0x68	; 104
    f876:	41 f4       	brne	.+16     	; 0xf888 <vfprintf+0x11c>
    f878:	f1 01       	movw	r30, r2
    f87a:	93 fd       	sbrc	r25, 3
    f87c:	85 91       	lpm	r24, Z+
    f87e:	93 ff       	sbrs	r25, 3
    f880:	81 91       	ld	r24, Z+
    f882:	1f 01       	movw	r2, r30
    f884:	81 11       	cpse	r24, r1
    f886:	b3 cf       	rjmp	.-154    	; 0xf7ee <vfprintf+0x82>
    f888:	9b eb       	ldi	r25, 0xBB	; 187
    f88a:	98 0f       	add	r25, r24
    f88c:	93 30       	cpi	r25, 0x03	; 3
    f88e:	20 f4       	brcc	.+8      	; 0xf898 <vfprintf+0x12c>
    f890:	99 2d       	mov	r25, r9
    f892:	90 61       	ori	r25, 0x10	; 16
    f894:	80 5e       	subi	r24, 0xE0	; 224
    f896:	07 c0       	rjmp	.+14     	; 0xf8a6 <vfprintf+0x13a>
    f898:	9b e9       	ldi	r25, 0x9B	; 155
    f89a:	98 0f       	add	r25, r24
    f89c:	93 30       	cpi	r25, 0x03	; 3
    f89e:	08 f0       	brcs	.+2      	; 0xf8a2 <vfprintf+0x136>
    f8a0:	59 c1       	rjmp	.+690    	; 0xfb54 <vfprintf+0x3e8>
    f8a2:	99 2d       	mov	r25, r9
    f8a4:	9f 7e       	andi	r25, 0xEF	; 239
    f8a6:	96 ff       	sbrs	r25, 6
    f8a8:	16 e0       	ldi	r17, 0x06	; 6
    f8aa:	9f 73       	andi	r25, 0x3F	; 63
    f8ac:	99 2e       	mov	r9, r25
    f8ae:	85 36       	cpi	r24, 0x65	; 101
    f8b0:	19 f4       	brne	.+6      	; 0xf8b8 <vfprintf+0x14c>
    f8b2:	90 64       	ori	r25, 0x40	; 64
    f8b4:	99 2e       	mov	r9, r25
    f8b6:	08 c0       	rjmp	.+16     	; 0xf8c8 <vfprintf+0x15c>
    f8b8:	86 36       	cpi	r24, 0x66	; 102
    f8ba:	21 f4       	brne	.+8      	; 0xf8c4 <vfprintf+0x158>
    f8bc:	39 2f       	mov	r19, r25
    f8be:	30 68       	ori	r19, 0x80	; 128
    f8c0:	93 2e       	mov	r9, r19
    f8c2:	02 c0       	rjmp	.+4      	; 0xf8c8 <vfprintf+0x15c>
    f8c4:	11 11       	cpse	r17, r1
    f8c6:	11 50       	subi	r17, 0x01	; 1
    f8c8:	97 fe       	sbrs	r9, 7
    f8ca:	07 c0       	rjmp	.+14     	; 0xf8da <vfprintf+0x16e>
    f8cc:	1c 33       	cpi	r17, 0x3C	; 60
    f8ce:	50 f4       	brcc	.+20     	; 0xf8e4 <vfprintf+0x178>
    f8d0:	44 24       	eor	r4, r4
    f8d2:	43 94       	inc	r4
    f8d4:	41 0e       	add	r4, r17
    f8d6:	27 e0       	ldi	r18, 0x07	; 7
    f8d8:	0b c0       	rjmp	.+22     	; 0xf8f0 <vfprintf+0x184>
    f8da:	18 30       	cpi	r17, 0x08	; 8
    f8dc:	38 f0       	brcs	.+14     	; 0xf8ec <vfprintf+0x180>
    f8de:	27 e0       	ldi	r18, 0x07	; 7
    f8e0:	17 e0       	ldi	r17, 0x07	; 7
    f8e2:	05 c0       	rjmp	.+10     	; 0xf8ee <vfprintf+0x182>
    f8e4:	27 e0       	ldi	r18, 0x07	; 7
    f8e6:	9c e3       	ldi	r25, 0x3C	; 60
    f8e8:	49 2e       	mov	r4, r25
    f8ea:	02 c0       	rjmp	.+4      	; 0xf8f0 <vfprintf+0x184>
    f8ec:	21 2f       	mov	r18, r17
    f8ee:	41 2c       	mov	r4, r1
    f8f0:	56 01       	movw	r10, r12
    f8f2:	84 e0       	ldi	r24, 0x04	; 4
    f8f4:	a8 0e       	add	r10, r24
    f8f6:	b1 1c       	adc	r11, r1
    f8f8:	f6 01       	movw	r30, r12
    f8fa:	60 81       	ld	r22, Z
    f8fc:	71 81       	ldd	r23, Z+1	; 0x01
    f8fe:	82 81       	ldd	r24, Z+2	; 0x02
    f900:	93 81       	ldd	r25, Z+3	; 0x03
    f902:	04 2d       	mov	r16, r4
    f904:	a3 01       	movw	r20, r6
    f906:	2c d3       	rcall	.+1624   	; 0xff60 <__ftoa_engine>
    f908:	6c 01       	movw	r12, r24
    f90a:	f9 81       	ldd	r31, Y+1	; 0x01
    f90c:	fc 87       	std	Y+12, r31	; 0x0c
    f90e:	f0 ff       	sbrs	r31, 0
    f910:	02 c0       	rjmp	.+4      	; 0xf916 <vfprintf+0x1aa>
    f912:	f3 ff       	sbrs	r31, 3
    f914:	06 c0       	rjmp	.+12     	; 0xf922 <vfprintf+0x1b6>
    f916:	91 fc       	sbrc	r9, 1
    f918:	06 c0       	rjmp	.+12     	; 0xf926 <vfprintf+0x1ba>
    f91a:	92 fe       	sbrs	r9, 2
    f91c:	06 c0       	rjmp	.+12     	; 0xf92a <vfprintf+0x1be>
    f91e:	00 e2       	ldi	r16, 0x20	; 32
    f920:	05 c0       	rjmp	.+10     	; 0xf92c <vfprintf+0x1c0>
    f922:	0d e2       	ldi	r16, 0x2D	; 45
    f924:	03 c0       	rjmp	.+6      	; 0xf92c <vfprintf+0x1c0>
    f926:	0b e2       	ldi	r16, 0x2B	; 43
    f928:	01 c0       	rjmp	.+2      	; 0xf92c <vfprintf+0x1c0>
    f92a:	00 e0       	ldi	r16, 0x00	; 0
    f92c:	8c 85       	ldd	r24, Y+12	; 0x0c
    f92e:	8c 70       	andi	r24, 0x0C	; 12
    f930:	19 f0       	breq	.+6      	; 0xf938 <vfprintf+0x1cc>
    f932:	01 11       	cpse	r16, r1
    f934:	43 c2       	rjmp	.+1158   	; 0xfdbc <vfprintf+0x650>
    f936:	80 c2       	rjmp	.+1280   	; 0xfe38 <vfprintf+0x6cc>
    f938:	97 fe       	sbrs	r9, 7
    f93a:	10 c0       	rjmp	.+32     	; 0xf95c <vfprintf+0x1f0>
    f93c:	4c 0c       	add	r4, r12
    f93e:	fc 85       	ldd	r31, Y+12	; 0x0c
    f940:	f4 ff       	sbrs	r31, 4
    f942:	04 c0       	rjmp	.+8      	; 0xf94c <vfprintf+0x1e0>
    f944:	8a 81       	ldd	r24, Y+2	; 0x02
    f946:	81 33       	cpi	r24, 0x31	; 49
    f948:	09 f4       	brne	.+2      	; 0xf94c <vfprintf+0x1e0>
    f94a:	4a 94       	dec	r4
    f94c:	14 14       	cp	r1, r4
    f94e:	74 f5       	brge	.+92     	; 0xf9ac <vfprintf+0x240>
    f950:	28 e0       	ldi	r18, 0x08	; 8
    f952:	24 15       	cp	r18, r4
    f954:	78 f5       	brcc	.+94     	; 0xf9b4 <vfprintf+0x248>
    f956:	88 e0       	ldi	r24, 0x08	; 8
    f958:	48 2e       	mov	r4, r24
    f95a:	2c c0       	rjmp	.+88     	; 0xf9b4 <vfprintf+0x248>
    f95c:	96 fc       	sbrc	r9, 6
    f95e:	2a c0       	rjmp	.+84     	; 0xf9b4 <vfprintf+0x248>
    f960:	81 2f       	mov	r24, r17
    f962:	90 e0       	ldi	r25, 0x00	; 0
    f964:	8c 15       	cp	r24, r12
    f966:	9d 05       	cpc	r25, r13
    f968:	9c f0       	brlt	.+38     	; 0xf990 <vfprintf+0x224>
    f96a:	3c ef       	ldi	r19, 0xFC	; 252
    f96c:	c3 16       	cp	r12, r19
    f96e:	3f ef       	ldi	r19, 0xFF	; 255
    f970:	d3 06       	cpc	r13, r19
    f972:	74 f0       	brlt	.+28     	; 0xf990 <vfprintf+0x224>
    f974:	89 2d       	mov	r24, r9
    f976:	80 68       	ori	r24, 0x80	; 128
    f978:	98 2e       	mov	r9, r24
    f97a:	0a c0       	rjmp	.+20     	; 0xf990 <vfprintf+0x224>
    f97c:	e2 e0       	ldi	r30, 0x02	; 2
    f97e:	f0 e0       	ldi	r31, 0x00	; 0
    f980:	ec 0f       	add	r30, r28
    f982:	fd 1f       	adc	r31, r29
    f984:	e1 0f       	add	r30, r17
    f986:	f1 1d       	adc	r31, r1
    f988:	80 81       	ld	r24, Z
    f98a:	80 33       	cpi	r24, 0x30	; 48
    f98c:	19 f4       	brne	.+6      	; 0xf994 <vfprintf+0x228>
    f98e:	11 50       	subi	r17, 0x01	; 1
    f990:	11 11       	cpse	r17, r1
    f992:	f4 cf       	rjmp	.-24     	; 0xf97c <vfprintf+0x210>
    f994:	97 fe       	sbrs	r9, 7
    f996:	0e c0       	rjmp	.+28     	; 0xf9b4 <vfprintf+0x248>
    f998:	44 24       	eor	r4, r4
    f99a:	43 94       	inc	r4
    f99c:	41 0e       	add	r4, r17
    f99e:	81 2f       	mov	r24, r17
    f9a0:	90 e0       	ldi	r25, 0x00	; 0
    f9a2:	c8 16       	cp	r12, r24
    f9a4:	d9 06       	cpc	r13, r25
    f9a6:	2c f4       	brge	.+10     	; 0xf9b2 <vfprintf+0x246>
    f9a8:	1c 19       	sub	r17, r12
    f9aa:	04 c0       	rjmp	.+8      	; 0xf9b4 <vfprintf+0x248>
    f9ac:	44 24       	eor	r4, r4
    f9ae:	43 94       	inc	r4
    f9b0:	01 c0       	rjmp	.+2      	; 0xf9b4 <vfprintf+0x248>
    f9b2:	10 e0       	ldi	r17, 0x00	; 0
    f9b4:	97 fe       	sbrs	r9, 7
    f9b6:	06 c0       	rjmp	.+12     	; 0xf9c4 <vfprintf+0x258>
    f9b8:	1c 14       	cp	r1, r12
    f9ba:	1d 04       	cpc	r1, r13
    f9bc:	34 f4       	brge	.+12     	; 0xf9ca <vfprintf+0x25e>
    f9be:	c6 01       	movw	r24, r12
    f9c0:	01 96       	adiw	r24, 0x01	; 1
    f9c2:	05 c0       	rjmp	.+10     	; 0xf9ce <vfprintf+0x262>
    f9c4:	85 e0       	ldi	r24, 0x05	; 5
    f9c6:	90 e0       	ldi	r25, 0x00	; 0
    f9c8:	02 c0       	rjmp	.+4      	; 0xf9ce <vfprintf+0x262>
    f9ca:	81 e0       	ldi	r24, 0x01	; 1
    f9cc:	90 e0       	ldi	r25, 0x00	; 0
    f9ce:	01 11       	cpse	r16, r1
    f9d0:	01 96       	adiw	r24, 0x01	; 1
    f9d2:	11 23       	and	r17, r17
    f9d4:	31 f0       	breq	.+12     	; 0xf9e2 <vfprintf+0x276>
    f9d6:	21 2f       	mov	r18, r17
    f9d8:	30 e0       	ldi	r19, 0x00	; 0
    f9da:	2f 5f       	subi	r18, 0xFF	; 255
    f9dc:	3f 4f       	sbci	r19, 0xFF	; 255
    f9de:	82 0f       	add	r24, r18
    f9e0:	93 1f       	adc	r25, r19
    f9e2:	25 2d       	mov	r18, r5
    f9e4:	30 e0       	ldi	r19, 0x00	; 0
    f9e6:	82 17       	cp	r24, r18
    f9e8:	93 07       	cpc	r25, r19
    f9ea:	14 f4       	brge	.+4      	; 0xf9f0 <vfprintf+0x284>
    f9ec:	58 1a       	sub	r5, r24
    f9ee:	01 c0       	rjmp	.+2      	; 0xf9f2 <vfprintf+0x286>
    f9f0:	51 2c       	mov	r5, r1
    f9f2:	89 2d       	mov	r24, r9
    f9f4:	89 70       	andi	r24, 0x09	; 9
    f9f6:	41 f4       	brne	.+16     	; 0xfa08 <vfprintf+0x29c>
    f9f8:	55 20       	and	r5, r5
    f9fa:	31 f0       	breq	.+12     	; 0xfa08 <vfprintf+0x29c>
    f9fc:	b7 01       	movw	r22, r14
    f9fe:	80 e2       	ldi	r24, 0x20	; 32
    fa00:	90 e0       	ldi	r25, 0x00	; 0
    fa02:	52 d4       	rcall	.+2212   	; 0x102a8 <fputc>
    fa04:	5a 94       	dec	r5
    fa06:	f8 cf       	rjmp	.-16     	; 0xf9f8 <vfprintf+0x28c>
    fa08:	00 23       	and	r16, r16
    fa0a:	21 f0       	breq	.+8      	; 0xfa14 <vfprintf+0x2a8>
    fa0c:	b7 01       	movw	r22, r14
    fa0e:	80 2f       	mov	r24, r16
    fa10:	90 e0       	ldi	r25, 0x00	; 0
    fa12:	4a d4       	rcall	.+2196   	; 0x102a8 <fputc>
    fa14:	93 fc       	sbrc	r9, 3
    fa16:	08 c0       	rjmp	.+16     	; 0xfa28 <vfprintf+0x2bc>
    fa18:	55 20       	and	r5, r5
    fa1a:	31 f0       	breq	.+12     	; 0xfa28 <vfprintf+0x2bc>
    fa1c:	b7 01       	movw	r22, r14
    fa1e:	80 e3       	ldi	r24, 0x30	; 48
    fa20:	90 e0       	ldi	r25, 0x00	; 0
    fa22:	42 d4       	rcall	.+2180   	; 0x102a8 <fputc>
    fa24:	5a 94       	dec	r5
    fa26:	f8 cf       	rjmp	.-16     	; 0xfa18 <vfprintf+0x2ac>
    fa28:	97 fe       	sbrs	r9, 7
    fa2a:	4a c0       	rjmp	.+148    	; 0xfac0 <vfprintf+0x354>
    fa2c:	46 01       	movw	r8, r12
    fa2e:	d7 fe       	sbrs	r13, 7
    fa30:	02 c0       	rjmp	.+4      	; 0xfa36 <vfprintf+0x2ca>
    fa32:	81 2c       	mov	r8, r1
    fa34:	91 2c       	mov	r9, r1
    fa36:	c6 01       	movw	r24, r12
    fa38:	88 19       	sub	r24, r8
    fa3a:	99 09       	sbc	r25, r9
    fa3c:	f3 01       	movw	r30, r6
    fa3e:	e8 0f       	add	r30, r24
    fa40:	f9 1f       	adc	r31, r25
    fa42:	ed 87       	std	Y+13, r30	; 0x0d
    fa44:	fe 87       	std	Y+14, r31	; 0x0e
    fa46:	96 01       	movw	r18, r12
    fa48:	24 19       	sub	r18, r4
    fa4a:	31 09       	sbc	r19, r1
    fa4c:	2f 87       	std	Y+15, r18	; 0x0f
    fa4e:	38 8b       	std	Y+16, r19	; 0x10
    fa50:	01 2f       	mov	r16, r17
    fa52:	10 e0       	ldi	r17, 0x00	; 0
    fa54:	11 95       	neg	r17
    fa56:	01 95       	neg	r16
    fa58:	11 09       	sbc	r17, r1
    fa5a:	3f ef       	ldi	r19, 0xFF	; 255
    fa5c:	83 16       	cp	r8, r19
    fa5e:	93 06       	cpc	r9, r19
    fa60:	21 f4       	brne	.+8      	; 0xfa6a <vfprintf+0x2fe>
    fa62:	b7 01       	movw	r22, r14
    fa64:	8e e2       	ldi	r24, 0x2E	; 46
    fa66:	90 e0       	ldi	r25, 0x00	; 0
    fa68:	1f d4       	rcall	.+2110   	; 0x102a8 <fputc>
    fa6a:	c8 14       	cp	r12, r8
    fa6c:	d9 04       	cpc	r13, r9
    fa6e:	4c f0       	brlt	.+18     	; 0xfa82 <vfprintf+0x316>
    fa70:	8f 85       	ldd	r24, Y+15	; 0x0f
    fa72:	98 89       	ldd	r25, Y+16	; 0x10
    fa74:	88 15       	cp	r24, r8
    fa76:	99 05       	cpc	r25, r9
    fa78:	24 f4       	brge	.+8      	; 0xfa82 <vfprintf+0x316>
    fa7a:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa7c:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa7e:	81 81       	ldd	r24, Z+1	; 0x01
    fa80:	01 c0       	rjmp	.+2      	; 0xfa84 <vfprintf+0x318>
    fa82:	80 e3       	ldi	r24, 0x30	; 48
    fa84:	f1 e0       	ldi	r31, 0x01	; 1
    fa86:	8f 1a       	sub	r8, r31
    fa88:	91 08       	sbc	r9, r1
    fa8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    fa8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    fa8e:	2f 5f       	subi	r18, 0xFF	; 255
    fa90:	3f 4f       	sbci	r19, 0xFF	; 255
    fa92:	2d 87       	std	Y+13, r18	; 0x0d
    fa94:	3e 87       	std	Y+14, r19	; 0x0e
    fa96:	80 16       	cp	r8, r16
    fa98:	91 06       	cpc	r9, r17
    fa9a:	24 f0       	brlt	.+8      	; 0xfaa4 <vfprintf+0x338>
    fa9c:	b7 01       	movw	r22, r14
    fa9e:	90 e0       	ldi	r25, 0x00	; 0
    faa0:	03 d4       	rcall	.+2054   	; 0x102a8 <fputc>
    faa2:	db cf       	rjmp	.-74     	; 0xfa5a <vfprintf+0x2ee>
    faa4:	c8 14       	cp	r12, r8
    faa6:	d9 04       	cpc	r13, r9
    faa8:	41 f4       	brne	.+16     	; 0xfaba <vfprintf+0x34e>
    faaa:	9a 81       	ldd	r25, Y+2	; 0x02
    faac:	96 33       	cpi	r25, 0x36	; 54
    faae:	20 f4       	brcc	.+8      	; 0xfab8 <vfprintf+0x34c>
    fab0:	95 33       	cpi	r25, 0x35	; 53
    fab2:	19 f4       	brne	.+6      	; 0xfaba <vfprintf+0x34e>
    fab4:	3c 85       	ldd	r19, Y+12	; 0x0c
    fab6:	34 ff       	sbrs	r19, 4
    fab8:	81 e3       	ldi	r24, 0x31	; 49
    faba:	b7 01       	movw	r22, r14
    fabc:	90 e0       	ldi	r25, 0x00	; 0
    fabe:	48 c0       	rjmp	.+144    	; 0xfb50 <vfprintf+0x3e4>
    fac0:	8a 81       	ldd	r24, Y+2	; 0x02
    fac2:	81 33       	cpi	r24, 0x31	; 49
    fac4:	19 f0       	breq	.+6      	; 0xfacc <vfprintf+0x360>
    fac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    fac8:	9f 7e       	andi	r25, 0xEF	; 239
    faca:	9c 87       	std	Y+12, r25	; 0x0c
    facc:	b7 01       	movw	r22, r14
    face:	90 e0       	ldi	r25, 0x00	; 0
    fad0:	eb d3       	rcall	.+2006   	; 0x102a8 <fputc>
    fad2:	11 11       	cpse	r17, r1
    fad4:	05 c0       	rjmp	.+10     	; 0xfae0 <vfprintf+0x374>
    fad6:	94 fc       	sbrc	r9, 4
    fad8:	16 c0       	rjmp	.+44     	; 0xfb06 <vfprintf+0x39a>
    fada:	85 e6       	ldi	r24, 0x65	; 101
    fadc:	90 e0       	ldi	r25, 0x00	; 0
    fade:	15 c0       	rjmp	.+42     	; 0xfb0a <vfprintf+0x39e>
    fae0:	b7 01       	movw	r22, r14
    fae2:	8e e2       	ldi	r24, 0x2E	; 46
    fae4:	90 e0       	ldi	r25, 0x00	; 0
    fae6:	e0 d3       	rcall	.+1984   	; 0x102a8 <fputc>
    fae8:	1e 5f       	subi	r17, 0xFE	; 254
    faea:	82 e0       	ldi	r24, 0x02	; 2
    faec:	01 e0       	ldi	r16, 0x01	; 1
    faee:	08 0f       	add	r16, r24
    faf0:	f3 01       	movw	r30, r6
    faf2:	e8 0f       	add	r30, r24
    faf4:	f1 1d       	adc	r31, r1
    faf6:	80 81       	ld	r24, Z
    faf8:	b7 01       	movw	r22, r14
    fafa:	90 e0       	ldi	r25, 0x00	; 0
    fafc:	d5 d3       	rcall	.+1962   	; 0x102a8 <fputc>
    fafe:	80 2f       	mov	r24, r16
    fb00:	01 13       	cpse	r16, r17
    fb02:	f4 cf       	rjmp	.-24     	; 0xfaec <vfprintf+0x380>
    fb04:	e8 cf       	rjmp	.-48     	; 0xfad6 <vfprintf+0x36a>
    fb06:	85 e4       	ldi	r24, 0x45	; 69
    fb08:	90 e0       	ldi	r25, 0x00	; 0
    fb0a:	b7 01       	movw	r22, r14
    fb0c:	cd d3       	rcall	.+1946   	; 0x102a8 <fputc>
    fb0e:	d7 fc       	sbrc	r13, 7
    fb10:	06 c0       	rjmp	.+12     	; 0xfb1e <vfprintf+0x3b2>
    fb12:	c1 14       	cp	r12, r1
    fb14:	d1 04       	cpc	r13, r1
    fb16:	41 f4       	brne	.+16     	; 0xfb28 <vfprintf+0x3bc>
    fb18:	ec 85       	ldd	r30, Y+12	; 0x0c
    fb1a:	e4 ff       	sbrs	r30, 4
    fb1c:	05 c0       	rjmp	.+10     	; 0xfb28 <vfprintf+0x3bc>
    fb1e:	d1 94       	neg	r13
    fb20:	c1 94       	neg	r12
    fb22:	d1 08       	sbc	r13, r1
    fb24:	8d e2       	ldi	r24, 0x2D	; 45
    fb26:	01 c0       	rjmp	.+2      	; 0xfb2a <vfprintf+0x3be>
    fb28:	8b e2       	ldi	r24, 0x2B	; 43
    fb2a:	b7 01       	movw	r22, r14
    fb2c:	90 e0       	ldi	r25, 0x00	; 0
    fb2e:	bc d3       	rcall	.+1912   	; 0x102a8 <fputc>
    fb30:	80 e3       	ldi	r24, 0x30	; 48
    fb32:	2a e0       	ldi	r18, 0x0A	; 10
    fb34:	c2 16       	cp	r12, r18
    fb36:	d1 04       	cpc	r13, r1
    fb38:	2c f0       	brlt	.+10     	; 0xfb44 <vfprintf+0x3d8>
    fb3a:	8f 5f       	subi	r24, 0xFF	; 255
    fb3c:	fa e0       	ldi	r31, 0x0A	; 10
    fb3e:	cf 1a       	sub	r12, r31
    fb40:	d1 08       	sbc	r13, r1
    fb42:	f7 cf       	rjmp	.-18     	; 0xfb32 <vfprintf+0x3c6>
    fb44:	b7 01       	movw	r22, r14
    fb46:	90 e0       	ldi	r25, 0x00	; 0
    fb48:	af d3       	rcall	.+1886   	; 0x102a8 <fputc>
    fb4a:	b7 01       	movw	r22, r14
    fb4c:	c6 01       	movw	r24, r12
    fb4e:	c0 96       	adiw	r24, 0x30	; 48
    fb50:	ab d3       	rcall	.+1878   	; 0x102a8 <fputc>
    fb52:	49 c1       	rjmp	.+658    	; 0xfde6 <vfprintf+0x67a>
    fb54:	83 36       	cpi	r24, 0x63	; 99
    fb56:	31 f0       	breq	.+12     	; 0xfb64 <vfprintf+0x3f8>
    fb58:	83 37       	cpi	r24, 0x73	; 115
    fb5a:	79 f0       	breq	.+30     	; 0xfb7a <vfprintf+0x40e>
    fb5c:	83 35       	cpi	r24, 0x53	; 83
    fb5e:	09 f0       	breq	.+2      	; 0xfb62 <vfprintf+0x3f6>
    fb60:	52 c0       	rjmp	.+164    	; 0xfc06 <vfprintf+0x49a>
    fb62:	1f c0       	rjmp	.+62     	; 0xfba2 <vfprintf+0x436>
    fb64:	56 01       	movw	r10, r12
    fb66:	32 e0       	ldi	r19, 0x02	; 2
    fb68:	a3 0e       	add	r10, r19
    fb6a:	b1 1c       	adc	r11, r1
    fb6c:	f6 01       	movw	r30, r12
    fb6e:	80 81       	ld	r24, Z
    fb70:	89 83       	std	Y+1, r24	; 0x01
    fb72:	01 e0       	ldi	r16, 0x01	; 1
    fb74:	10 e0       	ldi	r17, 0x00	; 0
    fb76:	63 01       	movw	r12, r6
    fb78:	11 c0       	rjmp	.+34     	; 0xfb9c <vfprintf+0x430>
    fb7a:	56 01       	movw	r10, r12
    fb7c:	f2 e0       	ldi	r31, 0x02	; 2
    fb7e:	af 0e       	add	r10, r31
    fb80:	b1 1c       	adc	r11, r1
    fb82:	f6 01       	movw	r30, r12
    fb84:	c0 80       	ld	r12, Z
    fb86:	d1 80       	ldd	r13, Z+1	; 0x01
    fb88:	96 fe       	sbrs	r9, 6
    fb8a:	03 c0       	rjmp	.+6      	; 0xfb92 <vfprintf+0x426>
    fb8c:	61 2f       	mov	r22, r17
    fb8e:	70 e0       	ldi	r23, 0x00	; 0
    fb90:	02 c0       	rjmp	.+4      	; 0xfb96 <vfprintf+0x42a>
    fb92:	6f ef       	ldi	r22, 0xFF	; 255
    fb94:	7f ef       	ldi	r23, 0xFF	; 255
    fb96:	c6 01       	movw	r24, r12
    fb98:	f5 d2       	rcall	.+1514   	; 0x10184 <strnlen>
    fb9a:	8c 01       	movw	r16, r24
    fb9c:	f9 2d       	mov	r31, r9
    fb9e:	ff 77       	andi	r31, 0x7F	; 127
    fba0:	13 c0       	rjmp	.+38     	; 0xfbc8 <vfprintf+0x45c>
    fba2:	56 01       	movw	r10, r12
    fba4:	22 e0       	ldi	r18, 0x02	; 2
    fba6:	a2 0e       	add	r10, r18
    fba8:	b1 1c       	adc	r11, r1
    fbaa:	f6 01       	movw	r30, r12
    fbac:	c0 80       	ld	r12, Z
    fbae:	d1 80       	ldd	r13, Z+1	; 0x01
    fbb0:	96 fe       	sbrs	r9, 6
    fbb2:	03 c0       	rjmp	.+6      	; 0xfbba <vfprintf+0x44e>
    fbb4:	61 2f       	mov	r22, r17
    fbb6:	70 e0       	ldi	r23, 0x00	; 0
    fbb8:	02 c0       	rjmp	.+4      	; 0xfbbe <vfprintf+0x452>
    fbba:	6f ef       	ldi	r22, 0xFF	; 255
    fbbc:	7f ef       	ldi	r23, 0xFF	; 255
    fbbe:	c6 01       	movw	r24, r12
    fbc0:	a7 d2       	rcall	.+1358   	; 0x10110 <strnlen_P>
    fbc2:	8c 01       	movw	r16, r24
    fbc4:	f9 2d       	mov	r31, r9
    fbc6:	f0 68       	ori	r31, 0x80	; 128
    fbc8:	9f 2e       	mov	r9, r31
    fbca:	f3 fd       	sbrc	r31, 3
    fbcc:	18 c0       	rjmp	.+48     	; 0xfbfe <vfprintf+0x492>
    fbce:	85 2d       	mov	r24, r5
    fbd0:	90 e0       	ldi	r25, 0x00	; 0
    fbd2:	08 17       	cp	r16, r24
    fbd4:	19 07       	cpc	r17, r25
    fbd6:	98 f4       	brcc	.+38     	; 0xfbfe <vfprintf+0x492>
    fbd8:	b7 01       	movw	r22, r14
    fbda:	80 e2       	ldi	r24, 0x20	; 32
    fbdc:	90 e0       	ldi	r25, 0x00	; 0
    fbde:	64 d3       	rcall	.+1736   	; 0x102a8 <fputc>
    fbe0:	5a 94       	dec	r5
    fbe2:	f5 cf       	rjmp	.-22     	; 0xfbce <vfprintf+0x462>
    fbe4:	f6 01       	movw	r30, r12
    fbe6:	97 fc       	sbrc	r9, 7
    fbe8:	85 91       	lpm	r24, Z+
    fbea:	97 fe       	sbrs	r9, 7
    fbec:	81 91       	ld	r24, Z+
    fbee:	6f 01       	movw	r12, r30
    fbf0:	b7 01       	movw	r22, r14
    fbf2:	90 e0       	ldi	r25, 0x00	; 0
    fbf4:	59 d3       	rcall	.+1714   	; 0x102a8 <fputc>
    fbf6:	51 10       	cpse	r5, r1
    fbf8:	5a 94       	dec	r5
    fbfa:	01 50       	subi	r16, 0x01	; 1
    fbfc:	11 09       	sbc	r17, r1
    fbfe:	01 15       	cp	r16, r1
    fc00:	11 05       	cpc	r17, r1
    fc02:	81 f7       	brne	.-32     	; 0xfbe4 <vfprintf+0x478>
    fc04:	f0 c0       	rjmp	.+480    	; 0xfde6 <vfprintf+0x67a>
    fc06:	84 36       	cpi	r24, 0x64	; 100
    fc08:	11 f0       	breq	.+4      	; 0xfc0e <vfprintf+0x4a2>
    fc0a:	89 36       	cpi	r24, 0x69	; 105
    fc0c:	59 f5       	brne	.+86     	; 0xfc64 <vfprintf+0x4f8>
    fc0e:	56 01       	movw	r10, r12
    fc10:	97 fe       	sbrs	r9, 7
    fc12:	09 c0       	rjmp	.+18     	; 0xfc26 <vfprintf+0x4ba>
    fc14:	24 e0       	ldi	r18, 0x04	; 4
    fc16:	a2 0e       	add	r10, r18
    fc18:	b1 1c       	adc	r11, r1
    fc1a:	f6 01       	movw	r30, r12
    fc1c:	60 81       	ld	r22, Z
    fc1e:	71 81       	ldd	r23, Z+1	; 0x01
    fc20:	82 81       	ldd	r24, Z+2	; 0x02
    fc22:	93 81       	ldd	r25, Z+3	; 0x03
    fc24:	0a c0       	rjmp	.+20     	; 0xfc3a <vfprintf+0x4ce>
    fc26:	f2 e0       	ldi	r31, 0x02	; 2
    fc28:	af 0e       	add	r10, r31
    fc2a:	b1 1c       	adc	r11, r1
    fc2c:	f6 01       	movw	r30, r12
    fc2e:	60 81       	ld	r22, Z
    fc30:	71 81       	ldd	r23, Z+1	; 0x01
    fc32:	07 2e       	mov	r0, r23
    fc34:	00 0c       	add	r0, r0
    fc36:	88 0b       	sbc	r24, r24
    fc38:	99 0b       	sbc	r25, r25
    fc3a:	f9 2d       	mov	r31, r9
    fc3c:	ff 76       	andi	r31, 0x6F	; 111
    fc3e:	9f 2e       	mov	r9, r31
    fc40:	97 ff       	sbrs	r25, 7
    fc42:	09 c0       	rjmp	.+18     	; 0xfc56 <vfprintf+0x4ea>
    fc44:	90 95       	com	r25
    fc46:	80 95       	com	r24
    fc48:	70 95       	com	r23
    fc4a:	61 95       	neg	r22
    fc4c:	7f 4f       	sbci	r23, 0xFF	; 255
    fc4e:	8f 4f       	sbci	r24, 0xFF	; 255
    fc50:	9f 4f       	sbci	r25, 0xFF	; 255
    fc52:	f0 68       	ori	r31, 0x80	; 128
    fc54:	9f 2e       	mov	r9, r31
    fc56:	2a e0       	ldi	r18, 0x0A	; 10
    fc58:	30 e0       	ldi	r19, 0x00	; 0
    fc5a:	a3 01       	movw	r20, r6
    fc5c:	cc d3       	rcall	.+1944   	; 0x103f6 <__ultoa_invert>
    fc5e:	c8 2e       	mov	r12, r24
    fc60:	c6 18       	sub	r12, r6
    fc62:	3e c0       	rjmp	.+124    	; 0xfce0 <vfprintf+0x574>
    fc64:	09 2d       	mov	r16, r9
    fc66:	85 37       	cpi	r24, 0x75	; 117
    fc68:	21 f4       	brne	.+8      	; 0xfc72 <vfprintf+0x506>
    fc6a:	0f 7e       	andi	r16, 0xEF	; 239
    fc6c:	2a e0       	ldi	r18, 0x0A	; 10
    fc6e:	30 e0       	ldi	r19, 0x00	; 0
    fc70:	1d c0       	rjmp	.+58     	; 0xfcac <vfprintf+0x540>
    fc72:	09 7f       	andi	r16, 0xF9	; 249
    fc74:	8f 36       	cpi	r24, 0x6F	; 111
    fc76:	91 f0       	breq	.+36     	; 0xfc9c <vfprintf+0x530>
    fc78:	18 f4       	brcc	.+6      	; 0xfc80 <vfprintf+0x514>
    fc7a:	88 35       	cpi	r24, 0x58	; 88
    fc7c:	59 f0       	breq	.+22     	; 0xfc94 <vfprintf+0x528>
    fc7e:	bc c0       	rjmp	.+376    	; 0xfdf8 <vfprintf+0x68c>
    fc80:	80 37       	cpi	r24, 0x70	; 112
    fc82:	19 f0       	breq	.+6      	; 0xfc8a <vfprintf+0x51e>
    fc84:	88 37       	cpi	r24, 0x78	; 120
    fc86:	11 f0       	breq	.+4      	; 0xfc8c <vfprintf+0x520>
    fc88:	b7 c0       	rjmp	.+366    	; 0xfdf8 <vfprintf+0x68c>
    fc8a:	00 61       	ori	r16, 0x10	; 16
    fc8c:	04 ff       	sbrs	r16, 4
    fc8e:	09 c0       	rjmp	.+18     	; 0xfca2 <vfprintf+0x536>
    fc90:	04 60       	ori	r16, 0x04	; 4
    fc92:	07 c0       	rjmp	.+14     	; 0xfca2 <vfprintf+0x536>
    fc94:	94 fe       	sbrs	r9, 4
    fc96:	08 c0       	rjmp	.+16     	; 0xfca8 <vfprintf+0x53c>
    fc98:	06 60       	ori	r16, 0x06	; 6
    fc9a:	06 c0       	rjmp	.+12     	; 0xfca8 <vfprintf+0x53c>
    fc9c:	28 e0       	ldi	r18, 0x08	; 8
    fc9e:	30 e0       	ldi	r19, 0x00	; 0
    fca0:	05 c0       	rjmp	.+10     	; 0xfcac <vfprintf+0x540>
    fca2:	20 e1       	ldi	r18, 0x10	; 16
    fca4:	30 e0       	ldi	r19, 0x00	; 0
    fca6:	02 c0       	rjmp	.+4      	; 0xfcac <vfprintf+0x540>
    fca8:	20 e1       	ldi	r18, 0x10	; 16
    fcaa:	32 e0       	ldi	r19, 0x02	; 2
    fcac:	56 01       	movw	r10, r12
    fcae:	07 ff       	sbrs	r16, 7
    fcb0:	09 c0       	rjmp	.+18     	; 0xfcc4 <vfprintf+0x558>
    fcb2:	84 e0       	ldi	r24, 0x04	; 4
    fcb4:	a8 0e       	add	r10, r24
    fcb6:	b1 1c       	adc	r11, r1
    fcb8:	f6 01       	movw	r30, r12
    fcba:	60 81       	ld	r22, Z
    fcbc:	71 81       	ldd	r23, Z+1	; 0x01
    fcbe:	82 81       	ldd	r24, Z+2	; 0x02
    fcc0:	93 81       	ldd	r25, Z+3	; 0x03
    fcc2:	08 c0       	rjmp	.+16     	; 0xfcd4 <vfprintf+0x568>
    fcc4:	f2 e0       	ldi	r31, 0x02	; 2
    fcc6:	af 0e       	add	r10, r31
    fcc8:	b1 1c       	adc	r11, r1
    fcca:	f6 01       	movw	r30, r12
    fccc:	60 81       	ld	r22, Z
    fcce:	71 81       	ldd	r23, Z+1	; 0x01
    fcd0:	80 e0       	ldi	r24, 0x00	; 0
    fcd2:	90 e0       	ldi	r25, 0x00	; 0
    fcd4:	a3 01       	movw	r20, r6
    fcd6:	8f d3       	rcall	.+1822   	; 0x103f6 <__ultoa_invert>
    fcd8:	c8 2e       	mov	r12, r24
    fcda:	c6 18       	sub	r12, r6
    fcdc:	0f 77       	andi	r16, 0x7F	; 127
    fcde:	90 2e       	mov	r9, r16
    fce0:	96 fe       	sbrs	r9, 6
    fce2:	0b c0       	rjmp	.+22     	; 0xfcfa <vfprintf+0x58e>
    fce4:	09 2d       	mov	r16, r9
    fce6:	0e 7f       	andi	r16, 0xFE	; 254
    fce8:	c1 16       	cp	r12, r17
    fcea:	50 f4       	brcc	.+20     	; 0xfd00 <vfprintf+0x594>
    fcec:	94 fe       	sbrs	r9, 4
    fcee:	0a c0       	rjmp	.+20     	; 0xfd04 <vfprintf+0x598>
    fcf0:	92 fc       	sbrc	r9, 2
    fcf2:	08 c0       	rjmp	.+16     	; 0xfd04 <vfprintf+0x598>
    fcf4:	09 2d       	mov	r16, r9
    fcf6:	0e 7e       	andi	r16, 0xEE	; 238
    fcf8:	05 c0       	rjmp	.+10     	; 0xfd04 <vfprintf+0x598>
    fcfa:	dc 2c       	mov	r13, r12
    fcfc:	09 2d       	mov	r16, r9
    fcfe:	03 c0       	rjmp	.+6      	; 0xfd06 <vfprintf+0x59a>
    fd00:	dc 2c       	mov	r13, r12
    fd02:	01 c0       	rjmp	.+2      	; 0xfd06 <vfprintf+0x59a>
    fd04:	d1 2e       	mov	r13, r17
    fd06:	04 ff       	sbrs	r16, 4
    fd08:	0d c0       	rjmp	.+26     	; 0xfd24 <vfprintf+0x5b8>
    fd0a:	fe 01       	movw	r30, r28
    fd0c:	ec 0d       	add	r30, r12
    fd0e:	f1 1d       	adc	r31, r1
    fd10:	80 81       	ld	r24, Z
    fd12:	80 33       	cpi	r24, 0x30	; 48
    fd14:	11 f4       	brne	.+4      	; 0xfd1a <vfprintf+0x5ae>
    fd16:	09 7e       	andi	r16, 0xE9	; 233
    fd18:	09 c0       	rjmp	.+18     	; 0xfd2c <vfprintf+0x5c0>
    fd1a:	02 ff       	sbrs	r16, 2
    fd1c:	06 c0       	rjmp	.+12     	; 0xfd2a <vfprintf+0x5be>
    fd1e:	d3 94       	inc	r13
    fd20:	d3 94       	inc	r13
    fd22:	04 c0       	rjmp	.+8      	; 0xfd2c <vfprintf+0x5c0>
    fd24:	80 2f       	mov	r24, r16
    fd26:	86 78       	andi	r24, 0x86	; 134
    fd28:	09 f0       	breq	.+2      	; 0xfd2c <vfprintf+0x5c0>
    fd2a:	d3 94       	inc	r13
    fd2c:	03 fd       	sbrc	r16, 3
    fd2e:	10 c0       	rjmp	.+32     	; 0xfd50 <vfprintf+0x5e4>
    fd30:	00 ff       	sbrs	r16, 0
    fd32:	06 c0       	rjmp	.+12     	; 0xfd40 <vfprintf+0x5d4>
    fd34:	1c 2d       	mov	r17, r12
    fd36:	d5 14       	cp	r13, r5
    fd38:	78 f4       	brcc	.+30     	; 0xfd58 <vfprintf+0x5ec>
    fd3a:	15 0d       	add	r17, r5
    fd3c:	1d 19       	sub	r17, r13
    fd3e:	0c c0       	rjmp	.+24     	; 0xfd58 <vfprintf+0x5ec>
    fd40:	d5 14       	cp	r13, r5
    fd42:	50 f4       	brcc	.+20     	; 0xfd58 <vfprintf+0x5ec>
    fd44:	b7 01       	movw	r22, r14
    fd46:	80 e2       	ldi	r24, 0x20	; 32
    fd48:	90 e0       	ldi	r25, 0x00	; 0
    fd4a:	ae d2       	rcall	.+1372   	; 0x102a8 <fputc>
    fd4c:	d3 94       	inc	r13
    fd4e:	f8 cf       	rjmp	.-16     	; 0xfd40 <vfprintf+0x5d4>
    fd50:	d5 14       	cp	r13, r5
    fd52:	10 f4       	brcc	.+4      	; 0xfd58 <vfprintf+0x5ec>
    fd54:	5d 18       	sub	r5, r13
    fd56:	01 c0       	rjmp	.+2      	; 0xfd5a <vfprintf+0x5ee>
    fd58:	51 2c       	mov	r5, r1
    fd5a:	04 ff       	sbrs	r16, 4
    fd5c:	0f c0       	rjmp	.+30     	; 0xfd7c <vfprintf+0x610>
    fd5e:	b7 01       	movw	r22, r14
    fd60:	80 e3       	ldi	r24, 0x30	; 48
    fd62:	90 e0       	ldi	r25, 0x00	; 0
    fd64:	a1 d2       	rcall	.+1346   	; 0x102a8 <fputc>
    fd66:	02 ff       	sbrs	r16, 2
    fd68:	16 c0       	rjmp	.+44     	; 0xfd96 <vfprintf+0x62a>
    fd6a:	01 fd       	sbrc	r16, 1
    fd6c:	03 c0       	rjmp	.+6      	; 0xfd74 <vfprintf+0x608>
    fd6e:	88 e7       	ldi	r24, 0x78	; 120
    fd70:	90 e0       	ldi	r25, 0x00	; 0
    fd72:	02 c0       	rjmp	.+4      	; 0xfd78 <vfprintf+0x60c>
    fd74:	88 e5       	ldi	r24, 0x58	; 88
    fd76:	90 e0       	ldi	r25, 0x00	; 0
    fd78:	b7 01       	movw	r22, r14
    fd7a:	0c c0       	rjmp	.+24     	; 0xfd94 <vfprintf+0x628>
    fd7c:	80 2f       	mov	r24, r16
    fd7e:	86 78       	andi	r24, 0x86	; 134
    fd80:	51 f0       	breq	.+20     	; 0xfd96 <vfprintf+0x62a>
    fd82:	01 ff       	sbrs	r16, 1
    fd84:	02 c0       	rjmp	.+4      	; 0xfd8a <vfprintf+0x61e>
    fd86:	8b e2       	ldi	r24, 0x2B	; 43
    fd88:	01 c0       	rjmp	.+2      	; 0xfd8c <vfprintf+0x620>
    fd8a:	80 e2       	ldi	r24, 0x20	; 32
    fd8c:	07 fd       	sbrc	r16, 7
    fd8e:	8d e2       	ldi	r24, 0x2D	; 45
    fd90:	b7 01       	movw	r22, r14
    fd92:	90 e0       	ldi	r25, 0x00	; 0
    fd94:	89 d2       	rcall	.+1298   	; 0x102a8 <fputc>
    fd96:	c1 16       	cp	r12, r17
    fd98:	30 f4       	brcc	.+12     	; 0xfda6 <vfprintf+0x63a>
    fd9a:	b7 01       	movw	r22, r14
    fd9c:	80 e3       	ldi	r24, 0x30	; 48
    fd9e:	90 e0       	ldi	r25, 0x00	; 0
    fda0:	83 d2       	rcall	.+1286   	; 0x102a8 <fputc>
    fda2:	11 50       	subi	r17, 0x01	; 1
    fda4:	f8 cf       	rjmp	.-16     	; 0xfd96 <vfprintf+0x62a>
    fda6:	ca 94       	dec	r12
    fda8:	f3 01       	movw	r30, r6
    fdaa:	ec 0d       	add	r30, r12
    fdac:	f1 1d       	adc	r31, r1
    fdae:	80 81       	ld	r24, Z
    fdb0:	b7 01       	movw	r22, r14
    fdb2:	90 e0       	ldi	r25, 0x00	; 0
    fdb4:	79 d2       	rcall	.+1266   	; 0x102a8 <fputc>
    fdb6:	c1 10       	cpse	r12, r1
    fdb8:	f6 cf       	rjmp	.-20     	; 0xfda6 <vfprintf+0x63a>
    fdba:	15 c0       	rjmp	.+42     	; 0xfde6 <vfprintf+0x67a>
    fdbc:	f4 e0       	ldi	r31, 0x04	; 4
    fdbe:	f5 15       	cp	r31, r5
    fdc0:	50 f5       	brcc	.+84     	; 0xfe16 <vfprintf+0x6aa>
    fdc2:	84 e0       	ldi	r24, 0x04	; 4
    fdc4:	58 1a       	sub	r5, r24
    fdc6:	93 fe       	sbrs	r9, 3
    fdc8:	1e c0       	rjmp	.+60     	; 0xfe06 <vfprintf+0x69a>
    fdca:	01 11       	cpse	r16, r1
    fdcc:	25 c0       	rjmp	.+74     	; 0xfe18 <vfprintf+0x6ac>
    fdce:	2c 85       	ldd	r18, Y+12	; 0x0c
    fdd0:	23 ff       	sbrs	r18, 3
    fdd2:	27 c0       	rjmp	.+78     	; 0xfe22 <vfprintf+0x6b6>
    fdd4:	0c ef       	ldi	r16, 0xFC	; 252
    fdd6:	11 e0       	ldi	r17, 0x01	; 1
    fdd8:	39 2d       	mov	r19, r9
    fdda:	30 71       	andi	r19, 0x10	; 16
    fddc:	93 2e       	mov	r9, r19
    fdde:	f8 01       	movw	r30, r16
    fde0:	84 91       	lpm	r24, Z
    fde2:	81 11       	cpse	r24, r1
    fde4:	21 c0       	rjmp	.+66     	; 0xfe28 <vfprintf+0x6bc>
    fde6:	55 20       	and	r5, r5
    fde8:	09 f4       	brne	.+2      	; 0xfdec <vfprintf+0x680>
    fdea:	fc cc       	rjmp	.-1544   	; 0xf7e4 <vfprintf+0x78>
    fdec:	b7 01       	movw	r22, r14
    fdee:	80 e2       	ldi	r24, 0x20	; 32
    fdf0:	90 e0       	ldi	r25, 0x00	; 0
    fdf2:	5a d2       	rcall	.+1204   	; 0x102a8 <fputc>
    fdf4:	5a 94       	dec	r5
    fdf6:	f7 cf       	rjmp	.-18     	; 0xfde6 <vfprintf+0x67a>
    fdf8:	f7 01       	movw	r30, r14
    fdfa:	86 81       	ldd	r24, Z+6	; 0x06
    fdfc:	97 81       	ldd	r25, Z+7	; 0x07
    fdfe:	23 c0       	rjmp	.+70     	; 0xfe46 <vfprintf+0x6da>
    fe00:	8f ef       	ldi	r24, 0xFF	; 255
    fe02:	9f ef       	ldi	r25, 0xFF	; 255
    fe04:	20 c0       	rjmp	.+64     	; 0xfe46 <vfprintf+0x6da>
    fe06:	b7 01       	movw	r22, r14
    fe08:	80 e2       	ldi	r24, 0x20	; 32
    fe0a:	90 e0       	ldi	r25, 0x00	; 0
    fe0c:	4d d2       	rcall	.+1178   	; 0x102a8 <fputc>
    fe0e:	5a 94       	dec	r5
    fe10:	51 10       	cpse	r5, r1
    fe12:	f9 cf       	rjmp	.-14     	; 0xfe06 <vfprintf+0x69a>
    fe14:	da cf       	rjmp	.-76     	; 0xfdca <vfprintf+0x65e>
    fe16:	51 2c       	mov	r5, r1
    fe18:	b7 01       	movw	r22, r14
    fe1a:	80 2f       	mov	r24, r16
    fe1c:	90 e0       	ldi	r25, 0x00	; 0
    fe1e:	44 d2       	rcall	.+1160   	; 0x102a8 <fputc>
    fe20:	d6 cf       	rjmp	.-84     	; 0xfdce <vfprintf+0x662>
    fe22:	00 e0       	ldi	r16, 0x00	; 0
    fe24:	12 e0       	ldi	r17, 0x02	; 2
    fe26:	d8 cf       	rjmp	.-80     	; 0xfdd8 <vfprintf+0x66c>
    fe28:	91 10       	cpse	r9, r1
    fe2a:	80 52       	subi	r24, 0x20	; 32
    fe2c:	b7 01       	movw	r22, r14
    fe2e:	90 e0       	ldi	r25, 0x00	; 0
    fe30:	3b d2       	rcall	.+1142   	; 0x102a8 <fputc>
    fe32:	0f 5f       	subi	r16, 0xFF	; 255
    fe34:	1f 4f       	sbci	r17, 0xFF	; 255
    fe36:	d3 cf       	rjmp	.-90     	; 0xfdde <vfprintf+0x672>
    fe38:	23 e0       	ldi	r18, 0x03	; 3
    fe3a:	25 15       	cp	r18, r5
    fe3c:	10 f4       	brcc	.+4      	; 0xfe42 <vfprintf+0x6d6>
    fe3e:	83 e0       	ldi	r24, 0x03	; 3
    fe40:	c1 cf       	rjmp	.-126    	; 0xfdc4 <vfprintf+0x658>
    fe42:	51 2c       	mov	r5, r1
    fe44:	c4 cf       	rjmp	.-120    	; 0xfdce <vfprintf+0x662>
    fe46:	60 96       	adiw	r28, 0x10	; 16
    fe48:	cd bf       	out	0x3d, r28	; 61
    fe4a:	de bf       	out	0x3e, r29	; 62
    fe4c:	df 91       	pop	r29
    fe4e:	cf 91       	pop	r28
    fe50:	1f 91       	pop	r17
    fe52:	0f 91       	pop	r16
    fe54:	ff 90       	pop	r15
    fe56:	ef 90       	pop	r14
    fe58:	df 90       	pop	r13
    fe5a:	cf 90       	pop	r12
    fe5c:	bf 90       	pop	r11
    fe5e:	af 90       	pop	r10
    fe60:	9f 90       	pop	r9
    fe62:	8f 90       	pop	r8
    fe64:	7f 90       	pop	r7
    fe66:	6f 90       	pop	r6
    fe68:	5f 90       	pop	r5
    fe6a:	4f 90       	pop	r4
    fe6c:	3f 90       	pop	r3
    fe6e:	2f 90       	pop	r2
    fe70:	08 95       	ret

0000fe72 <__mulsi3>:
    fe72:	db 01       	movw	r26, r22
    fe74:	8f 93       	push	r24
    fe76:	9f 93       	push	r25
    fe78:	63 d0       	rcall	.+198    	; 0xff40 <__muluhisi3>
    fe7a:	bf 91       	pop	r27
    fe7c:	af 91       	pop	r26
    fe7e:	a2 9f       	mul	r26, r18
    fe80:	80 0d       	add	r24, r0
    fe82:	91 1d       	adc	r25, r1
    fe84:	a3 9f       	mul	r26, r19
    fe86:	90 0d       	add	r25, r0
    fe88:	b2 9f       	mul	r27, r18
    fe8a:	90 0d       	add	r25, r0
    fe8c:	11 24       	eor	r1, r1
    fe8e:	08 95       	ret

0000fe90 <__udivmodhi4>:
    fe90:	aa 1b       	sub	r26, r26
    fe92:	bb 1b       	sub	r27, r27
    fe94:	51 e1       	ldi	r21, 0x11	; 17
    fe96:	07 c0       	rjmp	.+14     	; 0xfea6 <__udivmodhi4_ep>

0000fe98 <__udivmodhi4_loop>:
    fe98:	aa 1f       	adc	r26, r26
    fe9a:	bb 1f       	adc	r27, r27
    fe9c:	a6 17       	cp	r26, r22
    fe9e:	b7 07       	cpc	r27, r23
    fea0:	10 f0       	brcs	.+4      	; 0xfea6 <__udivmodhi4_ep>
    fea2:	a6 1b       	sub	r26, r22
    fea4:	b7 0b       	sbc	r27, r23

0000fea6 <__udivmodhi4_ep>:
    fea6:	88 1f       	adc	r24, r24
    fea8:	99 1f       	adc	r25, r25
    feaa:	5a 95       	dec	r21
    feac:	a9 f7       	brne	.-22     	; 0xfe98 <__udivmodhi4_loop>
    feae:	80 95       	com	r24
    feb0:	90 95       	com	r25
    feb2:	bc 01       	movw	r22, r24
    feb4:	cd 01       	movw	r24, r26
    feb6:	08 95       	ret

0000feb8 <__udivmodsi4>:
    feb8:	a1 e2       	ldi	r26, 0x21	; 33
    feba:	1a 2e       	mov	r1, r26
    febc:	aa 1b       	sub	r26, r26
    febe:	bb 1b       	sub	r27, r27
    fec0:	fd 01       	movw	r30, r26
    fec2:	0d c0       	rjmp	.+26     	; 0xfede <__udivmodsi4_ep>

0000fec4 <__udivmodsi4_loop>:
    fec4:	aa 1f       	adc	r26, r26
    fec6:	bb 1f       	adc	r27, r27
    fec8:	ee 1f       	adc	r30, r30
    feca:	ff 1f       	adc	r31, r31
    fecc:	a2 17       	cp	r26, r18
    fece:	b3 07       	cpc	r27, r19
    fed0:	e4 07       	cpc	r30, r20
    fed2:	f5 07       	cpc	r31, r21
    fed4:	20 f0       	brcs	.+8      	; 0xfede <__udivmodsi4_ep>
    fed6:	a2 1b       	sub	r26, r18
    fed8:	b3 0b       	sbc	r27, r19
    feda:	e4 0b       	sbc	r30, r20
    fedc:	f5 0b       	sbc	r31, r21

0000fede <__udivmodsi4_ep>:
    fede:	66 1f       	adc	r22, r22
    fee0:	77 1f       	adc	r23, r23
    fee2:	88 1f       	adc	r24, r24
    fee4:	99 1f       	adc	r25, r25
    fee6:	1a 94       	dec	r1
    fee8:	69 f7       	brne	.-38     	; 0xfec4 <__udivmodsi4_loop>
    feea:	60 95       	com	r22
    feec:	70 95       	com	r23
    feee:	80 95       	com	r24
    fef0:	90 95       	com	r25
    fef2:	9b 01       	movw	r18, r22
    fef4:	ac 01       	movw	r20, r24
    fef6:	bd 01       	movw	r22, r26
    fef8:	cf 01       	movw	r24, r30
    fefa:	08 95       	ret

0000fefc <__bswapsi2>:
    fefc:	69 27       	eor	r22, r25
    fefe:	96 27       	eor	r25, r22
    ff00:	69 27       	eor	r22, r25
    ff02:	78 27       	eor	r23, r24
    ff04:	87 27       	eor	r24, r23
    ff06:	78 27       	eor	r23, r24
    ff08:	08 95       	ret

0000ff0a <__mulhisi3>:
    ff0a:	05 d0       	rcall	.+10     	; 0xff16 <__umulhisi3>
    ff0c:	33 23       	and	r19, r19
    ff0e:	12 f4       	brpl	.+4      	; 0xff14 <__mulhisi3+0xa>
    ff10:	8a 1b       	sub	r24, r26
    ff12:	9b 0b       	sbc	r25, r27
    ff14:	10 c0       	rjmp	.+32     	; 0xff36 <__usmulhisi3_tail>

0000ff16 <__umulhisi3>:
    ff16:	a2 9f       	mul	r26, r18
    ff18:	b0 01       	movw	r22, r0
    ff1a:	b3 9f       	mul	r27, r19
    ff1c:	c0 01       	movw	r24, r0
    ff1e:	a3 9f       	mul	r26, r19
    ff20:	70 0d       	add	r23, r0
    ff22:	81 1d       	adc	r24, r1
    ff24:	11 24       	eor	r1, r1
    ff26:	91 1d       	adc	r25, r1
    ff28:	b2 9f       	mul	r27, r18
    ff2a:	70 0d       	add	r23, r0
    ff2c:	81 1d       	adc	r24, r1
    ff2e:	11 24       	eor	r1, r1
    ff30:	91 1d       	adc	r25, r1
    ff32:	08 95       	ret

0000ff34 <__usmulhisi3>:
    ff34:	f0 df       	rcall	.-32     	; 0xff16 <__umulhisi3>

0000ff36 <__usmulhisi3_tail>:
    ff36:	b7 ff       	sbrs	r27, 7
    ff38:	08 95       	ret
    ff3a:	82 1b       	sub	r24, r18
    ff3c:	93 0b       	sbc	r25, r19
    ff3e:	08 95       	ret

0000ff40 <__muluhisi3>:
    ff40:	ea df       	rcall	.-44     	; 0xff16 <__umulhisi3>
    ff42:	a5 9f       	mul	r26, r21
    ff44:	90 0d       	add	r25, r0
    ff46:	b4 9f       	mul	r27, r20
    ff48:	90 0d       	add	r25, r0
    ff4a:	a4 9f       	mul	r26, r20
    ff4c:	80 0d       	add	r24, r0
    ff4e:	91 1d       	adc	r25, r1
    ff50:	11 24       	eor	r1, r1
    ff52:	08 95       	ret

0000ff54 <__mulshisi3>:
    ff54:	b7 ff       	sbrs	r27, 7
    ff56:	f4 cf       	rjmp	.-24     	; 0xff40 <__muluhisi3>

0000ff58 <__mulohisi3>:
    ff58:	f3 df       	rcall	.-26     	; 0xff40 <__muluhisi3>
    ff5a:	82 1b       	sub	r24, r18
    ff5c:	93 0b       	sbc	r25, r19
    ff5e:	08 95       	ret

0000ff60 <__ftoa_engine>:
    ff60:	28 30       	cpi	r18, 0x08	; 8
    ff62:	08 f0       	brcs	.+2      	; 0xff66 <__ftoa_engine+0x6>
    ff64:	27 e0       	ldi	r18, 0x07	; 7
    ff66:	33 27       	eor	r19, r19
    ff68:	da 01       	movw	r26, r20
    ff6a:	99 0f       	add	r25, r25
    ff6c:	31 1d       	adc	r19, r1
    ff6e:	87 fd       	sbrc	r24, 7
    ff70:	91 60       	ori	r25, 0x01	; 1
    ff72:	00 96       	adiw	r24, 0x00	; 0
    ff74:	61 05       	cpc	r22, r1
    ff76:	71 05       	cpc	r23, r1
    ff78:	39 f4       	brne	.+14     	; 0xff88 <__ftoa_engine+0x28>
    ff7a:	32 60       	ori	r19, 0x02	; 2
    ff7c:	2e 5f       	subi	r18, 0xFE	; 254
    ff7e:	3d 93       	st	X+, r19
    ff80:	30 e3       	ldi	r19, 0x30	; 48
    ff82:	2a 95       	dec	r18
    ff84:	e1 f7       	brne	.-8      	; 0xff7e <__ftoa_engine+0x1e>
    ff86:	08 95       	ret
    ff88:	9f 3f       	cpi	r25, 0xFF	; 255
    ff8a:	30 f0       	brcs	.+12     	; 0xff98 <__ftoa_engine+0x38>
    ff8c:	80 38       	cpi	r24, 0x80	; 128
    ff8e:	71 05       	cpc	r23, r1
    ff90:	61 05       	cpc	r22, r1
    ff92:	09 f0       	breq	.+2      	; 0xff96 <__ftoa_engine+0x36>
    ff94:	3c 5f       	subi	r19, 0xFC	; 252
    ff96:	3c 5f       	subi	r19, 0xFC	; 252
    ff98:	3d 93       	st	X+, r19
    ff9a:	91 30       	cpi	r25, 0x01	; 1
    ff9c:	08 f0       	brcs	.+2      	; 0xffa0 <__DATA_REGION_LENGTH__>
    ff9e:	80 68       	ori	r24, 0x80	; 128
    ffa0:	91 1d       	adc	r25, r1
    ffa2:	df 93       	push	r29
    ffa4:	cf 93       	push	r28
    ffa6:	1f 93       	push	r17
    ffa8:	0f 93       	push	r16
    ffaa:	ff 92       	push	r15
    ffac:	ef 92       	push	r14
    ffae:	19 2f       	mov	r17, r25
    ffb0:	98 7f       	andi	r25, 0xF8	; 248
    ffb2:	96 95       	lsr	r25
    ffb4:	e9 2f       	mov	r30, r25
    ffb6:	96 95       	lsr	r25
    ffb8:	96 95       	lsr	r25
    ffba:	e9 0f       	add	r30, r25
    ffbc:	ff 27       	eor	r31, r31
    ffbe:	e2 5a       	subi	r30, 0xA2	; 162
    ffc0:	fd 4f       	sbci	r31, 0xFD	; 253
    ffc2:	99 27       	eor	r25, r25
    ffc4:	33 27       	eor	r19, r19
    ffc6:	ee 24       	eor	r14, r14
    ffc8:	ff 24       	eor	r15, r15
    ffca:	a7 01       	movw	r20, r14
    ffcc:	e7 01       	movw	r28, r14
    ffce:	05 90       	lpm	r0, Z+
    ffd0:	08 94       	sec
    ffd2:	07 94       	ror	r0
    ffd4:	28 f4       	brcc	.+10     	; 0xffe0 <__DATA_REGION_LENGTH__+0x40>
    ffd6:	36 0f       	add	r19, r22
    ffd8:	e7 1e       	adc	r14, r23
    ffda:	f8 1e       	adc	r15, r24
    ffdc:	49 1f       	adc	r20, r25
    ffde:	51 1d       	adc	r21, r1
    ffe0:	66 0f       	add	r22, r22
    ffe2:	77 1f       	adc	r23, r23
    ffe4:	88 1f       	adc	r24, r24
    ffe6:	99 1f       	adc	r25, r25
    ffe8:	06 94       	lsr	r0
    ffea:	a1 f7       	brne	.-24     	; 0xffd4 <__DATA_REGION_LENGTH__+0x34>
    ffec:	05 90       	lpm	r0, Z+
    ffee:	07 94       	ror	r0
    fff0:	28 f4       	brcc	.+10     	; 0xfffc <__DATA_REGION_LENGTH__+0x5c>
    fff2:	e7 0e       	add	r14, r23
    fff4:	f8 1e       	adc	r15, r24
    fff6:	49 1f       	adc	r20, r25
    fff8:	56 1f       	adc	r21, r22
    fffa:	c1 1d       	adc	r28, r1
    fffc:	77 0f       	add	r23, r23
    fffe:	88 1f       	adc	r24, r24
   10000:	99 1f       	adc	r25, r25
   10002:	66 1f       	adc	r22, r22
   10004:	06 94       	lsr	r0
   10006:	a1 f7       	brne	.-24     	; 0xfff0 <__DATA_REGION_LENGTH__+0x50>
   10008:	05 90       	lpm	r0, Z+
   1000a:	07 94       	ror	r0
   1000c:	28 f4       	brcc	.+10     	; 0x10018 <__EEPROM_REGION_LENGTH__+0x18>
   1000e:	f8 0e       	add	r15, r24
   10010:	49 1f       	adc	r20, r25
   10012:	56 1f       	adc	r21, r22
   10014:	c7 1f       	adc	r28, r23
   10016:	d1 1d       	adc	r29, r1
   10018:	88 0f       	add	r24, r24
   1001a:	99 1f       	adc	r25, r25
   1001c:	66 1f       	adc	r22, r22
   1001e:	77 1f       	adc	r23, r23
   10020:	06 94       	lsr	r0
   10022:	a1 f7       	brne	.-24     	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
   10024:	05 90       	lpm	r0, Z+
   10026:	07 94       	ror	r0
   10028:	20 f4       	brcc	.+8      	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
   1002a:	49 0f       	add	r20, r25
   1002c:	56 1f       	adc	r21, r22
   1002e:	c7 1f       	adc	r28, r23
   10030:	d8 1f       	adc	r29, r24
   10032:	99 0f       	add	r25, r25
   10034:	66 1f       	adc	r22, r22
   10036:	77 1f       	adc	r23, r23
   10038:	88 1f       	adc	r24, r24
   1003a:	06 94       	lsr	r0
   1003c:	a9 f7       	brne	.-22     	; 0x10028 <__EEPROM_REGION_LENGTH__+0x28>
   1003e:	84 91       	lpm	r24, Z
   10040:	10 95       	com	r17
   10042:	17 70       	andi	r17, 0x07	; 7
   10044:	41 f0       	breq	.+16     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
   10046:	d6 95       	lsr	r29
   10048:	c7 95       	ror	r28
   1004a:	57 95       	ror	r21
   1004c:	47 95       	ror	r20
   1004e:	f7 94       	ror	r15
   10050:	e7 94       	ror	r14
   10052:	1a 95       	dec	r17
   10054:	c1 f7       	brne	.-16     	; 0x10046 <__EEPROM_REGION_LENGTH__+0x46>
   10056:	e4 e0       	ldi	r30, 0x04	; 4
   10058:	f2 e0       	ldi	r31, 0x02	; 2
   1005a:	68 94       	set
   1005c:	15 90       	lpm	r1, Z+
   1005e:	15 91       	lpm	r17, Z+
   10060:	35 91       	lpm	r19, Z+
   10062:	65 91       	lpm	r22, Z+
   10064:	95 91       	lpm	r25, Z+
   10066:	05 90       	lpm	r0, Z+
   10068:	7f e2       	ldi	r23, 0x2F	; 47
   1006a:	73 95       	inc	r23
   1006c:	e1 18       	sub	r14, r1
   1006e:	f1 0a       	sbc	r15, r17
   10070:	43 0b       	sbc	r20, r19
   10072:	56 0b       	sbc	r21, r22
   10074:	c9 0b       	sbc	r28, r25
   10076:	d0 09       	sbc	r29, r0
   10078:	c0 f7       	brcc	.-16     	; 0x1006a <__EEPROM_REGION_LENGTH__+0x6a>
   1007a:	e1 0c       	add	r14, r1
   1007c:	f1 1e       	adc	r15, r17
   1007e:	43 1f       	adc	r20, r19
   10080:	56 1f       	adc	r21, r22
   10082:	c9 1f       	adc	r28, r25
   10084:	d0 1d       	adc	r29, r0
   10086:	7e f4       	brtc	.+30     	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
   10088:	70 33       	cpi	r23, 0x30	; 48
   1008a:	11 f4       	brne	.+4      	; 0x10090 <__EEPROM_REGION_LENGTH__+0x90>
   1008c:	8a 95       	dec	r24
   1008e:	e6 cf       	rjmp	.-52     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10090:	e8 94       	clt
   10092:	01 50       	subi	r16, 0x01	; 1
   10094:	30 f0       	brcs	.+12     	; 0x100a2 <__EEPROM_REGION_LENGTH__+0xa2>
   10096:	08 0f       	add	r16, r24
   10098:	0a f4       	brpl	.+2      	; 0x1009c <__EEPROM_REGION_LENGTH__+0x9c>
   1009a:	00 27       	eor	r16, r16
   1009c:	02 17       	cp	r16, r18
   1009e:	08 f4       	brcc	.+2      	; 0x100a2 <__EEPROM_REGION_LENGTH__+0xa2>
   100a0:	20 2f       	mov	r18, r16
   100a2:	23 95       	inc	r18
   100a4:	02 2f       	mov	r16, r18
   100a6:	7a 33       	cpi	r23, 0x3A	; 58
   100a8:	28 f0       	brcs	.+10     	; 0x100b4 <__EEPROM_REGION_LENGTH__+0xb4>
   100aa:	79 e3       	ldi	r23, 0x39	; 57
   100ac:	7d 93       	st	X+, r23
   100ae:	2a 95       	dec	r18
   100b0:	e9 f7       	brne	.-6      	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
   100b2:	10 c0       	rjmp	.+32     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
   100b4:	7d 93       	st	X+, r23
   100b6:	2a 95       	dec	r18
   100b8:	89 f6       	brne	.-94     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   100ba:	06 94       	lsr	r0
   100bc:	97 95       	ror	r25
   100be:	67 95       	ror	r22
   100c0:	37 95       	ror	r19
   100c2:	17 95       	ror	r17
   100c4:	17 94       	ror	r1
   100c6:	e1 18       	sub	r14, r1
   100c8:	f1 0a       	sbc	r15, r17
   100ca:	43 0b       	sbc	r20, r19
   100cc:	56 0b       	sbc	r21, r22
   100ce:	c9 0b       	sbc	r28, r25
   100d0:	d0 09       	sbc	r29, r0
   100d2:	98 f0       	brcs	.+38     	; 0x100fa <__EEPROM_REGION_LENGTH__+0xfa>
   100d4:	23 95       	inc	r18
   100d6:	7e 91       	ld	r23, -X
   100d8:	73 95       	inc	r23
   100da:	7a 33       	cpi	r23, 0x3A	; 58
   100dc:	08 f0       	brcs	.+2      	; 0x100e0 <__EEPROM_REGION_LENGTH__+0xe0>
   100de:	70 e3       	ldi	r23, 0x30	; 48
   100e0:	7c 93       	st	X, r23
   100e2:	20 13       	cpse	r18, r16
   100e4:	b8 f7       	brcc	.-18     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
   100e6:	7e 91       	ld	r23, -X
   100e8:	70 61       	ori	r23, 0x10	; 16
   100ea:	7d 93       	st	X+, r23
   100ec:	30 f0       	brcs	.+12     	; 0x100fa <__EEPROM_REGION_LENGTH__+0xfa>
   100ee:	83 95       	inc	r24
   100f0:	71 e3       	ldi	r23, 0x31	; 49
   100f2:	7d 93       	st	X+, r23
   100f4:	70 e3       	ldi	r23, 0x30	; 48
   100f6:	2a 95       	dec	r18
   100f8:	e1 f7       	brne	.-8      	; 0x100f2 <__EEPROM_REGION_LENGTH__+0xf2>
   100fa:	11 24       	eor	r1, r1
   100fc:	ef 90       	pop	r14
   100fe:	ff 90       	pop	r15
   10100:	0f 91       	pop	r16
   10102:	1f 91       	pop	r17
   10104:	cf 91       	pop	r28
   10106:	df 91       	pop	r29
   10108:	99 27       	eor	r25, r25
   1010a:	87 fd       	sbrc	r24, 7
   1010c:	90 95       	com	r25
   1010e:	08 95       	ret

00010110 <strnlen_P>:
   10110:	fc 01       	movw	r30, r24
   10112:	05 90       	lpm	r0, Z+
   10114:	61 50       	subi	r22, 0x01	; 1
   10116:	70 40       	sbci	r23, 0x00	; 0
   10118:	01 10       	cpse	r0, r1
   1011a:	d8 f7       	brcc	.-10     	; 0x10112 <strnlen_P+0x2>
   1011c:	80 95       	com	r24
   1011e:	90 95       	com	r25
   10120:	8e 0f       	add	r24, r30
   10122:	9f 1f       	adc	r25, r31
   10124:	08 95       	ret

00010126 <memcpy>:
   10126:	fb 01       	movw	r30, r22
   10128:	dc 01       	movw	r26, r24
   1012a:	02 c0       	rjmp	.+4      	; 0x10130 <memcpy+0xa>
   1012c:	01 90       	ld	r0, Z+
   1012e:	0d 92       	st	X+, r0
   10130:	41 50       	subi	r20, 0x01	; 1
   10132:	50 40       	sbci	r21, 0x00	; 0
   10134:	d8 f7       	brcc	.-10     	; 0x1012c <memcpy+0x6>
   10136:	08 95       	ret

00010138 <memset>:
   10138:	dc 01       	movw	r26, r24
   1013a:	01 c0       	rjmp	.+2      	; 0x1013e <memset+0x6>
   1013c:	6d 93       	st	X+, r22
   1013e:	41 50       	subi	r20, 0x01	; 1
   10140:	50 40       	sbci	r21, 0x00	; 0
   10142:	e0 f7       	brcc	.-8      	; 0x1013c <memset+0x4>
   10144:	08 95       	ret

00010146 <strncat>:
   10146:	fb 01       	movw	r30, r22
   10148:	dc 01       	movw	r26, r24
   1014a:	0d 90       	ld	r0, X+
   1014c:	00 20       	and	r0, r0
   1014e:	e9 f7       	brne	.-6      	; 0x1014a <strncat+0x4>
   10150:	11 97       	sbiw	r26, 0x01	; 1
   10152:	41 50       	subi	r20, 0x01	; 1
   10154:	50 40       	sbci	r21, 0x00	; 0
   10156:	28 f0       	brcs	.+10     	; 0x10162 <strncat+0x1c>
   10158:	01 90       	ld	r0, Z+
   1015a:	00 20       	and	r0, r0
   1015c:	0d 92       	st	X+, r0
   1015e:	c9 f7       	brne	.-14     	; 0x10152 <strncat+0xc>
   10160:	08 95       	ret
   10162:	1c 92       	st	X, r1
   10164:	08 95       	ret

00010166 <strncpy>:
   10166:	fb 01       	movw	r30, r22
   10168:	dc 01       	movw	r26, r24
   1016a:	41 50       	subi	r20, 0x01	; 1
   1016c:	50 40       	sbci	r21, 0x00	; 0
   1016e:	48 f0       	brcs	.+18     	; 0x10182 <strncpy+0x1c>
   10170:	01 90       	ld	r0, Z+
   10172:	0d 92       	st	X+, r0
   10174:	00 20       	and	r0, r0
   10176:	c9 f7       	brne	.-14     	; 0x1016a <strncpy+0x4>
   10178:	01 c0       	rjmp	.+2      	; 0x1017c <strncpy+0x16>
   1017a:	1d 92       	st	X+, r1
   1017c:	41 50       	subi	r20, 0x01	; 1
   1017e:	50 40       	sbci	r21, 0x00	; 0
   10180:	e0 f7       	brcc	.-8      	; 0x1017a <strncpy+0x14>
   10182:	08 95       	ret

00010184 <strnlen>:
   10184:	fc 01       	movw	r30, r24
   10186:	61 50       	subi	r22, 0x01	; 1
   10188:	70 40       	sbci	r23, 0x00	; 0
   1018a:	01 90       	ld	r0, Z+
   1018c:	01 10       	cpse	r0, r1
   1018e:	d8 f7       	brcc	.-10     	; 0x10186 <strnlen+0x2>
   10190:	80 95       	com	r24
   10192:	90 95       	com	r25
   10194:	8e 0f       	add	r24, r30
   10196:	9f 1f       	adc	r25, r31
   10198:	08 95       	ret

0001019a <strstr>:
   1019a:	fb 01       	movw	r30, r22
   1019c:	51 91       	ld	r21, Z+
   1019e:	55 23       	and	r21, r21
   101a0:	a9 f0       	breq	.+42     	; 0x101cc <strstr+0x32>
   101a2:	bf 01       	movw	r22, r30
   101a4:	dc 01       	movw	r26, r24
   101a6:	4d 91       	ld	r20, X+
   101a8:	45 17       	cp	r20, r21
   101aa:	41 11       	cpse	r20, r1
   101ac:	e1 f7       	brne	.-8      	; 0x101a6 <strstr+0xc>
   101ae:	59 f4       	brne	.+22     	; 0x101c6 <strstr+0x2c>
   101b0:	cd 01       	movw	r24, r26
   101b2:	01 90       	ld	r0, Z+
   101b4:	00 20       	and	r0, r0
   101b6:	49 f0       	breq	.+18     	; 0x101ca <strstr+0x30>
   101b8:	4d 91       	ld	r20, X+
   101ba:	40 15       	cp	r20, r0
   101bc:	41 11       	cpse	r20, r1
   101be:	c9 f3       	breq	.-14     	; 0x101b2 <strstr+0x18>
   101c0:	fb 01       	movw	r30, r22
   101c2:	41 11       	cpse	r20, r1
   101c4:	ef cf       	rjmp	.-34     	; 0x101a4 <strstr+0xa>
   101c6:	81 e0       	ldi	r24, 0x01	; 1
   101c8:	90 e0       	ldi	r25, 0x00	; 0
   101ca:	01 97       	sbiw	r24, 0x01	; 1
   101cc:	08 95       	ret

000101ce <__itoa_ncheck>:
   101ce:	bb 27       	eor	r27, r27
   101d0:	4a 30       	cpi	r20, 0x0A	; 10
   101d2:	31 f4       	brne	.+12     	; 0x101e0 <__itoa_ncheck+0x12>
   101d4:	99 23       	and	r25, r25
   101d6:	22 f4       	brpl	.+8      	; 0x101e0 <__itoa_ncheck+0x12>
   101d8:	bd e2       	ldi	r27, 0x2D	; 45
   101da:	90 95       	com	r25
   101dc:	81 95       	neg	r24
   101de:	9f 4f       	sbci	r25, 0xFF	; 255
   101e0:	01 c0       	rjmp	.+2      	; 0x101e4 <__utoa_common>

000101e2 <__utoa_ncheck>:
   101e2:	bb 27       	eor	r27, r27

000101e4 <__utoa_common>:
   101e4:	fb 01       	movw	r30, r22
   101e6:	55 27       	eor	r21, r21
   101e8:	aa 27       	eor	r26, r26
   101ea:	88 0f       	add	r24, r24
   101ec:	99 1f       	adc	r25, r25
   101ee:	aa 1f       	adc	r26, r26
   101f0:	a4 17       	cp	r26, r20
   101f2:	10 f0       	brcs	.+4      	; 0x101f8 <__utoa_common+0x14>
   101f4:	a4 1b       	sub	r26, r20
   101f6:	83 95       	inc	r24
   101f8:	50 51       	subi	r21, 0x10	; 16
   101fa:	b9 f7       	brne	.-18     	; 0x101ea <__utoa_common+0x6>
   101fc:	a0 5d       	subi	r26, 0xD0	; 208
   101fe:	aa 33       	cpi	r26, 0x3A	; 58
   10200:	08 f0       	brcs	.+2      	; 0x10204 <__utoa_common+0x20>
   10202:	a9 5d       	subi	r26, 0xD9	; 217
   10204:	a1 93       	st	Z+, r26
   10206:	00 97       	sbiw	r24, 0x00	; 0
   10208:	79 f7       	brne	.-34     	; 0x101e8 <__utoa_common+0x4>
   1020a:	b1 11       	cpse	r27, r1
   1020c:	b1 93       	st	Z+, r27
   1020e:	11 92       	st	Z+, r1
   10210:	cb 01       	movw	r24, r22
   10212:	8a c2       	rjmp	.+1300   	; 0x10728 <strrev>

00010214 <fdevopen>:
   10214:	0f 93       	push	r16
   10216:	1f 93       	push	r17
   10218:	cf 93       	push	r28
   1021a:	df 93       	push	r29
   1021c:	00 97       	sbiw	r24, 0x00	; 0
   1021e:	31 f4       	brne	.+12     	; 0x1022c <fdevopen+0x18>
   10220:	61 15       	cp	r22, r1
   10222:	71 05       	cpc	r23, r1
   10224:	19 f4       	brne	.+6      	; 0x1022c <fdevopen+0x18>
   10226:	80 e0       	ldi	r24, 0x00	; 0
   10228:	90 e0       	ldi	r25, 0x00	; 0
   1022a:	39 c0       	rjmp	.+114    	; 0x1029e <fdevopen+0x8a>
   1022c:	8b 01       	movw	r16, r22
   1022e:	ec 01       	movw	r28, r24
   10230:	6e e0       	ldi	r22, 0x0E	; 14
   10232:	70 e0       	ldi	r23, 0x00	; 0
   10234:	81 e0       	ldi	r24, 0x01	; 1
   10236:	90 e0       	ldi	r25, 0x00	; 0
   10238:	3c d1       	rcall	.+632    	; 0x104b2 <calloc>
   1023a:	fc 01       	movw	r30, r24
   1023c:	89 2b       	or	r24, r25
   1023e:	99 f3       	breq	.-26     	; 0x10226 <fdevopen+0x12>
   10240:	80 e8       	ldi	r24, 0x80	; 128
   10242:	83 83       	std	Z+3, r24	; 0x03
   10244:	01 15       	cp	r16, r1
   10246:	11 05       	cpc	r17, r1
   10248:	71 f0       	breq	.+28     	; 0x10266 <fdevopen+0x52>
   1024a:	02 87       	std	Z+10, r16	; 0x0a
   1024c:	13 87       	std	Z+11, r17	; 0x0b
   1024e:	81 e8       	ldi	r24, 0x81	; 129
   10250:	83 83       	std	Z+3, r24	; 0x03
   10252:	80 91 e8 31 	lds	r24, 0x31E8	; 0x8031e8 <__iob>
   10256:	90 91 e9 31 	lds	r25, 0x31E9	; 0x8031e9 <__iob+0x1>
   1025a:	89 2b       	or	r24, r25
   1025c:	21 f4       	brne	.+8      	; 0x10266 <fdevopen+0x52>
   1025e:	e0 93 e8 31 	sts	0x31E8, r30	; 0x8031e8 <__iob>
   10262:	f0 93 e9 31 	sts	0x31E9, r31	; 0x8031e9 <__iob+0x1>
   10266:	20 97       	sbiw	r28, 0x00	; 0
   10268:	c9 f0       	breq	.+50     	; 0x1029c <fdevopen+0x88>
   1026a:	c0 87       	std	Z+8, r28	; 0x08
   1026c:	d1 87       	std	Z+9, r29	; 0x09
   1026e:	83 81       	ldd	r24, Z+3	; 0x03
   10270:	82 60       	ori	r24, 0x02	; 2
   10272:	83 83       	std	Z+3, r24	; 0x03
   10274:	80 91 ea 31 	lds	r24, 0x31EA	; 0x8031ea <__iob+0x2>
   10278:	90 91 eb 31 	lds	r25, 0x31EB	; 0x8031eb <__iob+0x3>
   1027c:	89 2b       	or	r24, r25
   1027e:	71 f4       	brne	.+28     	; 0x1029c <fdevopen+0x88>
   10280:	e0 93 ea 31 	sts	0x31EA, r30	; 0x8031ea <__iob+0x2>
   10284:	f0 93 eb 31 	sts	0x31EB, r31	; 0x8031eb <__iob+0x3>
   10288:	80 91 ec 31 	lds	r24, 0x31EC	; 0x8031ec <__iob+0x4>
   1028c:	90 91 ed 31 	lds	r25, 0x31ED	; 0x8031ed <__iob+0x5>
   10290:	89 2b       	or	r24, r25
   10292:	21 f4       	brne	.+8      	; 0x1029c <fdevopen+0x88>
   10294:	e0 93 ec 31 	sts	0x31EC, r30	; 0x8031ec <__iob+0x4>
   10298:	f0 93 ed 31 	sts	0x31ED, r31	; 0x8031ed <__iob+0x5>
   1029c:	cf 01       	movw	r24, r30
   1029e:	df 91       	pop	r29
   102a0:	cf 91       	pop	r28
   102a2:	1f 91       	pop	r17
   102a4:	0f 91       	pop	r16
   102a6:	08 95       	ret

000102a8 <fputc>:
   102a8:	0f 93       	push	r16
   102aa:	1f 93       	push	r17
   102ac:	cf 93       	push	r28
   102ae:	df 93       	push	r29
   102b0:	fb 01       	movw	r30, r22
   102b2:	23 81       	ldd	r18, Z+3	; 0x03
   102b4:	21 fd       	sbrc	r18, 1
   102b6:	03 c0       	rjmp	.+6      	; 0x102be <fputc+0x16>
   102b8:	8f ef       	ldi	r24, 0xFF	; 255
   102ba:	9f ef       	ldi	r25, 0xFF	; 255
   102bc:	2c c0       	rjmp	.+88     	; 0x10316 <fputc+0x6e>
   102be:	22 ff       	sbrs	r18, 2
   102c0:	16 c0       	rjmp	.+44     	; 0x102ee <fputc+0x46>
   102c2:	46 81       	ldd	r20, Z+6	; 0x06
   102c4:	57 81       	ldd	r21, Z+7	; 0x07
   102c6:	24 81       	ldd	r18, Z+4	; 0x04
   102c8:	35 81       	ldd	r19, Z+5	; 0x05
   102ca:	42 17       	cp	r20, r18
   102cc:	53 07       	cpc	r21, r19
   102ce:	44 f4       	brge	.+16     	; 0x102e0 <fputc+0x38>
   102d0:	a0 81       	ld	r26, Z
   102d2:	b1 81       	ldd	r27, Z+1	; 0x01
   102d4:	9d 01       	movw	r18, r26
   102d6:	2f 5f       	subi	r18, 0xFF	; 255
   102d8:	3f 4f       	sbci	r19, 0xFF	; 255
   102da:	20 83       	st	Z, r18
   102dc:	31 83       	std	Z+1, r19	; 0x01
   102de:	8c 93       	st	X, r24
   102e0:	26 81       	ldd	r18, Z+6	; 0x06
   102e2:	37 81       	ldd	r19, Z+7	; 0x07
   102e4:	2f 5f       	subi	r18, 0xFF	; 255
   102e6:	3f 4f       	sbci	r19, 0xFF	; 255
   102e8:	26 83       	std	Z+6, r18	; 0x06
   102ea:	37 83       	std	Z+7, r19	; 0x07
   102ec:	14 c0       	rjmp	.+40     	; 0x10316 <fputc+0x6e>
   102ee:	8b 01       	movw	r16, r22
   102f0:	ec 01       	movw	r28, r24
   102f2:	fb 01       	movw	r30, r22
   102f4:	00 84       	ldd	r0, Z+8	; 0x08
   102f6:	f1 85       	ldd	r31, Z+9	; 0x09
   102f8:	e0 2d       	mov	r30, r0
   102fa:	19 95       	eicall
   102fc:	89 2b       	or	r24, r25
   102fe:	e1 f6       	brne	.-72     	; 0x102b8 <fputc+0x10>
   10300:	d8 01       	movw	r26, r16
   10302:	16 96       	adiw	r26, 0x06	; 6
   10304:	8d 91       	ld	r24, X+
   10306:	9c 91       	ld	r25, X
   10308:	17 97       	sbiw	r26, 0x07	; 7
   1030a:	01 96       	adiw	r24, 0x01	; 1
   1030c:	16 96       	adiw	r26, 0x06	; 6
   1030e:	8d 93       	st	X+, r24
   10310:	9c 93       	st	X, r25
   10312:	17 97       	sbiw	r26, 0x07	; 7
   10314:	ce 01       	movw	r24, r28
   10316:	df 91       	pop	r29
   10318:	cf 91       	pop	r28
   1031a:	1f 91       	pop	r17
   1031c:	0f 91       	pop	r16
   1031e:	08 95       	ret

00010320 <printf>:
   10320:	cf 93       	push	r28
   10322:	df 93       	push	r29
   10324:	cd b7       	in	r28, 0x3d	; 61
   10326:	de b7       	in	r29, 0x3e	; 62
   10328:	ae 01       	movw	r20, r28
   1032a:	4a 5f       	subi	r20, 0xFA	; 250
   1032c:	5f 4f       	sbci	r21, 0xFF	; 255
   1032e:	fa 01       	movw	r30, r20
   10330:	61 91       	ld	r22, Z+
   10332:	71 91       	ld	r23, Z+
   10334:	af 01       	movw	r20, r30
   10336:	80 91 ea 31 	lds	r24, 0x31EA	; 0x8031ea <__iob+0x2>
   1033a:	90 91 eb 31 	lds	r25, 0x31EB	; 0x8031eb <__iob+0x3>
   1033e:	16 da       	rcall	.-3028   	; 0xf76c <vfprintf>
   10340:	df 91       	pop	r29
   10342:	cf 91       	pop	r28
   10344:	08 95       	ret

00010346 <puts>:
   10346:	0f 93       	push	r16
   10348:	1f 93       	push	r17
   1034a:	cf 93       	push	r28
   1034c:	df 93       	push	r29
   1034e:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <__iob+0x2>
   10352:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <__iob+0x3>
   10356:	23 81       	ldd	r18, Z+3	; 0x03
   10358:	21 ff       	sbrs	r18, 1
   1035a:	1b c0       	rjmp	.+54     	; 0x10392 <puts+0x4c>
   1035c:	8c 01       	movw	r16, r24
   1035e:	d0 e0       	ldi	r29, 0x00	; 0
   10360:	c0 e0       	ldi	r28, 0x00	; 0
   10362:	f8 01       	movw	r30, r16
   10364:	81 91       	ld	r24, Z+
   10366:	8f 01       	movw	r16, r30
   10368:	60 91 ea 31 	lds	r22, 0x31EA	; 0x8031ea <__iob+0x2>
   1036c:	70 91 eb 31 	lds	r23, 0x31EB	; 0x8031eb <__iob+0x3>
   10370:	db 01       	movw	r26, r22
   10372:	18 96       	adiw	r26, 0x08	; 8
   10374:	ed 91       	ld	r30, X+
   10376:	fc 91       	ld	r31, X
   10378:	19 97       	sbiw	r26, 0x09	; 9
   1037a:	88 23       	and	r24, r24
   1037c:	31 f0       	breq	.+12     	; 0x1038a <puts+0x44>
   1037e:	19 95       	eicall
   10380:	89 2b       	or	r24, r25
   10382:	79 f3       	breq	.-34     	; 0x10362 <puts+0x1c>
   10384:	df ef       	ldi	r29, 0xFF	; 255
   10386:	cf ef       	ldi	r28, 0xFF	; 255
   10388:	ec cf       	rjmp	.-40     	; 0x10362 <puts+0x1c>
   1038a:	8a e0       	ldi	r24, 0x0A	; 10
   1038c:	19 95       	eicall
   1038e:	89 2b       	or	r24, r25
   10390:	19 f0       	breq	.+6      	; 0x10398 <puts+0x52>
   10392:	8f ef       	ldi	r24, 0xFF	; 255
   10394:	9f ef       	ldi	r25, 0xFF	; 255
   10396:	02 c0       	rjmp	.+4      	; 0x1039c <puts+0x56>
   10398:	8d 2f       	mov	r24, r29
   1039a:	9c 2f       	mov	r25, r28
   1039c:	df 91       	pop	r29
   1039e:	cf 91       	pop	r28
   103a0:	1f 91       	pop	r17
   103a2:	0f 91       	pop	r16
   103a4:	08 95       	ret

000103a6 <sprintf>:
   103a6:	0f 93       	push	r16
   103a8:	1f 93       	push	r17
   103aa:	cf 93       	push	r28
   103ac:	df 93       	push	r29
   103ae:	cd b7       	in	r28, 0x3d	; 61
   103b0:	de b7       	in	r29, 0x3e	; 62
   103b2:	2e 97       	sbiw	r28, 0x0e	; 14
   103b4:	cd bf       	out	0x3d, r28	; 61
   103b6:	de bf       	out	0x3e, r29	; 62
   103b8:	0e 89       	ldd	r16, Y+22	; 0x16
   103ba:	1f 89       	ldd	r17, Y+23	; 0x17
   103bc:	86 e0       	ldi	r24, 0x06	; 6
   103be:	8c 83       	std	Y+4, r24	; 0x04
   103c0:	09 83       	std	Y+1, r16	; 0x01
   103c2:	1a 83       	std	Y+2, r17	; 0x02
   103c4:	8f ef       	ldi	r24, 0xFF	; 255
   103c6:	9f e7       	ldi	r25, 0x7F	; 127
   103c8:	8d 83       	std	Y+5, r24	; 0x05
   103ca:	9e 83       	std	Y+6, r25	; 0x06
   103cc:	ae 01       	movw	r20, r28
   103ce:	46 5e       	subi	r20, 0xE6	; 230
   103d0:	5f 4f       	sbci	r21, 0xFF	; 255
   103d2:	68 8d       	ldd	r22, Y+24	; 0x18
   103d4:	79 8d       	ldd	r23, Y+25	; 0x19
   103d6:	ce 01       	movw	r24, r28
   103d8:	01 96       	adiw	r24, 0x01	; 1
   103da:	c8 d9       	rcall	.-3184   	; 0xf76c <vfprintf>
   103dc:	ef 81       	ldd	r30, Y+7	; 0x07
   103de:	f8 85       	ldd	r31, Y+8	; 0x08
   103e0:	e0 0f       	add	r30, r16
   103e2:	f1 1f       	adc	r31, r17
   103e4:	10 82       	st	Z, r1
   103e6:	2e 96       	adiw	r28, 0x0e	; 14
   103e8:	cd bf       	out	0x3d, r28	; 61
   103ea:	de bf       	out	0x3e, r29	; 62
   103ec:	df 91       	pop	r29
   103ee:	cf 91       	pop	r28
   103f0:	1f 91       	pop	r17
   103f2:	0f 91       	pop	r16
   103f4:	08 95       	ret

000103f6 <__ultoa_invert>:
   103f6:	fa 01       	movw	r30, r20
   103f8:	aa 27       	eor	r26, r26
   103fa:	28 30       	cpi	r18, 0x08	; 8
   103fc:	51 f1       	breq	.+84     	; 0x10452 <__ultoa_invert+0x5c>
   103fe:	20 31       	cpi	r18, 0x10	; 16
   10400:	81 f1       	breq	.+96     	; 0x10462 <__ultoa_invert+0x6c>
   10402:	e8 94       	clt
   10404:	6f 93       	push	r22
   10406:	6e 7f       	andi	r22, 0xFE	; 254
   10408:	6e 5f       	subi	r22, 0xFE	; 254
   1040a:	7f 4f       	sbci	r23, 0xFF	; 255
   1040c:	8f 4f       	sbci	r24, 0xFF	; 255
   1040e:	9f 4f       	sbci	r25, 0xFF	; 255
   10410:	af 4f       	sbci	r26, 0xFF	; 255
   10412:	b1 e0       	ldi	r27, 0x01	; 1
   10414:	3e d0       	rcall	.+124    	; 0x10492 <__ultoa_invert+0x9c>
   10416:	b4 e0       	ldi	r27, 0x04	; 4
   10418:	3c d0       	rcall	.+120    	; 0x10492 <__ultoa_invert+0x9c>
   1041a:	67 0f       	add	r22, r23
   1041c:	78 1f       	adc	r23, r24
   1041e:	89 1f       	adc	r24, r25
   10420:	9a 1f       	adc	r25, r26
   10422:	a1 1d       	adc	r26, r1
   10424:	68 0f       	add	r22, r24
   10426:	79 1f       	adc	r23, r25
   10428:	8a 1f       	adc	r24, r26
   1042a:	91 1d       	adc	r25, r1
   1042c:	a1 1d       	adc	r26, r1
   1042e:	6a 0f       	add	r22, r26
   10430:	71 1d       	adc	r23, r1
   10432:	81 1d       	adc	r24, r1
   10434:	91 1d       	adc	r25, r1
   10436:	a1 1d       	adc	r26, r1
   10438:	20 d0       	rcall	.+64     	; 0x1047a <__ultoa_invert+0x84>
   1043a:	09 f4       	brne	.+2      	; 0x1043e <__ultoa_invert+0x48>
   1043c:	68 94       	set
   1043e:	3f 91       	pop	r19
   10440:	2a e0       	ldi	r18, 0x0A	; 10
   10442:	26 9f       	mul	r18, r22
   10444:	11 24       	eor	r1, r1
   10446:	30 19       	sub	r19, r0
   10448:	30 5d       	subi	r19, 0xD0	; 208
   1044a:	31 93       	st	Z+, r19
   1044c:	de f6       	brtc	.-74     	; 0x10404 <__ultoa_invert+0xe>
   1044e:	cf 01       	movw	r24, r30
   10450:	08 95       	ret
   10452:	46 2f       	mov	r20, r22
   10454:	47 70       	andi	r20, 0x07	; 7
   10456:	40 5d       	subi	r20, 0xD0	; 208
   10458:	41 93       	st	Z+, r20
   1045a:	b3 e0       	ldi	r27, 0x03	; 3
   1045c:	0f d0       	rcall	.+30     	; 0x1047c <__ultoa_invert+0x86>
   1045e:	c9 f7       	brne	.-14     	; 0x10452 <__ultoa_invert+0x5c>
   10460:	f6 cf       	rjmp	.-20     	; 0x1044e <__ultoa_invert+0x58>
   10462:	46 2f       	mov	r20, r22
   10464:	4f 70       	andi	r20, 0x0F	; 15
   10466:	40 5d       	subi	r20, 0xD0	; 208
   10468:	4a 33       	cpi	r20, 0x3A	; 58
   1046a:	18 f0       	brcs	.+6      	; 0x10472 <__ultoa_invert+0x7c>
   1046c:	49 5d       	subi	r20, 0xD9	; 217
   1046e:	31 fd       	sbrc	r19, 1
   10470:	40 52       	subi	r20, 0x20	; 32
   10472:	41 93       	st	Z+, r20
   10474:	02 d0       	rcall	.+4      	; 0x1047a <__ultoa_invert+0x84>
   10476:	a9 f7       	brne	.-22     	; 0x10462 <__ultoa_invert+0x6c>
   10478:	ea cf       	rjmp	.-44     	; 0x1044e <__ultoa_invert+0x58>
   1047a:	b4 e0       	ldi	r27, 0x04	; 4
   1047c:	a6 95       	lsr	r26
   1047e:	97 95       	ror	r25
   10480:	87 95       	ror	r24
   10482:	77 95       	ror	r23
   10484:	67 95       	ror	r22
   10486:	ba 95       	dec	r27
   10488:	c9 f7       	brne	.-14     	; 0x1047c <__ultoa_invert+0x86>
   1048a:	00 97       	sbiw	r24, 0x00	; 0
   1048c:	61 05       	cpc	r22, r1
   1048e:	71 05       	cpc	r23, r1
   10490:	08 95       	ret
   10492:	9b 01       	movw	r18, r22
   10494:	ac 01       	movw	r20, r24
   10496:	0a 2e       	mov	r0, r26
   10498:	06 94       	lsr	r0
   1049a:	57 95       	ror	r21
   1049c:	47 95       	ror	r20
   1049e:	37 95       	ror	r19
   104a0:	27 95       	ror	r18
   104a2:	ba 95       	dec	r27
   104a4:	c9 f7       	brne	.-14     	; 0x10498 <__ultoa_invert+0xa2>
   104a6:	62 0f       	add	r22, r18
   104a8:	73 1f       	adc	r23, r19
   104aa:	84 1f       	adc	r24, r20
   104ac:	95 1f       	adc	r25, r21
   104ae:	a0 1d       	adc	r26, r0
   104b0:	08 95       	ret

000104b2 <calloc>:
   104b2:	0f 93       	push	r16
   104b4:	1f 93       	push	r17
   104b6:	cf 93       	push	r28
   104b8:	df 93       	push	r29
   104ba:	86 9f       	mul	r24, r22
   104bc:	80 01       	movw	r16, r0
   104be:	87 9f       	mul	r24, r23
   104c0:	10 0d       	add	r17, r0
   104c2:	96 9f       	mul	r25, r22
   104c4:	10 0d       	add	r17, r0
   104c6:	11 24       	eor	r1, r1
   104c8:	c8 01       	movw	r24, r16
   104ca:	0d d0       	rcall	.+26     	; 0x104e6 <malloc>
   104cc:	ec 01       	movw	r28, r24
   104ce:	00 97       	sbiw	r24, 0x00	; 0
   104d0:	21 f0       	breq	.+8      	; 0x104da <calloc+0x28>
   104d2:	a8 01       	movw	r20, r16
   104d4:	60 e0       	ldi	r22, 0x00	; 0
   104d6:	70 e0       	ldi	r23, 0x00	; 0
   104d8:	2f de       	rcall	.-930    	; 0x10138 <memset>
   104da:	ce 01       	movw	r24, r28
   104dc:	df 91       	pop	r29
   104de:	cf 91       	pop	r28
   104e0:	1f 91       	pop	r17
   104e2:	0f 91       	pop	r16
   104e4:	08 95       	ret

000104e6 <malloc>:
   104e6:	0f 93       	push	r16
   104e8:	1f 93       	push	r17
   104ea:	cf 93       	push	r28
   104ec:	df 93       	push	r29
   104ee:	82 30       	cpi	r24, 0x02	; 2
   104f0:	91 05       	cpc	r25, r1
   104f2:	10 f4       	brcc	.+4      	; 0x104f8 <malloc+0x12>
   104f4:	82 e0       	ldi	r24, 0x02	; 2
   104f6:	90 e0       	ldi	r25, 0x00	; 0
   104f8:	e0 91 f0 31 	lds	r30, 0x31F0	; 0x8031f0 <__flp>
   104fc:	f0 91 f1 31 	lds	r31, 0x31F1	; 0x8031f1 <__flp+0x1>
   10500:	20 e0       	ldi	r18, 0x00	; 0
   10502:	30 e0       	ldi	r19, 0x00	; 0
   10504:	a0 e0       	ldi	r26, 0x00	; 0
   10506:	b0 e0       	ldi	r27, 0x00	; 0
   10508:	30 97       	sbiw	r30, 0x00	; 0
   1050a:	19 f1       	breq	.+70     	; 0x10552 <malloc+0x6c>
   1050c:	40 81       	ld	r20, Z
   1050e:	51 81       	ldd	r21, Z+1	; 0x01
   10510:	02 81       	ldd	r16, Z+2	; 0x02
   10512:	13 81       	ldd	r17, Z+3	; 0x03
   10514:	48 17       	cp	r20, r24
   10516:	59 07       	cpc	r21, r25
   10518:	c8 f0       	brcs	.+50     	; 0x1054c <malloc+0x66>
   1051a:	84 17       	cp	r24, r20
   1051c:	95 07       	cpc	r25, r21
   1051e:	69 f4       	brne	.+26     	; 0x1053a <malloc+0x54>
   10520:	10 97       	sbiw	r26, 0x00	; 0
   10522:	31 f0       	breq	.+12     	; 0x10530 <malloc+0x4a>
   10524:	12 96       	adiw	r26, 0x02	; 2
   10526:	0c 93       	st	X, r16
   10528:	12 97       	sbiw	r26, 0x02	; 2
   1052a:	13 96       	adiw	r26, 0x03	; 3
   1052c:	1c 93       	st	X, r17
   1052e:	27 c0       	rjmp	.+78     	; 0x1057e <malloc+0x98>
   10530:	00 93 f0 31 	sts	0x31F0, r16	; 0x8031f0 <__flp>
   10534:	10 93 f1 31 	sts	0x31F1, r17	; 0x8031f1 <__flp+0x1>
   10538:	22 c0       	rjmp	.+68     	; 0x1057e <malloc+0x98>
   1053a:	21 15       	cp	r18, r1
   1053c:	31 05       	cpc	r19, r1
   1053e:	19 f0       	breq	.+6      	; 0x10546 <malloc+0x60>
   10540:	42 17       	cp	r20, r18
   10542:	53 07       	cpc	r21, r19
   10544:	18 f4       	brcc	.+6      	; 0x1054c <malloc+0x66>
   10546:	9a 01       	movw	r18, r20
   10548:	bd 01       	movw	r22, r26
   1054a:	ef 01       	movw	r28, r30
   1054c:	df 01       	movw	r26, r30
   1054e:	f8 01       	movw	r30, r16
   10550:	db cf       	rjmp	.-74     	; 0x10508 <malloc+0x22>
   10552:	21 15       	cp	r18, r1
   10554:	31 05       	cpc	r19, r1
   10556:	f9 f0       	breq	.+62     	; 0x10596 <malloc+0xb0>
   10558:	28 1b       	sub	r18, r24
   1055a:	39 0b       	sbc	r19, r25
   1055c:	24 30       	cpi	r18, 0x04	; 4
   1055e:	31 05       	cpc	r19, r1
   10560:	80 f4       	brcc	.+32     	; 0x10582 <malloc+0x9c>
   10562:	8a 81       	ldd	r24, Y+2	; 0x02
   10564:	9b 81       	ldd	r25, Y+3	; 0x03
   10566:	61 15       	cp	r22, r1
   10568:	71 05       	cpc	r23, r1
   1056a:	21 f0       	breq	.+8      	; 0x10574 <malloc+0x8e>
   1056c:	fb 01       	movw	r30, r22
   1056e:	82 83       	std	Z+2, r24	; 0x02
   10570:	93 83       	std	Z+3, r25	; 0x03
   10572:	04 c0       	rjmp	.+8      	; 0x1057c <malloc+0x96>
   10574:	80 93 f0 31 	sts	0x31F0, r24	; 0x8031f0 <__flp>
   10578:	90 93 f1 31 	sts	0x31F1, r25	; 0x8031f1 <__flp+0x1>
   1057c:	fe 01       	movw	r30, r28
   1057e:	32 96       	adiw	r30, 0x02	; 2
   10580:	44 c0       	rjmp	.+136    	; 0x1060a <malloc+0x124>
   10582:	fe 01       	movw	r30, r28
   10584:	e2 0f       	add	r30, r18
   10586:	f3 1f       	adc	r31, r19
   10588:	81 93       	st	Z+, r24
   1058a:	91 93       	st	Z+, r25
   1058c:	22 50       	subi	r18, 0x02	; 2
   1058e:	31 09       	sbc	r19, r1
   10590:	28 83       	st	Y, r18
   10592:	39 83       	std	Y+1, r19	; 0x01
   10594:	3a c0       	rjmp	.+116    	; 0x1060a <malloc+0x124>
   10596:	20 91 ee 31 	lds	r18, 0x31EE	; 0x8031ee <__brkval>
   1059a:	30 91 ef 31 	lds	r19, 0x31EF	; 0x8031ef <__brkval+0x1>
   1059e:	23 2b       	or	r18, r19
   105a0:	41 f4       	brne	.+16     	; 0x105b2 <malloc+0xcc>
   105a2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
   105a6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
   105aa:	20 93 ee 31 	sts	0x31EE, r18	; 0x8031ee <__brkval>
   105ae:	30 93 ef 31 	sts	0x31EF, r19	; 0x8031ef <__brkval+0x1>
   105b2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
   105b6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
   105ba:	21 15       	cp	r18, r1
   105bc:	31 05       	cpc	r19, r1
   105be:	41 f4       	brne	.+16     	; 0x105d0 <malloc+0xea>
   105c0:	2d b7       	in	r18, 0x3d	; 61
   105c2:	3e b7       	in	r19, 0x3e	; 62
   105c4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
   105c8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
   105cc:	24 1b       	sub	r18, r20
   105ce:	35 0b       	sbc	r19, r21
   105d0:	e0 91 ee 31 	lds	r30, 0x31EE	; 0x8031ee <__brkval>
   105d4:	f0 91 ef 31 	lds	r31, 0x31EF	; 0x8031ef <__brkval+0x1>
   105d8:	e2 17       	cp	r30, r18
   105da:	f3 07       	cpc	r31, r19
   105dc:	a0 f4       	brcc	.+40     	; 0x10606 <malloc+0x120>
   105de:	2e 1b       	sub	r18, r30
   105e0:	3f 0b       	sbc	r19, r31
   105e2:	28 17       	cp	r18, r24
   105e4:	39 07       	cpc	r19, r25
   105e6:	78 f0       	brcs	.+30     	; 0x10606 <malloc+0x120>
   105e8:	ac 01       	movw	r20, r24
   105ea:	4e 5f       	subi	r20, 0xFE	; 254
   105ec:	5f 4f       	sbci	r21, 0xFF	; 255
   105ee:	24 17       	cp	r18, r20
   105f0:	35 07       	cpc	r19, r21
   105f2:	48 f0       	brcs	.+18     	; 0x10606 <malloc+0x120>
   105f4:	4e 0f       	add	r20, r30
   105f6:	5f 1f       	adc	r21, r31
   105f8:	40 93 ee 31 	sts	0x31EE, r20	; 0x8031ee <__brkval>
   105fc:	50 93 ef 31 	sts	0x31EF, r21	; 0x8031ef <__brkval+0x1>
   10600:	81 93       	st	Z+, r24
   10602:	91 93       	st	Z+, r25
   10604:	02 c0       	rjmp	.+4      	; 0x1060a <malloc+0x124>
   10606:	e0 e0       	ldi	r30, 0x00	; 0
   10608:	f0 e0       	ldi	r31, 0x00	; 0
   1060a:	cf 01       	movw	r24, r30
   1060c:	df 91       	pop	r29
   1060e:	cf 91       	pop	r28
   10610:	1f 91       	pop	r17
   10612:	0f 91       	pop	r16
   10614:	08 95       	ret

00010616 <free>:
   10616:	cf 93       	push	r28
   10618:	df 93       	push	r29
   1061a:	00 97       	sbiw	r24, 0x00	; 0
   1061c:	09 f4       	brne	.+2      	; 0x10620 <free+0xa>
   1061e:	81 c0       	rjmp	.+258    	; 0x10722 <free+0x10c>
   10620:	fc 01       	movw	r30, r24
   10622:	32 97       	sbiw	r30, 0x02	; 2
   10624:	12 82       	std	Z+2, r1	; 0x02
   10626:	13 82       	std	Z+3, r1	; 0x03
   10628:	a0 91 f0 31 	lds	r26, 0x31F0	; 0x8031f0 <__flp>
   1062c:	b0 91 f1 31 	lds	r27, 0x31F1	; 0x8031f1 <__flp+0x1>
   10630:	10 97       	sbiw	r26, 0x00	; 0
   10632:	81 f4       	brne	.+32     	; 0x10654 <free+0x3e>
   10634:	20 81       	ld	r18, Z
   10636:	31 81       	ldd	r19, Z+1	; 0x01
   10638:	82 0f       	add	r24, r18
   1063a:	93 1f       	adc	r25, r19
   1063c:	20 91 ee 31 	lds	r18, 0x31EE	; 0x8031ee <__brkval>
   10640:	30 91 ef 31 	lds	r19, 0x31EF	; 0x8031ef <__brkval+0x1>
   10644:	28 17       	cp	r18, r24
   10646:	39 07       	cpc	r19, r25
   10648:	51 f5       	brne	.+84     	; 0x1069e <free+0x88>
   1064a:	e0 93 ee 31 	sts	0x31EE, r30	; 0x8031ee <__brkval>
   1064e:	f0 93 ef 31 	sts	0x31EF, r31	; 0x8031ef <__brkval+0x1>
   10652:	67 c0       	rjmp	.+206    	; 0x10722 <free+0x10c>
   10654:	ed 01       	movw	r28, r26
   10656:	20 e0       	ldi	r18, 0x00	; 0
   10658:	30 e0       	ldi	r19, 0x00	; 0
   1065a:	ce 17       	cp	r28, r30
   1065c:	df 07       	cpc	r29, r31
   1065e:	40 f4       	brcc	.+16     	; 0x10670 <free+0x5a>
   10660:	4a 81       	ldd	r20, Y+2	; 0x02
   10662:	5b 81       	ldd	r21, Y+3	; 0x03
   10664:	9e 01       	movw	r18, r28
   10666:	41 15       	cp	r20, r1
   10668:	51 05       	cpc	r21, r1
   1066a:	f1 f0       	breq	.+60     	; 0x106a8 <free+0x92>
   1066c:	ea 01       	movw	r28, r20
   1066e:	f5 cf       	rjmp	.-22     	; 0x1065a <free+0x44>
   10670:	c2 83       	std	Z+2, r28	; 0x02
   10672:	d3 83       	std	Z+3, r29	; 0x03
   10674:	40 81       	ld	r20, Z
   10676:	51 81       	ldd	r21, Z+1	; 0x01
   10678:	84 0f       	add	r24, r20
   1067a:	95 1f       	adc	r25, r21
   1067c:	c8 17       	cp	r28, r24
   1067e:	d9 07       	cpc	r29, r25
   10680:	59 f4       	brne	.+22     	; 0x10698 <free+0x82>
   10682:	88 81       	ld	r24, Y
   10684:	99 81       	ldd	r25, Y+1	; 0x01
   10686:	84 0f       	add	r24, r20
   10688:	95 1f       	adc	r25, r21
   1068a:	02 96       	adiw	r24, 0x02	; 2
   1068c:	80 83       	st	Z, r24
   1068e:	91 83       	std	Z+1, r25	; 0x01
   10690:	8a 81       	ldd	r24, Y+2	; 0x02
   10692:	9b 81       	ldd	r25, Y+3	; 0x03
   10694:	82 83       	std	Z+2, r24	; 0x02
   10696:	93 83       	std	Z+3, r25	; 0x03
   10698:	21 15       	cp	r18, r1
   1069a:	31 05       	cpc	r19, r1
   1069c:	29 f4       	brne	.+10     	; 0x106a8 <free+0x92>
   1069e:	e0 93 f0 31 	sts	0x31F0, r30	; 0x8031f0 <__flp>
   106a2:	f0 93 f1 31 	sts	0x31F1, r31	; 0x8031f1 <__flp+0x1>
   106a6:	3d c0       	rjmp	.+122    	; 0x10722 <free+0x10c>
   106a8:	e9 01       	movw	r28, r18
   106aa:	ea 83       	std	Y+2, r30	; 0x02
   106ac:	fb 83       	std	Y+3, r31	; 0x03
   106ae:	49 91       	ld	r20, Y+
   106b0:	59 91       	ld	r21, Y+
   106b2:	c4 0f       	add	r28, r20
   106b4:	d5 1f       	adc	r29, r21
   106b6:	ec 17       	cp	r30, r28
   106b8:	fd 07       	cpc	r31, r29
   106ba:	61 f4       	brne	.+24     	; 0x106d4 <free+0xbe>
   106bc:	80 81       	ld	r24, Z
   106be:	91 81       	ldd	r25, Z+1	; 0x01
   106c0:	84 0f       	add	r24, r20
   106c2:	95 1f       	adc	r25, r21
   106c4:	02 96       	adiw	r24, 0x02	; 2
   106c6:	e9 01       	movw	r28, r18
   106c8:	88 83       	st	Y, r24
   106ca:	99 83       	std	Y+1, r25	; 0x01
   106cc:	82 81       	ldd	r24, Z+2	; 0x02
   106ce:	93 81       	ldd	r25, Z+3	; 0x03
   106d0:	8a 83       	std	Y+2, r24	; 0x02
   106d2:	9b 83       	std	Y+3, r25	; 0x03
   106d4:	e0 e0       	ldi	r30, 0x00	; 0
   106d6:	f0 e0       	ldi	r31, 0x00	; 0
   106d8:	12 96       	adiw	r26, 0x02	; 2
   106da:	8d 91       	ld	r24, X+
   106dc:	9c 91       	ld	r25, X
   106de:	13 97       	sbiw	r26, 0x03	; 3
   106e0:	00 97       	sbiw	r24, 0x00	; 0
   106e2:	19 f0       	breq	.+6      	; 0x106ea <free+0xd4>
   106e4:	fd 01       	movw	r30, r26
   106e6:	dc 01       	movw	r26, r24
   106e8:	f7 cf       	rjmp	.-18     	; 0x106d8 <free+0xc2>
   106ea:	8d 91       	ld	r24, X+
   106ec:	9c 91       	ld	r25, X
   106ee:	11 97       	sbiw	r26, 0x01	; 1
   106f0:	9d 01       	movw	r18, r26
   106f2:	2e 5f       	subi	r18, 0xFE	; 254
   106f4:	3f 4f       	sbci	r19, 0xFF	; 255
   106f6:	82 0f       	add	r24, r18
   106f8:	93 1f       	adc	r25, r19
   106fa:	20 91 ee 31 	lds	r18, 0x31EE	; 0x8031ee <__brkval>
   106fe:	30 91 ef 31 	lds	r19, 0x31EF	; 0x8031ef <__brkval+0x1>
   10702:	28 17       	cp	r18, r24
   10704:	39 07       	cpc	r19, r25
   10706:	69 f4       	brne	.+26     	; 0x10722 <free+0x10c>
   10708:	30 97       	sbiw	r30, 0x00	; 0
   1070a:	29 f4       	brne	.+10     	; 0x10716 <free+0x100>
   1070c:	10 92 f0 31 	sts	0x31F0, r1	; 0x8031f0 <__flp>
   10710:	10 92 f1 31 	sts	0x31F1, r1	; 0x8031f1 <__flp+0x1>
   10714:	02 c0       	rjmp	.+4      	; 0x1071a <free+0x104>
   10716:	12 82       	std	Z+2, r1	; 0x02
   10718:	13 82       	std	Z+3, r1	; 0x03
   1071a:	a0 93 ee 31 	sts	0x31EE, r26	; 0x8031ee <__brkval>
   1071e:	b0 93 ef 31 	sts	0x31EF, r27	; 0x8031ef <__brkval+0x1>
   10722:	df 91       	pop	r29
   10724:	cf 91       	pop	r28
   10726:	08 95       	ret

00010728 <strrev>:
   10728:	dc 01       	movw	r26, r24
   1072a:	fc 01       	movw	r30, r24
   1072c:	67 2f       	mov	r22, r23
   1072e:	71 91       	ld	r23, Z+
   10730:	77 23       	and	r23, r23
   10732:	e1 f7       	brne	.-8      	; 0x1072c <strrev+0x4>
   10734:	32 97       	sbiw	r30, 0x02	; 2
   10736:	04 c0       	rjmp	.+8      	; 0x10740 <strrev+0x18>
   10738:	7c 91       	ld	r23, X
   1073a:	6d 93       	st	X+, r22
   1073c:	70 83       	st	Z, r23
   1073e:	62 91       	ld	r22, -Z
   10740:	ae 17       	cp	r26, r30
   10742:	bf 07       	cpc	r27, r31
   10744:	c8 f3       	brcs	.-14     	; 0x10738 <strrev+0x10>
   10746:	08 95       	ret

00010748 <_exit>:
   10748:	f8 94       	cli

0001074a <__stop_program>:
   1074a:	ff cf       	rjmp	.-2      	; 0x1074a <__stop_program>
